
prosthesis_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a88  08007a88  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08007a88  08007a88  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a88  08007a88  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08007a90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000020  08007ab0  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08007ab0  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167f2  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325a  00000000  00000000  00036842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00039aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c353  00000000  00000000  0003c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001680a  00000000  00000000  000683fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010bfe6  00000000  00000000  0007ec05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018abeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d0  00000000  00000000  0018ac3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a58 	.word	0x08007a58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08007a58 	.word	0x08007a58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b087      	sub	sp, #28
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3330      	adds	r3, #48	; 0x30
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	f003 030c 	and.w	r3, r3, #12
 8000a46:	4413      	add	r3, r2
 8000a48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	f003 031f 	and.w	r3, r3, #31
 8000a54:	211f      	movs	r1, #31
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	0e9b      	lsrs	r3, r3, #26
 8000a62:	f003 011f 	and.w	r1, r3, #31
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	f003 031f 	and.w	r3, r3, #31
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	431a      	orrs	r2, r3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a76:	bf00      	nop
 8000a78:	371c      	adds	r7, #28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b087      	sub	sp, #28
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3314      	adds	r3, #20
 8000a92:	461a      	mov	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	0e5b      	lsrs	r3, r3, #25
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	4413      	add	r3, r2
 8000aa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	0d1b      	lsrs	r3, r3, #20
 8000aaa:	f003 031f 	and.w	r3, r3, #31
 8000aae:	2107      	movs	r1, #7
 8000ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	0d1b      	lsrs	r3, r3, #20
 8000abc:	f003 031f 	and.w	r3, r3, #31
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000acc:	bf00      	nop
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000af0:	43db      	mvns	r3, r3
 8000af2:	401a      	ands	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0318 	and.w	r3, r3, #24
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000afc:	40d9      	lsrs	r1, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	400b      	ands	r3, r1
 8000b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b06:	431a      	orrs	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	0007ffff 	.word	0x0007ffff

08000b20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	6093      	str	r3, [r2, #8]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000b54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <LL_RCC_SetADCClockSource+0x28>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000b7e:	4905      	ldr	r1, [pc, #20]	; (8000b94 <LL_RCC_SetADCClockSource+0x28>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000

08000b98 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba4:	4907      	ldr	r1, [pc, #28]	; (8000bc4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b094      	sub	sp, #80	; 0x50
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000bf2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
 8000c0e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000c2e:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000c32:	f7ff ff9b 	bl	8000b6c <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000c36:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c3a:	f7ff ffad 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c3e:	2004      	movs	r0, #4
 8000c40:	f7ff ffaa 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000c44:	2301      	movs	r3, #1
 8000c46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	463b      	mov	r3, r7
 8000c52:	4619      	mov	r1, r3
 8000c54:	4832      	ldr	r0, [pc, #200]	; (8000d20 <MX_ADC1_Init+0x134>)
 8000c56:	f006 fe1e 	bl	8007896 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_0);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4830      	ldr	r0, [pc, #192]	; (8000d20 <MX_ADC1_Init+0x134>)
 8000c5e:	f7ff ffb3 	bl	8000bc8 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000c62:	2300      	movs	r3, #0
 8000c64:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c72:	4619      	mov	r1, r3
 8000c74:	482b      	ldr	r0, [pc, #172]	; (8000d24 <MX_ADC1_Init+0x138>)
 8000c76:	f006 fc53 	bl	8007520 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4822      	ldr	r0, [pc, #136]	; (8000d24 <MX_ADC1_Init+0x138>)
 8000c9a:	f006 fc67 	bl	800756c <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 8000c9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ca2:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	4619      	mov	r1, r3
 8000cae:	481e      	ldr	r0, [pc, #120]	; (8000d28 <MX_ADC1_Init+0x13c>)
 8000cb0:	f006 fbee 	bl	8007490 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	481c      	ldr	r0, [pc, #112]	; (8000d28 <MX_ADC1_Init+0x13c>)
 8000cb8:	f7ff fea4 	bl	8000a04 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000cbc:	4819      	ldr	r0, [pc, #100]	; (8000d24 <MX_ADC1_Init+0x138>)
 8000cbe:	f7ff ff2f 	bl	8000b20 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000cc2:	4818      	ldr	r0, [pc, #96]	; (8000d24 <MX_ADC1_Init+0x138>)
 8000cc4:	f7ff ff3e 	bl	8000b44 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_ADC1_Init+0x140>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	099b      	lsrs	r3, r3, #6
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <MX_ADC1_Init+0x144>)
 8000cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd4:	099a      	lsrs	r2, r3, #6
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_ADC1_Init+0x148>)
 8000ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000cea:	e002      	b.n	8000cf2 <MX_ADC1_Init+0x106>
  {
    wait_loop_index--;
 8000cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f9      	bne.n	8000cec <MX_ADC1_Init+0x100>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <MX_ADC1_Init+0x14c>)
 8000cfa:	2106      	movs	r1, #6
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <MX_ADC1_Init+0x138>)
 8000cfe:	f7ff fe94 	bl	8000a2a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000d02:	2200      	movs	r2, #0
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <MX_ADC1_Init+0x14c>)
 8000d06:	4807      	ldr	r0, [pc, #28]	; (8000d24 <MX_ADC1_Init+0x138>)
 8000d08:	f7ff febb 	bl	8000a82 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000d0c:	227f      	movs	r2, #127	; 0x7f
 8000d0e:	490a      	ldr	r1, [pc, #40]	; (8000d38 <MX_ADC1_Init+0x14c>)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_ADC1_Init+0x138>)
 8000d12:	f7ff fee1 	bl	8000ad8 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3750      	adds	r7, #80	; 0x50
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	48000800 	.word	0x48000800
 8000d24:	50040000 	.word	0x50040000
 8000d28:	50040300 	.word	0x50040300
 8000d2c:	20000004 	.word	0x20000004
 8000d30:	053e2d63 	.word	0x053e2d63
 8000d34:	cccccccd 	.word	0xcccccccd
 8000d38:	04300002 	.word	0x04300002

08000d3c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
 8000d5e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d60:	f107 0318 	add.w	r3, r7, #24
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000d7e:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000d82:	f7ff fef3 	bl	8000b6c <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000d86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d8a:	f7ff ff05 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d8e:	2004      	movs	r0, #4
 8000d90:	f7ff ff02 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000d94:	2302      	movs	r3, #2
 8000d96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	4831      	ldr	r0, [pc, #196]	; (8000e6c <MX_ADC2_Init+0x130>)
 8000da6:	f006 fd76 	bl	8007896 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_1);
 8000daa:	2102      	movs	r1, #2
 8000dac:	482f      	ldr	r0, [pc, #188]	; (8000e6c <MX_ADC2_Init+0x130>)
 8000dae:	f7ff ff0b 	bl	8000bc8 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000db2:	2300      	movs	r3, #0
 8000db4:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000dbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	482a      	ldr	r0, [pc, #168]	; (8000e70 <MX_ADC2_Init+0x134>)
 8000dc6:	f006 fbab 	bl	8007520 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4821      	ldr	r0, [pc, #132]	; (8000e70 <MX_ADC2_Init+0x134>)
 8000dea:	f006 fbbf 	bl	800756c <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 8000dee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000df2:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	481e      	ldr	r0, [pc, #120]	; (8000e74 <MX_ADC2_Init+0x138>)
 8000dfc:	f006 fb48 	bl	8007490 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000e00:	2100      	movs	r1, #0
 8000e02:	481c      	ldr	r0, [pc, #112]	; (8000e74 <MX_ADC2_Init+0x138>)
 8000e04:	f7ff fdfe 	bl	8000a04 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000e08:	4819      	ldr	r0, [pc, #100]	; (8000e70 <MX_ADC2_Init+0x134>)
 8000e0a:	f7ff fe89 	bl	8000b20 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000e0e:	4818      	ldr	r0, [pc, #96]	; (8000e70 <MX_ADC2_Init+0x134>)
 8000e10:	f7ff fe98 	bl	8000b44 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <MX_ADC2_Init+0x13c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	099b      	lsrs	r3, r3, #6
 8000e1a:	4a18      	ldr	r2, [pc, #96]	; (8000e7c <MX_ADC2_Init+0x140>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	099a      	lsrs	r2, r3, #6
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_ADC2_Init+0x144>)
 8000e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8000e32:	08db      	lsrs	r3, r3, #3
 8000e34:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e36:	e002      	b.n	8000e3e <MX_ADC2_Init+0x102>
  {
    wait_loop_index--;
 8000e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f9      	bne.n	8000e38 <MX_ADC2_Init+0xfc>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000e44:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <MX_ADC2_Init+0x148>)
 8000e46:	2106      	movs	r1, #6
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <MX_ADC2_Init+0x134>)
 8000e4a:	f7ff fdee 	bl	8000a2a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <MX_ADC2_Init+0x148>)
 8000e52:	4807      	ldr	r0, [pc, #28]	; (8000e70 <MX_ADC2_Init+0x134>)
 8000e54:	f7ff fe15 	bl	8000a82 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000e58:	227f      	movs	r2, #127	; 0x7f
 8000e5a:	490a      	ldr	r1, [pc, #40]	; (8000e84 <MX_ADC2_Init+0x148>)
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_ADC2_Init+0x134>)
 8000e5e:	f7ff fe3b 	bl	8000ad8 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3750      	adds	r7, #80	; 0x50
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	50040100 	.word	0x50040100
 8000e74:	50040300 	.word	0x50040300
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	053e2d63 	.word	0x053e2d63
 8000e80:	cccccccd 	.word	0xcccccccd
 8000e84:	08600004 	.word	0x08600004

08000e88 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_CAN1_Init+0x64>)
 8000e8e:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <MX_CAN1_Init+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_CAN1_Init+0x64>)
 8000e94:	2205      	movs	r2, #5
 8000e96:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_CAN1_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_CAN1_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_CAN1_Init+0x64>)
 8000ea6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000eaa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_CAN1_Init+0x64>)
 8000eae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000eb2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <MX_CAN1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_CAN1_Init+0x64>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_CAN1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_CAN1_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_CAN1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_CAN1_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_CAN1_Init+0x64>)
 8000eda:	f003 f833 	bl	8003f44 <HAL_CAN_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ee4:	f000 fd54 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000003c 	.word	0x2000003c
 8000ef0:	40006400 	.word	0x40006400

08000ef4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <HAL_CAN_MspInit+0x9c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d138      	bne.n	8000f88 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <HAL_CAN_MspInit+0xa0>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <HAL_CAN_MspInit+0xa0>)
 8000f1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f20:	6593      	str	r3, [r2, #88]	; 0x58
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <HAL_CAN_MspInit+0xa0>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_CAN_MspInit+0xa0>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_CAN_MspInit+0xa0>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_CAN_MspInit+0xa0>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f58:	2309      	movs	r3, #9
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <HAL_CAN_MspInit+0xa4>)
 8000f64:	f003 ffea 	bl	8004f3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2014      	movs	r0, #20
 8000f6e:	f003 ff6e 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f72:	2014      	movs	r0, #20
 8000f74:	f003 ff87 	bl	8004e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	2015      	movs	r0, #21
 8000f7e:	f003 ff66 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f82:	2015      	movs	r0, #21
 8000f84:	f003 ff7f 	bl	8004e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40006400 	.word	0x40006400
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400

08000f9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <MX_GPIO_Init+0xf8>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a37      	ldr	r2, [pc, #220]	; (8001094 <MX_GPIO_Init+0xf8>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b35      	ldr	r3, [pc, #212]	; (8001094 <MX_GPIO_Init+0xf8>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <MX_GPIO_Init+0xf8>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a31      	ldr	r2, [pc, #196]	; (8001094 <MX_GPIO_Init+0xf8>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <MX_GPIO_Init+0xf8>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <MX_GPIO_Init+0xf8>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a2b      	ldr	r2, [pc, #172]	; (8001094 <MX_GPIO_Init+0xf8>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <MX_GPIO_Init+0xf8>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <MX_GPIO_Init+0xf8>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <MX_GPIO_Init+0xf8>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <MX_GPIO_Init+0xf8>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSCOPE_GPIO_Port, OSCOPE_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001018:	481f      	ldr	r0, [pc, #124]	; (8001098 <MX_GPIO_Init+0xfc>)
 800101a:	f004 f939 	bl	8005290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANKLE_IMU_CS_GPIO_Port, ANKLE_IMU_CS_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2110      	movs	r1, #16
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f004 f933 	bl	8005290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_SET);
 800102a:	2201      	movs	r2, #1
 800102c:	2107      	movs	r1, #7
 800102e:	481b      	ldr	r0, [pc, #108]	; (800109c <MX_GPIO_Init+0x100>)
 8001030:	f004 f92e 	bl	8005290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OSCOPE_Pin;
 8001034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OSCOPE_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <MX_GPIO_Init+0xfc>)
 800104e:	f003 ff75 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANKLE_IMU_CS_Pin;
 8001052:	2310      	movs	r3, #16
 8001054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ANKLE_IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f003 ff66 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin;
 8001070:	2307      	movs	r3, #7
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001074:	2311      	movs	r3, #17
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_GPIO_Init+0x100>)
 8001088:	f003 ff58 	bl	8004f3c <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	48000800 	.word	0x48000800
 800109c:	48000400 	.word	0x48000400

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4907      	ldr	r1, [pc, #28]	; (80010f4 <__NVIC_EnableIRQ+0x38>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	60da      	str	r2, [r3, #12]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	60da      	str	r2, [r3, #12]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60da      	str	r2, [r3, #12]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60da      	str	r2, [r3, #12]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	f023 0203 	bic.w	r2, r3, #3
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	621a      	str	r2, [r3, #32]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	60da      	str	r2, [r3, #12]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	f023 0201 	bic.w	r2, r3, #1
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60da      	str	r2, [r3, #12]
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <LL_RCC_SetLPTIMClockSource>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80012c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	041b      	lsls	r3, r3, #16
 80012cc:	43db      	mvns	r3, r3
 80012ce:	401a      	ands	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	4904      	ldr	r1, [pc, #16]	; (80012e8 <LL_RCC_SetLPTIMClockSource+0x30>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000

080012ec <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <LL_APB1_GRP2_EnableClock+0x2c>)
 80012f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012f8:	4907      	ldr	r1, [pc, #28]	; (8001318 <LL_APB1_GRP2_EnableClock+0x2c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001302:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4013      	ands	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000

0800131c <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSI);
 8001320:	4819      	ldr	r0, [pc, #100]	; (8001388 <MX_LPTIM2_Init+0x6c>)
 8001322:	f7ff ffc9 	bl	80012b8 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001326:	2020      	movs	r0, #32
 8001328:	f7ff ffe0 	bl	80012ec <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800132c:	f7ff feb8 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 8001330:	4603      	mov	r3, r0
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff08 	bl	800114c <NVIC_EncodePriority>
 800133c:	4603      	mov	r3, r0
 800133e:	4619      	mov	r1, r3
 8001340:	2042      	movs	r0, #66	; 0x42
 8001342:	f7ff fed9 	bl	80010f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 8001346:	2042      	movs	r0, #66	; 0x42
 8001348:	f7ff feb8 	bl	80010bc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 800134c:	2100      	movs	r1, #0
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <MX_LPTIM2_Init+0x70>)
 8001350:	f7ff ff9e 	bl	8001290 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8001354:	2100      	movs	r1, #0
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <MX_LPTIM2_Init+0x70>)
 8001358:	f7ff ff64 	bl	8001224 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 800135c:	2100      	movs	r1, #0
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <MX_LPTIM2_Init+0x70>)
 8001360:	f7ff ff4d 	bl	80011fe <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001364:	2100      	movs	r1, #0
 8001366:	4809      	ldr	r0, [pc, #36]	; (800138c <MX_LPTIM2_Init+0x70>)
 8001368:	f7ff ff23 	bl	80011b2 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 800136c:	2100      	movs	r1, #0
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <MX_LPTIM2_Init+0x70>)
 8001370:	f7ff ff32 	bl	80011d8 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_LPTIM2_Init+0x70>)
 8001376:	f7ff ff7b 	bl	8001270 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 800137a:	2100      	movs	r1, #0
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <MX_LPTIM2_Init+0x70>)
 800137e:	f7ff ff64 	bl	800124a <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	00300010 	.word	0x00300010
 800138c:	40009400 	.word	0x40009400

08001390 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013a4:	f043 0201 	orr.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_LPTIM_Enable>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	611a      	str	r2, [r3, #16]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_LPTIM_StartCounter>:
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	f023 0206 	bic.w	r2, r3, #6
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	611a      	str	r2, [r3, #16]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <LL_LPTIM_SetAutoReload>:
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	041b      	lsls	r3, r3, #16
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	619a      	str	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f043 0202 	orr.w	r2, r3, #2
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	609a      	str	r2, [r3, #8]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_RCC_HSE_Enable>:
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <LL_RCC_HSE_Enable+0x1c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <LL_RCC_HSE_Enable+0x1c>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <LL_RCC_HSE_IsReady>:
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <LL_RCC_HSE_IsReady+0x24>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001474:	d101      	bne.n	800147a <LL_RCC_HSE_IsReady+0x16>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <LL_RCC_HSE_IsReady+0x18>
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000

0800148c <LL_RCC_LSI_Enable>:
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <LL_RCC_LSI_Enable+0x20>)
 8001492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <LL_RCC_LSI_Enable+0x20>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <LL_RCC_LSI_IsReady>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <LL_RCC_LSI_IsReady+0x24>)
 80014b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d101      	bne.n	80014c6 <LL_RCC_LSI_IsReady+0x16>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <LL_RCC_LSI_IsReady+0x18>
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000

080014d8 <LL_RCC_SetSysClkSource>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <LL_RCC_SetSysClkSource+0x24>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f023 0203 	bic.w	r2, r3, #3
 80014e8:	4904      	ldr	r1, [pc, #16]	; (80014fc <LL_RCC_SetSysClkSource+0x24>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	608b      	str	r3, [r1, #8]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000

08001500 <LL_RCC_GetSysClkSource>:
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <LL_RCC_GetSysClkSource+0x18>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 030c 	and.w	r3, r3, #12
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <LL_RCC_SetAHBPrescaler>:
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <LL_RCC_SetAHBPrescaler+0x24>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	4904      	ldr	r1, [pc, #16]	; (8001540 <LL_RCC_SetAHBPrescaler+0x24>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4313      	orrs	r3, r2
 8001532:	608b      	str	r3, [r1, #8]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000

08001544 <LL_RCC_SetAPB1Prescaler>:
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <LL_RCC_SetAPB1Prescaler+0x24>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001554:	4904      	ldr	r1, [pc, #16]	; (8001568 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000

0800156c <LL_RCC_SetAPB2Prescaler>:
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800157c:	4904      	ldr	r1, [pc, #16]	; (8001590 <LL_RCC_SetAPB2Prescaler+0x24>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4313      	orrs	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40021000 	.word	0x40021000

08001594 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <LL_RCC_PLL_Enable+0x1c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <LL_RCC_PLL_Enable+0x1c>)
 800159e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <LL_RCC_PLL_IsReady+0x24>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015c4:	d101      	bne.n	80015ca <LL_RCC_PLL_IsReady+0x16>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <LL_RCC_PLL_IsReady+0x18>
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	68f9      	ldr	r1, [r7, #12]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	4311      	orrs	r1, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	0212      	lsls	r2, r2, #8
 80015fc:	4311      	orrs	r1, r2
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	4904      	ldr	r1, [pc, #16]	; (8001614 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001604:	4313      	orrs	r3, r2
 8001606:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000
 8001618:	f9ff808c 	.word	0xf9ff808c

0800161c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <LL_FLASH_SetLatency+0x24>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 0207 	bic.w	r2, r3, #7
 800164c:	4904      	ldr	r1, [pc, #16]	; (8001660 <LL_FLASH_SetLatency+0x24>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4313      	orrs	r3, r2
 8001652:	600b      	str	r3, [r1, #0]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40022000 	.word	0x40022000

08001664 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <LL_FLASH_GetLatency+0x18>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0307 	and.w	r3, r3, #7
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40022000 	.word	0x40022000

08001680 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001690:	4904      	ldr	r1, [pc, #16]	; (80016a4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40007000 	.word	0x40007000

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b0a6      	sub	sp, #152	; 0x98
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ae:	f002 fbd5 	bl	8003e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b2:	f000 f91d 	bl	80018f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b6:	f7ff fc71 	bl	8000f9c <MX_GPIO_Init>
  MX_SPI1_Init();
 80016ba:	f001 f9b7 	bl	8002a2c <MX_SPI1_Init>
  MX_TIM2_Init();
 80016be:	f001 fafd 	bl	8002cbc <MX_TIM2_Init>
  MX_LPTIM2_Init();
 80016c2:	f7ff fe2b 	bl	800131c <MX_LPTIM2_Init>
  MX_ADC1_Init();
 80016c6:	f7ff fa91 	bl	8000bec <MX_ADC1_Init>
  MX_ADC2_Init();
 80016ca:	f7ff fb37 	bl	8000d3c <MX_ADC2_Init>
  MX_CAN1_Init();
 80016ce:	f7ff fbdb 	bl	8000e88 <MX_CAN1_Init>
/*******************************************************************************
* USER ADDED DEFINITIONS
*******************************************************************************/

  	AKxx_x_Init_t Motor_Init[AKXX_X_NUMBER_OF_DEVICES];
  	Motor_Init[AnkleIndex].canId = AnkleMotorCAN_ID;
 80016d2:	2301      	movs	r3, #1
 80016d4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
  	Motor_Init[AnkleIndex].Motor = AK80_9;
 80016d8:	2301      	movs	r3, #1
 80016da:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92

  	Motor_Init[KneeIndex].canId = KneeMotorCAN_ID;
 80016de:	2302      	movs	r3, #2
 80016e0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  	Motor_Init[KneeIndex].Motor = AK70_10;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

	CAN_FilterTypeDef CAN1_FilterInit[AKXX_X_NUMBER_OF_DEVICES];
	CAN1_FilterInit[AnkleIndex].FilterActivation = ENABLE;
 80016ea:	2301      	movs	r3, #1
 80016ec:	663b      	str	r3, [r7, #96]	; 0x60
	CAN1_FilterInit[AnkleIndex].FilterBank = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	657b      	str	r3, [r7, #84]	; 0x54
	CAN1_FilterInit[AnkleIndex].FilterFIFOAssignment = CAN_RX_FIFO0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	653b      	str	r3, [r7, #80]	; 0x50
	CAN1_FilterInit[AnkleIndex].FilterIdHigh = AnkleMotorCAN_ID << 5;
 80016f6:	2320      	movs	r3, #32
 80016f8:	643b      	str	r3, [r7, #64]	; 0x40
	CAN1_FilterInit[AnkleIndex].FilterIdLow = AnkleMotorCAN_ID << 5;
 80016fa:	2320      	movs	r3, #32
 80016fc:	647b      	str	r3, [r7, #68]	; 0x44
	CAN1_FilterInit[AnkleIndex].FilterMaskIdHigh = AnkleMotorCAN_ID << 5;
 80016fe:	2320      	movs	r3, #32
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
	CAN1_FilterInit[AnkleIndex].FilterMaskIdLow = AnkleMotorCAN_ID << 5;
 8001702:	2320      	movs	r3, #32
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c
	CAN1_FilterInit[AnkleIndex].FilterMode = CAN_FILTERMODE_IDLIST;
 8001706:	2301      	movs	r3, #1
 8001708:	65bb      	str	r3, [r7, #88]	; 0x58
	CAN1_FilterInit[AnkleIndex].FilterScale = CAN_FILTERSCALE_16BIT;
 800170a:	2300      	movs	r3, #0
 800170c:	65fb      	str	r3, [r7, #92]	; 0x5c

	memcpy(&CAN1_FilterInit[KneeIndex], &CAN1_FilterInit[AnkleIndex], sizeof(CAN_FilterTypeDef));
 800170e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001712:	f107 0540 	add.w	r5, r7, #64	; 0x40
 8001716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001722:	e884 0003 	stmia.w	r4, {r0, r1}
	CAN1_FilterInit[KneeIndex].FilterBank = 1;
 8001726:	2301      	movs	r3, #1
 8001728:	67fb      	str	r3, [r7, #124]	; 0x7c
	CAN1_FilterInit[KneeIndex].FilterFIFOAssignment = CAN_RX_FIFO1;
 800172a:	2301      	movs	r3, #1
 800172c:	67bb      	str	r3, [r7, #120]	; 0x78
	CAN1_FilterInit[KneeIndex].FilterIdHigh = KneeMotorCAN_ID << 5;
 800172e:	2340      	movs	r3, #64	; 0x40
 8001730:	66bb      	str	r3, [r7, #104]	; 0x68
	CAN1_FilterInit[KneeIndex].FilterIdLow = KneeMotorCAN_ID << 5;
 8001732:	2340      	movs	r3, #64	; 0x40
 8001734:	66fb      	str	r3, [r7, #108]	; 0x6c
	CAN1_FilterInit[KneeIndex].FilterMaskIdHigh = KneeMotorCAN_ID << 5;
 8001736:	2340      	movs	r3, #64	; 0x40
 8001738:	673b      	str	r3, [r7, #112]	; 0x70
	CAN1_FilterInit[KneeIndex].FilterMaskIdLow = KneeMotorCAN_ID << 5;
 800173a:	2340      	movs	r3, #64	; 0x40
 800173c:	677b      	str	r3, [r7, #116]	; 0x74

  	MPU925x_Init_t AnkleIMU_Init;
  	AnkleIMU_Init.SPI_Handle = &hspi1;
 800173e:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <main+0x230>)
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
  	AnkleIMU_Init.CS_GPIOx = ANKLE_IMU_CS_GPIO_Port;
 8001742:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
  	AnkleIMU_Init.csPin = ANKLE_IMU_CS_Pin;
 8001748:	2310      	movs	r3, #16
 800174a:	87bb      	strh	r3, [r7, #60]	; 0x3c

	Prosthesis_Init_t Prosthesis_Init;
	Prosthesis_Init.Joint = Ankle;
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	Prosthesis_Init.Side = Right;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

/*******************************************************************************
* USER ADDED INITIALIZATIONS
*******************************************************************************/

	LL_LPTIM_Enable(LPTIM2);
 8001758:	4860      	ldr	r0, [pc, #384]	; (80018dc <main+0x234>)
 800175a:	f7ff fe2d 	bl	80013b8 <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 800175e:	485f      	ldr	r0, [pc, #380]	; (80018dc <main+0x234>)
 8001760:	f7ff fe60 	bl	8001424 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8001764:	213f      	movs	r1, #63	; 0x3f
 8001766:	485d      	ldr	r0, [pc, #372]	; (80018dc <main+0x234>)
 8001768:	f7ff fe49 	bl	80013fe <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 800176c:	2104      	movs	r1, #4
 800176e:	485b      	ldr	r0, [pc, #364]	; (80018dc <main+0x234>)
 8001770:	f7ff fe32 	bl	80013d8 <LL_LPTIM_StartCounter>

	LL_ADC_Enable(ADC1);
 8001774:	485a      	ldr	r0, [pc, #360]	; (80018e0 <main+0x238>)
 8001776:	f7ff fe0b 	bl	8001390 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 800177a:	485a      	ldr	r0, [pc, #360]	; (80018e4 <main+0x23c>)
 800177c:	f7ff fe08 	bl	8001390 <LL_ADC_Enable>

	LL_mDelay(5000);	// Significant delay when powering on AK motor
 8001780:	f241 3088 	movw	r0, #5000	; 0x1388
 8001784:	f006 f8f6 	bl	8007974 <LL_mDelay>

	if(HAL_CAN_ConfigFilter(&hcan1, &CAN1_FilterInit[AnkleIndex]))
 8001788:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800178c:	4619      	mov	r1, r3
 800178e:	4856      	ldr	r0, [pc, #344]	; (80018e8 <main+0x240>)
 8001790:	f002 fcd3 	bl	800413a <HAL_CAN_ConfigFilter>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <main+0xf8>
		ErrorHandler(CAN_Error);
 800179a:	2003      	movs	r0, #3
 800179c:	f000 fad0 	bl	8001d40 <ErrorHandler>
	if(HAL_CAN_ConfigFilter(&hcan1, &CAN1_FilterInit[KneeIndex]))
 80017a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a4:	3328      	adds	r3, #40	; 0x28
 80017a6:	4619      	mov	r1, r3
 80017a8:	484f      	ldr	r0, [pc, #316]	; (80018e8 <main+0x240>)
 80017aa:	f002 fcc6 	bl	800413a <HAL_CAN_ConfigFilter>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <main+0x112>
		ErrorHandler(CAN_Error);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 fac3 	bl	8001d40 <ErrorHandler>
	if(HAL_CAN_Start(&hcan1))
 80017ba:	484b      	ldr	r0, [pc, #300]	; (80018e8 <main+0x240>)
 80017bc:	f002 fd87 	bl	80042ce <HAL_CAN_Start>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <main+0x124>
		ErrorHandler(CAN_Error);
 80017c6:	2003      	movs	r0, #3
 80017c8:	f000 faba 	bl	8001d40 <ErrorHandler>

	if((Prosthesis_Init.Joint == Ankle) || (Prosthesis_Init.Joint == Combined))
 80017cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <main+0x134>
 80017d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d136      	bne.n	800184a <main+0x1a2>
	{
	  	if(MPU925x_Init(0, &AnkleIMU_Init))
 80017dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017e0:	4619      	mov	r1, r3
 80017e2:	2000      	movs	r0, #0
 80017e4:	f001 ffce 	bl	8003784 <MPU925x_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <main+0x14c>
	  		ErrorHandler(AnkleIMU_Error);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 faa6 	bl	8001d40 <ErrorHandler>
		MPU925x_SetAccelSensitivity(0, MPU925x_AccelSensitivity_8g);
 80017f4:	2102      	movs	r1, #2
 80017f6:	2000      	movs	r0, #0
 80017f8:	f001 fff8 	bl	80037ec <MPU925x_SetAccelSensitivity>
		MPU925x_SetGyroSensitivity(0, MPU925x_GyroSensitivity_1000dps);
 80017fc:	2102      	movs	r1, #2
 80017fe:	2000      	movs	r0, #0
 8001800:	f002 f896 	bl	8003930 <MPU925x_SetGyroSensitivity>

		uint32_t txMailbox;
		AKxx_x_ReadData_t RxData_Float;
		if(AKxx_x_Init(AnkleIndex, &Motor_Init[AnkleIndex]))
 8001804:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001808:	4619      	mov	r1, r3
 800180a:	2000      	movs	r0, #0
 800180c:	f001 faf2 	bl	8002df4 <AKxx_x_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <main+0x174>
			ErrorHandler(AnkleMotorError);
 8001816:	2002      	movs	r0, #2
 8001818:	f000 fa92 	bl	8001d40 <ErrorHandler>
		if(AKxx_x_ZeroMotorPosition(AnkleIndex, &txMailbox))
 800181c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001820:	4619      	mov	r1, r3
 8001822:	2000      	movs	r0, #0
 8001824:	f001 fc34 	bl	8003090 <AKxx_x_ZeroMotorPosition>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <main+0x18c>
			ErrorHandler(AnkleMotorError);
 800182e:	2002      	movs	r0, #2
 8001830:	f000 fa86 	bl	8001d40 <ErrorHandler>
		if(AKxx_x_PollMotorReadWith10msTimeout(&RxData_Float))
 8001834:	f107 0318 	add.w	r3, r7, #24
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fc97 	bl	800316c <AKxx_x_PollMotorReadWith10msTimeout>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <main+0x1a2>
			ErrorHandler(AnkleMotorError);
 8001844:	2002      	movs	r0, #2
 8001846:	f000 fa7b 	bl	8001d40 <ErrorHandler>
	}
	if((Prosthesis_Init.Joint == Knee) || (Prosthesis_Init.Joint == Combined))
 800184a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800184e:	2b02      	cmp	r3, #2
 8001850:	d003      	beq.n	800185a <main+0x1b2>
 8001852:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001856:	2b01      	cmp	r3, #1
 8001858:	d122      	bne.n	80018a0 <main+0x1f8>
//	  	if(BNO08x_Init())
//	  		ErrorHandler(KneeIMU_Error);	source files for knee imu removed from build??

		uint32_t txMailbox;
		AKxx_x_ReadData_t RxData_Float;
		if(AKxx_x_Init(KneeIndex, &Motor_Init[KneeIndex]))
 800185a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800185e:	3304      	adds	r3, #4
 8001860:	4619      	mov	r1, r3
 8001862:	2001      	movs	r0, #1
 8001864:	f001 fac6 	bl	8002df4 <AKxx_x_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <main+0x1cc>
			ErrorHandler(KneeMotorError);
 800186e:	2005      	movs	r0, #5
 8001870:	f000 fa66 	bl	8001d40 <ErrorHandler>
		if(AKxx_x_ZeroMotorPosition(KneeIndex, &txMailbox))
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	2001      	movs	r0, #1
 800187c:	f001 fc08 	bl	8003090 <AKxx_x_ZeroMotorPosition>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <main+0x1e4>
			ErrorHandler(KneeMotorError);
 8001886:	2005      	movs	r0, #5
 8001888:	f000 fa5a 	bl	8001d40 <ErrorHandler>
		if(AKxx_x_PollMotorReadWith10msTimeout(&RxData_Float))
 800188c:	463b      	mov	r3, r7
 800188e:	4618      	mov	r0, r3
 8001890:	f001 fc6c 	bl	800316c <AKxx_x_PollMotorReadWith10msTimeout>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <main+0x1f8>
			ErrorHandler(KneeMotorError);
 800189a:	2005      	movs	r0, #5
 800189c:	f000 fa50 	bl	8001d40 <ErrorHandler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80018a0:	2112      	movs	r1, #18
 80018a2:	4811      	ldr	r0, [pc, #68]	; (80018e8 <main+0x240>)
 80018a4:	f002 ff85 	bl	80047b2 <HAL_CAN_ActivateNotification>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <main+0x20c>
		ErrorHandler(CAN_Error);
 80018ae:	2003      	movs	r0, #3
 80018b0:	f000 fa46 	bl	8001d40 <ErrorHandler>

	InitProsthesisControl(&Prosthesis_Init);
 80018b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f8bf 	bl	8001a3c <InitProsthesisControl>

/*******************************************************************************
* USER ADDED TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(ReadOnly);
 80018be:	2001      	movs	r0, #1
 80018c0:	f000 f9b0 	bl	8001c24 <RequireTestProgram>
* USER ADDED MAIN LOOP
*******************************************************************************/

	while(1)
	{
		if(isProsthesisControlRequired)
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <main+0x244>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0fb      	beq.n	80018c4 <main+0x21c>
	{
		  RunProsthesisControl();
 80018cc:	f000 f9c4 	bl	8001c58 <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <main+0x244>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
		if(isProsthesisControlRequired)
 80018d6:	e7f5      	b.n	80018c4 <main+0x21c>
 80018d8:	200002dc 	.word	0x200002dc
 80018dc:	40009400 	.word	0x40009400
 80018e0:	50040000 	.word	0x50040000
 80018e4:	50040100 	.word	0x50040100
 80018e8:	2000003c 	.word	0x2000003c
 80018ec:	20000064 	.word	0x20000064

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80018f4:	2004      	movs	r0, #4
 80018f6:	f7ff fea1 	bl	800163c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 80018fa:	bf00      	nop
 80018fc:	f7ff feb2 	bl	8001664 <LL_FLASH_GetLatency>
 8001900:	4603      	mov	r3, r0
 8001902:	2b04      	cmp	r3, #4
 8001904:	d1fa      	bne.n	80018fc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001906:	f44f 7000 	mov.w	r0, #512	; 0x200
 800190a:	f7ff feb9 	bl	8001680 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800190e:	f7ff fd99 	bl	8001444 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001912:	bf00      	nop
 8001914:	f7ff fda6 	bl	8001464 <LL_RCC_HSE_IsReady>
 8001918:	4603      	mov	r3, r0
 800191a:	2b01      	cmp	r3, #1
 800191c:	d1fa      	bne.n	8001914 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_LSI_Enable();
 800191e:	f7ff fdb5 	bl	800148c <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8001922:	bf00      	nop
 8001924:	f7ff fdc4 	bl	80014b0 <LL_RCC_LSI_IsReady>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d1fa      	bne.n	8001924 <SystemClock_Config+0x34>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_3, 10, LL_RCC_PLLR_DIV_2);
 800192e:	2300      	movs	r3, #0
 8001930:	220a      	movs	r2, #10
 8001932:	2120      	movs	r1, #32
 8001934:	2003      	movs	r0, #3
 8001936:	f7ff fe51 	bl	80015dc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 800193a:	f7ff fe6f 	bl	800161c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 800193e:	f7ff fe29 	bl	8001594 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001942:	bf00      	nop
 8001944:	f7ff fe36 	bl	80015b4 <LL_RCC_PLL_IsReady>
 8001948:	4603      	mov	r3, r0
 800194a:	2b01      	cmp	r3, #1
 800194c:	d1fa      	bne.n	8001944 <SystemClock_Config+0x54>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800194e:	2003      	movs	r0, #3
 8001950:	f7ff fdc2 	bl	80014d8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001954:	bf00      	nop
 8001956:	f7ff fdd3 	bl	8001500 <LL_RCC_GetSysClkSource>
 800195a:	4603      	mov	r3, r0
 800195c:	2b0c      	cmp	r3, #12
 800195e:	d1fa      	bne.n	8001956 <SystemClock_Config+0x66>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff fddb 	bl	800151c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001966:	2000      	movs	r0, #0
 8001968:	f7ff fdec 	bl	8001544 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fdfd 	bl	800156c <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <SystemClock_Config+0x9c>)
 8001974:	f006 f826 	bl	80079c4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001978:	200f      	movs	r0, #15
 800197a:	f002 fa87 	bl	8003e8c <HAL_InitTick>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001984:	f000 f804 	bl	8001990 <Error_Handler>
  }
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	04c4b400 	.word	0x04c4b400

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	e7fe      	b.n	8001998 <Error_Handler+0x8>

0800199a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ae:	f043 0204 	orr.w	r2, r3, #4
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	b29b      	uxth	r3, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d101      	bne.n	80019f4 <LL_ADC_IsActiveFlag_EOC+0x18>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <LL_ADC_IsActiveFlag_EOC+0x1a>
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <InitProsthesisControl>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void InitProsthesisControl(Prosthesis_Init_t *Device_Init)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b29a      	uxth	r2, r3
	memcpy(&Device, Device_Init, sizeof(Device));
 8001a4a:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <InitProsthesisControl+0x1cc>)
 8001a4c:	801a      	strh	r2, [r3, #0]

	memset(&CM_AnkleJoint, 0, sizeof(CM_AnkleJoint));
 8001a4e:	22d8      	movs	r2, #216	; 0xd8
 8001a50:	2100      	movs	r1, #0
 8001a52:	486e      	ldr	r0, [pc, #440]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001a54:	f005 fff8 	bl	8007a48 <memset>
	memset(&CM_KneeJoint, 0, sizeof(CM_KneeJoint));
 8001a58:	22c8      	movs	r2, #200	; 0xc8
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	486c      	ldr	r0, [pc, #432]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001a5e:	f005 fff3 	bl	8007a48 <memset>

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001a62:	4b69      	ldr	r3, [pc, #420]	; (8001c08 <InitProsthesisControl+0x1cc>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <InitProsthesisControl+0x36>
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <InitProsthesisControl+0x1cc>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d142      	bne.n	8001af8 <InitProsthesisControl+0xbc>
	{
		float startPosition = 0.0f;
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
		float startKd = 0.0f;
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
		float startKp = 0.0f;
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]

		CM_AnkleJoint.EarlyStanceCtrl.position = startPosition;
 8001a84:	4a61      	ldr	r2, [pc, #388]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
		CM_AnkleJoint.EarlyStanceCtrl.kd = startKd;
 8001a8a:	4a60      	ldr	r2, [pc, #384]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	6293      	str	r3, [r2, #40]	; 0x28
		CM_AnkleJoint.EarlyStanceCtrl.kp = startKp;
 8001a90:	4a5e      	ldr	r2, [pc, #376]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	62d3      	str	r3, [r2, #44]	; 0x2c

		CM_AnkleJoint.MidStanceCtrl.position = startPosition;
 8001a96:	4a5d      	ldr	r2, [pc, #372]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	6453      	str	r3, [r2, #68]	; 0x44
		CM_AnkleJoint.MidStanceCtrl.kd = startKd;
 8001a9c:	4a5b      	ldr	r2, [pc, #364]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	63d3      	str	r3, [r2, #60]	; 0x3c
		CM_AnkleJoint.MidStanceCtrl.kp = startKp;
 8001aa2:	4a5a      	ldr	r2, [pc, #360]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	6413      	str	r3, [r2, #64]	; 0x40

		CM_AnkleJoint.LateStanceCtrl.position = startPosition;
 8001aa8:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	6593      	str	r3, [r2, #88]	; 0x58
		CM_AnkleJoint.LateStanceCtrl.kd = startKd;
 8001aae:	4a57      	ldr	r2, [pc, #348]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	6513      	str	r3, [r2, #80]	; 0x50
		CM_AnkleJoint.LateStanceCtrl.kp = startKp;
 8001ab4:	4a55      	ldr	r2, [pc, #340]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	6553      	str	r3, [r2, #84]	; 0x54

		CM_AnkleJoint.SwingFlexCtrl.position = startPosition;
 8001aba:	4a54      	ldr	r2, [pc, #336]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	66d3      	str	r3, [r2, #108]	; 0x6c
		CM_AnkleJoint.SwingFlexCtrl.kd = startKd;
 8001ac0:	4a52      	ldr	r2, [pc, #328]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	6653      	str	r3, [r2, #100]	; 0x64
		CM_AnkleJoint.SwingFlexCtrl.kp = startKp;
 8001ac6:	4a51      	ldr	r2, [pc, #324]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	6693      	str	r3, [r2, #104]	; 0x68

		CM_AnkleJoint.SwingExtCtrl.position = startPosition;
 8001acc:	4a4f      	ldr	r2, [pc, #316]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		CM_AnkleJoint.SwingExtCtrl.kd = startKd;
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001ad6:	6a3b      	ldr	r3, [r7, #32]
 8001ad8:	6793      	str	r3, [r2, #120]	; 0x78
		CM_AnkleJoint.SwingExtCtrl.kp = startKp;
 8001ada:	4a4c      	ldr	r2, [pc, #304]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	67d3      	str	r3, [r2, #124]	; 0x7c

		CM_AnkleJoint.SwingDescCtrl.position = startPosition;
 8001ae0:	4a4a      	ldr	r2, [pc, #296]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		CM_AnkleJoint.SwingDescCtrl.kd = startKd;
 8001ae8:	4a48      	ldr	r2, [pc, #288]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		CM_AnkleJoint.SwingDescCtrl.kp = startKp;
 8001af0:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <InitProsthesisControl+0x1d0>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	}
	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8001af8:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <InitProsthesisControl+0x1cc>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d003      	beq.n	8001b08 <InitProsthesisControl+0xcc>
 8001b00:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <InitProsthesisControl+0x1cc>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d142      	bne.n	8001b8e <InitProsthesisControl+0x152>
	{
		float startPosition = 0.0f;
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
		float startKd = 0.0f;
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
		float startKp = 0.0f;
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]

		CM_KneeJoint.EarlyStanceCtrl.position = startPosition;
 8001b1a:	4a3d      	ldr	r2, [pc, #244]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
		CM_KneeJoint.EarlyStanceCtrl.kd = startKd;
 8001b20:	4a3b      	ldr	r2, [pc, #236]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	6293      	str	r3, [r2, #40]	; 0x28
		CM_KneeJoint.EarlyStanceCtrl.kp = startKp;
 8001b26:	4a3a      	ldr	r2, [pc, #232]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

		CM_KneeJoint.MidStanceCtrl.position = startPosition;
 8001b2c:	4a38      	ldr	r2, [pc, #224]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
		CM_KneeJoint.MidStanceCtrl.kd = startKd;
 8001b32:	4a37      	ldr	r2, [pc, #220]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	63d3      	str	r3, [r2, #60]	; 0x3c
		CM_KneeJoint.MidStanceCtrl.kp = startKp;
 8001b38:	4a35      	ldr	r2, [pc, #212]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40

		CM_KneeJoint.LateStanceCtrl.position = startPosition;
 8001b3e:	4a34      	ldr	r2, [pc, #208]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	6593      	str	r3, [r2, #88]	; 0x58
		CM_KneeJoint.LateStanceCtrl.kd = startKd;
 8001b44:	4a32      	ldr	r2, [pc, #200]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	6513      	str	r3, [r2, #80]	; 0x50
		CM_KneeJoint.LateStanceCtrl.kp = startKp;
 8001b4a:	4a31      	ldr	r2, [pc, #196]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	6553      	str	r3, [r2, #84]	; 0x54

		CM_KneeJoint.SwingFlexCtrl.position = startPosition;
 8001b50:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	66d3      	str	r3, [r2, #108]	; 0x6c
		CM_KneeJoint.SwingFlexCtrl.kd = startKd;
 8001b56:	4a2e      	ldr	r2, [pc, #184]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	6653      	str	r3, [r2, #100]	; 0x64
		CM_KneeJoint.SwingFlexCtrl.kp = startKp;
 8001b5c:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	6693      	str	r3, [r2, #104]	; 0x68

		CM_KneeJoint.SwingExtCtrl.position = startPosition;
 8001b62:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		CM_KneeJoint.SwingExtCtrl.kd = startKd;
 8001b6a:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	6793      	str	r3, [r2, #120]	; 0x78
		CM_KneeJoint.SwingExtCtrl.kp = startKp;
 8001b70:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	67d3      	str	r3, [r2, #124]	; 0x7c

		CM_KneeJoint.SwingDescCtrl.position = startPosition;
 8001b76:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		CM_KneeJoint.SwingDescCtrl.kd = startKd;
 8001b7e:	4a24      	ldr	r2, [pc, #144]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		CM_KneeJoint.SwingDescCtrl.kp = startKp;
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <InitProsthesisControl+0x1d4>)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	}

	CM_LoadCell.intoStanceThreshold = 1300; //??
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <InitProsthesisControl+0x1d8>)
 8001b90:	4a21      	ldr	r2, [pc, #132]	; (8001c18 <InitProsthesisControl+0x1dc>)
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
	CM_LoadCell.outOfStanceThreshold = 1300 + 50; //??
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <InitProsthesisControl+0x1d8>)
 8001b96:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <InitProsthesisControl+0x1e0>)
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30

	CM_footSpeedThreshold = 0.0f;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <InitProsthesisControl+0x1e4>)
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

	uint32_t txMailbox;
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <InitProsthesisControl+0x1cc>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <InitProsthesisControl+0x176>
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <InitProsthesisControl+0x1cc>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d111      	bne.n	8001bd6 <InitProsthesisControl+0x19a>
	{
		MPU925x_SetChipSelect(0);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f002 f86c 	bl	8003c90 <MPU925x_SetChipSelect>
		MPU925x_StartReadIMU_IT(0);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f001 ff65 	bl	8003a88 <MPU925x_StartReadIMU_IT>

		if(AKxx_x_EnterMotorCtrlMode(AnkleIndex, &txMailbox))
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f001 f9ff 	bl	8002fc8 <AKxx_x_EnterMotorCtrlMode>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <InitProsthesisControl+0x19a>
			ErrorHandler(AnkleMotorError);
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f000 f8b5 	bl	8001d40 <ErrorHandler>
	}

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <InitProsthesisControl+0x1cc>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d003      	beq.n	8001be6 <InitProsthesisControl+0x1aa>
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <InitProsthesisControl+0x1cc>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10b      	bne.n	8001bfe <InitProsthesisControl+0x1c2>
		if(AKxx_x_EnterMotorCtrlMode(KneeIndex, &txMailbox))
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	2001      	movs	r0, #1
 8001bee:	f001 f9eb 	bl	8002fc8 <AKxx_x_EnterMotorCtrlMode>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <InitProsthesisControl+0x1c2>
			ErrorHandler(KneeMotorError);
 8001bf8:	2005      	movs	r0, #5
 8001bfa:	f000 f8a1 	bl	8001d40 <ErrorHandler>
}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200000d8 	.word	0x200000d8
 8001c0c:	200000e0 	.word	0x200000e0
 8001c10:	200001c0 	.word	0x200001c0
 8001c14:	20000288 	.word	0x20000288
 8001c18:	44a28000 	.word	0x44a28000
 8001c1c:	44a8c000 	.word	0x44a8c000
 8001c20:	200001b8 	.word	0x200001b8

08001c24 <RequireTestProgram>:

void RequireTestProgram(TestProgram_e option)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <RequireTestProgram+0x2c>)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	7013      	strb	r3, [r2, #0]
	if(testProgram != None)
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <RequireTestProgram+0x2c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <RequireTestProgram+0x30>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	200000da 	.word	0x200000da
 8001c54:	200000de 	.word	0x200000de

08001c58 <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	GetInputs();
 8001c5c:	f000 f8a4 	bl	8001da8 <GetInputs>
	ProcessInputs();
 8001c60:	f000 f952 	bl	8001f08 <ProcessInputs>

	RunStateMachine();
 8001c64:	f000 fb06 	bl	8002274 <RunStateMachine>

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <RunProsthesisControl+0xcc>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <RunProsthesisControl+0x20>
 8001c70:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <RunProsthesisControl+0xcc>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d11c      	bne.n	8001cb2 <RunProsthesisControl+0x5a>
	{
		static uint8_t missedAnkleMotorCalls = 0;
		if(CM_AnkleJoint.motorDataReceived)
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <RunProsthesisControl+0xd0>)
 8001c7a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <RunProsthesisControl+0x40>
		{
			missedAnkleMotorCalls = 0;
 8001c82:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <RunProsthesisControl+0xd4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
			CM_AnkleJoint.motorDataReceived = 0;
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <RunProsthesisControl+0xd0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
			ServiceMotor(AnkleIndex);
 8001c90:	2000      	movs	r0, #0
 8001c92:	f000 fcf1 	bl	8002678 <ServiceMotor>
 8001c96:	e005      	b.n	8001ca4 <RunProsthesisControl+0x4c>
		}
		else
			missedAnkleMotorCalls++;
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <RunProsthesisControl+0xd4>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <RunProsthesisControl+0xd4>)
 8001ca2:	701a      	strb	r2, [r3, #0]

		if(missedAnkleMotorCalls >= 5)
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <RunProsthesisControl+0xd4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d902      	bls.n	8001cb2 <RunProsthesisControl+0x5a>
			ErrorHandler(AnkleMotorError);
 8001cac:	2002      	movs	r0, #2
 8001cae:	f000 f847 	bl	8001d40 <ErrorHandler>
	}
	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <RunProsthesisControl+0xcc>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d003      	beq.n	8001cc2 <RunProsthesisControl+0x6a>
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <RunProsthesisControl+0xcc>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d11c      	bne.n	8001cfc <RunProsthesisControl+0xa4>
	{
		static uint8_t missedKneeMotorCalls = 0;
		if(CM_KneeJoint.motorDataReceived)
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <RunProsthesisControl+0xd8>)
 8001cc4:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00a      	beq.n	8001ce2 <RunProsthesisControl+0x8a>
		{
			missedKneeMotorCalls = 0;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <RunProsthesisControl+0xdc>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
			CM_KneeJoint.motorDataReceived = 0;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <RunProsthesisControl+0xd8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			ServiceMotor(KneeIndex);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 fccc 	bl	8002678 <ServiceMotor>
 8001ce0:	e005      	b.n	8001cee <RunProsthesisControl+0x96>
		}
		else
			missedKneeMotorCalls++;
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <RunProsthesisControl+0xdc>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <RunProsthesisControl+0xdc>)
 8001cec:	701a      	strb	r2, [r3, #0]

		if(missedKneeMotorCalls >= 5)
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <RunProsthesisControl+0xdc>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d902      	bls.n	8001cfc <RunProsthesisControl+0xa4>
			ErrorHandler(KneeMotorError);
 8001cf6:	2005      	movs	r0, #5
 8001cf8:	f000 f822 	bl	8001d40 <ErrorHandler>
	}

	// Check for first and second executions, needed for load cell filter
	if(isFirst)
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <RunProsthesisControl+0xe0>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <RunProsthesisControl+0xba>
	{
		isFirst = 0;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <RunProsthesisControl+0xe0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <RunProsthesisControl+0xe4>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 8001d10:	e006      	b.n	8001d20 <RunProsthesisControl+0xc8>
	else if(isSecond)
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <RunProsthesisControl+0xe4>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <RunProsthesisControl+0xc8>
		isSecond = 0;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <RunProsthesisControl+0xe4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200000d8 	.word	0x200000d8
 8001d28:	200000e0 	.word	0x200000e0
 8001d2c:	200002c8 	.word	0x200002c8
 8001d30:	200001c0 	.word	0x200001c0
 8001d34:	200002c9 	.word	0x200002c9
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	200000dd 	.word	0x200000dd

08001d40 <ErrorHandler>:

void ErrorHandler(Error_e error)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	ActivateLED(Red);
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	f000 fdca 	bl	80028e4 <ActivateLED>

	HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 8001d50:	2112      	movs	r1, #18
 8001d52:	4811      	ldr	r0, [pc, #68]	; (8001d98 <ErrorHandler+0x58>)
 8001d54:	f002 fd53 	bl	80047fe <HAL_CAN_DeactivateNotification>

	CM_ledCode = error;
 8001d58:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <ErrorHandler+0x5c>)
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	7013      	strb	r3, [r2, #0]

	uint32_t txMailbox;
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <ErrorHandler+0x60>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <ErrorHandler+0x2e>
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <ErrorHandler+0x60>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <ErrorHandler+0x3a>
		AKxx_x_ExitMotorCtrlMode(AnkleIndex, &txMailbox);
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	2000      	movs	r0, #0
 8001d76:	f001 f945 	bl	8003004 <AKxx_x_ExitMotorCtrlMode>
	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <ErrorHandler+0x60>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d003      	beq.n	8001d8a <ErrorHandler+0x4a>
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <ErrorHandler+0x60>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d105      	bne.n	8001d96 <ErrorHandler+0x56>
		AKxx_x_ExitMotorCtrlMode(KneeIndex, &txMailbox);
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4619      	mov	r1, r3
 8001d90:	2001      	movs	r0, #1
 8001d92:	f001 f937 	bl	8003004 <AKxx_x_ExitMotorCtrlMode>

	while(1);
 8001d96:	e7fe      	b.n	8001d96 <ErrorHandler+0x56>
 8001d98:	2000003c 	.word	0x2000003c
 8001d9c:	200002c2 	.word	0x200002c2
 8001da0:	200000d8 	.word	0x200000d8
 8001da4:	00000000 	.word	0x00000000

08001da8 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
	CM_LoadCell.Raw.bot[0] = ReadLoadCell(ADC1);
 8001dae:	4842      	ldr	r0, [pc, #264]	; (8001eb8 <GetInputs+0x110>)
 8001db0:	f000 f892 	bl	8001ed8 <ReadLoadCell>
 8001db4:	4603      	mov	r3, r0
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <GetInputs+0x114>)
 8001dc0:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell.Raw.top[0] = ReadLoadCell(ADC2);
 8001dc4:	483e      	ldr	r0, [pc, #248]	; (8001ec0 <GetInputs+0x118>)
 8001dc6:	f000 f887 	bl	8001ed8 <ReadLoadCell>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd4:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <GetInputs+0x114>)
 8001dd6:	edc3 7a03 	vstr	s15, [r3, #12]

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <GetInputs+0x11c>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <GetInputs+0x42>
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <GetInputs+0x11c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d151      	bne.n	8001e8e <GetInputs+0xe6>
	{
		static uint8_t tempImuData[14];
		if(imuReadStarted)
 8001dea:	4b37      	ldr	r3, [pc, #220]	; (8001ec8 <GetInputs+0x120>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <GetInputs+0x58>
		{
			imuReadStarted = 0;
 8001df2:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <GetInputs+0x120>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
			MPU925x_ReadIMU_IT(0, tempImuData);
 8001df8:	4934      	ldr	r1, [pc, #208]	; (8001ecc <GetInputs+0x124>)
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f001 fe62 	bl	8003ac4 <MPU925x_ReadIMU_IT>
		}
		if(imuDataReceived)
 8001e00:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <GetInputs+0x128>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d042      	beq.n	8001e8e <GetInputs+0xe6>
		{
			imuDataReceived = 0;
 8001e08:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <GetInputs+0x128>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
			MPU925x_ClearChipSelect(0);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f001 ff26 	bl	8003c60 <MPU925x_ClearChipSelect>

			MPU925x_SetChipSelect(0);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f001 ff3b 	bl	8003c90 <MPU925x_SetChipSelect>
			MPU925x_StartReadIMU_IT(0);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f001 fe34 	bl	8003a88 <MPU925x_StartReadIMU_IT>

			IMU_Data = MPU925x_ConvertIMU_Data(tempImuData);
 8001e20:	4c2c      	ldr	r4, [pc, #176]	; (8001ed4 <GetInputs+0x12c>)
 8001e22:	463b      	mov	r3, r7
 8001e24:	4929      	ldr	r1, [pc, #164]	; (8001ecc <GetInputs+0x124>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	f001 fe68 	bl	8003afc <MPU925x_ConvertIMU_Data>
 8001e2c:	4625      	mov	r5, r4
 8001e2e:	463c      	mov	r4, r7
 8001e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e3c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

			// Gyro offsets previously found
			IMU_Data.Struct.gx -= 3.1266768292682952;
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <GetInputs+0x12c>)
 8001e42:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e46:	a316      	add	r3, pc, #88	; (adr r3, 8001ea0 <GetInputs+0xf8>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe f9c0 	bl	80001d0 <__aeabi_dsub>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	491f      	ldr	r1, [pc, #124]	; (8001ed4 <GetInputs+0x12c>)
 8001e56:	e9c1 2306 	strd	r2, r3, [r1, #24]
			IMU_Data.Struct.gy -= 0.59624999999999995;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <GetInputs+0x12c>)
 8001e5c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001e60:	a311      	add	r3, pc, #68	; (adr r3, 8001ea8 <GetInputs+0x100>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f7fe f9b3 	bl	80001d0 <__aeabi_dsub>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4919      	ldr	r1, [pc, #100]	; (8001ed4 <GetInputs+0x12c>)
 8001e70:	e9c1 2308 	strd	r2, r3, [r1, #32]
			IMU_Data.Struct.gz -= -1.578993902439024;
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <GetInputs+0x12c>)
 8001e76:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001e7a:	a30d      	add	r3, pc, #52	; (adr r3, 8001eb0 <GetInputs+0x108>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe f9a8 	bl	80001d4 <__adddf3>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4912      	ldr	r1, [pc, #72]	; (8001ed4 <GetInputs+0x12c>)
 8001e8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		}
	}
	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <GetInputs+0x11c>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b02      	cmp	r3, #2
//				ErrorHandler(KneeIMU_Error);
//		}
//
//		BNO08x_ReadSensors();
	}
}
 8001e94:	bf00      	nop
 8001e96:	3730      	adds	r7, #48	; 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	2436f249 	.word	0x2436f249
 8001ea4:	4009036f 	.word	0x4009036f
 8001ea8:	e147ae14 	.word	0xe147ae14
 8001eac:	3fe3147a 	.word	0x3fe3147a
 8001eb0:	1c38f1c2 	.word	0x1c38f1c2
 8001eb4:	3ff9438f 	.word	0x3ff9438f
 8001eb8:	50040000 	.word	0x50040000
 8001ebc:	20000288 	.word	0x20000288
 8001ec0:	50040100 	.word	0x50040100
 8001ec4:	200000d8 	.word	0x200000d8
 8001ec8:	200000db 	.word	0x200000db
 8001ecc:	200002cc 	.word	0x200002cc
 8001ed0:	200000dc 	.word	0x200000dc
 8001ed4:	200000a8 	.word	0x200000a8

08001ed8 <ReadLoadCell>:

static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fd5a 	bl	800199a <LL_ADC_REG_StartConversion>
	while (!LL_ADC_IsActiveFlag_EOC(ADCx));
 8001ee6:	bf00      	nop
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fd77 	bl	80019dc <LL_ADC_IsActiveFlag_EOC>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f9      	beq.n	8001ee8 <ReadLoadCell+0x10>
	return LL_ADC_REG_ReadConversionData12(ADCx);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fd64 	bl	80019c2 <LL_ADC_REG_ReadConversionData12>
 8001efa:	4603      	mov	r3, r0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0000      	movs	r0, r0
	...

08001f08 <ProcessInputs>:

static void ProcessInputs(void)
{
 8001f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
	// Filter load cells
	if(isFirst)
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <ProcessInputs+0x7c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d018      	beq.n	8001f4a <ProcessInputs+0x42>
	{
		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[0];
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <ProcessInputs+0x80>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1a      	ldr	r2, [pc, #104]	; (8001f88 <ProcessInputs+0x80>)
 8001f1e:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[0];
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <ProcessInputs+0x80>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <ProcessInputs+0x80>)
 8001f26:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <ProcessInputs+0x80>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <ProcessInputs+0x80>)
 8001f2e:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <ProcessInputs+0x80>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <ProcessInputs+0x80>)
 8001f36:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[0];
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <ProcessInputs+0x80>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <ProcessInputs+0x80>)
 8001f3e:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[0];
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <ProcessInputs+0x80>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <ProcessInputs+0x80>)
 8001f46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f48:	e108      	b.n	800215c <ProcessInputs+0x254>
	}
	else if(isSecond)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <ProcessInputs+0x84>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01e      	beq.n	8001f90 <ProcessInputs+0x88>
	{
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <ProcessInputs+0x80>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <ProcessInputs+0x80>)
 8001f58:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <ProcessInputs+0x80>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <ProcessInputs+0x80>)
 8001f60:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <ProcessInputs+0x80>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <ProcessInputs+0x80>)
 8001f68:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <ProcessInputs+0x80>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <ProcessInputs+0x80>)
 8001f70:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <ProcessInputs+0x80>)
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <ProcessInputs+0x80>)
 8001f78:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8001f7a:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <ProcessInputs+0x80>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	4a02      	ldr	r2, [pc, #8]	; (8001f88 <ProcessInputs+0x80>)
 8001f80:	6293      	str	r3, [r2, #40]	; 0x28
 8001f82:	e0eb      	b.n	800215c <ProcessInputs+0x254>
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000288 	.word	0x20000288
 8001f8c:	200000dd 	.word	0x200000dd
	}
	else
	{
		// 2nd order low-pass Butterworth (fc = 20 Hz, fs = 500 Hz)
		CM_LoadCell.Filtered.bot[0] =   1.6475 * CM_LoadCell.Filtered.bot[1] - 0.7009 * CM_LoadCell.Filtered.bot[2]
 8001f90:	4bb3      	ldr	r3, [pc, #716]	; (8002260 <ProcessInputs+0x358>)
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fa7b 	bl	8000490 <__aeabi_f2d>
 8001f9a:	a3a9      	add	r3, pc, #676	; (adr r3, 8002240 <ProcessInputs+0x338>)
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	f7fe face 	bl	8000540 <__aeabi_dmul>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4614      	mov	r4, r2
 8001faa:	461d      	mov	r5, r3
 8001fac:	4bac      	ldr	r3, [pc, #688]	; (8002260 <ProcessInputs+0x358>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fa6d 	bl	8000490 <__aeabi_f2d>
 8001fb6:	a3a4      	add	r3, pc, #656	; (adr r3, 8002248 <ProcessInputs+0x340>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fac0 	bl	8000540 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	f7fe f902 	bl	80001d0 <__aeabi_dsub>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4614      	mov	r4, r2
 8001fd2:	461d      	mov	r5, r3
									  + 0.0134 * CM_LoadCell.Raw.bot[0] + 0.0267 * CM_LoadCell.Raw.bot[1] + 0.0134 * CM_LoadCell.Raw.bot[2];
 8001fd4:	4ba2      	ldr	r3, [pc, #648]	; (8002260 <ProcessInputs+0x358>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fa59 	bl	8000490 <__aeabi_f2d>
 8001fde:	a39c      	add	r3, pc, #624	; (adr r3, 8002250 <ProcessInputs+0x348>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe faac 	bl	8000540 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4620      	mov	r0, r4
 8001fee:	4629      	mov	r1, r5
 8001ff0:	f7fe f8f0 	bl	80001d4 <__adddf3>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4614      	mov	r4, r2
 8001ffa:	461d      	mov	r5, r3
 8001ffc:	4b98      	ldr	r3, [pc, #608]	; (8002260 <ProcessInputs+0x358>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fa45 	bl	8000490 <__aeabi_f2d>
 8002006:	a394      	add	r3, pc, #592	; (adr r3, 8002258 <ProcessInputs+0x350>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f7fe fa98 	bl	8000540 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4620      	mov	r0, r4
 8002016:	4629      	mov	r1, r5
 8002018:	f7fe f8dc 	bl	80001d4 <__adddf3>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4614      	mov	r4, r2
 8002022:	461d      	mov	r5, r3
 8002024:	4b8e      	ldr	r3, [pc, #568]	; (8002260 <ProcessInputs+0x358>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fa31 	bl	8000490 <__aeabi_f2d>
 800202e:	a388      	add	r3, pc, #544	; (adr r3, 8002250 <ProcessInputs+0x348>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe fa84 	bl	8000540 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4620      	mov	r0, r4
 800203e:	4629      	mov	r1, r5
 8002040:	f7fe f8c8 	bl	80001d4 <__adddf3>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f7fe fc8a 	bl	8000964 <__aeabi_d2f>
 8002050:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.bot[0] =   1.6475 * CM_LoadCell.Filtered.bot[1] - 0.7009 * CM_LoadCell.Filtered.bot[2]
 8002052:	4a83      	ldr	r2, [pc, #524]	; (8002260 <ProcessInputs+0x358>)
 8002054:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] =   1.6475 * CM_LoadCell.Filtered.top[1] - 0.7009 * CM_LoadCell.Filtered.top[2]
 8002056:	4b82      	ldr	r3, [pc, #520]	; (8002260 <ProcessInputs+0x358>)
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa18 	bl	8000490 <__aeabi_f2d>
 8002060:	a377      	add	r3, pc, #476	; (adr r3, 8002240 <ProcessInputs+0x338>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fa6b 	bl	8000540 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4614      	mov	r4, r2
 8002070:	461d      	mov	r5, r3
 8002072:	4b7b      	ldr	r3, [pc, #492]	; (8002260 <ProcessInputs+0x358>)
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa0a 	bl	8000490 <__aeabi_f2d>
 800207c:	a372      	add	r3, pc, #456	; (adr r3, 8002248 <ProcessInputs+0x340>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fa5d 	bl	8000540 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4620      	mov	r0, r4
 800208c:	4629      	mov	r1, r5
 800208e:	f7fe f89f 	bl	80001d0 <__aeabi_dsub>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4614      	mov	r4, r2
 8002098:	461d      	mov	r5, r3
									  + 0.0134 * CM_LoadCell.Raw.top[0] + 0.0267 * CM_LoadCell.Raw.top[1] + 0.0134 * CM_LoadCell.Raw.top[2];
 800209a:	4b71      	ldr	r3, [pc, #452]	; (8002260 <ProcessInputs+0x358>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe f9f6 	bl	8000490 <__aeabi_f2d>
 80020a4:	a36a      	add	r3, pc, #424	; (adr r3, 8002250 <ProcessInputs+0x348>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	f7fe fa49 	bl	8000540 <__aeabi_dmul>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe f88d 	bl	80001d4 <__adddf3>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4614      	mov	r4, r2
 80020c0:	461d      	mov	r5, r3
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <ProcessInputs+0x358>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f9e2 	bl	8000490 <__aeabi_f2d>
 80020cc:	a362      	add	r3, pc, #392	; (adr r3, 8002258 <ProcessInputs+0x350>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	f7fe fa35 	bl	8000540 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4620      	mov	r0, r4
 80020dc:	4629      	mov	r1, r5
 80020de:	f7fe f879 	bl	80001d4 <__adddf3>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4614      	mov	r4, r2
 80020e8:	461d      	mov	r5, r3
 80020ea:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <ProcessInputs+0x358>)
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe f9ce 	bl	8000490 <__aeabi_f2d>
 80020f4:	a356      	add	r3, pc, #344	; (adr r3, 8002250 <ProcessInputs+0x348>)
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	f7fe fa21 	bl	8000540 <__aeabi_dmul>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4620      	mov	r0, r4
 8002104:	4629      	mov	r1, r5
 8002106:	f7fe f865 	bl	80001d4 <__adddf3>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f7fe fc27 	bl	8000964 <__aeabi_d2f>
 8002116:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.top[0] =   1.6475 * CM_LoadCell.Filtered.top[1] - 0.7009 * CM_LoadCell.Filtered.top[2]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <ProcessInputs+0x358>)
 800211a:	6253      	str	r3, [r2, #36]	; 0x24

		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[1];
 800211c:	4b50      	ldr	r3, [pc, #320]	; (8002260 <ProcessInputs+0x358>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a4f      	ldr	r2, [pc, #316]	; (8002260 <ProcessInputs+0x358>)
 8002122:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8002124:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <ProcessInputs+0x358>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a4d      	ldr	r2, [pc, #308]	; (8002260 <ProcessInputs+0x358>)
 800212a:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[1];
 800212c:	4b4c      	ldr	r3, [pc, #304]	; (8002260 <ProcessInputs+0x358>)
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	4a4b      	ldr	r2, [pc, #300]	; (8002260 <ProcessInputs+0x358>)
 8002132:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8002134:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <ProcessInputs+0x358>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a49      	ldr	r2, [pc, #292]	; (8002260 <ProcessInputs+0x358>)
 800213a:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[1];
 800213c:	4b48      	ldr	r3, [pc, #288]	; (8002260 <ProcessInputs+0x358>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	4a47      	ldr	r2, [pc, #284]	; (8002260 <ProcessInputs+0x358>)
 8002142:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8002144:	4b46      	ldr	r3, [pc, #280]	; (8002260 <ProcessInputs+0x358>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4a45      	ldr	r2, [pc, #276]	; (8002260 <ProcessInputs+0x358>)
 800214a:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[1];
 800214c:	4b44      	ldr	r3, [pc, #272]	; (8002260 <ProcessInputs+0x358>)
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	4a43      	ldr	r2, [pc, #268]	; (8002260 <ProcessInputs+0x358>)
 8002152:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8002154:	4b42      	ldr	r3, [pc, #264]	; (8002260 <ProcessInputs+0x358>)
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	4a41      	ldr	r2, [pc, #260]	; (8002260 <ProcessInputs+0x358>)
 800215a:	6293      	str	r3, [r2, #40]	; 0x28
	}

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 800215c:	4b41      	ldr	r3, [pc, #260]	; (8002264 <ProcessInputs+0x35c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <ProcessInputs+0x264>
 8002164:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <ProcessInputs+0x35c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d15e      	bne.n	800222a <ProcessInputs+0x322>
	{
		if(Device.Side == Left)
 800216c:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <ProcessInputs+0x35c>)
 800216e:	785b      	ldrb	r3, [r3, #1]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d136      	bne.n	80021e2 <ProcessInputs+0x2da>
		{
			CM_AnkleJoint.IMU_Data.Struct.ax = -IMU_Data.Struct.ax;
 8002174:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <ProcessInputs+0x360>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	60ba      	str	r2, [r7, #8]
 800217c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <ProcessInputs+0x364>)
 8002184:	ed97 7b02 	vldr	d7, [r7, #8]
 8002188:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
			CM_AnkleJoint.IMU_Data.Struct.ay = IMU_Data.Struct.ay;
 800218c:	4b36      	ldr	r3, [pc, #216]	; (8002268 <ProcessInputs+0x360>)
 800218e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002192:	4936      	ldr	r1, [pc, #216]	; (800226c <ProcessInputs+0x364>)
 8002194:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
			CM_AnkleJoint.IMU_Data.Struct.az = -IMU_Data.Struct.az;
 8002198:	4b33      	ldr	r3, [pc, #204]	; (8002268 <ProcessInputs+0x360>)
 800219a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800219e:	603a      	str	r2, [r7, #0]
 80021a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b31      	ldr	r3, [pc, #196]	; (800226c <ProcessInputs+0x364>)
 80021a8:	ed97 7b00 	vldr	d7, [r7]
 80021ac:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
			CM_AnkleJoint.IMU_Data.Struct.gx = -IMU_Data.Struct.gx;
 80021b0:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <ProcessInputs+0x360>)
 80021b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021b6:	4692      	mov	sl, r2
 80021b8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80021bc:	4b2b      	ldr	r3, [pc, #172]	; (800226c <ProcessInputs+0x364>)
 80021be:	e9c3 ab2e 	strd	sl, fp, [r3, #184]	; 0xb8
			CM_AnkleJoint.IMU_Data.Struct.gy = IMU_Data.Struct.gy;
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <ProcessInputs+0x360>)
 80021c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80021c8:	4928      	ldr	r1, [pc, #160]	; (800226c <ProcessInputs+0x364>)
 80021ca:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			CM_AnkleJoint.IMU_Data.Struct.gz = -IMU_Data.Struct.gz;
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <ProcessInputs+0x360>)
 80021d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d4:	4690      	mov	r8, r2
 80021d6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <ProcessInputs+0x364>)
 80021dc:	e9c3 8932 	strd	r8, r9, [r3, #200]	; 0xc8
 80021e0:	e010      	b.n	8002204 <ProcessInputs+0x2fc>
		}
		else if(Device.Side == Right)
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <ProcessInputs+0x35c>)
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d10c      	bne.n	8002204 <ProcessInputs+0x2fc>
			memcpy(&CM_AnkleJoint.IMU_Data, &IMU_Data, sizeof(MPU925x_IMU_Data_t));
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <ProcessInputs+0x364>)
 80021ec:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <ProcessInputs+0x360>)
 80021ee:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80021f2:	4615      	mov	r5, r2
 80021f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		CM_footSpeed = CM_AnkleJoint.MotorReadData.speed + CM_AnkleJoint.IMU_Data.Struct.gz;
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <ProcessInputs+0x364>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f941 	bl	8000490 <__aeabi_f2d>
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <ProcessInputs+0x364>)
 8002210:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8002214:	f7fd ffde 	bl	80001d4 <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f7fe fba0 	bl	8000964 <__aeabi_d2f>
 8002224:	4603      	mov	r3, r0
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <ProcessInputs+0x368>)
 8002228:	6013      	str	r3, [r2, #0]
	}

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <ProcessInputs+0x35c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b02      	cmp	r3, #2
//		CM_KneeJoint.IMU_Data.pitch = pitch * RAD_TO_DEG;
//		CM_KneeJoint.IMU_Data.roll = roll * RAD_TO_DEG;
//
//		CM_hipAngle = CM_KneeJoint.MotorReadData.speed - CM_KneeJoint.IMU_Data.pitch;
	}
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800223a:	bf00      	nop
 800223c:	f3af 8000 	nop.w
 8002240:	f5c28f5c 	.word	0xf5c28f5c
 8002244:	3ffa5c28 	.word	0x3ffa5c28
 8002248:	d6388659 	.word	0xd6388659
 800224c:	3fe66dc5 	.word	0x3fe66dc5
 8002250:	8e219653 	.word	0x8e219653
 8002254:	3f8b7175 	.word	0x3f8b7175
 8002258:	ab367a10 	.word	0xab367a10
 800225c:	3f9b573e 	.word	0x3f9b573e
 8002260:	20000288 	.word	0x20000288
 8002264:	200000d8 	.word	0x200000d8
 8002268:	200000a8 	.word	0x200000a8
 800226c:	200000e0 	.word	0x200000e0
 8002270:	200002c4 	.word	0x200002c4

08002274 <RunStateMachine>:

static void RunStateMachine(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
	static StateMachine_e state = EarlyStance;
	switch(state)
 8002278:	4b77      	ldr	r3, [pc, #476]	; (8002458 <RunStateMachine+0x1e4>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b05      	cmp	r3, #5
 800227e:	f200 81e0 	bhi.w	8002642 <RunStateMachine+0x3ce>
 8002282:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <RunStateMachine+0x14>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	080022a1 	.word	0x080022a1
 800228c:	08002335 	.word	0x08002335
 8002290:	080023c3 	.word	0x080023c3
 8002294:	08002489 	.word	0x08002489
 8002298:	08002515 	.word	0x08002515
 800229c:	080025a5 	.word	0x080025a5
	{
	case EarlyStance:
		CM_state_angles = -10;
 80022a0:	4b6e      	ldr	r3, [pc, #440]	; (800245c <RunStateMachine+0x1e8>)
 80022a2:	22f6      	movs	r2, #246	; 0xf6
 80022a4:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1100; //??
 80022a6:	4b6e      	ldr	r3, [pc, #440]	; (8002460 <RunStateMachine+0x1ec>)
 80022a8:	f240 424c 	movw	r2, #1100	; 0x44c
 80022ac:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -30;
 80022ae:	4b6d      	ldr	r3, [pc, #436]	; (8002464 <RunStateMachine+0x1f0>)
 80022b0:	22e2      	movs	r2, #226	; 0xe2
 80022b2:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -200;
 80022b4:	4b6c      	ldr	r3, [pc, #432]	; (8002468 <RunStateMachine+0x1f4>)
 80022b6:	f64f 7238 	movw	r2, #65336	; 0xff38
 80022ba:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 80022bc:	4b6b      	ldr	r3, [pc, #428]	; (800246c <RunStateMachine+0x1f8>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d027      	beq.n	8002314 <RunStateMachine+0xa0>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80022c4:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <RunStateMachine+0x1fc>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <RunStateMachine+0x60>
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <RunStateMachine+0x1fc>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d10b      	bne.n	80022ec <RunStateMachine+0x78>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.EarlyStanceCtrl.position;
 80022d4:	4b67      	ldr	r3, [pc, #412]	; (8002474 <RunStateMachine+0x200>)
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	4a66      	ldr	r2, [pc, #408]	; (8002474 <RunStateMachine+0x200>)
 80022da:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.EarlyStanceCtrl.kd;
 80022dc:	4b65      	ldr	r3, [pc, #404]	; (8002474 <RunStateMachine+0x200>)
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	4a64      	ldr	r2, [pc, #400]	; (8002474 <RunStateMachine+0x200>)
 80022e2:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.EarlyStanceCtrl.kp;
 80022e4:	4b63      	ldr	r3, [pc, #396]	; (8002474 <RunStateMachine+0x200>)
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	4a62      	ldr	r2, [pc, #392]	; (8002474 <RunStateMachine+0x200>)
 80022ea:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 80022ec:	4b60      	ldr	r3, [pc, #384]	; (8002470 <RunStateMachine+0x1fc>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d003      	beq.n	80022fc <RunStateMachine+0x88>
 80022f4:	4b5e      	ldr	r3, [pc, #376]	; (8002470 <RunStateMachine+0x1fc>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d10b      	bne.n	8002314 <RunStateMachine+0xa0>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.EarlyStanceCtrl.position;
 80022fc:	4b5e      	ldr	r3, [pc, #376]	; (8002478 <RunStateMachine+0x204>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	4a5d      	ldr	r2, [pc, #372]	; (8002478 <RunStateMachine+0x204>)
 8002302:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.EarlyStanceCtrl.kd;
 8002304:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <RunStateMachine+0x204>)
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <RunStateMachine+0x204>)
 800230a:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.EarlyStanceCtrl.kp;
 800230c:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <RunStateMachine+0x204>)
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	4a59      	ldr	r2, [pc, #356]	; (8002478 <RunStateMachine+0x204>)
 8002312:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_footSpeed > CM_footSpeedThreshold)
 8002314:	4b59      	ldr	r3, [pc, #356]	; (800247c <RunStateMachine+0x208>)
 8002316:	ed93 7a00 	vldr	s14, [r3]
 800231a:	4b59      	ldr	r3, [pc, #356]	; (8002480 <RunStateMachine+0x20c>)
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002328:	dc00      	bgt.n	800232c <RunStateMachine+0xb8>
			state = MidStance;

		break;
 800232a:	e18a      	b.n	8002642 <RunStateMachine+0x3ce>
			state = MidStance;
 800232c:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <RunStateMachine+0x1e4>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
		break;
 8002332:	e186      	b.n	8002642 <RunStateMachine+0x3ce>

	case MidStance:
		CM_state_angles = 5;
 8002334:	4b49      	ldr	r3, [pc, #292]	; (800245c <RunStateMachine+0x1e8>)
 8002336:	2205      	movs	r2, #5
 8002338:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1200;
 800233a:	4b49      	ldr	r3, [pc, #292]	; (8002460 <RunStateMachine+0x1ec>)
 800233c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002340:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -20;
 8002342:	4b48      	ldr	r3, [pc, #288]	; (8002464 <RunStateMachine+0x1f0>)
 8002344:	22ec      	movs	r2, #236	; 0xec
 8002346:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -120;
 8002348:	4b47      	ldr	r3, [pc, #284]	; (8002468 <RunStateMachine+0x1f4>)
 800234a:	f64f 7288 	movw	r2, #65416	; 0xff88
 800234e:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 8002350:	4b46      	ldr	r3, [pc, #280]	; (800246c <RunStateMachine+0x1f8>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d027      	beq.n	80023a8 <RunStateMachine+0x134>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002358:	4b45      	ldr	r3, [pc, #276]	; (8002470 <RunStateMachine+0x1fc>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <RunStateMachine+0xf4>
 8002360:	4b43      	ldr	r3, [pc, #268]	; (8002470 <RunStateMachine+0x1fc>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10b      	bne.n	8002380 <RunStateMachine+0x10c>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.MidStanceCtrl.position;
 8002368:	4b42      	ldr	r3, [pc, #264]	; (8002474 <RunStateMachine+0x200>)
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	4a41      	ldr	r2, [pc, #260]	; (8002474 <RunStateMachine+0x200>)
 800236e:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.MidStanceCtrl.kd;
 8002370:	4b40      	ldr	r3, [pc, #256]	; (8002474 <RunStateMachine+0x200>)
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	4a3f      	ldr	r2, [pc, #252]	; (8002474 <RunStateMachine+0x200>)
 8002376:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.MidStanceCtrl.kp;
 8002378:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <RunStateMachine+0x200>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	4a3d      	ldr	r2, [pc, #244]	; (8002474 <RunStateMachine+0x200>)
 800237e:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <RunStateMachine+0x1fc>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d003      	beq.n	8002390 <RunStateMachine+0x11c>
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <RunStateMachine+0x1fc>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10b      	bne.n	80023a8 <RunStateMachine+0x134>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.MidStanceCtrl.position;
 8002390:	4b39      	ldr	r3, [pc, #228]	; (8002478 <RunStateMachine+0x204>)
 8002392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002394:	4a38      	ldr	r2, [pc, #224]	; (8002478 <RunStateMachine+0x204>)
 8002396:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.MidStanceCtrl.kd;
 8002398:	4b37      	ldr	r3, [pc, #220]	; (8002478 <RunStateMachine+0x204>)
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	4a36      	ldr	r2, [pc, #216]	; (8002478 <RunStateMachine+0x204>)
 800239e:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.MidStanceCtrl.kp;
 80023a0:	4b35      	ldr	r3, [pc, #212]	; (8002478 <RunStateMachine+0x204>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	4a34      	ldr	r2, [pc, #208]	; (8002478 <RunStateMachine+0x204>)
 80023a6:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_AnkleJoint.MotorReadData.speed < 0)
 80023a8:	4b32      	ldr	r3, [pc, #200]	; (8002474 <RunStateMachine+0x200>)
 80023aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	d400      	bmi.n	80023ba <RunStateMachine+0x146>
			state = LateStance;

		break;
 80023b8:	e143      	b.n	8002642 <RunStateMachine+0x3ce>
			state = LateStance;
 80023ba:	4b27      	ldr	r3, [pc, #156]	; (8002458 <RunStateMachine+0x1e4>)
 80023bc:	2202      	movs	r2, #2
 80023be:	701a      	strb	r2, [r3, #0]
		break;
 80023c0:	e13f      	b.n	8002642 <RunStateMachine+0x3ce>

	case LateStance:
		CM_state_angles = 20;
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <RunStateMachine+0x1e8>)
 80023c4:	2214      	movs	r2, #20
 80023c6:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1300;
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <RunStateMachine+0x1ec>)
 80023ca:	f240 5214 	movw	r2, #1300	; 0x514
 80023ce:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -10;
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <RunStateMachine+0x1f0>)
 80023d2:	22f6      	movs	r2, #246	; 0xf6
 80023d4:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -40;
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <RunStateMachine+0x1f4>)
 80023d8:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 80023dc:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <RunStateMachine+0x1f8>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d027      	beq.n	8002436 <RunStateMachine+0x1c2>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <RunStateMachine+0x1fc>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <RunStateMachine+0x182>
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <RunStateMachine+0x1fc>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d10b      	bne.n	800240e <RunStateMachine+0x19a>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.LateStanceCtrl.position;
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <RunStateMachine+0x200>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <RunStateMachine+0x200>)
 80023fc:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.LateStanceCtrl.kd;
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <RunStateMachine+0x200>)
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <RunStateMachine+0x200>)
 8002404:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.LateStanceCtrl.kp;
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <RunStateMachine+0x200>)
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <RunStateMachine+0x200>)
 800240c:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <RunStateMachine+0x1fc>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d003      	beq.n	800241e <RunStateMachine+0x1aa>
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <RunStateMachine+0x1fc>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d10b      	bne.n	8002436 <RunStateMachine+0x1c2>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.LateStanceCtrl.position;
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <RunStateMachine+0x204>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a15      	ldr	r2, [pc, #84]	; (8002478 <RunStateMachine+0x204>)
 8002424:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.LateStanceCtrl.kd;
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <RunStateMachine+0x204>)
 8002428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <RunStateMachine+0x204>)
 800242c:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.LateStanceCtrl.kp;
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <RunStateMachine+0x204>)
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <RunStateMachine+0x204>)
 8002434:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_LoadCell.Filtered.bot[0] > CM_LoadCell.outOfStanceThreshold)
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <RunStateMachine+0x210>)
 8002438:	ed93 7a06 	vldr	s14, [r3, #24]
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <RunStateMachine+0x210>)
 800243e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	dc00      	bgt.n	800244e <RunStateMachine+0x1da>
			state = SwingFlexion;

		break;
 800244c:	e0f9      	b.n	8002642 <RunStateMachine+0x3ce>
			state = SwingFlexion;
 800244e:	4b02      	ldr	r3, [pc, #8]	; (8002458 <RunStateMachine+0x1e4>)
 8002450:	2203      	movs	r2, #3
 8002452:	701a      	strb	r2, [r3, #0]
		break;
 8002454:	e0f5      	b.n	8002642 <RunStateMachine+0x3ce>
 8002456:	bf00      	nop
 8002458:	200002da 	.word	0x200002da
 800245c:	200001bc 	.word	0x200001bc
 8002460:	200002c0 	.word	0x200002c0
 8002464:	200001bd 	.word	0x200001bd
 8002468:	200001be 	.word	0x200001be
 800246c:	200000da 	.word	0x200000da
 8002470:	200000d8 	.word	0x200000d8
 8002474:	200000e0 	.word	0x200000e0
 8002478:	200001c0 	.word	0x200001c0
 800247c:	200002c4 	.word	0x200002c4
 8002480:	200001b8 	.word	0x200001b8
 8002484:	20000288 	.word	0x20000288

	case SwingFlexion:
		CM_state_angles = 35;
 8002488:	4b70      	ldr	r3, [pc, #448]	; (800264c <RunStateMachine+0x3d8>)
 800248a:	2223      	movs	r2, #35	; 0x23
 800248c:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1400;
 800248e:	4b70      	ldr	r3, [pc, #448]	; (8002650 <RunStateMachine+0x3dc>)
 8002490:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002494:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 0;
 8002496:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <RunStateMachine+0x3e0>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 40;
 800249c:	4b6e      	ldr	r3, [pc, #440]	; (8002658 <RunStateMachine+0x3e4>)
 800249e:	2228      	movs	r2, #40	; 0x28
 80024a0:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 80024a2:	4b6e      	ldr	r3, [pc, #440]	; (800265c <RunStateMachine+0x3e8>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d027      	beq.n	80024fa <RunStateMachine+0x286>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <RunStateMachine+0x3ec>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <RunStateMachine+0x246>
 80024b2:	4b6b      	ldr	r3, [pc, #428]	; (8002660 <RunStateMachine+0x3ec>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d10b      	bne.n	80024d2 <RunStateMachine+0x25e>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.SwingFlexCtrl.position;
 80024ba:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <RunStateMachine+0x3f0>)
 80024bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024be:	4a69      	ldr	r2, [pc, #420]	; (8002664 <RunStateMachine+0x3f0>)
 80024c0:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.SwingFlexCtrl.kd;
 80024c2:	4b68      	ldr	r3, [pc, #416]	; (8002664 <RunStateMachine+0x3f0>)
 80024c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c6:	4a67      	ldr	r2, [pc, #412]	; (8002664 <RunStateMachine+0x3f0>)
 80024c8:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.SwingFlexCtrl.kp;
 80024ca:	4b66      	ldr	r3, [pc, #408]	; (8002664 <RunStateMachine+0x3f0>)
 80024cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ce:	4a65      	ldr	r2, [pc, #404]	; (8002664 <RunStateMachine+0x3f0>)
 80024d0:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 80024d2:	4b63      	ldr	r3, [pc, #396]	; (8002660 <RunStateMachine+0x3ec>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d003      	beq.n	80024e2 <RunStateMachine+0x26e>
 80024da:	4b61      	ldr	r3, [pc, #388]	; (8002660 <RunStateMachine+0x3ec>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d10b      	bne.n	80024fa <RunStateMachine+0x286>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.SwingFlexCtrl.position;
 80024e2:	4b61      	ldr	r3, [pc, #388]	; (8002668 <RunStateMachine+0x3f4>)
 80024e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e6:	4a60      	ldr	r2, [pc, #384]	; (8002668 <RunStateMachine+0x3f4>)
 80024e8:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.SwingFlexCtrl.kd;
 80024ea:	4b5f      	ldr	r3, [pc, #380]	; (8002668 <RunStateMachine+0x3f4>)
 80024ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ee:	4a5e      	ldr	r2, [pc, #376]	; (8002668 <RunStateMachine+0x3f4>)
 80024f0:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.SwingFlexCtrl.kp;
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <RunStateMachine+0x3f4>)
 80024f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f6:	4a5c      	ldr	r2, [pc, #368]	; (8002668 <RunStateMachine+0x3f4>)
 80024f8:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_KneeJoint.MotorReadData.speed < 0)
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <RunStateMachine+0x3f4>)
 80024fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002508:	d400      	bmi.n	800250c <RunStateMachine+0x298>
			state = SwingExtension;

		break;
 800250a:	e09a      	b.n	8002642 <RunStateMachine+0x3ce>
			state = SwingExtension;
 800250c:	4b57      	ldr	r3, [pc, #348]	; (800266c <RunStateMachine+0x3f8>)
 800250e:	2204      	movs	r2, #4
 8002510:	701a      	strb	r2, [r3, #0]
		break;
 8002512:	e096      	b.n	8002642 <RunStateMachine+0x3ce>

	case SwingExtension:
		CM_state_angles = 50;
 8002514:	4b4d      	ldr	r3, [pc, #308]	; (800264c <RunStateMachine+0x3d8>)
 8002516:	2232      	movs	r2, #50	; 0x32
 8002518:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1500;
 800251a:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <RunStateMachine+0x3dc>)
 800251c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002520:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 10;
 8002522:	4b4c      	ldr	r3, [pc, #304]	; (8002654 <RunStateMachine+0x3e0>)
 8002524:	220a      	movs	r2, #10
 8002526:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 120;
 8002528:	4b4b      	ldr	r3, [pc, #300]	; (8002658 <RunStateMachine+0x3e4>)
 800252a:	2278      	movs	r2, #120	; 0x78
 800252c:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 800252e:	4b4b      	ldr	r3, [pc, #300]	; (800265c <RunStateMachine+0x3e8>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d029      	beq.n	800258a <RunStateMachine+0x316>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002536:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <RunStateMachine+0x3ec>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <RunStateMachine+0x2d2>
 800253e:	4b48      	ldr	r3, [pc, #288]	; (8002660 <RunStateMachine+0x3ec>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10c      	bne.n	8002560 <RunStateMachine+0x2ec>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.SwingExtCtrl.position;
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <RunStateMachine+0x3f0>)
 8002548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254c:	4a45      	ldr	r2, [pc, #276]	; (8002664 <RunStateMachine+0x3f0>)
 800254e:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.SwingExtCtrl.kd;
 8002550:	4b44      	ldr	r3, [pc, #272]	; (8002664 <RunStateMachine+0x3f0>)
 8002552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002554:	4a43      	ldr	r2, [pc, #268]	; (8002664 <RunStateMachine+0x3f0>)
 8002556:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.SwingExtCtrl.kp;
 8002558:	4b42      	ldr	r3, [pc, #264]	; (8002664 <RunStateMachine+0x3f0>)
 800255a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800255c:	4a41      	ldr	r2, [pc, #260]	; (8002664 <RunStateMachine+0x3f0>)
 800255e:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002560:	4b3f      	ldr	r3, [pc, #252]	; (8002660 <RunStateMachine+0x3ec>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d003      	beq.n	8002570 <RunStateMachine+0x2fc>
 8002568:	4b3d      	ldr	r3, [pc, #244]	; (8002660 <RunStateMachine+0x3ec>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10c      	bne.n	800258a <RunStateMachine+0x316>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.SwingExtCtrl.position;
 8002570:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <RunStateMachine+0x3f4>)
 8002572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002576:	4a3c      	ldr	r2, [pc, #240]	; (8002668 <RunStateMachine+0x3f4>)
 8002578:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.SwingExtCtrl.kd;
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <RunStateMachine+0x3f4>)
 800257c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800257e:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <RunStateMachine+0x3f4>)
 8002580:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.SwingExtCtrl.kp;
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <RunStateMachine+0x3f4>)
 8002584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002586:	4a38      	ldr	r2, [pc, #224]	; (8002668 <RunStateMachine+0x3f4>)
 8002588:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_footSpeed < 0)
 800258a:	4b39      	ldr	r3, [pc, #228]	; (8002670 <RunStateMachine+0x3fc>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d400      	bmi.n	800259c <RunStateMachine+0x328>
			state = SwingDescension;

		break;
 800259a:	e052      	b.n	8002642 <RunStateMachine+0x3ce>
			state = SwingDescension;
 800259c:	4b33      	ldr	r3, [pc, #204]	; (800266c <RunStateMachine+0x3f8>)
 800259e:	2205      	movs	r2, #5
 80025a0:	701a      	strb	r2, [r3, #0]
		break;
 80025a2:	e04e      	b.n	8002642 <RunStateMachine+0x3ce>

	case SwingDescension:
		CM_state_angles = 65;
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <RunStateMachine+0x3d8>)
 80025a6:	2241      	movs	r2, #65	; 0x41
 80025a8:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1600;
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <RunStateMachine+0x3dc>)
 80025ac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80025b0:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 20;
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <RunStateMachine+0x3e0>)
 80025b4:	2214      	movs	r2, #20
 80025b6:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 200;
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <RunStateMachine+0x3e4>)
 80025ba:	22c8      	movs	r2, #200	; 0xc8
 80025bc:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 80025be:	4b27      	ldr	r3, [pc, #156]	; (800265c <RunStateMachine+0x3e8>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d02d      	beq.n	8002622 <RunStateMachine+0x3ae>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <RunStateMachine+0x3ec>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <RunStateMachine+0x362>
 80025ce:	4b24      	ldr	r3, [pc, #144]	; (8002660 <RunStateMachine+0x3ec>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d10e      	bne.n	80025f4 <RunStateMachine+0x380>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.SwingDescCtrl.position;
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <RunStateMachine+0x3f0>)
 80025d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025dc:	4a21      	ldr	r2, [pc, #132]	; (8002664 <RunStateMachine+0x3f0>)
 80025de:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.SwingDescCtrl.kd;
 80025e0:	4b20      	ldr	r3, [pc, #128]	; (8002664 <RunStateMachine+0x3f0>)
 80025e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025e6:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <RunStateMachine+0x3f0>)
 80025e8:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.SwingDescCtrl.kp;
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <RunStateMachine+0x3f0>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <RunStateMachine+0x3f0>)
 80025f2:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <RunStateMachine+0x3ec>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d003      	beq.n	8002604 <RunStateMachine+0x390>
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <RunStateMachine+0x3ec>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d10e      	bne.n	8002622 <RunStateMachine+0x3ae>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.SwingDescCtrl.position;
 8002604:	4b18      	ldr	r3, [pc, #96]	; (8002668 <RunStateMachine+0x3f4>)
 8002606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <RunStateMachine+0x3f4>)
 800260c:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.SwingDescCtrl.kd;
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <RunStateMachine+0x3f4>)
 8002610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002614:	4a14      	ldr	r2, [pc, #80]	; (8002668 <RunStateMachine+0x3f4>)
 8002616:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.SwingDescCtrl.kp;
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <RunStateMachine+0x3f4>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <RunStateMachine+0x3f4>)
 8002620:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_LoadCell.Filtered.bot[0] < CM_LoadCell.intoStanceThreshold)
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <RunStateMachine+0x400>)
 8002624:	ed93 7a06 	vldr	s14, [r3, #24]
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <RunStateMachine+0x400>)
 800262a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800262e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002636:	d400      	bmi.n	800263a <RunStateMachine+0x3c6>
			state = EarlyStance;

		break;
 8002638:	e002      	b.n	8002640 <RunStateMachine+0x3cc>
			state = EarlyStance;
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <RunStateMachine+0x3f8>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
		break;
 8002640:	bf00      	nop
	}
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	200001bc 	.word	0x200001bc
 8002650:	200002c0 	.word	0x200002c0
 8002654:	200001bd 	.word	0x200001bd
 8002658:	200001be 	.word	0x200001be
 800265c:	200000da 	.word	0x200000da
 8002660:	200000d8 	.word	0x200000d8
 8002664:	200000e0 	.word	0x200000e0
 8002668:	200001c0 	.word	0x200001c0
 800266c:	200002da 	.word	0x200002da
 8002670:	200002c4 	.word	0x200002c4
 8002674:	20000288 	.word	0x20000288

08002678 <ServiceMotor>:

static void ServiceMotor(DeviceIndex_e deviceIndex)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
	static uint8_t firstCall = 1;
	if(firstCall)
 8002682:	4b8f      	ldr	r3, [pc, #572]	; (80028c0 <ServiceMotor+0x248>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <ServiceMotor+0x1e>
	{
		firstCall = 0;
 800268a:	4b8d      	ldr	r3, [pc, #564]	; (80028c0 <ServiceMotor+0x248>)
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
		ActivateLED(Green);
 8002690:	2001      	movs	r0, #1
 8002692:	f000 f927 	bl	80028e4 <ActivateLED>
	}

	if(deviceIndex == AnkleIndex)
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 808e 	bne.w	80027ba <ServiceMotor+0x142>
	{
		if(CM_AnkleJoint.MotorReadData.error)
 800269e:	4b89      	ldr	r3, [pc, #548]	; (80028c4 <ServiceMotor+0x24c>)
 80026a0:	7c1b      	ldrb	r3, [r3, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <ServiceMotor+0x34>
			ErrorHandler(AnkleMotorError);
 80026a6:	2002      	movs	r0, #2
 80026a8:	f7ff fb4a 	bl	8001d40 <ErrorHandler>

		CM_AnkleJoint.MotorReadData.position = -MotorRxData[deviceIndex].position / ANKLE_GEAR_RATIO * RAD_TO_DEG - ANKLE_POSITION_OFFSET_FROM_PLANARFLEXION_BUMPER;
 80026ac:	79fa      	ldrb	r2, [r7, #7]
 80026ae:	4986      	ldr	r1, [pc, #536]	; (80028c8 <ServiceMotor+0x250>)
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3304      	adds	r3, #4
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	eeb1 7a67 	vneg.f32	s14, s15
 80026c4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80026c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026cc:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80028cc <ServiceMotor+0x254>
 80026d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d4:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80026d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026dc:	4b79      	ldr	r3, [pc, #484]	; (80028c4 <ServiceMotor+0x24c>)
 80026de:	edc3 7a01 	vstr	s15, [r3, #4]
		CM_AnkleJoint.MotorReadData.speed = -MotorRxData[deviceIndex].speed / ANKLE_GEAR_RATIO * RAD_TO_DEG;
 80026e2:	79fa      	ldrb	r2, [r7, #7]
 80026e4:	4978      	ldr	r1, [pc, #480]	; (80028c8 <ServiceMotor+0x250>)
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3308      	adds	r3, #8
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	eeb1 7a67 	vneg.f32	s14, s15
 80026fa:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80026fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002702:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80028cc <ServiceMotor+0x254>
 8002706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270a:	4b6e      	ldr	r3, [pc, #440]	; (80028c4 <ServiceMotor+0x24c>)
 800270c:	edc3 7a02 	vstr	s15, [r3, #8]
		CM_AnkleJoint.MotorReadData.torque = -MotorRxData[deviceIndex].torque * ANKLE_GEAR_RATIO ;
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	496d      	ldr	r1, [pc, #436]	; (80028c8 <ServiceMotor+0x250>)
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	330c      	adds	r3, #12
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	eef1 7a67 	vneg.f32	s15, s15
 8002728:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800272c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002730:	4b64      	ldr	r3, [pc, #400]	; (80028c4 <ServiceMotor+0x24c>)
 8002732:	edc3 7a03 	vstr	s15, [r3, #12]

		uint32_t txMailbox;
		if((testProgram == None) || (testProgram == ImpedanceControl))
 8002736:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <ServiceMotor+0x258>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <ServiceMotor+0xce>
 800273e:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <ServiceMotor+0x258>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d12a      	bne.n	800279c <ServiceMotor+0x124>
		{
			MotorTxData.position = (-CM_AnkleJoint.ProsCtrl.position - ANKLE_POSITION_OFFSET_FROM_PLANARFLEXION_BUMPER) * ANKLE_GEAR_RATIO * DEG_TO_RAD;
 8002746:	4b5f      	ldr	r3, [pc, #380]	; (80028c4 <ServiceMotor+0x24c>)
 8002748:	edd3 7a07 	vldr	s15, [r3, #28]
 800274c:	eef1 7a67 	vneg.f32	s15, s15
 8002750:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002754:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002758:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800275c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002760:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80028d4 <ServiceMotor+0x25c>
 8002764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002768:	4b5b      	ldr	r3, [pc, #364]	; (80028d8 <ServiceMotor+0x260>)
 800276a:	edc3 7a02 	vstr	s15, [r3, #8]
			MotorTxData.kd = CM_AnkleJoint.ProsCtrl.kd;
 800276e:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <ServiceMotor+0x24c>)
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	4a59      	ldr	r2, [pc, #356]	; (80028d8 <ServiceMotor+0x260>)
 8002774:	6013      	str	r3, [r2, #0]
			MotorTxData.kp = CM_AnkleJoint.ProsCtrl.kp;
 8002776:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <ServiceMotor+0x24c>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	4a57      	ldr	r2, [pc, #348]	; (80028d8 <ServiceMotor+0x260>)
 800277c:	6053      	str	r3, [r2, #4]

			if(AKxx_x_WriteMotor(deviceIndex, &MotorTxData, &txMailbox))
 800277e:	f107 020c 	add.w	r2, r7, #12
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	4954      	ldr	r1, [pc, #336]	; (80028d8 <ServiceMotor+0x260>)
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fbfe 	bl	8002f88 <AKxx_x_WriteMotor>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8092 	beq.w	80028b8 <ServiceMotor+0x240>
				ErrorHandler(AnkleMotorError);
 8002794:	2002      	movs	r0, #2
 8002796:	f7ff fad3 	bl	8001d40 <ErrorHandler>
			if(AKxx_x_WriteMotor(deviceIndex, &MotorTxData, &txMailbox))
 800279a:	e08d      	b.n	80028b8 <ServiceMotor+0x240>
		}
		else
			if(AKxx_x_EnterMotorCtrlMode(deviceIndex, &txMailbox))
 800279c:	f107 020c 	add.w	r2, r7, #12
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fc0f 	bl	8002fc8 <AKxx_x_EnterMotorCtrlMode>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8083 	beq.w	80028b8 <ServiceMotor+0x240>
				ErrorHandler(AnkleMotorError);
 80027b2:	2002      	movs	r0, #2
 80027b4:	f7ff fac4 	bl	8001d40 <ErrorHandler>
		}
		else
			if(AKxx_x_EnterMotorCtrlMode(deviceIndex, &txMailbox))
				ErrorHandler(KneeMotorError);
	}
}
 80027b8:	e07e      	b.n	80028b8 <ServiceMotor+0x240>
	else if(deviceIndex == KneeIndex)
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d17b      	bne.n	80028b8 <ServiceMotor+0x240>
		if(CM_KneeJoint.MotorReadData.error)
 80027c0:	4b46      	ldr	r3, [pc, #280]	; (80028dc <ServiceMotor+0x264>)
 80027c2:	7c1b      	ldrb	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <ServiceMotor+0x156>
			ErrorHandler(KneeMotorError);
 80027c8:	2005      	movs	r0, #5
 80027ca:	f7ff fab9 	bl	8001d40 <ErrorHandler>
		CM_KneeJoint.MotorReadData.position = MotorRxData[deviceIndex].position / KNEE_GEAR_RATIO * RAD_TO_DEG - KNEE_POSITION_OFFSET_FROM_EXTENSION_BUMPER;
 80027ce:	79fa      	ldrb	r2, [r7, #7]
 80027d0:	493d      	ldr	r1, [pc, #244]	; (80028c8 <ServiceMotor+0x250>)
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	3304      	adds	r3, #4
 80027de:	ed93 7a00 	vldr	s14, [r3]
 80027e2:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80028e0 <ServiceMotor+0x268>
 80027e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027ea:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80028cc <ServiceMotor+0x254>
 80027ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f2:	4b3a      	ldr	r3, [pc, #232]	; (80028dc <ServiceMotor+0x264>)
 80027f4:	edc3 7a01 	vstr	s15, [r3, #4]
		CM_KneeJoint.MotorReadData.speed = MotorRxData[deviceIndex].speed / KNEE_GEAR_RATIO * RAD_TO_DEG;
 80027f8:	79fa      	ldrb	r2, [r7, #7]
 80027fa:	4933      	ldr	r1, [pc, #204]	; (80028c8 <ServiceMotor+0x250>)
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	3308      	adds	r3, #8
 8002808:	ed93 7a00 	vldr	s14, [r3]
 800280c:	eddf 6a34 	vldr	s13, [pc, #208]	; 80028e0 <ServiceMotor+0x268>
 8002810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002814:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80028cc <ServiceMotor+0x254>
 8002818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800281c:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <ServiceMotor+0x264>)
 800281e:	edc3 7a02 	vstr	s15, [r3, #8]
		CM_KneeJoint.MotorReadData.torque = MotorRxData[deviceIndex].torque * KNEE_GEAR_RATIO ;
 8002822:	79fa      	ldrb	r2, [r7, #7]
 8002824:	4928      	ldr	r1, [pc, #160]	; (80028c8 <ServiceMotor+0x250>)
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	330c      	adds	r3, #12
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80028e0 <ServiceMotor+0x268>
 800283a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283e:	4b27      	ldr	r3, [pc, #156]	; (80028dc <ServiceMotor+0x264>)
 8002840:	edc3 7a03 	vstr	s15, [r3, #12]
		if((testProgram == None) || (testProgram == ImpedanceControl))
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <ServiceMotor+0x258>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <ServiceMotor+0x1dc>
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <ServiceMotor+0x258>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d123      	bne.n	800289c <ServiceMotor+0x224>
			MotorTxData.position = (CM_KneeJoint.ProsCtrl.position - KNEE_POSITION_OFFSET_FROM_EXTENSION_BUMPER) * KNEE_GEAR_RATIO * DEG_TO_RAD;
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <ServiceMotor+0x264>)
 8002856:	edd3 7a07 	vldr	s15, [r3, #28]
 800285a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80028e0 <ServiceMotor+0x268>
 800285e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002862:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80028d4 <ServiceMotor+0x25c>
 8002866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286a:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <ServiceMotor+0x260>)
 800286c:	edc3 7a02 	vstr	s15, [r3, #8]
			MotorTxData.kd = CM_KneeJoint.ProsCtrl.kd;
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <ServiceMotor+0x264>)
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <ServiceMotor+0x260>)
 8002876:	6013      	str	r3, [r2, #0]
			MotorTxData.kp = CM_KneeJoint.ProsCtrl.kp;
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <ServiceMotor+0x264>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <ServiceMotor+0x260>)
 800287e:	6053      	str	r3, [r2, #4]
			if(AKxx_x_WriteMotor(deviceIndex, &MotorTxData, &txMailbox))
 8002880:	f107 0208 	add.w	r2, r7, #8
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	4914      	ldr	r1, [pc, #80]	; (80028d8 <ServiceMotor+0x260>)
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fb7d 	bl	8002f88 <AKxx_x_WriteMotor>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d011      	beq.n	80028b8 <ServiceMotor+0x240>
				ErrorHandler(KneeMotorError);
 8002894:	2005      	movs	r0, #5
 8002896:	f7ff fa53 	bl	8001d40 <ErrorHandler>
			if(AKxx_x_WriteMotor(deviceIndex, &MotorTxData, &txMailbox))
 800289a:	e00d      	b.n	80028b8 <ServiceMotor+0x240>
			if(AKxx_x_EnterMotorCtrlMode(deviceIndex, &txMailbox))
 800289c:	f107 0208 	add.w	r2, r7, #8
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fb8f 	bl	8002fc8 <AKxx_x_EnterMotorCtrlMode>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <ServiceMotor+0x240>
				ErrorHandler(KneeMotorError);
 80028b0:	2005      	movs	r0, #5
 80028b2:	f7ff fa45 	bl	8001d40 <ErrorHandler>
}
 80028b6:	e7ff      	b.n	80028b8 <ServiceMotor+0x240>
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000001 	.word	0x20000001
 80028c4:	200000e0 	.word	0x200000e0
 80028c8:	20000068 	.word	0x20000068
 80028cc:	42652ebe 	.word	0x42652ebe
 80028d0:	200000da 	.word	0x200000da
 80028d4:	3c8efa4b 	.word	0x3c8efa4b
 80028d8:	20000090 	.word	0x20000090
 80028dc:	200001c0 	.word	0x200001c0
 80028e0:	408c0000 	.word	0x408c0000

080028e4 <ActivateLED>:

static void ActivateLED(LED_Color_e color)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
	if(color == Blue)
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10c      	bne.n	800290e <ActivateLED+0x2a>
	{
		LL_GPIO_ResetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80028f4:	2101      	movs	r1, #1
 80028f6:	4817      	ldr	r0, [pc, #92]	; (8002954 <ActivateLED+0x70>)
 80028f8:	f7ff f891 	bl	8001a1e <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80028fc:	2102      	movs	r1, #2
 80028fe:	4815      	ldr	r0, [pc, #84]	; (8002954 <ActivateLED+0x70>)
 8002900:	f7ff f87f 	bl	8001a02 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002904:	2104      	movs	r1, #4
 8002906:	4813      	ldr	r0, [pc, #76]	; (8002954 <ActivateLED+0x70>)
 8002908:	f7ff f87b 	bl	8001a02 <LL_GPIO_SetOutputPin>
	{
		LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
		LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
	}
}
 800290c:	e01e      	b.n	800294c <ActivateLED+0x68>
	else if(color == Green)
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d10c      	bne.n	800292e <ActivateLED+0x4a>
		LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8002914:	2101      	movs	r1, #1
 8002916:	480f      	ldr	r0, [pc, #60]	; (8002954 <ActivateLED+0x70>)
 8002918:	f7ff f873 	bl	8001a02 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800291c:	2102      	movs	r1, #2
 800291e:	480d      	ldr	r0, [pc, #52]	; (8002954 <ActivateLED+0x70>)
 8002920:	f7ff f87d 	bl	8001a1e <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002924:	2104      	movs	r1, #4
 8002926:	480b      	ldr	r0, [pc, #44]	; (8002954 <ActivateLED+0x70>)
 8002928:	f7ff f86b 	bl	8001a02 <LL_GPIO_SetOutputPin>
}
 800292c:	e00e      	b.n	800294c <ActivateLED+0x68>
	else if(color == Red)
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d10b      	bne.n	800294c <ActivateLED+0x68>
		LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8002934:	2101      	movs	r1, #1
 8002936:	4807      	ldr	r0, [pc, #28]	; (8002954 <ActivateLED+0x70>)
 8002938:	f7ff f863 	bl	8001a02 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800293c:	2102      	movs	r1, #2
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <ActivateLED+0x70>)
 8002940:	f7ff f85f 	bl	8001a02 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002944:	2104      	movs	r1, #4
 8002946:	4803      	ldr	r0, [pc, #12]	; (8002954 <ActivateLED+0x70>)
 8002948:	f7ff f869 	bl	8001a1e <LL_GPIO_ResetOutputPin>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	48000400 	.word	0x48000400

08002958 <HAL_SPI_TxCpltCallback>:
/*******************************************************************************
* CALLBACKS
*******************************************************************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	imuReadStarted = 1;
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_SPI_TxCpltCallback+0x1c>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	200000db 	.word	0x200000db

08002978 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	imuDataReceived = 1;
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <HAL_SPI_RxCpltCallback+0x1c>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	200000dc 	.word	0x200000dc

08002998 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	AKxx_x_ReadData_t temp;
	if(AKxx_x_ReadMotor(CAN_RX_FIFO0, &temp))
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	4619      	mov	r1, r3
 80029a6:	2000      	movs	r0, #0
 80029a8:	f000 fae0 	bl	8002f6c <AKxx_x_ReadMotor>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		ErrorHandler(MotorReadError);
 80029b2:	2006      	movs	r0, #6
 80029b4:	f7ff f9c4 	bl	8001d40 <ErrorHandler>

	CM_AnkleJoint.motorDataReceived = 1;
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	memcpy(&MotorRxData[AnkleIndex], &temp, sizeof(AKxx_x_ReadData_t));
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80029c2:	461d      	mov	r5, r3
 80029c4:	f107 040c 	add.w	r4, r7, #12
 80029c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	602b      	str	r3, [r5, #0]
}
 80029d0:	bf00      	nop
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bdb0      	pop	{r4, r5, r7, pc}
 80029d8:	200000e0 	.word	0x200000e0
 80029dc:	20000068 	.word	0x20000068

080029e0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029e0:	b5b0      	push	{r4, r5, r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	AKxx_x_ReadData_t temp;
	if(AKxx_x_ReadMotor(CAN_RX_FIFO1, &temp))
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	4619      	mov	r1, r3
 80029ee:	2001      	movs	r0, #1
 80029f0:	f000 fabc 	bl	8002f6c <AKxx_x_ReadMotor>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		ErrorHandler(MotorReadError);
 80029fa:	2006      	movs	r0, #6
 80029fc:	f7ff f9a0 	bl	8001d40 <ErrorHandler>

	CM_KneeJoint.motorDataReceived = 1;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	memcpy(&MotorRxData[KneeIndex], &temp, sizeof(AKxx_x_ReadData_t));
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8002a0a:	f103 0414 	add.w	r4, r3, #20
 8002a0e:	f107 050c 	add.w	r5, r7, #12
 8002a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a16:	682b      	ldr	r3, [r5, #0]
 8002a18:	6023      	str	r3, [r4, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bdb0      	pop	{r4, r5, r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200001c0 	.word	0x200001c0
 8002a28:	20000068 	.word	0x20000068

08002a2c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a32:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <MX_SPI1_Init+0x78>)
 8002a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a62:	2220      	movs	r2, #32
 8002a64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a7a:	2207      	movs	r2, #7
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a86:	2208      	movs	r2, #8
 8002a88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a8a:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a8c:	f002 fc18 	bl	80052c0 <HAL_SPI_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a96:	f7fe ff7b 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	200002dc 	.word	0x200002dc
 8002aa4:	40013000 	.word	0x40013000

08002aa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_SPI_MspInit+0x8c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d130      	bne.n	8002b2c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_SPI_MspInit+0x90>)
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <HAL_SPI_MspInit+0x90>)
 8002ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_SPI_MspInit+0x90>)
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_SPI_MspInit+0x90>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <HAL_SPI_MspInit+0x90>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_SPI_MspInit+0x90>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8002afa:	23e0      	movs	r3, #224	; 0xe0
 8002afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b06:	2303      	movs	r3, #3
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b0a:	2305      	movs	r3, #5
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	4619      	mov	r1, r3
 8002b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b18:	f002 fa10 	bl	8004f3c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2102      	movs	r1, #2
 8002b20:	2023      	movs	r0, #35	; 0x23
 8002b22:	f002 f994 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b26:	2023      	movs	r0, #35	; 0x23
 8002b28:	f002 f9ad 	bl	8004e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	3728      	adds	r7, #40	; 0x28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40013000 	.word	0x40013000
 8002b38:	40021000 	.word	0x40021000

08002b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_MspInit+0x44>)
 8002b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b46:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <HAL_MspInit+0x44>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_MspInit+0x44>)
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_MspInit+0x44>)
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_MspInit+0x44>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_MspInit+0x44>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000

08002b84 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f043 0202 	orr.w	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	605a      	str	r2, [r3, #4]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d101      	bne.n	8002bbc <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bce:	e7fe      	b.n	8002bce <NMI_Handler+0x4>

08002bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <HardFault_Handler+0x4>

08002bd6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bda:	e7fe      	b.n	8002bda <MemManage_Handler+0x4>

08002bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <BusFault_Handler+0x4>

08002be2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be6:	e7fe      	b.n	8002be6 <UsageFault_Handler+0x4>

08002be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c16:	f001 f975 	bl	8003f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <CAN1_RX0_IRQHandler+0x10>)
 8002c26:	f001 fe11 	bl	800484c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	2000003c 	.word	0x2000003c

08002c34 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <CAN1_RX1_IRQHandler+0x10>)
 8002c3a:	f001 fe07 	bl	800484c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000003c 	.word	0x2000003c

08002c48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <TIM2_IRQHandler+0x10>)
 8002c4e:	f004 f805 	bl	8006c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000340 	.word	0x20000340

08002c5c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <SPI1_IRQHandler+0x10>)
 8002c62:	f003 fa6f 	bl	8006144 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200002dc 	.word	0x200002dc

08002c70 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0

/******************************************************************************
* USER ADDED LPTIM2_IRQHANDLER
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8002c74:	4806      	ldr	r0, [pc, #24]	; (8002c90 <LPTIM2_IRQHandler+0x20>)
 8002c76:	f7ff ff95 	bl	8002ba4 <LL_LPTIM_IsActiveFlag_ARRM>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d105      	bne.n	8002c8c <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <LPTIM2_IRQHandler+0x24>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 8002c86:	4802      	ldr	r0, [pc, #8]	; (8002c90 <LPTIM2_IRQHandler+0x20>)
 8002c88:	f7ff ff7c 	bl	8002b84 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40009400 	.word	0x40009400
 8002c94:	20000064 	.word	0x20000064

08002c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <SystemInit+0x20>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <SystemInit+0x20>)
 8002ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cc2:	f107 0310 	add.w	r3, r7, #16
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <MX_TIM2_Init+0x98>)
 8002cdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ce0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <MX_TIM2_Init+0x98>)
 8002ce4:	224f      	movs	r2, #79	; 0x4f
 8002ce6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <MX_TIM2_Init+0x98>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002cee:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <MX_TIM2_Init+0x98>)
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <MX_TIM2_Init+0x98>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <MX_TIM2_Init+0x98>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d02:	4814      	ldr	r0, [pc, #80]	; (8002d54 <MX_TIM2_Init+0x98>)
 8002d04:	f003 ff53 	bl	8006bae <HAL_TIM_Base_Init>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002d0e:	f7fe fe3f 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	480d      	ldr	r0, [pc, #52]	; (8002d54 <MX_TIM2_Init+0x98>)
 8002d20:	f004 f8bb 	bl	8006e9a <HAL_TIM_ConfigClockSource>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002d2a:	f7fe fe31 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4806      	ldr	r0, [pc, #24]	; (8002d54 <MX_TIM2_Init+0x98>)
 8002d3c:	f004 fadc 	bl	80072f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002d46:	f7fe fe23 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000340 	.word	0x20000340

08002d58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d113      	bne.n	8002d92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_TIM_Base_MspInit+0x44>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <HAL_TIM_Base_MspInit+0x44>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6593      	str	r3, [r2, #88]	; 0x58
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_TIM_Base_MspInit+0x44>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2102      	movs	r1, #2
 8002d86:	201c      	movs	r0, #28
 8002d88:	f002 f861 	bl	8004e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d8c:	201c      	movs	r0, #28
 8002d8e:	f002 f87a 	bl	8004e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000

08002da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002da4:	f7ff ff78 	bl	8002c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da8:	480c      	ldr	r0, [pc, #48]	; (8002ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8002daa:	490d      	ldr	r1, [pc, #52]	; (8002de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <LoopForever+0xe>)
  movs r3, #0
 8002dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db0:	e002      	b.n	8002db8 <LoopCopyDataInit>

08002db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db6:	3304      	adds	r3, #4

08002db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dbc:	d3f9      	bcc.n	8002db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dc0:	4c0a      	ldr	r4, [pc, #40]	; (8002dec <LoopForever+0x16>)
  movs r3, #0
 8002dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc4:	e001      	b.n	8002dca <LoopFillZerobss>

08002dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc8:	3204      	adds	r2, #4

08002dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dcc:	d3fb      	bcc.n	8002dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dce:	f004 fe09 	bl	80079e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dd2:	f7fe fc69 	bl	80016a8 <main>

08002dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002dd6:	e7fe      	b.n	8002dd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002dd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002de4:	08007a90 	.word	0x08007a90
  ldr r2, =_sbss
 8002de8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002dec:	200003d0 	.word	0x200003d0

08002df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002df0:	e7fe      	b.n	8002df0 <ADC1_2_IRQHandler>
	...

08002df4 <AKxx_x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

AKxx_x_Error_e AKxx_x_Init(uint8_t deviceIndex, AKxx_x_Init_t *Device_Init)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex >= AKXX_X_NUMBER_OF_DEVICES)
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d900      	bls.n	8002e08 <AKxx_x_Init+0x14>
		while(1);
 8002e06:	e7fe      	b.n	8002e06 <AKxx_x_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(AKxx_x_Init_t));
 8002e08:	79fa      	ldrb	r2, [r7, #7]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4a4e      	ldr	r2, [pc, #312]	; (8002f4c <AKxx_x_Init+0x158>)
 8002e14:	4413      	add	r3, r2
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	601a      	str	r2, [r3, #0]

	if(HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING))	// Polling is used for initialization
 8002e1c:	2112      	movs	r1, #18
 8002e1e:	484c      	ldr	r0, [pc, #304]	; (8002f50 <AKxx_x_Init+0x15c>)
 8002e20:	f001 fced 	bl	80047fe <HAL_CAN_DeactivateNotification>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <AKxx_x_Init+0x3a>
		return AKxx_x_InitError;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e089      	b.n	8002f42 <AKxx_x_Init+0x14e>

	uint32_t txMailbox;
	if(EnterMotorCtrlMode(deviceIndex, &txMailbox))
 8002e2e:	f107 021c 	add.w	r2, r7, #28
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fa36 	bl	80032a8 <EnterMotorCtrlMode>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <AKxx_x_Init+0x52>
		return AKxx_x_InitError;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e07d      	b.n	8002f42 <AKxx_x_Init+0x14e>
	if(AKxx_x_PollTxMessagePendingWith10msTimeout(txMailbox))
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f967 	bl	800311c <AKxx_x_PollTxMessagePendingWith10msTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <AKxx_x_Init+0x64>
		return AKxx_x_InitError;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e074      	b.n	8002f42 <AKxx_x_Init+0x14e>

	AKxx_x_ReadData_t RxData_Float;
	if(AKxx_x_PollMotorReadWith10msTimeout(&RxData_Float))
 8002e58:	f107 0308 	add.w	r3, r7, #8
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 f985 	bl	800316c <AKxx_x_PollMotorReadWith10msTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <AKxx_x_Init+0x78>
		return AKxx_x_InitError;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e06a      	b.n	8002f42 <AKxx_x_Init+0x14e>

	switch(Device[deviceIndex].InitVals.Motor)
 8002e6c:	79fa      	ldrb	r2, [r7, #7]
 8002e6e:	4937      	ldr	r1, [pc, #220]	; (8002f4c <AKxx_x_Init+0x158>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <AKxx_x_Init+0x94>
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d029      	beq.n	8002eda <AKxx_x_Init+0xe6>
 8002e86:	e051      	b.n	8002f2c <AKxx_x_Init+0x138>
	{
	case AK70_10:
		Device[deviceIndex].speedMax = 50.0f;
 8002e88:	79fa      	ldrb	r2, [r7, #7]
 8002e8a:	4930      	ldr	r1, [pc, #192]	; (8002f4c <AKxx_x_Init+0x158>)
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	440b      	add	r3, r1
 8002e96:	3304      	adds	r3, #4
 8002e98:	4a2e      	ldr	r2, [pc, #184]	; (8002f54 <AKxx_x_Init+0x160>)
 8002e9a:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].speedMin = -50.0f;
 8002e9c:	79fa      	ldrb	r2, [r7, #7]
 8002e9e:	492b      	ldr	r1, [pc, #172]	; (8002f4c <AKxx_x_Init+0x158>)
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3308      	adds	r3, #8
 8002eac:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <AKxx_x_Init+0x164>)
 8002eae:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMax = 25.0f;
 8002eb0:	79fa      	ldrb	r2, [r7, #7]
 8002eb2:	4926      	ldr	r1, [pc, #152]	; (8002f4c <AKxx_x_Init+0x158>)
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <AKxx_x_Init+0x168>)
 8002ec2:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMin = -25.0f;
 8002ec4:	79fa      	ldrb	r2, [r7, #7]
 8002ec6:	4921      	ldr	r1, [pc, #132]	; (8002f4c <AKxx_x_Init+0x158>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3310      	adds	r3, #16
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <AKxx_x_Init+0x16c>)
 8002ed6:	601a      	str	r2, [r3, #0]
		break;
 8002ed8:	e028      	b.n	8002f2c <AKxx_x_Init+0x138>
	case AK80_9:
		Device[deviceIndex].speedMax = 50.0f;
 8002eda:	79fa      	ldrb	r2, [r7, #7]
 8002edc:	491b      	ldr	r1, [pc, #108]	; (8002f4c <AKxx_x_Init+0x158>)
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4a1a      	ldr	r2, [pc, #104]	; (8002f54 <AKxx_x_Init+0x160>)
 8002eec:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].speedMin = -50.0f;
 8002eee:	79fa      	ldrb	r2, [r7, #7]
 8002ef0:	4916      	ldr	r1, [pc, #88]	; (8002f4c <AKxx_x_Init+0x158>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	3308      	adds	r3, #8
 8002efe:	4a16      	ldr	r2, [pc, #88]	; (8002f58 <AKxx_x_Init+0x164>)
 8002f00:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMax = 18.0f;
 8002f02:	79fa      	ldrb	r2, [r7, #7]
 8002f04:	4911      	ldr	r1, [pc, #68]	; (8002f4c <AKxx_x_Init+0x158>)
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	330c      	adds	r3, #12
 8002f12:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <AKxx_x_Init+0x170>)
 8002f14:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMin = -18.0f;
 8002f16:	79fa      	ldrb	r2, [r7, #7]
 8002f18:	490c      	ldr	r1, [pc, #48]	; (8002f4c <AKxx_x_Init+0x158>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	3310      	adds	r3, #16
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <AKxx_x_Init+0x174>)
 8002f28:	601a      	str	r2, [r3, #0]
		break;
 8002f2a:	bf00      	nop
	}

	Device[deviceIndex].isInit = 1;
 8002f2c:	79fa      	ldrb	r2, [r7, #7]
 8002f2e:	4907      	ldr	r1, [pc, #28]	; (8002f4c <AKxx_x_Init+0x158>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	3314      	adds	r3, #20
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]

	return AKxx_x_NoError;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000038c 	.word	0x2000038c
 8002f50:	2000003c 	.word	0x2000003c
 8002f54:	42480000 	.word	0x42480000
 8002f58:	c2480000 	.word	0xc2480000
 8002f5c:	41c80000 	.word	0x41c80000
 8002f60:	c1c80000 	.word	0xc1c80000
 8002f64:	41900000 	.word	0x41900000
 8002f68:	c1900000 	.word	0xc1900000

08002f6c <AKxx_x_ReadMotor>:

AKxx_x_Error_e AKxx_x_ReadMotor(uint32_t rxFifo, AKxx_x_ReadData_t *RxData_Float)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
	return ReadData(rxFifo, RxData_Float);
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f93d 	bl	80031f8 <ReadData>
 8002f7e:	4603      	mov	r3, r0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <AKxx_x_WriteMotor>:

AKxx_x_Error_e AKxx_x_WriteMotor(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float, uint32_t *txMailbox)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	73fb      	strb	r3, [r7, #15]
	if(!Device[deviceIndex].isInit)
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	490a      	ldr	r1, [pc, #40]	; (8002fc4 <AKxx_x_WriteMotor+0x3c>)
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3314      	adds	r3, #20
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d100      	bne.n	8002fae <AKxx_x_WriteMotor+0x26>
		while(1);
 8002fac:	e7fe      	b.n	8002fac <AKxx_x_WriteMotor+0x24>

	return WriteData(deviceIndex, TxData_Float, txMailbox);
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 f93f 	bl	8003238 <WriteData>
 8002fba:	4603      	mov	r3, r0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	2000038c 	.word	0x2000038c

08002fc8 <AKxx_x_EnterMotorCtrlMode>:

AKxx_x_Error_e AKxx_x_EnterMotorCtrlMode(uint8_t deviceIndex, uint32_t *txMailbox)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8002fd4:	79fa      	ldrb	r2, [r7, #7]
 8002fd6:	490a      	ldr	r1, [pc, #40]	; (8003000 <AKxx_x_EnterMotorCtrlMode+0x38>)
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d100      	bne.n	8002fec <AKxx_x_EnterMotorCtrlMode+0x24>
		while(1);
 8002fea:	e7fe      	b.n	8002fea <AKxx_x_EnterMotorCtrlMode+0x22>

	return EnterMotorCtrlMode(deviceIndex, txMailbox);
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f959 	bl	80032a8 <EnterMotorCtrlMode>
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	2000038c 	.word	0x2000038c

08003004 <AKxx_x_ExitMotorCtrlMode>:

AKxx_x_Error_e AKxx_x_ExitMotorCtrlMode(uint8_t deviceIndex, uint32_t *txMailbox)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003010:	79fa      	ldrb	r2, [r7, #7]
 8003012:	491c      	ldr	r1, [pc, #112]	; (8003084 <AKxx_x_ExitMotorCtrlMode+0x80>)
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	3314      	adds	r3, #20
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d100      	bne.n	8003028 <AKxx_x_ExitMotorCtrlMode+0x24>
		while(1);
 8003026:	e7fe      	b.n	8003026 <AKxx_x_ExitMotorCtrlMode+0x22>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 8003028:	2308      	movs	r3, #8
 800302a:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8003034:	2300      	movs	r3, #0
 8003036:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 8003038:	79fa      	ldrb	r2, [r7, #7]
 800303a:	4912      	ldr	r1, [pc, #72]	; (8003084 <AKxx_x_ExitMotorCtrlMode+0x80>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFD};
 8003050:	4a0d      	ldr	r2, [pc, #52]	; (8003088 <AKxx_x_ExitMotorCtrlMode+0x84>)
 8003052:	f107 0308 	add.w	r3, r7, #8
 8003056:	e892 0003 	ldmia.w	r2, {r0, r1}
 800305a:	e883 0003 	stmia.w	r3, {r0, r1}
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, txMailbox) != HAL_OK)
 800305e:	f107 0208 	add.w	r2, r7, #8
 8003062:	f107 0110 	add.w	r1, r7, #16
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	4808      	ldr	r0, [pc, #32]	; (800308c <AKxx_x_ExitMotorCtrlMode+0x88>)
 800306a:	f001 f974 	bl	8004356 <HAL_CAN_AddTxMessage>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <AKxx_x_ExitMotorCtrlMode+0x74>
		return AKxx_x_ExitMotorCtrlModeError;
 8003074:	2303      	movs	r3, #3
 8003076:	e000      	b.n	800307a <AKxx_x_ExitMotorCtrlMode+0x76>

	return AKxx_x_NoError;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2000038c 	.word	0x2000038c
 8003088:	08007a70 	.word	0x08007a70
 800308c:	2000003c 	.word	0x2000003c

08003090 <AKxx_x_ZeroMotorPosition>:

AKxx_x_Error_e AKxx_x_ZeroMotorPosition(uint8_t deviceIndex, uint32_t *txMailbox)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 800309c:	79fa      	ldrb	r2, [r7, #7]
 800309e:	491c      	ldr	r1, [pc, #112]	; (8003110 <AKxx_x_ZeroMotorPosition+0x80>)
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	3314      	adds	r3, #20
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d100      	bne.n	80030b4 <AKxx_x_ZeroMotorPosition+0x24>
		while(1);
 80030b2:	e7fe      	b.n	80030b2 <AKxx_x_ZeroMotorPosition+0x22>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 80030b4:	2308      	movs	r3, #8
 80030b6:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 80030c4:	79fa      	ldrb	r2, [r7, #7]
 80030c6:	4912      	ldr	r1, [pc, #72]	; (8003110 <AKxx_x_ZeroMotorPosition+0x80>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFE};
 80030dc:	4a0d      	ldr	r2, [pc, #52]	; (8003114 <AKxx_x_ZeroMotorPosition+0x84>)
 80030de:	f107 0308 	add.w	r3, r7, #8
 80030e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030e6:	e883 0003 	stmia.w	r3, {r0, r1}
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, txMailbox) != HAL_OK)
 80030ea:	f107 0208 	add.w	r2, r7, #8
 80030ee:	f107 0110 	add.w	r1, r7, #16
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	4808      	ldr	r0, [pc, #32]	; (8003118 <AKxx_x_ZeroMotorPosition+0x88>)
 80030f6:	f001 f92e 	bl	8004356 <HAL_CAN_AddTxMessage>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <AKxx_x_ZeroMotorPosition+0x74>
		return AKxx_x_ZeroMotorPositionError;
 8003100:	2304      	movs	r3, #4
 8003102:	e000      	b.n	8003106 <AKxx_x_ZeroMotorPosition+0x76>

	return AKxx_x_NoError;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3728      	adds	r7, #40	; 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000038c 	.word	0x2000038c
 8003114:	08007a78 	.word	0x08007a78
 8003118:	2000003c 	.word	0x2000003c

0800311c <AKxx_x_PollTxMessagePendingWith10msTimeout>:

AKxx_x_Error_e AKxx_x_PollTxMessagePendingWith10msTimeout(uint32_t txMailbox)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	uint8_t timeoutOccurred = 1;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
	uint32_t tickStart = HAL_GetTick();
 8003128:	f000 ff00 	bl	8003f2c <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]
	while ((HAL_GetTick() - tickStart) < 10U)
 800312e:	e009      	b.n	8003144 <AKxx_x_PollTxMessagePendingWith10msTimeout+0x28>
	{
		if(!HAL_CAN_IsTxMessagePending(&hcan1, txMailbox))
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	480d      	ldr	r0, [pc, #52]	; (8003168 <AKxx_x_PollTxMessagePendingWith10msTimeout+0x4c>)
 8003134:	f001 f9df 	bl	80044f6 <HAL_CAN_IsTxMessagePending>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <AKxx_x_PollTxMessagePendingWith10msTimeout+0x28>
		{
			timeoutOccurred = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
			break;
 8003142:	e006      	b.n	8003152 <AKxx_x_PollTxMessagePendingWith10msTimeout+0x36>
	while ((HAL_GetTick() - tickStart) < 10U)
 8003144:	f000 fef2 	bl	8003f2c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b09      	cmp	r3, #9
 8003150:	d9ee      	bls.n	8003130 <AKxx_x_PollTxMessagePendingWith10msTimeout+0x14>
		}
	}

	if(timeoutOccurred)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <AKxx_x_PollTxMessagePendingWith10msTimeout+0x40>
		return AKxx_x_PollTxMessagePendingWithTimeoutError;
 8003158:	2306      	movs	r3, #6
 800315a:	e000      	b.n	800315e <AKxx_x_PollTxMessagePendingWith10msTimeout+0x42>

	return AKxx_x_NoError;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2000003c 	.word	0x2000003c

0800316c <AKxx_x_PollMotorReadWith10msTimeout>:

AKxx_x_Error_e AKxx_x_PollMotorReadWith10msTimeout(AKxx_x_ReadData_t *RxData_Float)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	uint8_t timeoutOccurred = 1;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
	uint32_t tickStart = HAL_GetTick();
 8003178:	f000 fed8 	bl	8003f2c <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]
	while ((HAL_GetTick() - tickStart) < 10U)
 800317e:	e023      	b.n	80031c8 <AKxx_x_PollMotorReadWith10msTimeout+0x5c>
	{
		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0))
 8003180:	2100      	movs	r1, #0
 8003182:	481c      	ldr	r0, [pc, #112]	; (80031f4 <AKxx_x_PollMotorReadWith10msTimeout+0x88>)
 8003184:	f001 faed 	bl	8004762 <HAL_CAN_GetRxFifoFillLevel>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <AKxx_x_PollMotorReadWith10msTimeout+0x38>
		{
			timeoutOccurred = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
			if(ReadData(CAN_RX_FIFO0, RxData_Float))
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	2000      	movs	r0, #0
 8003196:	f000 f82f 	bl	80031f8 <ReadData>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01b      	beq.n	80031d8 <AKxx_x_PollMotorReadWith10msTimeout+0x6c>
				return AKxx_x_PollMotorReadWithTimeoutError;
 80031a0:	2305      	movs	r3, #5
 80031a2:	e022      	b.n	80031ea <AKxx_x_PollMotorReadWith10msTimeout+0x7e>
			break;
		}
		else if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1))
 80031a4:	2101      	movs	r1, #1
 80031a6:	4813      	ldr	r0, [pc, #76]	; (80031f4 <AKxx_x_PollMotorReadWith10msTimeout+0x88>)
 80031a8:	f001 fadb 	bl	8004762 <HAL_CAN_GetRxFifoFillLevel>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <AKxx_x_PollMotorReadWith10msTimeout+0x5c>
		{
			timeoutOccurred = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]
			if(ReadData(CAN_RX_FIFO1, RxData_Float))
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	2001      	movs	r0, #1
 80031ba:	f000 f81d 	bl	80031f8 <ReadData>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00b      	beq.n	80031dc <AKxx_x_PollMotorReadWith10msTimeout+0x70>
				return AKxx_x_PollMotorReadWithTimeoutError;
 80031c4:	2305      	movs	r3, #5
 80031c6:	e010      	b.n	80031ea <AKxx_x_PollMotorReadWith10msTimeout+0x7e>
	while ((HAL_GetTick() - tickStart) < 10U)
 80031c8:	f000 feb0 	bl	8003f2c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b09      	cmp	r3, #9
 80031d4:	d9d4      	bls.n	8003180 <AKxx_x_PollMotorReadWith10msTimeout+0x14>
 80031d6:	e002      	b.n	80031de <AKxx_x_PollMotorReadWith10msTimeout+0x72>
			break;
 80031d8:	bf00      	nop
 80031da:	e000      	b.n	80031de <AKxx_x_PollMotorReadWith10msTimeout+0x72>
			break;
 80031dc:	bf00      	nop
		}
	}

	if(timeoutOccurred)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <AKxx_x_PollMotorReadWith10msTimeout+0x7c>
		return AKxx_x_PollMotorReadWithTimeoutError;
 80031e4:	2305      	movs	r3, #5
 80031e6:	e000      	b.n	80031ea <AKxx_x_PollMotorReadWith10msTimeout+0x7e>

	return AKxx_x_NoError;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	2000003c 	.word	0x2000003c

080031f8 <ReadData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static AKxx_x_Error_e ReadData(uint32_t rxFifo, AKxx_x_ReadData_t *RxData_Float)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	; 0x30
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rxData_uint[8];
	if(HAL_CAN_GetRxMessage(&hcan1, rxFifo, &RxHeader, rxData_uint) != HAL_OK)
 8003202:	f107 030c 	add.w	r3, r7, #12
 8003206:	f107 0214 	add.w	r2, r7, #20
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4809      	ldr	r0, [pc, #36]	; (8003234 <ReadData+0x3c>)
 800320e:	f001 f996 	bl	800453e <HAL_CAN_GetRxMessage>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <ReadData+0x24>
		return AKxx_x_ReadDataError;
 8003218:	2307      	movs	r3, #7
 800321a:	e006      	b.n	800322a <ReadData+0x32>

	UnpackData(rxData_uint, RxData_Float);
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	6839      	ldr	r1, [r7, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f936 	bl	8003494 <UnpackData>

	return AKxx_x_NoError;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3730      	adds	r7, #48	; 0x30
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	2000003c 	.word	0x2000003c

08003238 <WriteData>:

static AKxx_x_Error_e WriteData(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float, uint32_t *txMailbox)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	; 0x30
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	73fb      	strb	r3, [r7, #15]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 8003246:	2308      	movs	r3, #8
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 800324e:	2300      	movs	r3, #0
 8003250:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	4911      	ldr	r1, [pc, #68]	; (80032a0 <WriteData+0x68>)
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t txData_uint[8];
	PackData(deviceIndex, TxData_Float, txData_uint);
 800326e:	f107 0210 	add.w	r2, r7, #16
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f850 	bl	800331c <PackData>

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, txMailbox) != HAL_OK)
 800327c:	f107 0210 	add.w	r2, r7, #16
 8003280:	f107 0118 	add.w	r1, r7, #24
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4807      	ldr	r0, [pc, #28]	; (80032a4 <WriteData+0x6c>)
 8003288:	f001 f865 	bl	8004356 <HAL_CAN_AddTxMessage>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <WriteData+0x5e>
		return AKxx_x_WriteDataError;
 8003292:	2308      	movs	r3, #8
 8003294:	e000      	b.n	8003298 <WriteData+0x60>

	return AKxx_x_NoError;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3730      	adds	r7, #48	; 0x30
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	2000038c 	.word	0x2000038c
 80032a4:	2000003c 	.word	0x2000003c

080032a8 <EnterMotorCtrlMode>:

static AKxx_x_Error_e EnterMotorCtrlMode(uint8_t deviceIndex, uint32_t *txMailbox)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 80032b4:	2308      	movs	r3, #8
 80032b6:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 80032bc:	2300      	movs	r3, #0
 80032be:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 80032c4:	79fa      	ldrb	r2, [r7, #7]
 80032c6:	4912      	ldr	r1, [pc, #72]	; (8003310 <EnterMotorCtrlMode+0x68>)
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFC};
 80032dc:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <EnterMotorCtrlMode+0x6c>)
 80032de:	f107 0308 	add.w	r3, r7, #8
 80032e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032e6:	e883 0003 	stmia.w	r3, {r0, r1}
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, txMailbox) != HAL_OK)
 80032ea:	f107 0208 	add.w	r2, r7, #8
 80032ee:	f107 0110 	add.w	r1, r7, #16
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	4808      	ldr	r0, [pc, #32]	; (8003318 <EnterMotorCtrlMode+0x70>)
 80032f6:	f001 f82e 	bl	8004356 <HAL_CAN_AddTxMessage>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <EnterMotorCtrlMode+0x5c>
		return AKxx_x_EnterMotorCtrlModeError;
 8003300:	2302      	movs	r3, #2
 8003302:	e000      	b.n	8003306 <EnterMotorCtrlMode+0x5e>

	return AKxx_x_NoError;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3728      	adds	r7, #40	; 0x28
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	2000038c 	.word	0x2000038c
 8003314:	08007a80 	.word	0x08007a80
 8003318:	2000003c 	.word	0x2000003c

0800331c <PackData>:

static void PackData(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float, uint8_t *txData_uint)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	73fb      	strb	r3, [r7, #15]
	uint16_t position = FloatToUint(TxData_Float->position, -12.5, 12.5, 16);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003330:	2010      	movs	r0, #16
 8003332:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 8003336:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 800333a:	eeb0 0a67 	vmov.f32	s0, s15
 800333e:	f000 f9a1 	bl	8003684 <FloatToUint>
 8003342:	4603      	mov	r3, r0
 8003344:	83fb      	strh	r3, [r7, #30]
	uint16_t speed = FloatToUint(TxData_Float->speed, Device[deviceIndex].speedMin, Device[deviceIndex].speedMax, 12);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	edd3 7a03 	vldr	s15, [r3, #12]
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	494e      	ldr	r1, [pc, #312]	; (8003488 <PackData+0x16c>)
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	3308      	adds	r3, #8
 800335c:	ed93 7a00 	vldr	s14, [r3]
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	4949      	ldr	r1, [pc, #292]	; (8003488 <PackData+0x16c>)
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	440b      	add	r3, r1
 800336e:	3304      	adds	r3, #4
 8003370:	edd3 6a00 	vldr	s13, [r3]
 8003374:	200c      	movs	r0, #12
 8003376:	eeb0 1a66 	vmov.f32	s2, s13
 800337a:	eef0 0a47 	vmov.f32	s1, s14
 800337e:	eeb0 0a67 	vmov.f32	s0, s15
 8003382:	f000 f97f 	bl	8003684 <FloatToUint>
 8003386:	4603      	mov	r3, r0
 8003388:	83bb      	strh	r3, [r7, #28]
	uint16_t torque = FloatToUint(TxData_Float->torque, Device[deviceIndex].torqueMin, Device[deviceIndex].torqueMax, 12);
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	493d      	ldr	r1, [pc, #244]	; (8003488 <PackData+0x16c>)
 8003394:	4613      	mov	r3, r2
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	440b      	add	r3, r1
 800339e:	3310      	adds	r3, #16
 80033a0:	ed93 7a00 	vldr	s14, [r3]
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	4938      	ldr	r1, [pc, #224]	; (8003488 <PackData+0x16c>)
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	330c      	adds	r3, #12
 80033b4:	edd3 6a00 	vldr	s13, [r3]
 80033b8:	200c      	movs	r0, #12
 80033ba:	eeb0 1a66 	vmov.f32	s2, s13
 80033be:	eef0 0a47 	vmov.f32	s1, s14
 80033c2:	eeb0 0a67 	vmov.f32	s0, s15
 80033c6:	f000 f95d 	bl	8003684 <FloatToUint>
 80033ca:	4603      	mov	r3, r0
 80033cc:	837b      	strh	r3, [r7, #26]
	uint16_t kd = FloatToUint(TxData_Float->kd, 0, 5, 12);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	200c      	movs	r0, #12
 80033d6:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80033da:	eddf 0a2c 	vldr	s1, [pc, #176]	; 800348c <PackData+0x170>
 80033de:	eeb0 0a67 	vmov.f32	s0, s15
 80033e2:	f000 f94f 	bl	8003684 <FloatToUint>
 80033e6:	4603      	mov	r3, r0
 80033e8:	833b      	strh	r3, [r7, #24]
	uint16_t kp = FloatToUint(TxData_Float->kp, 0, 500, 12);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f0:	200c      	movs	r0, #12
 80033f2:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8003490 <PackData+0x174>
 80033f6:	eddf 0a25 	vldr	s1, [pc, #148]	; 800348c <PackData+0x170>
 80033fa:	eeb0 0a67 	vmov.f32	s0, s15
 80033fe:	f000 f941 	bl	8003684 <FloatToUint>
 8003402:	4603      	mov	r3, r0
 8003404:	82fb      	strh	r3, [r7, #22]

	txData_uint[0] = position >> 8;
 8003406:	8bfb      	ldrh	r3, [r7, #30]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	b29b      	uxth	r3, r3
 800340c:	b2da      	uxtb	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	701a      	strb	r2, [r3, #0]
	txData_uint[1] = position & 0xFF;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3301      	adds	r3, #1
 8003416:	8bfa      	ldrh	r2, [r7, #30]
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	701a      	strb	r2, [r3, #0]
	txData_uint[2] = speed >> 4;
 800341c:	8bbb      	ldrh	r3, [r7, #28]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3302      	adds	r3, #2
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]
	txData_uint[3] = ((speed & 0x0F) << 4) | (kp >> 8);
 800342a:	8bbb      	ldrh	r3, [r7, #28]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	b25a      	sxtb	r2, r3
 8003430:	8afb      	ldrh	r3, [r7, #22]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	b29b      	uxth	r3, r3
 8003436:	b25b      	sxtb	r3, r3
 8003438:	4313      	orrs	r3, r2
 800343a:	b25a      	sxtb	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3303      	adds	r3, #3
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]
	txData_uint[4] = kp & 0xFF;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	8afa      	ldrh	r2, [r7, #22]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]
	txData_uint[5] = kd >> 4;
 800344e:	8b3b      	ldrh	r3, [r7, #24]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	b29a      	uxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3305      	adds	r3, #5
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]
	txData_uint[6] = ((kd & 0x0F) << 4) | (torque >> 8);
 800345c:	8b3b      	ldrh	r3, [r7, #24]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	b25a      	sxtb	r2, r3
 8003462:	8b7b      	ldrh	r3, [r7, #26]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	b29b      	uxth	r3, r3
 8003468:	b25b      	sxtb	r3, r3
 800346a:	4313      	orrs	r3, r2
 800346c:	b25a      	sxtb	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3306      	adds	r3, #6
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]
	txData_uint[7] = torque & 0xFF;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3307      	adds	r3, #7
 800347a:	8b7a      	ldrh	r2, [r7, #26]
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]
}
 8003480:	bf00      	nop
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000038c 	.word	0x2000038c
 800348c:	00000000 	.word	0x00000000
 8003490:	43fa0000 	.word	0x43fa0000

08003494 <UnpackData>:

static void UnpackData(uint8_t *rxData_uint, AKxx_x_ReadData_t *RxData_Float)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
	RxData_Float->canId = rxData_uint[0];
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	701a      	strb	r2, [r3, #0]

	uint16_t position = (rxData_uint[1] << 8) | rxData_uint[2];
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3301      	adds	r3, #1
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	021b      	lsls	r3, r3, #8
 80034ae:	b21a      	sxth	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3302      	adds	r3, #2
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b21b      	sxth	r3, r3
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	81bb      	strh	r3, [r7, #12]
	uint16_t speed = (rxData_uint[3] << 4) | (rxData_uint[4] >> 4);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3303      	adds	r3, #3
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	b21a      	sxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	b21b      	sxth	r3, r3
 80034d4:	4313      	orrs	r3, r2
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	817b      	strh	r3, [r7, #10]
	uint16_t torque = ((rxData_uint[4] & 0x0F) << 8) | rxData_uint[5];
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	b21b      	sxth	r3, r3
 80034e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034e8:	b21a      	sxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3305      	adds	r3, #5
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b21b      	sxth	r3, r3
 80034f2:	4313      	orrs	r3, r2
 80034f4:	b21b      	sxth	r3, r3
 80034f6:	813b      	strh	r3, [r7, #8]

	RxData_Float->error = rxData_uint[7];
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	79da      	ldrb	r2, [r3, #7]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	741a      	strb	r2, [r3, #16]

	uint8_t i;
	for(i = 0; i < AKXX_X_NUMBER_OF_DEVICES; i++)
 8003500:	2300      	movs	r3, #0
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	e00f      	b.n	8003526 <UnpackData+0x92>
		if(Device[i].InitVals.canId == RxData_Float->canId)
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	4934      	ldr	r1, [pc, #208]	; (80035dc <UnpackData+0x148>)
 800350a:	4613      	mov	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	881a      	ldrh	r2, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	429a      	cmp	r2, r3
 800351e:	d006      	beq.n	800352e <UnpackData+0x9a>
	for(i = 0; i < AKXX_X_NUMBER_OF_DEVICES; i++)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	3301      	adds	r3, #1
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d9ec      	bls.n	8003506 <UnpackData+0x72>
 800352c:	e000      	b.n	8003530 <UnpackData+0x9c>
			break;
 800352e:	bf00      	nop

	RxData_Float->position = UintToFloat(position, -12.5, 12.5, 16);
 8003530:	89bb      	ldrh	r3, [r7, #12]
 8003532:	2110      	movs	r1, #16
 8003534:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8003538:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800353c:	4618      	mov	r0, r3
 800353e:	f000 f84f 	bl	80035e0 <UintToFloat>
 8003542:	eef0 7a40 	vmov.f32	s15, s0
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	edc3 7a01 	vstr	s15, [r3, #4]
	RxData_Float->speed = UintToFloat(speed, Device[i].speedMin, Device[i].speedMax, 12);
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	4923      	ldr	r1, [pc, #140]	; (80035dc <UnpackData+0x148>)
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	3308      	adds	r3, #8
 800355c:	edd3 7a00 	vldr	s15, [r3]
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	491e      	ldr	r1, [pc, #120]	; (80035dc <UnpackData+0x148>)
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	3304      	adds	r3, #4
 8003570:	ed93 7a00 	vldr	s14, [r3]
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	210c      	movs	r1, #12
 8003578:	eef0 0a47 	vmov.f32	s1, s14
 800357c:	eeb0 0a67 	vmov.f32	s0, s15
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f82d 	bl	80035e0 <UintToFloat>
 8003586:	eef0 7a40 	vmov.f32	s15, s0
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	edc3 7a02 	vstr	s15, [r3, #8]
	RxData_Float->torque = UintToFloat(torque, Device[i].torqueMin, Device[i].torqueMax, 12);
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	4912      	ldr	r1, [pc, #72]	; (80035dc <UnpackData+0x148>)
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	440b      	add	r3, r1
 800359e:	3310      	adds	r3, #16
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	490d      	ldr	r1, [pc, #52]	; (80035dc <UnpackData+0x148>)
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	440b      	add	r3, r1
 80035b2:	330c      	adds	r3, #12
 80035b4:	ed93 7a00 	vldr	s14, [r3]
 80035b8:	893b      	ldrh	r3, [r7, #8]
 80035ba:	210c      	movs	r1, #12
 80035bc:	eef0 0a47 	vmov.f32	s1, s14
 80035c0:	eeb0 0a67 	vmov.f32	s0, s15
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 f80b 	bl	80035e0 <UintToFloat>
 80035ca:	eef0 7a40 	vmov.f32	s15, s0
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	2000038c 	.word	0x2000038c

080035e0 <UintToFloat>:

static float UintToFloat(uint16_t x_uint, float xMin_float, float xMax_float, uint8_t nBits)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80035ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80035f0:	460a      	mov	r2, r1
 80035f2:	81fb      	strh	r3, [r7, #14]
 80035f4:	4613      	mov	r3, r2
 80035f6:	737b      	strb	r3, [r7, #13]
	float offset = xMin_float;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	61bb      	str	r3, [r7, #24]
	float span = xMax_float - xMin_float;
 80035fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003600:	edd7 7a02 	vldr	s15, [r7, #8]
 8003604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003608:	edc7 7a05 	vstr	s15, [r7, #20]
	float x_float;
	if(nBits == 12)
 800360c:	7b7b      	ldrb	r3, [r7, #13]
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d113      	bne.n	800363a <UintToFloat+0x5a>
		x_float = (((float)x_uint) * span / 4095.0f) + offset;
 8003612:	89fb      	ldrh	r3, [r7, #14]
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800361c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003624:	eddf 6a15 	vldr	s13, [pc, #84]	; 800367c <UintToFloat+0x9c>
 8003628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800362c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003634:	edc7 7a07 	vstr	s15, [r7, #28]
 8003638:	e015      	b.n	8003666 <UintToFloat+0x86>
	else if(nBits == 16)
 800363a:	7b7b      	ldrb	r3, [r7, #13]
 800363c:	2b10      	cmp	r3, #16
 800363e:	d112      	bne.n	8003666 <UintToFloat+0x86>
		x_float = (((float)x_uint) * span / 65535.0f) + offset;
 8003640:	89fb      	ldrh	r3, [r7, #14]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800364a:	edd7 7a05 	vldr	s15, [r7, #20]
 800364e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003652:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003680 <UintToFloat+0xa0>
 8003656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800365a:	ed97 7a06 	vldr	s14, [r7, #24]
 800365e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003662:	edc7 7a07 	vstr	s15, [r7, #28]

	return x_float;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	ee07 3a90 	vmov	s15, r3
}
 800366c:	eeb0 0a67 	vmov.f32	s0, s15
 8003670:	3724      	adds	r7, #36	; 0x24
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	457ff000 	.word	0x457ff000
 8003680:	477fff00 	.word	0x477fff00

08003684 <FloatToUint>:

static uint16_t FloatToUint(float x_float, float xMin_float, float xMax_float, uint8_t nBits)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	ed87 0a03 	vstr	s0, [r7, #12]
 800368e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003692:	ed87 1a01 	vstr	s2, [r7, #4]
 8003696:	4603      	mov	r3, r0
 8003698:	70fb      	strb	r3, [r7, #3]
	if(x_float < xMin_float)
 800369a:	ed97 7a03 	vldr	s14, [r7, #12]
 800369e:	edd7 7a02 	vldr	s15, [r7, #8]
 80036a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036aa:	d501      	bpl.n	80036b0 <FloatToUint+0x2c>
		x_float = xMin_float;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	60fb      	str	r3, [r7, #12]
	if(x_float > xMax_float)
 80036b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80036b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c0:	dd01      	ble.n	80036c6 <FloatToUint+0x42>
		x_float = xMax_float;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	60fb      	str	r3, [r7, #12]

	float offset = xMin_float;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	61bb      	str	r3, [r7, #24]
	float span = xMax_float - xMin_float;
 80036ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80036ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80036d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d6:	edc7 7a05 	vstr	s15, [r7, #20]
	uint16_t x_uint;
	if(nBits == 12)
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	d113      	bne.n	8003708 <FloatToUint+0x84>
		x_uint = (uint16_t)((x_float - offset) * 4095.0f / span);
 80036e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80036e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80036e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ec:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003744 <FloatToUint+0xc0>
 80036f0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80036f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80036f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003700:	ee17 3a90 	vmov	r3, s15
 8003704:	83fb      	strh	r3, [r7, #30]
 8003706:	e015      	b.n	8003734 <FloatToUint+0xb0>
	else if(nBits == 16)
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	2b10      	cmp	r3, #16
 800370c:	d112      	bne.n	8003734 <FloatToUint+0xb0>
		x_uint = (uint16_t)((x_float - offset) * 65535.0f / span);
 800370e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003712:	edd7 7a06 	vldr	s15, [r7, #24]
 8003716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003748 <FloatToUint+0xc4>
 800371e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003722:	ed97 7a05 	vldr	s14, [r7, #20]
 8003726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800372a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800372e:	ee17 3a90 	vmov	r3, s15
 8003732:	83fb      	strh	r3, [r7, #30]

	return x_uint;
 8003734:	8bfb      	ldrh	r3, [r7, #30]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3724      	adds	r7, #36	; 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	457ff000 	.word	0x457ff000
 8003748:	477fff00 	.word	0x477fff00

0800374c <LL_GPIO_SetOutputPin>:
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	619a      	str	r2, [r3, #24]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_GPIO_ResetOutputPin>:
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <MPU925x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

MPU925x_Error_e MPU925x_Init(uint8_t deviceIndex, MPU925x_Init_t *Device_Init)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	6039      	str	r1, [r7, #0]
 800378e:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex >= MPU925X_NUMBER_OF_DEVICES)
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d000      	beq.n	8003798 <MPU925x_Init+0x14>
		while(1);
 8003796:	e7fe      	b.n	8003796 <MPU925x_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(MPU925x_Init_t));
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <MPU925x_Init+0x64>)
 800379e:	4413      	add	r3, r2
 80037a0:	220c      	movs	r2, #12
 80037a2:	6839      	ldr	r1, [r7, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 f941 	bl	8007a2c <memcpy>

	ClearChipSelect(deviceIndex);
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 fb1d 	bl	8003dec <ClearChipSelect>

	uint8_t whoAmI;
	ReadRegData(deviceIndex, MPU925X_REG_WHO_AM_I, &whoAmI, 1);
 80037b2:	f107 020f 	add.w	r2, r7, #15
 80037b6:	79f8      	ldrb	r0, [r7, #7]
 80037b8:	2301      	movs	r3, #1
 80037ba:	2175      	movs	r1, #117	; 0x75
 80037bc:	f000 fa80 	bl	8003cc0 <ReadRegData>
	if((whoAmI != MPU9250_DEVICE_ID) && (whoAmI != MPU9255_DEVICE_ID))
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b71      	cmp	r3, #113	; 0x71
 80037c4:	d004      	beq.n	80037d0 <MPU925x_Init+0x4c>
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	2b73      	cmp	r3, #115	; 0x73
 80037ca:	d001      	beq.n	80037d0 <MPU925x_Init+0x4c>
		return MPU925x_WhoAmI_Error;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e007      	b.n	80037e0 <MPU925x_Init+0x5c>

	Device[deviceIndex].isInit = 1;
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <MPU925x_Init+0x64>)
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	4413      	add	r3, r2
 80037d8:	330c      	adds	r3, #12
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

	return MPU925x_NoError;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	200003bc 	.word	0x200003bc

080037ec <MPU925x_SetAccelSensitivity>:

void MPU925x_SetAccelSensitivity(uint8_t deviceIndex, MPU925x_AccelSensitivity_e sensitivity)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	460a      	mov	r2, r1
 80037f6:	71fb      	strb	r3, [r7, #7]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	4a46      	ldr	r2, [pc, #280]	; (8003918 <MPU925x_SetAccelSensitivity+0x12c>)
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	4413      	add	r3, r2
 8003804:	330c      	adds	r3, #12
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d100      	bne.n	800380e <MPU925x_SetAccelSensitivity+0x22>
		while(1);
 800380c:	e7fe      	b.n	800380c <MPU925x_SetAccelSensitivity+0x20>

	uint8_t data;
	switch(sensitivity)
 800380e:	79bb      	ldrb	r3, [r7, #6]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d87d      	bhi.n	8003910 <MPU925x_SetAccelSensitivity+0x124>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <MPU925x_SetAccelSensitivity+0x30>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	0800382d 	.word	0x0800382d
 8003820:	08003861 	.word	0x08003861
 8003824:	0800389f 	.word	0x0800389f
 8003828:	080038dd 	.word	0x080038dd
	{
	case MPU925x_AccelSensitivity_2g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 800382c:	f107 020f 	add.w	r2, r7, #15
 8003830:	79f8      	ldrb	r0, [r7, #7]
 8003832:	2301      	movs	r3, #1
 8003834:	211c      	movs	r1, #28
 8003836:	f000 fa43 	bl	8003cc0 <ReadRegData>
		data = data & ~0x18;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	f023 0318 	bic.w	r3, r3, #24
 8003840:	b2db      	uxtb	r3, r3
 8003842:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003844:	f107 020f 	add.w	r2, r7, #15
 8003848:	79f8      	ldrb	r0, [r7, #7]
 800384a:	2301      	movs	r3, #1
 800384c:	211c      	movs	r1, #28
 800384e:	f000 fa85 	bl	8003d5c <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_2G;
 8003852:	4932      	ldr	r1, [pc, #200]	; (800391c <MPU925x_SetAccelSensitivity+0x130>)
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	4b31      	ldr	r3, [pc, #196]	; (8003920 <MPU925x_SetAccelSensitivity+0x134>)
 800385a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800385e:	e057      	b.n	8003910 <MPU925x_SetAccelSensitivity+0x124>

	case MPU925x_AccelSensitivity_4g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003860:	f107 020f 	add.w	r2, r7, #15
 8003864:	79f8      	ldrb	r0, [r7, #7]
 8003866:	2301      	movs	r3, #1
 8003868:	211c      	movs	r1, #28
 800386a:	f000 fa29 	bl	8003cc0 <ReadRegData>
		data = (data & ~0x18) | 0x08;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	b25b      	sxtb	r3, r3
 8003872:	f023 0318 	bic.w	r3, r3, #24
 8003876:	b25b      	sxtb	r3, r3
 8003878:	f043 0308 	orr.w	r3, r3, #8
 800387c:	b25b      	sxtb	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8003882:	f107 020f 	add.w	r2, r7, #15
 8003886:	79f8      	ldrb	r0, [r7, #7]
 8003888:	2301      	movs	r3, #1
 800388a:	211c      	movs	r1, #28
 800388c:	f000 fa66 	bl	8003d5c <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_4G;
 8003890:	4922      	ldr	r1, [pc, #136]	; (800391c <MPU925x_SetAccelSensitivity+0x130>)
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <MPU925x_SetAccelSensitivity+0x138>)
 8003898:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800389c:	e038      	b.n	8003910 <MPU925x_SetAccelSensitivity+0x124>

	case MPU925x_AccelSensitivity_8g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 800389e:	f107 020f 	add.w	r2, r7, #15
 80038a2:	79f8      	ldrb	r0, [r7, #7]
 80038a4:	2301      	movs	r3, #1
 80038a6:	211c      	movs	r1, #28
 80038a8:	f000 fa0a 	bl	8003cc0 <ReadRegData>
		data = (data & ~0x18) | 0x10;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	b25b      	sxtb	r3, r3
 80038b0:	f023 0318 	bic.w	r3, r3, #24
 80038b4:	b25b      	sxtb	r3, r3
 80038b6:	f043 0310 	orr.w	r3, r3, #16
 80038ba:	b25b      	sxtb	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 80038c0:	f107 020f 	add.w	r2, r7, #15
 80038c4:	79f8      	ldrb	r0, [r7, #7]
 80038c6:	2301      	movs	r3, #1
 80038c8:	211c      	movs	r1, #28
 80038ca:	f000 fa47 	bl	8003d5c <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_8G;
 80038ce:	4913      	ldr	r1, [pc, #76]	; (800391c <MPU925x_SetAccelSensitivity+0x130>)
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <MPU925x_SetAccelSensitivity+0x13c>)
 80038d6:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80038da:	e019      	b.n	8003910 <MPU925x_SetAccelSensitivity+0x124>

	case MPU925x_AccelSensitivity_16g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 80038dc:	f107 020f 	add.w	r2, r7, #15
 80038e0:	79f8      	ldrb	r0, [r7, #7]
 80038e2:	2301      	movs	r3, #1
 80038e4:	211c      	movs	r1, #28
 80038e6:	f000 f9eb 	bl	8003cc0 <ReadRegData>
		data = (data & ~0x18) | 0x18;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	f043 0318 	orr.w	r3, r3, #24
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 80038f4:	f107 020f 	add.w	r2, r7, #15
 80038f8:	79f8      	ldrb	r0, [r7, #7]
 80038fa:	2301      	movs	r3, #1
 80038fc:	211c      	movs	r1, #28
 80038fe:	f000 fa2d 	bl	8003d5c <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_16G;
 8003902:	4906      	ldr	r1, [pc, #24]	; (800391c <MPU925x_SetAccelSensitivity+0x130>)
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <MPU925x_SetAccelSensitivity+0x140>)
 800390a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 800390e:	bf00      	nop
	}
}
 8003910:	bf00      	nop
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	200003bc 	.word	0x200003bc
 800391c:	20000008 	.word	0x20000008
 8003920:	40d00000 	.word	0x40d00000
 8003924:	40c00000 	.word	0x40c00000
 8003928:	40b00000 	.word	0x40b00000
 800392c:	40a00000 	.word	0x40a00000

08003930 <MPU925x_SetGyroSensitivity>:

void MPU925x_SetGyroSensitivity(uint8_t deviceIndex, MPU925x_GyroSensitivity_e sensitivity)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	460a      	mov	r2, r1
 800393a:	71fb      	strb	r3, [r7, #7]
 800393c:	4613      	mov	r3, r2
 800393e:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	4a4f      	ldr	r2, [pc, #316]	; (8003a80 <MPU925x_SetGyroSensitivity+0x150>)
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	4413      	add	r3, r2
 8003948:	330c      	adds	r3, #12
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d100      	bne.n	8003952 <MPU925x_SetGyroSensitivity+0x22>
		while(1);
 8003950:	e7fe      	b.n	8003950 <MPU925x_SetGyroSensitivity+0x20>

	uint8_t data;
	switch(sensitivity)
 8003952:	79bb      	ldrb	r3, [r7, #6]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d87d      	bhi.n	8003a54 <MPU925x_SetGyroSensitivity+0x124>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <MPU925x_SetGyroSensitivity+0x30>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003971 	.word	0x08003971
 8003964:	080039a5 	.word	0x080039a5
 8003968:	080039e3 	.word	0x080039e3
 800396c:	08003a21 	.word	0x08003a21
	{
	case MPU925x_GyroSensitivity_250dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003970:	f107 020f 	add.w	r2, r7, #15
 8003974:	79f8      	ldrb	r0, [r7, #7]
 8003976:	2301      	movs	r3, #1
 8003978:	211b      	movs	r1, #27
 800397a:	f000 f9a1 	bl	8003cc0 <ReadRegData>
		data = data & ~0x18;
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	f023 0318 	bic.w	r3, r3, #24
 8003984:	b2db      	uxtb	r3, r3
 8003986:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003988:	f107 020f 	add.w	r2, r7, #15
 800398c:	79f8      	ldrb	r0, [r7, #7]
 800398e:	2301      	movs	r3, #1
 8003990:	211b      	movs	r1, #27
 8003992:	f000 f9e3 	bl	8003d5c <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_250DPS;
 8003996:	493b      	ldr	r1, [pc, #236]	; (8003a84 <MPU925x_SetGyroSensitivity+0x154>)
 8003998:	a331      	add	r3, pc, #196	; (adr r3, 8003a60 <MPU925x_SetGyroSensitivity+0x130>)
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80039a2:	e057      	b.n	8003a54 <MPU925x_SetGyroSensitivity+0x124>

	case MPU925x_GyroSensitivity_500dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 80039a4:	f107 020f 	add.w	r2, r7, #15
 80039a8:	79f8      	ldrb	r0, [r7, #7]
 80039aa:	2301      	movs	r3, #1
 80039ac:	211b      	movs	r1, #27
 80039ae:	f000 f987 	bl	8003cc0 <ReadRegData>
		data = (data & ~0x18) | 0x08;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	b25b      	sxtb	r3, r3
 80039b6:	f023 0318 	bic.w	r3, r3, #24
 80039ba:	b25b      	sxtb	r3, r3
 80039bc:	f043 0308 	orr.w	r3, r3, #8
 80039c0:	b25b      	sxtb	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 80039c6:	f107 020f 	add.w	r2, r7, #15
 80039ca:	79f8      	ldrb	r0, [r7, #7]
 80039cc:	2301      	movs	r3, #1
 80039ce:	211b      	movs	r1, #27
 80039d0:	f000 f9c4 	bl	8003d5c <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_500DPS;
 80039d4:	492b      	ldr	r1, [pc, #172]	; (8003a84 <MPU925x_SetGyroSensitivity+0x154>)
 80039d6:	a324      	add	r3, pc, #144	; (adr r3, 8003a68 <MPU925x_SetGyroSensitivity+0x138>)
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 80039e0:	e038      	b.n	8003a54 <MPU925x_SetGyroSensitivity+0x124>

	case MPU925x_GyroSensitivity_1000dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 80039e2:	f107 020f 	add.w	r2, r7, #15
 80039e6:	79f8      	ldrb	r0, [r7, #7]
 80039e8:	2301      	movs	r3, #1
 80039ea:	211b      	movs	r1, #27
 80039ec:	f000 f968 	bl	8003cc0 <ReadRegData>
		data = (data & ~0x18) | 0x10;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	f023 0318 	bic.w	r3, r3, #24
 80039f8:	b25b      	sxtb	r3, r3
 80039fa:	f043 0310 	orr.w	r3, r3, #16
 80039fe:	b25b      	sxtb	r3, r3
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003a04:	f107 020f 	add.w	r2, r7, #15
 8003a08:	79f8      	ldrb	r0, [r7, #7]
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	211b      	movs	r1, #27
 8003a0e:	f000 f9a5 	bl	8003d5c <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_1000DPS;
 8003a12:	491c      	ldr	r1, [pc, #112]	; (8003a84 <MPU925x_SetGyroSensitivity+0x154>)
 8003a14:	a316      	add	r3, pc, #88	; (adr r3, 8003a70 <MPU925x_SetGyroSensitivity+0x140>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003a1e:	e019      	b.n	8003a54 <MPU925x_SetGyroSensitivity+0x124>

	case MPU925x_GyroSensitivity_2000dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003a20:	f107 020f 	add.w	r2, r7, #15
 8003a24:	79f8      	ldrb	r0, [r7, #7]
 8003a26:	2301      	movs	r3, #1
 8003a28:	211b      	movs	r1, #27
 8003a2a:	f000 f949 	bl	8003cc0 <ReadRegData>
		data = (data & ~0x18) | 0x18;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	f043 0318 	orr.w	r3, r3, #24
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8003a38:	f107 020f 	add.w	r2, r7, #15
 8003a3c:	79f8      	ldrb	r0, [r7, #7]
 8003a3e:	2301      	movs	r3, #1
 8003a40:	211b      	movs	r1, #27
 8003a42:	f000 f98b 	bl	8003d5c <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_2000DPS;
 8003a46:	490f      	ldr	r1, [pc, #60]	; (8003a84 <MPU925x_SetGyroSensitivity+0x154>)
 8003a48:	a30b      	add	r3, pc, #44	; (adr r3, 8003a78 <MPU925x_SetGyroSensitivity+0x148>)
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8003a52:	bf00      	nop
	}
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	f3af 8000 	nop.w
 8003a60:	00000000 	.word	0x00000000
 8003a64:	40606000 	.word	0x40606000
 8003a68:	00000000 	.word	0x00000000
 8003a6c:	40506000 	.word	0x40506000
 8003a70:	66666666 	.word	0x66666666
 8003a74:	40406666 	.word	0x40406666
 8003a78:	66666666 	.word	0x66666666
 8003a7c:	40306666 	.word	0x40306666
 8003a80:	200003bc 	.word	0x200003bc
 8003a84:	20000010 	.word	0x20000010

08003a88 <MPU925x_StartReadIMU_IT>:

	return MPU925x_ConvertIMU_Data(data);
}

void MPU925x_StartReadIMU_IT(uint8_t deviceIndex)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	4a0a      	ldr	r2, [pc, #40]	; (8003ac0 <MPU925x_StartReadIMU_IT+0x38>)
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	4413      	add	r3, r2
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d100      	bne.n	8003aa4 <MPU925x_StartReadIMU_IT+0x1c>
		while(1);
 8003aa2:	e7fe      	b.n	8003aa2 <MPU925x_StartReadIMU_IT+0x1a>

	uint8_t startAddress = MPU925X_REG_ACCEL_XOUT_H | 0x80;
 8003aa4:	23bb      	movs	r3, #187	; 0xbb
 8003aa6:	73fb      	strb	r3, [r7, #15]
	WriteData_IT(deviceIndex, &startAddress, 1);
 8003aa8:	f107 010f 	add.w	r1, r7, #15
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f981 	bl	8003db8 <WriteData_IT>
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200003bc 	.word	0x200003bc

08003ac4 <MPU925x_ReadIMU_IT>:

void MPU925x_ReadIMU_IT(uint8_t deviceIndex, uint8_t *data)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	6039      	str	r1, [r7, #0]
 8003ace:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <MPU925x_ReadIMU_IT+0x34>)
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4413      	add	r3, r2
 8003ad8:	330c      	adds	r3, #12
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d100      	bne.n	8003ae2 <MPU925x_ReadIMU_IT+0x1e>
		while(1);
 8003ae0:	e7fe      	b.n	8003ae0 <MPU925x_ReadIMU_IT+0x1c>

	ReadData_IT(deviceIndex, data, 14);
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	220e      	movs	r2, #14
 8003ae6:	6839      	ldr	r1, [r7, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f91d 	bl	8003d28 <ReadData_IT>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	200003bc 	.word	0x200003bc

08003afc <MPU925x_ConvertIMU_Data>:

	WriteData_IT(deviceIndex, data, nBytes);
}

MPU925x_IMU_Data_t MPU925x_ConvertIMU_Data(uint8_t *data)
{
 8003afc:	b5b0      	push	{r4, r5, r7, lr}
 8003afe:	b092      	sub	sp, #72	; 0x48
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
	int16_t ax = ((int16_t) data[0] << 8) | data[1];
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	b21a      	sxth	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b21b      	sxth	r3, r3
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t ay = ((int16_t) data[2] << 8) | data[3];
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	3302      	adds	r3, #2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	b21a      	sxth	r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	3303      	adds	r3, #3
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b21b      	sxth	r3, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t az = ((int16_t) data[4] << 8) | data[5];
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	3304      	adds	r3, #4
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	b21a      	sxth	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	3305      	adds	r3, #5
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b21b      	sxth	r3, r3
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	int16_t gx = ((int16_t) data[8] << 8) | data[9];
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	3308      	adds	r3, #8
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	b21a      	sxth	r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	3309      	adds	r3, #9
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b21b      	sxth	r3, r3
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	int16_t gy = ((int16_t) data[10] << 8) | data[11];
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	330a      	adds	r3, #10
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	b21a      	sxth	r2, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	330b      	adds	r3, #11
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b21b      	sxth	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	87fb      	strh	r3, [r7, #62]	; 0x3e
	int16_t gz = ((int16_t) data[12] << 8) | data[13];
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	b21a      	sxth	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	330d      	adds	r3, #13
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b21b      	sxth	r3, r3
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	87bb      	strh	r3, [r7, #60]	; 0x3c

	MPU925x_IMU_Data_t IMU_Data;
	IMU_Data.Struct.ax = ax / accelSensitivity;
 8003b90:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fc fc69 	bl	800046c <__aeabi_i2d>
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <MPU925x_ConvertIMU_Data+0x15c>)
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f7fc fdf8 	bl	8000794 <__aeabi_ddiv>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	IMU_Data.Struct.ay = ay / accelSensitivity;
 8003bac:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fc fc5b 	bl	800046c <__aeabi_i2d>
 8003bb6:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <MPU925x_ConvertIMU_Data+0x15c>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f7fc fdea 	bl	8000794 <__aeabi_ddiv>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	IMU_Data.Struct.az = az / accelSensitivity;
 8003bc8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fc fc4d 	bl	800046c <__aeabi_i2d>
 8003bd2:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <MPU925x_ConvertIMU_Data+0x15c>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f7fc fddc 	bl	8000794 <__aeabi_ddiv>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	IMU_Data.Struct.gx = gx / gyroSensitivity;
 8003be4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fc fc3f 	bl	800046c <__aeabi_i2d>
 8003bee:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <MPU925x_ConvertIMU_Data+0x160>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f7fc fdce 	bl	8000794 <__aeabi_ddiv>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	IMU_Data.Struct.gy = gy / gyroSensitivity;
 8003c00:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fc fc31 	bl	800046c <__aeabi_i2d>
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <MPU925x_ConvertIMU_Data+0x160>)
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f7fc fdc0 	bl	8000794 <__aeabi_ddiv>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	IMU_Data.Struct.gz = gz / gyroSensitivity;
 8003c1c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fc23 	bl	800046c <__aeabi_i2d>
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <MPU925x_ConvertIMU_Data+0x160>)
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f7fc fdb2 	bl	8000794 <__aeabi_ddiv>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	return IMU_Data;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	f107 0408 	add.w	r4, r7, #8
 8003c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c4c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	3748      	adds	r7, #72	; 0x48
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bdb0      	pop	{r4, r5, r7, pc}
 8003c58:	20000008 	.word	0x20000008
 8003c5c:	20000010 	.word	0x20000010

08003c60 <MPU925x_ClearChipSelect>:

void MPU925x_ClearChipSelect(uint8_t deviceIndex)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <MPU925x_ClearChipSelect+0x2c>)
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	4413      	add	r3, r2
 8003c72:	330c      	adds	r3, #12
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d100      	bne.n	8003c7c <MPU925x_ClearChipSelect+0x1c>
		while(1);
 8003c7a:	e7fe      	b.n	8003c7a <MPU925x_ClearChipSelect+0x1a>

	ClearChipSelect(deviceIndex);
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f8b4 	bl	8003dec <ClearChipSelect>
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200003bc 	.word	0x200003bc

08003c90 <MPU925x_SetChipSelect>:

void MPU925x_SetChipSelect(uint8_t deviceIndex)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	4a07      	ldr	r2, [pc, #28]	; (8003cbc <MPU925x_SetChipSelect+0x2c>)
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	4413      	add	r3, r2
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d100      	bne.n	8003cac <MPU925x_SetChipSelect+0x1c>
		while(1);
 8003caa:	e7fe      	b.n	8003caa <MPU925x_SetChipSelect+0x1a>

	SetChipSelect(deviceIndex);
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f8b8 	bl	8003e24 <SetChipSelect>
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200003bc 	.word	0x200003bc

08003cc0 <ReadRegData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void ReadRegData(uint8_t deviceIndex, uint8_t startAddress, uint8_t *data, uint8_t nBytes)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	603a      	str	r2, [r7, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	71bb      	strb	r3, [r7, #6]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 f8a3 	bl	8003e24 <SetChipSelect>

	startAddress = startAddress | 0x80;
 8003cde:	79bb      	ldrb	r3, [r7, #6]
 8003ce0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(Device[deviceIndex].SPI_Handle, &startAddress, 1, 10);
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <ReadRegData+0x64>)
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	4413      	add	r3, r2
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	1db9      	adds	r1, r7, #6
 8003cf4:	230a      	movs	r3, #10
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f001 fb85 	bl	8005406 <HAL_SPI_Transmit>
	HAL_SPI_Receive(Device[deviceIndex].SPI_Handle, data, nBytes, 10);
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <ReadRegData+0x64>)
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	4413      	add	r3, r2
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	797b      	ldrb	r3, [r7, #5]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	230a      	movs	r3, #10
 8003d0c:	6839      	ldr	r1, [r7, #0]
 8003d0e:	f001 fce8 	bl	80056e2 <HAL_SPI_Receive>

	ClearChipSelect(deviceIndex);
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f869 	bl	8003dec <ClearChipSelect>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200003bc 	.word	0x200003bc

08003d28 <ReadData_IT>:

static void ReadData_IT(uint8_t deviceIndex, uint8_t *data, uint8_t nBytes)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	71fb      	strb	r3, [r7, #7]
 8003d34:	4613      	mov	r3, r2
 8003d36:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Receive_IT(Device[deviceIndex].SPI_Handle, data, nBytes);
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	4a07      	ldr	r2, [pc, #28]	; (8003d58 <ReadData_IT+0x30>)
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	4413      	add	r3, r2
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	79ba      	ldrb	r2, [r7, #6]
 8003d44:	b292      	uxth	r2, r2
 8003d46:	6839      	ldr	r1, [r7, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f002 f89b 	bl	8005e84 <HAL_SPI_Receive_IT>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200003bc 	.word	0x200003bc

08003d5c <WriteRegData>:

static void WriteRegData(uint8_t deviceIndex, uint8_t startAddress, uint8_t *data, uint8_t nBytes)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	603a      	str	r2, [r7, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	71bb      	strb	r3, [r7, #6]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f855 	bl	8003e24 <SetChipSelect>

	HAL_SPI_Transmit(Device[deviceIndex].SPI_Handle, &startAddress, 1, 10);
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <WriteRegData+0x58>)
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	4413      	add	r3, r2
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	1db9      	adds	r1, r7, #6
 8003d86:	230a      	movs	r3, #10
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f001 fb3c 	bl	8005406 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(Device[deviceIndex].SPI_Handle, data, nBytes, 10);
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <WriteRegData+0x58>)
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	4413      	add	r3, r2
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	797b      	ldrb	r3, [r7, #5]
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	230a      	movs	r3, #10
 8003d9e:	6839      	ldr	r1, [r7, #0]
 8003da0:	f001 fb31 	bl	8005406 <HAL_SPI_Transmit>

	ClearChipSelect(deviceIndex);
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f820 	bl	8003dec <ClearChipSelect>
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	200003bc 	.word	0x200003bc

08003db8 <WriteData_IT>:

static void WriteData_IT(uint8_t deviceIndex, uint8_t *data, uint8_t nBytes)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit_IT(Device[deviceIndex].SPI_Handle, data, nBytes);
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <WriteData_IT+0x30>)
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	4413      	add	r3, r2
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	79ba      	ldrb	r2, [r7, #6]
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 ffc5 	bl	8005d68 <HAL_SPI_Transmit_IT>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200003bc 	.word	0x200003bc

08003dec <ClearChipSelect>:

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CS_GPIOx, Device[deviceIndex].csPin);
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <ClearChipSelect+0x34>)
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3304      	adds	r3, #4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	4906      	ldr	r1, [pc, #24]	; (8003e20 <ClearChipSelect+0x34>)
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	440b      	add	r3, r1
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4610      	mov	r0, r2
 8003e12:	f7ff fc9b 	bl	800374c <LL_GPIO_SetOutputPin>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200003bc 	.word	0x200003bc

08003e24 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CS_GPIOx, Device[deviceIndex].csPin);
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <SetChipSelect+0x34>)
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	4413      	add	r3, r2
 8003e36:	3304      	adds	r3, #4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	4906      	ldr	r1, [pc, #24]	; (8003e58 <SetChipSelect+0x34>)
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	440b      	add	r3, r1
 8003e42:	3308      	adds	r3, #8
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f7ff fc8d 	bl	8003768 <LL_GPIO_ResetOutputPin>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200003bc 	.word	0x200003bc

08003e5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e66:	2003      	movs	r0, #3
 8003e68:	f000 ffe6 	bl	8004e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e6c:	200f      	movs	r0, #15
 8003e6e:	f000 f80d 	bl	8003e8c <HAL_InitTick>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	71fb      	strb	r3, [r7, #7]
 8003e7c:	e001      	b.n	8003e82 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e7e:	f7fe fe5d 	bl	8002b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e82:	79fb      	ldrb	r3, [r7, #7]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e98:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <HAL_InitTick+0x6c>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d023      	beq.n	8003ee8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <HAL_InitTick+0x70>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_InitTick+0x6c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fff3 	bl	8004ea2 <HAL_SYSTICK_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10f      	bne.n	8003ee2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b0f      	cmp	r3, #15
 8003ec6:	d809      	bhi.n	8003edc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	f000 ffbd 	bl	8004e4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_InitTick+0x74>)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e007      	b.n	8003eec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
 8003ee0:	e004      	b.n	8003eec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
 8003ee6:	e001      	b.n	8003eec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	2000001c 	.word	0x2000001c
 8003efc:	20000004 	.word	0x20000004
 8003f00:	20000018 	.word	0x20000018

08003f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_IncTick+0x20>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_IncTick+0x24>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4413      	add	r3, r2
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_IncTick+0x24>)
 8003f16:	6013      	str	r3, [r2, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	2000001c 	.word	0x2000001c
 8003f28:	200003cc 	.word	0x200003cc

08003f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_GetTick+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	200003cc 	.word	0x200003cc

08003f44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0ed      	b.n	8004132 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d102      	bne.n	8003f68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc ffc6 	bl	8000ef4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f78:	f7ff ffd8 	bl	8003f2c <HAL_GetTick>
 8003f7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f7e:	e012      	b.n	8003fa6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f80:	f7ff ffd4 	bl	8003f2c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b0a      	cmp	r3, #10
 8003f8c:	d90b      	bls.n	8003fa6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2205      	movs	r2, #5
 8003f9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e0c5      	b.n	8004132 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0e5      	beq.n	8003f80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0202 	bic.w	r2, r2, #2
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc4:	f7ff ffb2 	bl	8003f2c <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fca:	e012      	b.n	8003ff2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fcc:	f7ff ffae 	bl	8003f2c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b0a      	cmp	r3, #10
 8003fd8:	d90b      	bls.n	8003ff2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2205      	movs	r2, #5
 8003fea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e09f      	b.n	8004132 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7e1b      	ldrb	r3, [r3, #24]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d108      	bne.n	800401a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e007      	b.n	800402a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004028:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	7e5b      	ldrb	r3, [r3, #25]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d108      	bne.n	8004044 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e007      	b.n	8004054 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	7e9b      	ldrb	r3, [r3, #26]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d108      	bne.n	800406e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0220 	orr.w	r2, r2, #32
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e007      	b.n	800407e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0220 	bic.w	r2, r2, #32
 800407c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	7edb      	ldrb	r3, [r3, #27]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d108      	bne.n	8004098 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0210 	bic.w	r2, r2, #16
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	e007      	b.n	80040a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0210 	orr.w	r2, r2, #16
 80040a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	7f1b      	ldrb	r3, [r3, #28]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d108      	bne.n	80040c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0208 	orr.w	r2, r2, #8
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e007      	b.n	80040d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0208 	bic.w	r2, r2, #8
 80040d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7f5b      	ldrb	r3, [r3, #29]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d108      	bne.n	80040ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0204 	orr.w	r2, r2, #4
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e007      	b.n	80040fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0204 	bic.w	r2, r2, #4
 80040fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	ea42 0103 	orr.w	r1, r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	1e5a      	subs	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800413a:	b480      	push	{r7}
 800413c:	b087      	sub	sp, #28
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004150:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d003      	beq.n	8004160 <HAL_CAN_ConfigFilter+0x26>
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	2b02      	cmp	r3, #2
 800415c:	f040 80aa 	bne.w	80042b4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004166:	f043 0201 	orr.w	r2, r3, #1
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2201      	movs	r2, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d123      	bne.n	80041e2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	401a      	ands	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	3248      	adds	r2, #72	; 0x48
 80041c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041d8:	6979      	ldr	r1, [r7, #20]
 80041da:	3348      	adds	r3, #72	; 0x48
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	440b      	add	r3, r1
 80041e0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d122      	bne.n	8004230 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800420a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3248      	adds	r2, #72	; 0x48
 8004210:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004224:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004226:	6979      	ldr	r1, [r7, #20]
 8004228:	3348      	adds	r3, #72	; 0x48
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	440b      	add	r3, r1
 800422e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	43db      	mvns	r3, r3
 8004242:	401a      	ands	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800424a:	e007      	b.n	800425c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	431a      	orrs	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004276:	e007      	b.n	8004288 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	431a      	orrs	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d107      	bne.n	80042a0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	431a      	orrs	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042a6:	f023 0201 	bic.w	r2, r3, #1
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e006      	b.n	80042c2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d12e      	bne.n	8004340 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042fa:	f7ff fe17 	bl	8003f2c <HAL_GetTick>
 80042fe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004300:	e012      	b.n	8004328 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004302:	f7ff fe13 	bl	8003f2c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b0a      	cmp	r3, #10
 800430e:	d90b      	bls.n	8004328 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2205      	movs	r2, #5
 8004320:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e012      	b.n	800434e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e5      	bne.n	8004302 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e006      	b.n	800434e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004356:	b480      	push	{r7}
 8004358:	b089      	sub	sp, #36	; 0x24
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800436a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004374:	7ffb      	ldrb	r3, [r7, #31]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d003      	beq.n	8004382 <HAL_CAN_AddTxMessage+0x2c>
 800437a:	7ffb      	ldrb	r3, [r7, #31]
 800437c:	2b02      	cmp	r3, #2
 800437e:	f040 80ad 	bne.w	80044dc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004392:	2b00      	cmp	r3, #0
 8004394:	d105      	bne.n	80043a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8095 	beq.w	80044cc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	0e1b      	lsrs	r3, r3, #24
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80043ac:	2201      	movs	r2, #1
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	409a      	lsls	r2, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10d      	bne.n	80043da <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80043c8:	68f9      	ldr	r1, [r7, #12]
 80043ca:	6809      	ldr	r1, [r1, #0]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	3318      	adds	r3, #24
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	440b      	add	r3, r1
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e00f      	b.n	80043fa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80043e4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80043ee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3318      	adds	r3, #24
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	440b      	add	r3, r1
 80043f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	3318      	adds	r3, #24
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	440b      	add	r3, r1
 800440a:	3304      	adds	r3, #4
 800440c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	7d1b      	ldrb	r3, [r3, #20]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d111      	bne.n	800443a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	3318      	adds	r3, #24
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	4413      	add	r3, r2
 8004422:	3304      	adds	r3, #4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	6811      	ldr	r1, [r2, #0]
 800442a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	3318      	adds	r3, #24
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	440b      	add	r3, r1
 8004436:	3304      	adds	r3, #4
 8004438:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3307      	adds	r3, #7
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	061a      	lsls	r2, r3, #24
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3306      	adds	r3, #6
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3305      	adds	r3, #5
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	4313      	orrs	r3, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	3204      	adds	r2, #4
 800445a:	7812      	ldrb	r2, [r2, #0]
 800445c:	4610      	mov	r0, r2
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	6811      	ldr	r1, [r2, #0]
 8004462:	ea43 0200 	orr.w	r2, r3, r0
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	440b      	add	r3, r1
 800446c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004470:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3303      	adds	r3, #3
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	061a      	lsls	r2, r3, #24
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3302      	adds	r3, #2
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3301      	adds	r3, #1
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	4313      	orrs	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	7812      	ldrb	r2, [r2, #0]
 8004492:	4610      	mov	r0, r2
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	6811      	ldr	r1, [r2, #0]
 8004498:	ea43 0200 	orr.w	r2, r3, r0
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	440b      	add	r3, r1
 80044a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80044a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	3318      	adds	r3, #24
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	4413      	add	r3, r2
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	6811      	ldr	r1, [r2, #0]
 80044ba:	f043 0201 	orr.w	r2, r3, #1
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	3318      	adds	r3, #24
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	440b      	add	r3, r1
 80044c6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e00e      	b.n	80044ea <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e006      	b.n	80044ea <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3724      	adds	r7, #36	; 0x24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800450a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800450c:	7afb      	ldrb	r3, [r7, #11]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d002      	beq.n	8004518 <HAL_CAN_IsTxMessagePending+0x22>
 8004512:	7afb      	ldrb	r3, [r7, #11]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d10b      	bne.n	8004530 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	069b      	lsls	r3, r3, #26
 8004522:	401a      	ands	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	069b      	lsls	r3, r3, #26
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800452c:	2301      	movs	r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004530:	68fb      	ldr	r3, [r7, #12]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800453e:	b480      	push	{r7}
 8004540:	b087      	sub	sp, #28
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004552:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d003      	beq.n	8004562 <HAL_CAN_GetRxMessage+0x24>
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b02      	cmp	r3, #2
 800455e:	f040 80f3 	bne.w	8004748 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10e      	bne.n	8004586 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d116      	bne.n	80045a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0e7      	b.n	8004756 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d107      	bne.n	80045a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0d8      	b.n	8004756 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	331b      	adds	r3, #27
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	4413      	add	r3, r2
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0204 	and.w	r2, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10c      	bne.n	80045dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	331b      	adds	r3, #27
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	4413      	add	r3, r2
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	0d5b      	lsrs	r3, r3, #21
 80045d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e00b      	b.n	80045f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	331b      	adds	r3, #27
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	4413      	add	r3, r2
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	08db      	lsrs	r3, r3, #3
 80045ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	331b      	adds	r3, #27
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	4413      	add	r3, r2
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0202 	and.w	r2, r3, #2
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	331b      	adds	r3, #27
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	4413      	add	r3, r2
 8004616:	3304      	adds	r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	331b      	adds	r3, #27
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4413      	add	r3, r2
 800462e:	3304      	adds	r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	b2da      	uxtb	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	331b      	adds	r3, #27
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	4413      	add	r3, r2
 8004646:	3304      	adds	r3, #4
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	b29a      	uxth	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	4413      	add	r3, r2
 800465c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	4413      	add	r3, r2
 8004672:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	0a1a      	lsrs	r2, r3, #8
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	4413      	add	r3, r2
 800468c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	0c1a      	lsrs	r2, r3, #16
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	3302      	adds	r3, #2
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0e1a      	lsrs	r2, r3, #24
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	3303      	adds	r3, #3
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	4413      	add	r3, r2
 80046c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	3304      	adds	r3, #4
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	0a1a      	lsrs	r2, r3, #8
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	3305      	adds	r3, #5
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0c1a      	lsrs	r2, r3, #16
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	3306      	adds	r3, #6
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	4413      	add	r3, r2
 800470c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	0e1a      	lsrs	r2, r3, #24
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	3307      	adds	r3, #7
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d108      	bne.n	8004734 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0220 	orr.w	r2, r2, #32
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	e007      	b.n	8004744 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0220 	orr.w	r2, r2, #32
 8004742:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e006      	b.n	8004756 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004776:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004778:	7afb      	ldrb	r3, [r7, #11]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d002      	beq.n	8004784 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800477e:	7afb      	ldrb	r3, [r7, #11]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d10f      	bne.n	80047a4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e005      	b.n	80047a4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80047a4:	68fb      	ldr	r3, [r7, #12]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047c2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d002      	beq.n	80047d0 <HAL_CAN_ActivateNotification+0x1e>
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d109      	bne.n	80047e4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6959      	ldr	r1, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e006      	b.n	80047f2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800480e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d002      	beq.n	800481c <HAL_CAN_DeactivateNotification+0x1e>
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d10a      	bne.n	8004832 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6959      	ldr	r1, [r3, #20]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	43da      	mvns	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	400a      	ands	r2, r1
 800482c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	e006      	b.n	8004840 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
  }
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004854:	2300      	movs	r3, #0
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d07c      	beq.n	800498c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d023      	beq.n	80048e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2201      	movs	r2, #1
 80048a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f983 	bl	8004bba <HAL_CAN_TxMailbox0CompleteCallback>
 80048b4:	e016      	b.n	80048e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
 80048c8:	e00c      	b.n	80048e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
 80048dc:	e002      	b.n	80048e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f989 	bl	8004bf6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d024      	beq.n	8004938 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f963 	bl	8004bce <HAL_CAN_TxMailbox1CompleteCallback>
 8004908:	e016      	b.n	8004938 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	d004      	beq.n	800491e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
 800491c:	e00c      	b.n	8004938 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
 8004930:	e002      	b.n	8004938 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f969 	bl	8004c0a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d024      	beq.n	800498c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800494a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f943 	bl	8004be2 <HAL_CAN_TxMailbox2CompleteCallback>
 800495c:	e016      	b.n	800498c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
 8004970:	e00c      	b.n	800498c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
 8004984:	e002      	b.n	800498c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f949 	bl	8004c1e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2210      	movs	r2, #16
 80049ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d006      	beq.n	80049d2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2208      	movs	r2, #8
 80049ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f930 	bl	8004c32 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d009      	beq.n	80049f0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd ffd4 	bl	8002998 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00c      	beq.n	8004a14 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2210      	movs	r2, #16
 8004a12:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f908 	bl	8004c46 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fd ffc6 	bl	80029e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d006      	beq.n	8004a76 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f8f2 	bl	8004c5a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2208      	movs	r2, #8
 8004a90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8eb 	bl	8004c6e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d07b      	beq.n	8004b9a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d072      	beq.n	8004b92 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	f043 0301 	orr.w	r3, r3, #1
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	f043 0302 	orr.w	r3, r3, #2
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d043      	beq.n	8004b92 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d03e      	beq.n	8004b92 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b1a:	2b60      	cmp	r3, #96	; 0x60
 8004b1c:	d02b      	beq.n	8004b76 <HAL_CAN_IRQHandler+0x32a>
 8004b1e:	2b60      	cmp	r3, #96	; 0x60
 8004b20:	d82e      	bhi.n	8004b80 <HAL_CAN_IRQHandler+0x334>
 8004b22:	2b50      	cmp	r3, #80	; 0x50
 8004b24:	d022      	beq.n	8004b6c <HAL_CAN_IRQHandler+0x320>
 8004b26:	2b50      	cmp	r3, #80	; 0x50
 8004b28:	d82a      	bhi.n	8004b80 <HAL_CAN_IRQHandler+0x334>
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d019      	beq.n	8004b62 <HAL_CAN_IRQHandler+0x316>
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d826      	bhi.n	8004b80 <HAL_CAN_IRQHandler+0x334>
 8004b32:	2b30      	cmp	r3, #48	; 0x30
 8004b34:	d010      	beq.n	8004b58 <HAL_CAN_IRQHandler+0x30c>
 8004b36:	2b30      	cmp	r3, #48	; 0x30
 8004b38:	d822      	bhi.n	8004b80 <HAL_CAN_IRQHandler+0x334>
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d002      	beq.n	8004b44 <HAL_CAN_IRQHandler+0x2f8>
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d005      	beq.n	8004b4e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004b42:	e01d      	b.n	8004b80 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	f043 0308 	orr.w	r3, r3, #8
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b4c:	e019      	b.n	8004b82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	f043 0310 	orr.w	r3, r3, #16
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b56:	e014      	b.n	8004b82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	f043 0320 	orr.w	r3, r3, #32
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b60:	e00f      	b.n	8004b82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b6a:	e00a      	b.n	8004b82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b74:	e005      	b.n	8004b82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004b7e:	e000      	b.n	8004b82 <HAL_CAN_IRQHandler+0x336>
            break;
 8004b80:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004b90:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2204      	movs	r2, #4
 8004b98:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f868 	bl	8004c82 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3728      	adds	r7, #40	; 0x28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <__NVIC_SetPriorityGrouping>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <__NVIC_SetPriorityGrouping+0x44>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cca:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <__NVIC_SetPriorityGrouping+0x44>)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	60d3      	str	r3, [r2, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	e000ed00 	.word	0xe000ed00

08004ce0 <__NVIC_GetPriorityGrouping>:
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	0a1b      	lsrs	r3, r3, #8
 8004cea:	f003 0307 	and.w	r3, r3, #7
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000ed00 	.word	0xe000ed00

08004cfc <__NVIC_EnableIRQ>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	db0b      	blt.n	8004d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	f003 021f 	and.w	r2, r3, #31
 8004d14:	4907      	ldr	r1, [pc, #28]	; (8004d34 <__NVIC_EnableIRQ+0x38>)
 8004d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	e000e100 	.word	0xe000e100

08004d38 <__NVIC_SetPriority>:
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	6039      	str	r1, [r7, #0]
 8004d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	db0a      	blt.n	8004d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	490c      	ldr	r1, [pc, #48]	; (8004d84 <__NVIC_SetPriority+0x4c>)
 8004d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d56:	0112      	lsls	r2, r2, #4
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d60:	e00a      	b.n	8004d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	4908      	ldr	r1, [pc, #32]	; (8004d88 <__NVIC_SetPriority+0x50>)
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	3b04      	subs	r3, #4
 8004d70:	0112      	lsls	r2, r2, #4
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	440b      	add	r3, r1
 8004d76:	761a      	strb	r2, [r3, #24]
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	e000e100 	.word	0xe000e100
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <NVIC_EncodePriority>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	; 0x24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f1c3 0307 	rsb	r3, r3, #7
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	bf28      	it	cs
 8004daa:	2304      	movcs	r3, #4
 8004dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3304      	adds	r3, #4
 8004db2:	2b06      	cmp	r3, #6
 8004db4:	d902      	bls.n	8004dbc <NVIC_EncodePriority+0x30>
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3b03      	subs	r3, #3
 8004dba:	e000      	b.n	8004dbe <NVIC_EncodePriority+0x32>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	401a      	ands	r2, r3
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	43d9      	mvns	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de4:	4313      	orrs	r3, r2
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3724      	adds	r7, #36	; 0x24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e04:	d301      	bcc.n	8004e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e06:	2301      	movs	r3, #1
 8004e08:	e00f      	b.n	8004e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e0a:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <SysTick_Config+0x40>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e12:	210f      	movs	r1, #15
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	f7ff ff8e 	bl	8004d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <SysTick_Config+0x40>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <SysTick_Config+0x40>)
 8004e24:	2207      	movs	r2, #7
 8004e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	e000e010 	.word	0xe000e010

08004e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff ff29 	bl	8004c98 <__NVIC_SetPriorityGrouping>
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	4603      	mov	r3, r0
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e60:	f7ff ff3e 	bl	8004ce0 <__NVIC_GetPriorityGrouping>
 8004e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	6978      	ldr	r0, [r7, #20]
 8004e6c:	f7ff ff8e 	bl	8004d8c <NVIC_EncodePriority>
 8004e70:	4602      	mov	r2, r0
 8004e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e76:	4611      	mov	r1, r2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff ff5d 	bl	8004d38 <__NVIC_SetPriority>
}
 8004e7e:	bf00      	nop
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff ff31 	bl	8004cfc <__NVIC_EnableIRQ>
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff ffa2 	bl	8004df4 <SysTick_Config>
 8004eb0:	4603      	mov	r3, r0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d005      	beq.n	8004ede <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
 8004edc:	e029      	b.n	8004f32 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 020e 	bic.w	r2, r2, #14
 8004eec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0201 	bic.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f003 021c 	and.w	r2, r3, #28
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f10:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
    }
  }
  return status;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f4a:	e17f      	b.n	800524c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	2101      	movs	r1, #1
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	4013      	ands	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8171 	beq.w	8005246 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d005      	beq.n	8004f7c <HAL_GPIO_Init+0x40>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d130      	bne.n	8004fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	2203      	movs	r2, #3
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4013      	ands	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f003 0201 	and.w	r2, r3, #1
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d118      	bne.n	800501c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	08db      	lsrs	r3, r3, #3
 8005006:	f003 0201 	and.w	r2, r3, #1
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	2b03      	cmp	r3, #3
 8005026:	d017      	beq.n	8005058 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	2203      	movs	r2, #3
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4013      	ands	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d123      	bne.n	80050ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	08da      	lsrs	r2, r3, #3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3208      	adds	r2, #8
 800506c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005070:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	220f      	movs	r2, #15
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	43db      	mvns	r3, r3
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4013      	ands	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	08da      	lsrs	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3208      	adds	r2, #8
 80050a6:	6939      	ldr	r1, [r7, #16]
 80050a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	2203      	movs	r2, #3
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	43db      	mvns	r3, r3
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4013      	ands	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 0203 	and.w	r2, r3, #3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80ac 	beq.w	8005246 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ee:	4b5f      	ldr	r3, [pc, #380]	; (800526c <HAL_GPIO_Init+0x330>)
 80050f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f2:	4a5e      	ldr	r2, [pc, #376]	; (800526c <HAL_GPIO_Init+0x330>)
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	6613      	str	r3, [r2, #96]	; 0x60
 80050fa:	4b5c      	ldr	r3, [pc, #368]	; (800526c <HAL_GPIO_Init+0x330>)
 80050fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	60bb      	str	r3, [r7, #8]
 8005104:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005106:	4a5a      	ldr	r2, [pc, #360]	; (8005270 <HAL_GPIO_Init+0x334>)
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	089b      	lsrs	r3, r3, #2
 800510c:	3302      	adds	r3, #2
 800510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005112:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	220f      	movs	r2, #15
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43db      	mvns	r3, r3
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4013      	ands	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005130:	d025      	beq.n	800517e <HAL_GPIO_Init+0x242>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a4f      	ldr	r2, [pc, #316]	; (8005274 <HAL_GPIO_Init+0x338>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01f      	beq.n	800517a <HAL_GPIO_Init+0x23e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a4e      	ldr	r2, [pc, #312]	; (8005278 <HAL_GPIO_Init+0x33c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d019      	beq.n	8005176 <HAL_GPIO_Init+0x23a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a4d      	ldr	r2, [pc, #308]	; (800527c <HAL_GPIO_Init+0x340>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_GPIO_Init+0x236>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a4c      	ldr	r2, [pc, #304]	; (8005280 <HAL_GPIO_Init+0x344>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00d      	beq.n	800516e <HAL_GPIO_Init+0x232>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a4b      	ldr	r2, [pc, #300]	; (8005284 <HAL_GPIO_Init+0x348>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <HAL_GPIO_Init+0x22e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a4a      	ldr	r2, [pc, #296]	; (8005288 <HAL_GPIO_Init+0x34c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d101      	bne.n	8005166 <HAL_GPIO_Init+0x22a>
 8005162:	2306      	movs	r3, #6
 8005164:	e00c      	b.n	8005180 <HAL_GPIO_Init+0x244>
 8005166:	2307      	movs	r3, #7
 8005168:	e00a      	b.n	8005180 <HAL_GPIO_Init+0x244>
 800516a:	2305      	movs	r3, #5
 800516c:	e008      	b.n	8005180 <HAL_GPIO_Init+0x244>
 800516e:	2304      	movs	r3, #4
 8005170:	e006      	b.n	8005180 <HAL_GPIO_Init+0x244>
 8005172:	2303      	movs	r3, #3
 8005174:	e004      	b.n	8005180 <HAL_GPIO_Init+0x244>
 8005176:	2302      	movs	r3, #2
 8005178:	e002      	b.n	8005180 <HAL_GPIO_Init+0x244>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <HAL_GPIO_Init+0x244>
 800517e:	2300      	movs	r3, #0
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	f002 0203 	and.w	r2, r2, #3
 8005186:	0092      	lsls	r2, r2, #2
 8005188:	4093      	lsls	r3, r2
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005190:	4937      	ldr	r1, [pc, #220]	; (8005270 <HAL_GPIO_Init+0x334>)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	089b      	lsrs	r3, r3, #2
 8005196:	3302      	adds	r3, #2
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800519e:	4b3b      	ldr	r3, [pc, #236]	; (800528c <HAL_GPIO_Init+0x350>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4013      	ands	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80051c2:	4a32      	ldr	r2, [pc, #200]	; (800528c <HAL_GPIO_Init+0x350>)
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80051c8:	4b30      	ldr	r3, [pc, #192]	; (800528c <HAL_GPIO_Init+0x350>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4013      	ands	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80051ec:	4a27      	ldr	r2, [pc, #156]	; (800528c <HAL_GPIO_Init+0x350>)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80051f2:	4b26      	ldr	r3, [pc, #152]	; (800528c <HAL_GPIO_Init+0x350>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4013      	ands	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005216:	4a1d      	ldr	r2, [pc, #116]	; (800528c <HAL_GPIO_Init+0x350>)
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800521c:	4b1b      	ldr	r3, [pc, #108]	; (800528c <HAL_GPIO_Init+0x350>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	43db      	mvns	r3, r3
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4013      	ands	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005240:	4a12      	ldr	r2, [pc, #72]	; (800528c <HAL_GPIO_Init+0x350>)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	3301      	adds	r3, #1
 800524a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	fa22 f303 	lsr.w	r3, r2, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	f47f ae78 	bne.w	8004f4c <HAL_GPIO_Init+0x10>
  }
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	40010000 	.word	0x40010000
 8005274:	48000400 	.word	0x48000400
 8005278:	48000800 	.word	0x48000800
 800527c:	48000c00 	.word	0x48000c00
 8005280:	48001000 	.word	0x48001000
 8005284:	48001400 	.word	0x48001400
 8005288:	48001800 	.word	0x48001800
 800528c:	40010400 	.word	0x40010400

08005290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	807b      	strh	r3, [r7, #2]
 800529c:	4613      	mov	r3, r2
 800529e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052a0:	787b      	ldrb	r3, [r7, #1]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052a6:	887a      	ldrh	r2, [r7, #2]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052ac:	e002      	b.n	80052b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052ae:	887a      	ldrh	r2, [r7, #2]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e095      	b.n	80053fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d108      	bne.n	80052ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e2:	d009      	beq.n	80052f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	61da      	str	r2, [r3, #28]
 80052ea:	e005      	b.n	80052f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fd fbc8 	bl	8002aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800532e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005338:	d902      	bls.n	8005340 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e002      	b.n	8005346 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005344:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800534e:	d007      	beq.n	8005360 <HAL_SPI_Init+0xa0>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005358:	d002      	beq.n	8005360 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	ea42 0103 	orr.w	r1, r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	0c1b      	lsrs	r3, r3, #16
 80053bc:	f003 0204 	and.w	r2, r3, #4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053dc:	ea42 0103 	orr.w	r1, r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b088      	sub	sp, #32
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_SPI_Transmit+0x22>
 8005424:	2302      	movs	r3, #2
 8005426:	e158      	b.n	80056da <HAL_SPI_Transmit+0x2d4>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005430:	f7fe fd7c 	bl	8003f2c <HAL_GetTick>
 8005434:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b01      	cmp	r3, #1
 8005444:	d002      	beq.n	800544c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005446:	2302      	movs	r3, #2
 8005448:	77fb      	strb	r3, [r7, #31]
    goto error;
 800544a:	e13d      	b.n	80056c8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_SPI_Transmit+0x52>
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800545c:	e134      	b.n	80056c8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2203      	movs	r2, #3
 8005462:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	88fa      	ldrh	r2, [r7, #6]
 8005476:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a8:	d10f      	bne.n	80054ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d007      	beq.n	80054e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054f0:	d94b      	bls.n	800558a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_SPI_Transmit+0xfa>
 80054fa:	8afb      	ldrh	r3, [r7, #22]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d13e      	bne.n	800557e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	881a      	ldrh	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	1c9a      	adds	r2, r3, #2
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005524:	e02b      	b.n	800557e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d112      	bne.n	800555a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	881a      	ldrh	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	1c9a      	adds	r2, r3, #2
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005558:	e011      	b.n	800557e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800555a:	f7fe fce7 	bl	8003f2c <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d803      	bhi.n	8005572 <HAL_SPI_Transmit+0x16c>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d102      	bne.n	8005578 <HAL_SPI_Transmit+0x172>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800557c:	e0a4      	b.n	80056c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1ce      	bne.n	8005526 <HAL_SPI_Transmit+0x120>
 8005588:	e07c      	b.n	8005684 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_SPI_Transmit+0x192>
 8005592:	8afb      	ldrh	r3, [r7, #22]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d170      	bne.n	800567a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d912      	bls.n	80055c8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	1c9a      	adds	r2, r3, #2
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	3b02      	subs	r3, #2
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055c6:	e058      	b.n	800567a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	7812      	ldrb	r2, [r2, #0]
 80055d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80055ee:	e044      	b.n	800567a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d12b      	bne.n	8005656 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d912      	bls.n	800562e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	881a      	ldrh	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	1c9a      	adds	r2, r3, #2
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b02      	subs	r3, #2
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800562c:	e025      	b.n	800567a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	7812      	ldrb	r2, [r2, #0]
 800563a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005654:	e011      	b.n	800567a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005656:	f7fe fc69 	bl	8003f2c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d803      	bhi.n	800566e <HAL_SPI_Transmit+0x268>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d102      	bne.n	8005674 <HAL_SPI_Transmit+0x26e>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005678:	e026      	b.n	80056c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1b5      	bne.n	80055f0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f001 f999 	bl	80069c0 <SPI_EndRxTxTransaction>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056a2:	2300      	movs	r3, #0
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e000      	b.n	80056c8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80056c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b088      	sub	sp, #32
 80056e6:	af02      	add	r7, sp, #8
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fe:	d112      	bne.n	8005726 <HAL_SPI_Receive+0x44>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10e      	bne.n	8005726 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2204      	movs	r2, #4
 800570c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005710:	88fa      	ldrh	r2, [r7, #6]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4613      	mov	r3, r2
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f910 	bl	8005942 <HAL_SPI_TransmitReceive>
 8005722:	4603      	mov	r3, r0
 8005724:	e109      	b.n	800593a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_SPI_Receive+0x52>
 8005730:	2302      	movs	r3, #2
 8005732:	e102      	b.n	800593a <HAL_SPI_Receive+0x258>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800573c:	f7fe fbf6 	bl	8003f2c <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b01      	cmp	r3, #1
 800574c:	d002      	beq.n	8005754 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800574e:	2302      	movs	r3, #2
 8005750:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005752:	e0e9      	b.n	8005928 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_SPI_Receive+0x7e>
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d102      	bne.n	8005766 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005764:	e0e0      	b.n	8005928 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2204      	movs	r2, #4
 800576a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	88fa      	ldrh	r2, [r7, #6]
 800577e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057b0:	d908      	bls.n	80057c4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057c0:	605a      	str	r2, [r3, #4]
 80057c2:	e007      	b.n	80057d4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057dc:	d10f      	bne.n	80057fe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d007      	beq.n	800581c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800581a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005824:	d867      	bhi.n	80058f6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005826:	e030      	b.n	800588a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d117      	bne.n	8005866 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f103 020c 	add.w	r2, r3, #12
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	7812      	ldrb	r2, [r2, #0]
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005864:	e011      	b.n	800588a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005866:	f7fe fb61 	bl	8003f2c <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d803      	bhi.n	800587e <HAL_SPI_Receive+0x19c>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d102      	bne.n	8005884 <HAL_SPI_Receive+0x1a2>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005888:	e04e      	b.n	8005928 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1c8      	bne.n	8005828 <HAL_SPI_Receive+0x146>
 8005896:	e034      	b.n	8005902 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d115      	bne.n	80058d2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	b292      	uxth	r2, r2
 80058b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	1c9a      	adds	r2, r3, #2
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058d0:	e011      	b.n	80058f6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d2:	f7fe fb2b 	bl	8003f2c <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d803      	bhi.n	80058ea <HAL_SPI_Receive+0x208>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d102      	bne.n	80058f0 <HAL_SPI_Receive+0x20e>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058f4:	e018      	b.n	8005928 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1ca      	bne.n	8005898 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f001 f802 	bl	8006910 <SPI_EndRxTransaction>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	75fb      	strb	r3, [r7, #23]
 8005924:	e000      	b.n	8005928 <HAL_SPI_Receive+0x246>
  }

error :
 8005926:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005938:	7dfb      	ldrb	r3, [r7, #23]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b08a      	sub	sp, #40	; 0x28
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005950:	2301      	movs	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x26>
 8005964:	2302      	movs	r3, #2
 8005966:	e1fb      	b.n	8005d60 <HAL_SPI_TransmitReceive+0x41e>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005970:	f7fe fadc 	bl	8003f2c <HAL_GetTick>
 8005974:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800597c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005984:	887b      	ldrh	r3, [r7, #2]
 8005986:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005988:	887b      	ldrh	r3, [r7, #2]
 800598a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800598c:	7efb      	ldrb	r3, [r7, #27]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d00e      	beq.n	80059b0 <HAL_SPI_TransmitReceive+0x6e>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005998:	d106      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x66>
 80059a2:	7efb      	ldrb	r3, [r7, #27]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d003      	beq.n	80059b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80059a8:	2302      	movs	r3, #2
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80059ae:	e1cd      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x80>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x80>
 80059bc:	887b      	ldrh	r3, [r7, #2]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d103      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80059c8:	e1c0      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d003      	beq.n	80059de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2205      	movs	r2, #5
 80059da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	887a      	ldrh	r2, [r7, #2]
 80059ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	887a      	ldrh	r2, [r7, #2]
 80059f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	887a      	ldrh	r2, [r7, #2]
 8005a0a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a20:	d802      	bhi.n	8005a28 <HAL_SPI_TransmitReceive+0xe6>
 8005a22:	8a3b      	ldrh	r3, [r7, #16]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d908      	bls.n	8005a3a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	e007      	b.n	8005a4a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a48:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	d007      	beq.n	8005a68 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a70:	d97c      	bls.n	8005b6c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_SPI_TransmitReceive+0x13e>
 8005a7a:	8a7b      	ldrh	r3, [r7, #18]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d169      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	881a      	ldrh	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	1c9a      	adds	r2, r3, #2
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aa4:	e056      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d11b      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x1aa>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <HAL_SPI_TransmitReceive+0x1aa>
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d113      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	881a      	ldrh	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	1c9a      	adds	r2, r3, #2
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d11c      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x1f2>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	b292      	uxth	r2, r2
 8005b12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	1c9a      	adds	r2, r3, #2
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b30:	2301      	movs	r3, #1
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b34:	f7fe f9fa 	bl	8003f2c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d807      	bhi.n	8005b54 <HAL_SPI_TransmitReceive+0x212>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d003      	beq.n	8005b54 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b52:	e0fb      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1a3      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0x164>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d19d      	bne.n	8005aa6 <HAL_SPI_TransmitReceive+0x164>
 8005b6a:	e0df      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_SPI_TransmitReceive+0x23a>
 8005b74:	8a7b      	ldrh	r3, [r7, #18]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	f040 80cb 	bne.w	8005d12 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d912      	bls.n	8005bac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	881a      	ldrh	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	1c9a      	adds	r2, r3, #2
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b02      	subs	r3, #2
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005baa:	e0b2      	b.n	8005d12 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd2:	e09e      	b.n	8005d12 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d134      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x30a>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d02f      	beq.n	8005c4c <HAL_SPI_TransmitReceive+0x30a>
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d12c      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d912      	bls.n	8005c22 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	881a      	ldrh	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	1c9a      	adds	r2, r3, #2
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b02      	subs	r3, #2
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c20:	e012      	b.n	8005c48 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	7812      	ldrb	r2, [r2, #0]
 8005c2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d148      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x3aa>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d042      	beq.n	8005cec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d923      	bls.n	8005cba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	b292      	uxth	r2, r2
 8005c7e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	1c9a      	adds	r2, r3, #2
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b02      	subs	r3, #2
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d81f      	bhi.n	8005ce8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cb6:	605a      	str	r2, [r3, #4]
 8005cb8:	e016      	b.n	8005ce8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f103 020c 	add.w	r2, r3, #12
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	7812      	ldrb	r2, [r2, #0]
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cec:	f7fe f91e 	bl	8003f2c <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d803      	bhi.n	8005d04 <HAL_SPI_TransmitReceive+0x3c2>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d102      	bne.n	8005d0a <HAL_SPI_TransmitReceive+0x3c8>
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d10:	e01c      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f47f af5b 	bne.w	8005bd4 <HAL_SPI_TransmitReceive+0x292>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f47f af54 	bne.w	8005bd4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fe45 	bl	80069c0 <SPI_EndRxTxTransaction>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d006      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	661a      	str	r2, [r3, #96]	; 0x60
 8005d48:	e000      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005d4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3728      	adds	r7, #40	; 0x28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_SPI_Transmit_IT+0x20>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e072      	b.n	8005e6e <HAL_SPI_Transmit_IT+0x106>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_SPI_Transmit_IT+0x34>
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005da0:	e060      	b.n	8005e64 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d002      	beq.n	8005db4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005dae:	2302      	movs	r3, #2
 8005db0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005db2:	e057      	b.n	8005e64 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2203      	movs	r2, #3
 8005db8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	88fa      	ldrh	r2, [r7, #6]
 8005dcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	88fa      	ldrh	r2, [r7, #6]
 8005dd2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005df8:	d903      	bls.n	8005e02 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <HAL_SPI_Transmit_IT+0x114>)
 8005dfe:	651a      	str	r2, [r3, #80]	; 0x50
 8005e00:	e002      	b.n	8005e08 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a1e      	ldr	r2, [pc, #120]	; (8005e80 <HAL_SPI_Transmit_IT+0x118>)
 8005e06:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e10:	d10f      	bne.n	8005e32 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005e40:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d008      	beq.n	8005e62 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	e000      	b.n	8005e64 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8005e62:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	0800668f 	.word	0x0800668f
 8005e80:	08006649 	.word	0x08006649

08005e84 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d110      	bne.n	8005ec0 <HAL_SPI_Receive_IT+0x3c>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea6:	d10b      	bne.n	8005ec0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2204      	movs	r2, #4
 8005eac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	68b9      	ldr	r1, [r7, #8]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 f894 	bl	8005fe4 <HAL_SPI_TransmitReceive_IT>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	e089      	b.n	8005fd4 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_SPI_Receive_IT+0x4a>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e082      	b.n	8005fd4 <HAL_SPI_Receive_IT+0x150>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d002      	beq.n	8005ee8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ee6:	e070      	b.n	8005fca <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <HAL_SPI_Receive_IT+0x70>
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ef8:	e067      	b.n	8005fca <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2204      	movs	r2, #4
 8005efe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	88fa      	ldrh	r2, [r7, #6]
 8005f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	88fa      	ldrh	r2, [r7, #6]
 8005f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f3e:	d90b      	bls.n	8005f58 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f4e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a22      	ldr	r2, [pc, #136]	; (8005fdc <HAL_SPI_Receive_IT+0x158>)
 8005f54:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f56:	e00a      	b.n	8005f6e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f66:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4a1d      	ldr	r2, [pc, #116]	; (8005fe0 <HAL_SPI_Receive_IT+0x15c>)
 8005f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f76:	d10f      	bne.n	8005f98 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f96:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005fa6:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d008      	beq.n	8005fc8 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	e000      	b.n	8005fca <HAL_SPI_Receive_IT+0x146>
  }

error :
 8005fc8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3718      	adds	r7, #24
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	080065fd 	.word	0x080065fd
 8005fe0:	080065ad 	.word	0x080065ad

08005fe4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_SPI_TransmitReceive_IT+0x20>
 8006000:	2302      	movs	r3, #2
 8006002:	e091      	b.n	8006128 <HAL_SPI_TransmitReceive_IT+0x144>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006012:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800601a:	7dbb      	ldrb	r3, [r7, #22]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d00d      	beq.n	800603c <HAL_SPI_TransmitReceive_IT+0x58>
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006026:	d106      	bne.n	8006036 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <HAL_SPI_TransmitReceive_IT+0x52>
 8006030:	7dbb      	ldrb	r3, [r7, #22]
 8006032:	2b04      	cmp	r3, #4
 8006034:	d002      	beq.n	800603c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006036:	2302      	movs	r3, #2
 8006038:	75fb      	strb	r3, [r7, #23]
    goto error;
 800603a:	e070      	b.n	800611e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <HAL_SPI_TransmitReceive_IT+0x6a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <HAL_SPI_TransmitReceive_IT+0x6a>
 8006048:	887b      	ldrh	r3, [r7, #2]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d102      	bne.n	8006054 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006052:	e064      	b.n	800611e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b04      	cmp	r3, #4
 800605e:	d003      	beq.n	8006068 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2205      	movs	r2, #5
 8006064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	887a      	ldrh	r2, [r7, #2]
 800607e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	887a      	ldrh	r2, [r7, #2]
 800608a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	887a      	ldrh	r2, [r7, #2]
 8006092:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800609e:	d906      	bls.n	80060ae <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4a24      	ldr	r2, [pc, #144]	; (8006134 <HAL_SPI_TransmitReceive_IT+0x150>)
 80060a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a23      	ldr	r2, [pc, #140]	; (8006138 <HAL_SPI_TransmitReceive_IT+0x154>)
 80060aa:	651a      	str	r2, [r3, #80]	; 0x50
 80060ac:	e005      	b.n	80060ba <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a22      	ldr	r2, [pc, #136]	; (800613c <HAL_SPI_TransmitReceive_IT+0x158>)
 80060b2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a22      	ldr	r2, [pc, #136]	; (8006140 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80060b8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060c2:	d802      	bhi.n	80060ca <HAL_SPI_TransmitReceive_IT+0xe6>
 80060c4:	887b      	ldrh	r3, [r7, #2]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d908      	bls.n	80060dc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060d8:	605a      	str	r2, [r3, #4]
 80060da:	e007      	b.n	80060ec <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060ea:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80060fa:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006106:	2b40      	cmp	r3, #64	; 0x40
 8006108:	d008      	beq.n	800611c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e000      	b.n	800611e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800611c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
}
 8006128:	4618      	mov	r0, r3
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	080064e7 	.word	0x080064e7
 8006138:	0800654d 	.word	0x0800654d
 800613c:	08006397 	.word	0x08006397
 8006140:	08006455 	.word	0x08006455

08006144 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	099b      	lsrs	r3, r3, #6
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10f      	bne.n	8006188 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	099b      	lsrs	r3, r3, #6
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d004      	beq.n	8006188 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
    return;
 8006186:	e0d7      	b.n	8006338 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_SPI_IRQHandler+0x66>
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	09db      	lsrs	r3, r3, #7
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d004      	beq.n	80061aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	4798      	blx	r3
    return;
 80061a8:	e0c6      	b.n	8006338 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10c      	bne.n	80061d0 <HAL_SPI_IRQHandler+0x8c>
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	099b      	lsrs	r3, r3, #6
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80b4 	beq.w	8006338 <HAL_SPI_IRQHandler+0x1f4>
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	095b      	lsrs	r3, r3, #5
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 80ad 	beq.w	8006338 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	099b      	lsrs	r3, r3, #6
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d023      	beq.n	8006232 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d011      	beq.n	800621a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fa:	f043 0204 	orr.w	r2, r3, #4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	e00b      	b.n	8006232 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	693b      	ldr	r3, [r7, #16]
        return;
 8006230:	e082      	b.n	8006338 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	095b      	lsrs	r3, r3, #5
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d014      	beq.n	8006268 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006242:	f043 0201 	orr.w	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00c      	beq.n	800628e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006278:	f043 0208 	orr.w	r2, r3, #8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006280:	2300      	movs	r3, #0
 8006282:	60bb      	str	r3, [r7, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60bb      	str	r3, [r7, #8]
 800628c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006292:	2b00      	cmp	r3, #0
 8006294:	d04f      	beq.n	8006336 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <HAL_SPI_IRQHandler+0x17e>
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d034      	beq.n	800632c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0203 	bic.w	r2, r2, #3
 80062d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d011      	beq.n	80062fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062de:	4a18      	ldr	r2, [pc, #96]	; (8006340 <HAL_SPI_IRQHandler+0x1fc>)
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fde7 	bl	8004eba <HAL_DMA_Abort_IT>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006302:	2b00      	cmp	r3, #0
 8006304:	d016      	beq.n	8006334 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630a:	4a0d      	ldr	r2, [pc, #52]	; (8006340 <HAL_SPI_IRQHandler+0x1fc>)
 800630c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fdd1 	bl	8004eba <HAL_DMA_Abort_IT>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800632a:	e003      	b.n	8006334 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f813 	bl	8006358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006332:	e000      	b.n	8006336 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006334:	bf00      	nop
    return;
 8006336:	bf00      	nop
  }
}
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	0800636d 	.word	0x0800636d

08006344 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff ffe5 	bl	8006358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800638e:	bf00      	nop
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d923      	bls.n	80063f2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	b292      	uxth	r2, r2
 80063b6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	1c9a      	adds	r2, r3, #2
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b02      	subs	r3, #2
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d11f      	bne.n	8006420 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063ee:	605a      	str	r2, [r3, #4]
 80063f0:	e016      	b.n	8006420 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f103 020c 	add.w	r2, r3, #12
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	7812      	ldrb	r2, [r2, #0]
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10f      	bne.n	800644c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800643a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fb00 	bl	8006a4c <SPI_CloseRxTx_ISR>
    }
  }
}
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b01      	cmp	r3, #1
 8006464:	d912      	bls.n	800648c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	881a      	ldrh	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006476:	1c9a      	adds	r2, r3, #2
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b02      	subs	r3, #2
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	87da      	strh	r2, [r3, #62]	; 0x3e
 800648a:	e012      	b.n	80064b2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	7812      	ldrb	r2, [r2, #0]
 8006498:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d110      	bne.n	80064de <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ca:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fab7 	bl	8006a4c <SPI_CloseRxTx_ISR>
    }
  }
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	b292      	uxth	r2, r2
 80064fa:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	1c9a      	adds	r2, r3, #2
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10f      	bne.n	8006544 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006532:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fa84 	bl	8006a4c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006544:	bf00      	nop
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	881a      	ldrh	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	1c9a      	adds	r2, r3, #2
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d110      	bne.n	80065a4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006590:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d102      	bne.n	80065a4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa54 	bl	8006a4c <SPI_CloseRxTx_ISR>
    }
  }
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f103 020c 	add.w	r2, r3, #12
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	7812      	ldrb	r2, [r2, #0]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d102      	bne.n	80065f4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa6e 	bl	8006ad0 <SPI_CloseRx_ISR>
  }
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	b292      	uxth	r2, r2
 8006610:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	1c9a      	adds	r2, r3, #2
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fa48 	bl	8006ad0 <SPI_CloseRx_ISR>
  }
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	330c      	adds	r3, #12
 800665a:	7812      	ldrb	r2, [r2, #0]
 800665c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666c:	b29b      	uxth	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	b29a      	uxth	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667a:	b29b      	uxth	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fa55 	bl	8006b30 <SPI_CloseTx_ISR>
  }
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	881a      	ldrh	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	1c9a      	adds	r2, r3, #2
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fa33 	bl	8006b30 <SPI_CloseTx_ISR>
  }
}
 80066ca:	bf00      	nop
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066e4:	f7fd fc22 	bl	8003f2c <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	4413      	add	r3, r2
 80066f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066f4:	f7fd fc1a 	bl	8003f2c <HAL_GetTick>
 80066f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066fa:	4b39      	ldr	r3, [pc, #228]	; (80067e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	015b      	lsls	r3, r3, #5
 8006700:	0d1b      	lsrs	r3, r3, #20
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	fb02 f303 	mul.w	r3, r2, r3
 8006708:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800670a:	e054      	b.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d050      	beq.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006714:	f7fd fc0a 	bl	8003f2c <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	429a      	cmp	r2, r3
 8006722:	d902      	bls.n	800672a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d13d      	bne.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006742:	d111      	bne.n	8006768 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800674c:	d004      	beq.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006756:	d107      	bne.n	8006768 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006770:	d10f      	bne.n	8006792 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e017      	b.n	80067d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4013      	ands	r3, r2
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	bf0c      	ite	eq
 80067c6:	2301      	moveq	r3, #1
 80067c8:	2300      	movne	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d19b      	bne.n	800670c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000004 	.word	0x20000004

080067e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08a      	sub	sp, #40	; 0x28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80067f6:	f7fd fb99 	bl	8003f2c <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	4413      	add	r3, r2
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006806:	f7fd fb91 	bl	8003f2c <HAL_GetTick>
 800680a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006814:	4b3d      	ldr	r3, [pc, #244]	; (800690c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	00da      	lsls	r2, r3, #3
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	0d1b      	lsrs	r3, r3, #20
 8006824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800682c:	e060      	b.n	80068f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006834:	d107      	bne.n	8006846 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006844:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d050      	beq.n	80068f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800684e:	f7fd fb6d 	bl	8003f2c <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685a:	429a      	cmp	r2, r3
 800685c:	d902      	bls.n	8006864 <SPI_WaitFifoStateUntilTimeout+0x80>
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	d13d      	bne.n	80068e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006872:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800687c:	d111      	bne.n	80068a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006886:	d004      	beq.n	8006892 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d107      	bne.n	80068a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068aa:	d10f      	bne.n	80068cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e010      	b.n	8006902 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d196      	bne.n	800682e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3728      	adds	r7, #40	; 0x28
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000004 	.word	0x20000004

08006910 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006924:	d111      	bne.n	800694a <SPI_EndRxTransaction+0x3a>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692e:	d004      	beq.n	800693a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006938:	d107      	bne.n	800694a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006948:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2200      	movs	r2, #0
 8006952:	2180      	movs	r1, #128	; 0x80
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7ff febd 	bl	80066d4 <SPI_WaitFlagStateUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d007      	beq.n	8006970 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006964:	f043 0220 	orr.w	r2, r3, #32
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e023      	b.n	80069b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006978:	d11d      	bne.n	80069b6 <SPI_EndRxTransaction+0xa6>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006982:	d004      	beq.n	800698e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698c:	d113      	bne.n	80069b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2200      	movs	r2, #0
 8006996:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7ff ff22 	bl	80067e4 <SPI_WaitFifoStateUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d007      	beq.n	80069b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069aa:	f043 0220 	orr.w	r2, r3, #32
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e000      	b.n	80069b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7ff ff03 	bl	80067e4 <SPI_WaitFifoStateUntilTimeout>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d007      	beq.n	80069f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e8:	f043 0220 	orr.w	r2, r3, #32
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e027      	b.n	8006a44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	2180      	movs	r1, #128	; 0x80
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7ff fe68 	bl	80066d4 <SPI_WaitFlagStateUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0e:	f043 0220 	orr.w	r2, r3, #32
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e014      	b.n	8006a44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff fedc 	bl	80067e4 <SPI_WaitFifoStateUntilTimeout>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a36:	f043 0220 	orr.w	r2, r3, #32
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e000      	b.n	8006a44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a54:	f7fd fa6a 	bl	8003f2c <HAL_GetTick>
 8006a58:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0220 	bic.w	r2, r2, #32
 8006a68:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	2164      	movs	r1, #100	; 0x64
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff ffa6 	bl	80069c0 <SPI_EndRxTxTransaction>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a7e:	f043 0220 	orr.w	r2, r3, #32
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d115      	bne.n	8006aba <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d107      	bne.n	8006aaa <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7fb ff68 	bl	8002978 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006aa8:	e00e      	b.n	8006ac8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff fc46 	bl	8006344 <HAL_SPI_TxRxCpltCallback>
}
 8006ab8:	e006      	b.n	8006ac8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff fc48 	bl	8006358 <HAL_SPI_ErrorCallback>
}
 8006ac8:	bf00      	nop
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ae6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006ae8:	f7fd fa20 	bl	8003f2c <HAL_GetTick>
 8006aec:	4603      	mov	r3, r0
 8006aee:	461a      	mov	r2, r3
 8006af0:	2164      	movs	r1, #100	; 0x64
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ff0c 	bl	8006910 <SPI_EndRxTransaction>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b02:	f043 0220 	orr.w	r2, r3, #32
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d103      	bne.n	8006b22 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fb ff2c 	bl	8002978 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006b20:	e002      	b.n	8006b28 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff fc18 	bl	8006358 <HAL_SPI_ErrorCallback>
}
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b38:	f7fd f9f8 	bl	8003f2c <HAL_GetTick>
 8006b3c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b4c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	2164      	movs	r1, #100	; 0x64
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff ff34 	bl	80069c0 <SPI_EndRxTxTransaction>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d005      	beq.n	8006b6a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b62:	f043 0220 	orr.w	r2, r3, #32
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	60bb      	str	r3, [r7, #8]
 8006b86:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff fbdd 	bl	8006358 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006b9e:	e002      	b.n	8006ba6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7fb fed9 	bl	8002958 <HAL_SPI_TxCpltCallback>
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e049      	b.n	8006c54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7fc f8bf 	bl	8002d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3304      	adds	r3, #4
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f000 fa4f 	bl	8007090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d122      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d11b      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f06f 0202 	mvn.w	r2, #2
 8006c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f9d8 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006ca4:	e005      	b.n	8006cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f9ca 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f9db 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d122      	bne.n	8006d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d11b      	bne.n	8006d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f06f 0204 	mvn.w	r2, #4
 8006cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f9ae 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006cf8:	e005      	b.n	8006d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f9a0 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f9b1 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	d122      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d11b      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f06f 0208 	mvn.w	r2, #8
 8006d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2204      	movs	r2, #4
 8006d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f984 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006d4c:	e005      	b.n	8006d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f976 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f987 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f003 0310 	and.w	r3, r3, #16
 8006d6a:	2b10      	cmp	r3, #16
 8006d6c:	d122      	bne.n	8006db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f003 0310 	and.w	r3, r3, #16
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	d11b      	bne.n	8006db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f06f 0210 	mvn.w	r2, #16
 8006d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f95a 	bl	8007054 <HAL_TIM_IC_CaptureCallback>
 8006da0:	e005      	b.n	8006dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f94c 	bl	8007040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f95d 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d10e      	bne.n	8006de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d107      	bne.n	8006de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f06f 0201 	mvn.w	r2, #1
 8006dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f926 	bl	800702c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d10e      	bne.n	8006e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df8:	2b80      	cmp	r3, #128	; 0x80
 8006dfa:	d107      	bne.n	8006e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fb08 	bl	800741c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e1a:	d10e      	bne.n	8006e3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e26:	2b80      	cmp	r3, #128	; 0x80
 8006e28:	d107      	bne.n	8006e3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fafb 	bl	8007430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e44:	2b40      	cmp	r3, #64	; 0x40
 8006e46:	d10e      	bne.n	8006e66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e52:	2b40      	cmp	r3, #64	; 0x40
 8006e54:	d107      	bne.n	8006e66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f90b 	bl	800707c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d10e      	bne.n	8006e92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d107      	bne.n	8006e92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f06f 0220 	mvn.w	r2, #32
 8006e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fabb 	bl	8007408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <HAL_TIM_ConfigClockSource+0x1c>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	e0b6      	b.n	8007024 <HAL_TIM_ConfigClockSource+0x18a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ed8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ee0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef2:	d03e      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0xd8>
 8006ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef8:	f200 8087 	bhi.w	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f00:	f000 8086 	beq.w	8007010 <HAL_TIM_ConfigClockSource+0x176>
 8006f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f08:	d87f      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f0a:	2b70      	cmp	r3, #112	; 0x70
 8006f0c:	d01a      	beq.n	8006f44 <HAL_TIM_ConfigClockSource+0xaa>
 8006f0e:	2b70      	cmp	r3, #112	; 0x70
 8006f10:	d87b      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f12:	2b60      	cmp	r3, #96	; 0x60
 8006f14:	d050      	beq.n	8006fb8 <HAL_TIM_ConfigClockSource+0x11e>
 8006f16:	2b60      	cmp	r3, #96	; 0x60
 8006f18:	d877      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f1a:	2b50      	cmp	r3, #80	; 0x50
 8006f1c:	d03c      	beq.n	8006f98 <HAL_TIM_ConfigClockSource+0xfe>
 8006f1e:	2b50      	cmp	r3, #80	; 0x50
 8006f20:	d873      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d058      	beq.n	8006fd8 <HAL_TIM_ConfigClockSource+0x13e>
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d86f      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f2a:	2b30      	cmp	r3, #48	; 0x30
 8006f2c:	d064      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0x15e>
 8006f2e:	2b30      	cmp	r3, #48	; 0x30
 8006f30:	d86b      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d060      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0x15e>
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d867      	bhi.n	800700a <HAL_TIM_ConfigClockSource+0x170>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d05c      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0x15e>
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	d05a      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0x15e>
 8006f42:	e062      	b.n	800700a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6818      	ldr	r0, [r3, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6899      	ldr	r1, [r3, #8]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f000 f9b0 	bl	80072b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	609a      	str	r2, [r3, #8]
      break;
 8006f70:	e04f      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	6899      	ldr	r1, [r3, #8]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f000 f999 	bl	80072b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f94:	609a      	str	r2, [r3, #8]
      break;
 8006f96:	e03c      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	6859      	ldr	r1, [r3, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f000 f90d 	bl	80071c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2150      	movs	r1, #80	; 0x50
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 f966 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8006fb6:	e02c      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	6859      	ldr	r1, [r3, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f000 f92c 	bl	8007222 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2160      	movs	r1, #96	; 0x60
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 f956 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8006fd6:	e01c      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6859      	ldr	r1, [r3, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f000 f8ed 	bl	80071c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2140      	movs	r1, #64	; 0x40
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 f946 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8006ff6:	e00c      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4619      	mov	r1, r3
 8007002:	4610      	mov	r0, r2
 8007004:	f000 f93d 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8007008:	e003      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	73fb      	strb	r3, [r7, #15]
      break;
 800700e:	e000      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007010:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a40      	ldr	r2, [pc, #256]	; (80071a4 <TIM_Base_SetConfig+0x114>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ae:	d00f      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a3d      	ldr	r2, [pc, #244]	; (80071a8 <TIM_Base_SetConfig+0x118>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00b      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a3c      	ldr	r2, [pc, #240]	; (80071ac <TIM_Base_SetConfig+0x11c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d007      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a3b      	ldr	r2, [pc, #236]	; (80071b0 <TIM_Base_SetConfig+0x120>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d003      	beq.n	80070d0 <TIM_Base_SetConfig+0x40>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a3a      	ldr	r2, [pc, #232]	; (80071b4 <TIM_Base_SetConfig+0x124>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d108      	bne.n	80070e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a2f      	ldr	r2, [pc, #188]	; (80071a4 <TIM_Base_SetConfig+0x114>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d01f      	beq.n	800712a <TIM_Base_SetConfig+0x9a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f0:	d01b      	beq.n	800712a <TIM_Base_SetConfig+0x9a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a2c      	ldr	r2, [pc, #176]	; (80071a8 <TIM_Base_SetConfig+0x118>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d017      	beq.n	800712a <TIM_Base_SetConfig+0x9a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a2b      	ldr	r2, [pc, #172]	; (80071ac <TIM_Base_SetConfig+0x11c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d013      	beq.n	800712a <TIM_Base_SetConfig+0x9a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a2a      	ldr	r2, [pc, #168]	; (80071b0 <TIM_Base_SetConfig+0x120>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00f      	beq.n	800712a <TIM_Base_SetConfig+0x9a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a29      	ldr	r2, [pc, #164]	; (80071b4 <TIM_Base_SetConfig+0x124>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00b      	beq.n	800712a <TIM_Base_SetConfig+0x9a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a28      	ldr	r2, [pc, #160]	; (80071b8 <TIM_Base_SetConfig+0x128>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d007      	beq.n	800712a <TIM_Base_SetConfig+0x9a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a27      	ldr	r2, [pc, #156]	; (80071bc <TIM_Base_SetConfig+0x12c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d003      	beq.n	800712a <TIM_Base_SetConfig+0x9a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a26      	ldr	r2, [pc, #152]	; (80071c0 <TIM_Base_SetConfig+0x130>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d108      	bne.n	800713c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a10      	ldr	r2, [pc, #64]	; (80071a4 <TIM_Base_SetConfig+0x114>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00f      	beq.n	8007188 <TIM_Base_SetConfig+0xf8>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a12      	ldr	r2, [pc, #72]	; (80071b4 <TIM_Base_SetConfig+0x124>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00b      	beq.n	8007188 <TIM_Base_SetConfig+0xf8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a11      	ldr	r2, [pc, #68]	; (80071b8 <TIM_Base_SetConfig+0x128>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d007      	beq.n	8007188 <TIM_Base_SetConfig+0xf8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a10      	ldr	r2, [pc, #64]	; (80071bc <TIM_Base_SetConfig+0x12c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_Base_SetConfig+0xf8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a0f      	ldr	r2, [pc, #60]	; (80071c0 <TIM_Base_SetConfig+0x130>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d103      	bne.n	8007190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	615a      	str	r2, [r3, #20]
}
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40000800 	.word	0x40000800
 80071b0:	40000c00 	.word	0x40000c00
 80071b4:	40013400 	.word	0x40013400
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	40014800 	.word	0x40014800

080071c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	f023 0201 	bic.w	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f023 030a 	bic.w	r3, r3, #10
 8007200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007222:	b480      	push	{r7}
 8007224:	b087      	sub	sp, #28
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f023 0210 	bic.w	r2, r3, #16
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800724c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	031b      	lsls	r3, r3, #12
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	4313      	orrs	r3, r2
 8007256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800725e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4313      	orrs	r3, r2
 8007268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	621a      	str	r2, [r3, #32]
}
 8007276:	bf00      	nop
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007282:	b480      	push	{r7}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	f043 0307 	orr.w	r3, r3, #7
 80072a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	609a      	str	r2, [r3, #8]
}
 80072ac:	bf00      	nop
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	021a      	lsls	r2, r3, #8
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	431a      	orrs	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	4313      	orrs	r3, r2
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	609a      	str	r2, [r3, #8]
}
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800730c:	2302      	movs	r3, #2
 800730e:	e068      	b.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a2e      	ldr	r2, [pc, #184]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d004      	beq.n	8007344 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a2d      	ldr	r2, [pc, #180]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d108      	bne.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800734a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d01d      	beq.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007382:	d018      	beq.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1b      	ldr	r2, [pc, #108]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d013      	beq.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1a      	ldr	r2, [pc, #104]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d00e      	beq.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a18      	ldr	r2, [pc, #96]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d009      	beq.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a13      	ldr	r2, [pc, #76]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d004      	beq.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a14      	ldr	r2, [pc, #80]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d10c      	bne.n	80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	40012c00 	.word	0x40012c00
 80073f4:	40013400 	.word	0x40013400
 80073f8:	40000400 	.word	0x40000400
 80073fc:	40000800 	.word	0x40000800
 8007400:	40000c00 	.word	0x40000c00
 8007404:	40014000 	.word	0x40014000

08007408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <LL_ADC_REG_SetSequencerLength>:
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	f023 020f 	bic.w	r2, r3, #15
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <LL_ADC_IsEnabled>:
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <LL_ADC_IsEnabled+0x18>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <LL_ADC_IsEnabled+0x1a>
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8007490:	b590      	push	{r4, r7, lr}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800749a:	2300      	movs	r3, #0
 800749c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800749e:	481c      	ldr	r0, [pc, #112]	; (8007510 <LL_ADC_CommonInit+0x80>)
 80074a0:	f7ff ffe3 	bl	800746a <LL_ADC_IsEnabled>
 80074a4:	4604      	mov	r4, r0
 80074a6:	481b      	ldr	r0, [pc, #108]	; (8007514 <LL_ADC_CommonInit+0x84>)
 80074a8:	f7ff ffdf 	bl	800746a <LL_ADC_IsEnabled>
 80074ac:	4603      	mov	r3, r0
 80074ae:	431c      	orrs	r4, r3
 80074b0:	4819      	ldr	r0, [pc, #100]	; (8007518 <LL_ADC_CommonInit+0x88>)
 80074b2:	f7ff ffda 	bl	800746a <LL_ADC_IsEnabled>
 80074b6:	4603      	mov	r3, r0
 80074b8:	4323      	orrs	r3, r4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d120      	bne.n	8007500 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d012      	beq.n	80074ec <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	4b14      	ldr	r3, [pc, #80]	; (800751c <LL_ADC_CommonInit+0x8c>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	6811      	ldr	r1, [r2, #0]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	6852      	ldr	r2, [r2, #4]
 80074d6:	4311      	orrs	r1, r2
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	6892      	ldr	r2, [r2, #8]
 80074dc:	4311      	orrs	r1, r2
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	68d2      	ldr	r2, [r2, #12]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	609a      	str	r2, [r3, #8]
 80074ea:	e00b      	b.n	8007504 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <LL_ADC_CommonInit+0x8c>)
 80074f2:	4013      	ands	r3, r2
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	431a      	orrs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	609a      	str	r2, [r3, #8]
 80074fe:	e001      	b.n	8007504 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	bd90      	pop	{r4, r7, pc}
 800750e:	bf00      	nop
 8007510:	50040000 	.word	0x50040000
 8007514:	50040100 	.word	0x50040100
 8007518:	50040200 	.word	0x50040200
 800751c:	ffc030e0 	.word	0xffc030e0

08007520 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff ff9b 	bl	800746a <LL_ADC_IsEnabled>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d111      	bne.n	800755e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007542:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	6811      	ldr	r1, [r2, #0]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	6852      	ldr	r2, [r2, #4]
 800754e:	4311      	orrs	r1, r2
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	6892      	ldr	r2, [r2, #8]
 8007554:	430a      	orrs	r2, r1
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	60da      	str	r2, [r3, #12]
 800755c:	e001      	b.n	8007562 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff ff75 	bl	800746a <LL_ADC_IsEnabled>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d132      	bne.n	80075ec <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d015      	beq.n	80075ba <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <LL_ADC_REG_Init+0x90>)
 8007594:	4013      	ands	r3, r2
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	6811      	ldr	r1, [r2, #0]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	6892      	ldr	r2, [r2, #8]
 800759e:	4311      	orrs	r1, r2
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	68d2      	ldr	r2, [r2, #12]
 80075a4:	4311      	orrs	r1, r2
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	6912      	ldr	r2, [r2, #16]
 80075aa:	4311      	orrs	r1, r2
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	6952      	ldr	r2, [r2, #20]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	60da      	str	r2, [r3, #12]
 80075b8:	e011      	b.n	80075de <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <LL_ADC_REG_Init+0x90>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	6811      	ldr	r1, [r2, #0]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	68d2      	ldr	r2, [r2, #12]
 80075ca:	4311      	orrs	r1, r2
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	6912      	ldr	r2, [r2, #16]
 80075d0:	4311      	orrs	r1, r2
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	6952      	ldr	r2, [r2, #20]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff ff2d 	bl	8007444 <LL_ADC_REG_SetSequencerLength>
 80075ea:	e001      	b.n	80075f0 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	fff0c03c 	.word	0xfff0c03c

08007600 <LL_GPIO_SetPinMode>:
{
 8007600:	b480      	push	{r7}
 8007602:	b08b      	sub	sp, #44	; 0x2c
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	fa93 f3a3 	rbit	r3, r3
 800761a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8007626:	2320      	movs	r3, #32
 8007628:	e003      	b.n	8007632 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	fab3 f383 	clz	r3, r3
 8007630:	b2db      	uxtb	r3, r3
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	2103      	movs	r1, #3
 8007636:	fa01 f303 	lsl.w	r3, r1, r3
 800763a:	43db      	mvns	r3, r3
 800763c:	401a      	ands	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	fa93 f3a3 	rbit	r3, r3
 8007648:	61fb      	str	r3, [r7, #28]
  return result;
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007654:	2320      	movs	r3, #32
 8007656:	e003      	b.n	8007660 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	fab3 f383 	clz	r3, r3
 800765e:	b2db      	uxtb	r3, r3
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	fa01 f303 	lsl.w	r3, r1, r3
 8007668:	431a      	orrs	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	601a      	str	r2, [r3, #0]
}
 800766e:	bf00      	nop
 8007670:	372c      	adds	r7, #44	; 0x2c
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <LL_GPIO_SetPinOutputType>:
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	43db      	mvns	r3, r3
 800768e:	401a      	ands	r2, r3
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	fb01 f303 	mul.w	r3, r1, r3
 8007698:	431a      	orrs	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	605a      	str	r2, [r3, #4]
}
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <LL_GPIO_SetPinSpeed>:
{
 80076aa:	b480      	push	{r7}
 80076ac:	b08b      	sub	sp, #44	; 0x2c
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	fa93 f3a3 	rbit	r3, r3
 80076c4:	613b      	str	r3, [r7, #16]
  return result;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80076d0:	2320      	movs	r3, #32
 80076d2:	e003      	b.n	80076dc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	fab3 f383 	clz	r3, r3
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	2103      	movs	r1, #3
 80076e0:	fa01 f303 	lsl.w	r3, r1, r3
 80076e4:	43db      	mvns	r3, r3
 80076e6:	401a      	ands	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	fa93 f3a3 	rbit	r3, r3
 80076f2:	61fb      	str	r3, [r7, #28]
  return result;
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80076fe:	2320      	movs	r3, #32
 8007700:	e003      	b.n	800770a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	fab3 f383 	clz	r3, r3
 8007708:	b2db      	uxtb	r3, r3
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	fa01 f303 	lsl.w	r3, r1, r3
 8007712:	431a      	orrs	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	609a      	str	r2, [r3, #8]
}
 8007718:	bf00      	nop
 800771a:	372c      	adds	r7, #44	; 0x2c
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <LL_GPIO_SetPinPull>:
{
 8007724:	b480      	push	{r7}
 8007726:	b08b      	sub	sp, #44	; 0x2c
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	fa93 f3a3 	rbit	r3, r3
 800773e:	613b      	str	r3, [r7, #16]
  return result;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800774a:	2320      	movs	r3, #32
 800774c:	e003      	b.n	8007756 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	fab3 f383 	clz	r3, r3
 8007754:	b2db      	uxtb	r3, r3
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	2103      	movs	r1, #3
 800775a:	fa01 f303 	lsl.w	r3, r1, r3
 800775e:	43db      	mvns	r3, r3
 8007760:	401a      	ands	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	fa93 f3a3 	rbit	r3, r3
 800776c:	61fb      	str	r3, [r7, #28]
  return result;
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007778:	2320      	movs	r3, #32
 800777a:	e003      	b.n	8007784 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	fab3 f383 	clz	r3, r3
 8007782:	b2db      	uxtb	r3, r3
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	fa01 f303 	lsl.w	r3, r1, r3
 800778c:	431a      	orrs	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	60da      	str	r2, [r3, #12]
}
 8007792:	bf00      	nop
 8007794:	372c      	adds	r7, #44	; 0x2c
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <LL_GPIO_SetAFPin_0_7>:
{
 800779e:	b480      	push	{r7}
 80077a0:	b08b      	sub	sp, #44	; 0x2c
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a1a      	ldr	r2, [r3, #32]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	fa93 f3a3 	rbit	r3, r3
 80077b8:	613b      	str	r3, [r7, #16]
  return result;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80077c4:	2320      	movs	r3, #32
 80077c6:	e003      	b.n	80077d0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	fab3 f383 	clz	r3, r3
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	210f      	movs	r1, #15
 80077d4:	fa01 f303 	lsl.w	r3, r1, r3
 80077d8:	43db      	mvns	r3, r3
 80077da:	401a      	ands	r2, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	fa93 f3a3 	rbit	r3, r3
 80077e6:	61fb      	str	r3, [r7, #28]
  return result;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80077f2:	2320      	movs	r3, #32
 80077f4:	e003      	b.n	80077fe <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	fab3 f383 	clz	r3, r3
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	fa01 f303 	lsl.w	r3, r1, r3
 8007806:	431a      	orrs	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	621a      	str	r2, [r3, #32]
}
 800780c:	bf00      	nop
 800780e:	372c      	adds	r7, #44	; 0x2c
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <LL_GPIO_SetAFPin_8_15>:
{
 8007818:	b480      	push	{r7}
 800781a:	b08b      	sub	sp, #44	; 0x2c
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	0a1b      	lsrs	r3, r3, #8
 800782c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	fa93 f3a3 	rbit	r3, r3
 8007834:	613b      	str	r3, [r7, #16]
  return result;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007840:	2320      	movs	r3, #32
 8007842:	e003      	b.n	800784c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	fab3 f383 	clz	r3, r3
 800784a:	b2db      	uxtb	r3, r3
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	210f      	movs	r1, #15
 8007850:	fa01 f303 	lsl.w	r3, r1, r3
 8007854:	43db      	mvns	r3, r3
 8007856:	401a      	ands	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	fa93 f3a3 	rbit	r3, r3
 8007864:	61fb      	str	r3, [r7, #28]
  return result;
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007870:	2320      	movs	r3, #32
 8007872:	e003      	b.n	800787c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	fab3 f383 	clz	r3, r3
 800787a:	b2db      	uxtb	r3, r3
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	6879      	ldr	r1, [r7, #4]
 8007880:	fa01 f303 	lsl.w	r3, r1, r3
 8007884:	431a      	orrs	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	625a      	str	r2, [r3, #36]	; 0x24
}
 800788a:	bf00      	nop
 800788c:	372c      	adds	r7, #44	; 0x2c
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b088      	sub	sp, #32
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	fa93 f3a3 	rbit	r3, r3
 80078ac:	60fb      	str	r3, [r7, #12]
  return result;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <LL_GPIO_Init+0x26>
    return 32U;
 80078b8:	2320      	movs	r3, #32
 80078ba:	e003      	b.n	80078c4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	fab3 f383 	clz	r3, r3
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80078c6:	e048      	b.n	800795a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	2101      	movs	r1, #1
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	fa01 f303 	lsl.w	r3, r1, r3
 80078d4:	4013      	ands	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d03a      	beq.n	8007954 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d003      	beq.n	80078ee <LL_GPIO_Init+0x58>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d10e      	bne.n	800790c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	461a      	mov	r2, r3
 80078f4:	69b9      	ldr	r1, [r7, #24]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fed7 	bl	80076aa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	6819      	ldr	r1, [r3, #0]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	461a      	mov	r2, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff feb7 	bl	800767a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	461a      	mov	r2, r3
 8007912:	69b9      	ldr	r1, [r7, #24]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff ff05 	bl	8007724 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d111      	bne.n	8007946 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2bff      	cmp	r3, #255	; 0xff
 8007926:	d807      	bhi.n	8007938 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	461a      	mov	r2, r3
 800792e:	69b9      	ldr	r1, [r7, #24]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff ff34 	bl	800779e <LL_GPIO_SetAFPin_0_7>
 8007936:	e006      	b.n	8007946 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	461a      	mov	r2, r3
 800793e:	69b9      	ldr	r1, [r7, #24]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff ff69 	bl	8007818 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	461a      	mov	r2, r3
 800794c:	69b9      	ldr	r1, [r7, #24]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fe56 	bl	8007600 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	3301      	adds	r3, #1
 8007958:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1af      	bne.n	80078c8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3720      	adds	r7, #32
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800797c:	4b10      	ldr	r3, [pc, #64]	; (80079c0 <LL_mDelay+0x4c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8007986:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798e:	d00c      	beq.n	80079aa <LL_mDelay+0x36>
  {
    tmpDelay++;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3301      	adds	r3, #1
 8007994:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8007996:	e008      	b.n	80079aa <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8007998:	4b09      	ldr	r3, [pc, #36]	; (80079c0 <LL_mDelay+0x4c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <LL_mDelay+0x36>
    {
      tmpDelay--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f3      	bne.n	8007998 <LL_mDelay+0x24>
    }
  }
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	e000e010 	.word	0xe000e010

080079c4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80079cc:	4a04      	ldr	r2, [pc, #16]	; (80079e0 <LL_SetSystemCoreClock+0x1c>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6013      	str	r3, [r2, #0]
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20000004 	.word	0x20000004

080079e4 <__libc_init_array>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	4d0d      	ldr	r5, [pc, #52]	; (8007a1c <__libc_init_array+0x38>)
 80079e8:	4c0d      	ldr	r4, [pc, #52]	; (8007a20 <__libc_init_array+0x3c>)
 80079ea:	1b64      	subs	r4, r4, r5
 80079ec:	10a4      	asrs	r4, r4, #2
 80079ee:	2600      	movs	r6, #0
 80079f0:	42a6      	cmp	r6, r4
 80079f2:	d109      	bne.n	8007a08 <__libc_init_array+0x24>
 80079f4:	4d0b      	ldr	r5, [pc, #44]	; (8007a24 <__libc_init_array+0x40>)
 80079f6:	4c0c      	ldr	r4, [pc, #48]	; (8007a28 <__libc_init_array+0x44>)
 80079f8:	f000 f82e 	bl	8007a58 <_init>
 80079fc:	1b64      	subs	r4, r4, r5
 80079fe:	10a4      	asrs	r4, r4, #2
 8007a00:	2600      	movs	r6, #0
 8007a02:	42a6      	cmp	r6, r4
 8007a04:	d105      	bne.n	8007a12 <__libc_init_array+0x2e>
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0c:	4798      	blx	r3
 8007a0e:	3601      	adds	r6, #1
 8007a10:	e7ee      	b.n	80079f0 <__libc_init_array+0xc>
 8007a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a16:	4798      	blx	r3
 8007a18:	3601      	adds	r6, #1
 8007a1a:	e7f2      	b.n	8007a02 <__libc_init_array+0x1e>
 8007a1c:	08007a88 	.word	0x08007a88
 8007a20:	08007a88 	.word	0x08007a88
 8007a24:	08007a88 	.word	0x08007a88
 8007a28:	08007a8c 	.word	0x08007a8c

08007a2c <memcpy>:
 8007a2c:	440a      	add	r2, r1
 8007a2e:	4291      	cmp	r1, r2
 8007a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a34:	d100      	bne.n	8007a38 <memcpy+0xc>
 8007a36:	4770      	bx	lr
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a42:	4291      	cmp	r1, r2
 8007a44:	d1f9      	bne.n	8007a3a <memcpy+0xe>
 8007a46:	bd10      	pop	{r4, pc}

08007a48 <memset>:
 8007a48:	4402      	add	r2, r0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d100      	bne.n	8007a52 <memset+0xa>
 8007a50:	4770      	bx	lr
 8007a52:	f803 1b01 	strb.w	r1, [r3], #1
 8007a56:	e7f9      	b.n	8007a4c <memset+0x4>

08007a58 <_init>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	bf00      	nop
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr

08007a64 <_fini>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	bf00      	nop
 8007a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6a:	bc08      	pop	{r3}
 8007a6c:	469e      	mov	lr, r3
 8007a6e:	4770      	bx	lr
