
prosthesis_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08008a50  08008a50  00018a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f78  08008f78  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008f78  08008f78  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f78  08008f78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f78  08008f78  00018f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f7c  08008f7c  00018f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001190  20000070  08008ff0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001200  08008ff0  00021200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b506  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b28  00000000  00000000  0003b5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a60  00000000  00000000  0003f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001898  00000000  00000000  00040b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d73f  00000000  00000000  000423c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac4f  00000000  00000000  0006fb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011437a  00000000  00000000  0008a756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ead0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000732c  00000000  00000000  0019eb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a38 	.word	0x08008a38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08008a38 	.word	0x08008a38

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <LL_RCC_SetADCClockSource+0x28>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000b52:	4905      	ldr	r1, [pc, #20]	; (8000b68 <LL_RCC_SetADCClockSource+0x28>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000

08000b6c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000b90:	4a2f      	ldr	r2, [pc, #188]	; (8000c50 <MX_ADC1_Init+0xe4>)
 8000b92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b94:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bee:	4817      	ldr	r0, [pc, #92]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000bf0:	f004 fbde 	bl	80053b0 <HAL_ADC_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000bfa:	f000 fe6c 	bl	80018d6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4810      	ldr	r0, [pc, #64]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000c0a:	f005 f93d 	bl	8005e88 <HAL_ADCEx_MultiModeConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c14:	f000 fe5f 	bl	80018d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1c:	2306      	movs	r3, #6
 8000c1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c24:	237f      	movs	r3, #127	; 0x7f
 8000c26:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_ADC1_Init+0xe0>)
 8000c36:	f004 fd11 	bl	800565c <HAL_ADC_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000c40:	f000 fe49 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000008c 	.word	0x2000008c
 8000c50:	50040000 	.word	0x50040000
 8000c54:	04300002 	.word	0x04300002

08000c58 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000c70:	4a29      	ldr	r2, [pc, #164]	; (8000d18 <MX_ADC2_Init+0xc0>)
 8000c72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000c8e:	2204      	movs	r2, #4
 8000c90:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cce:	4811      	ldr	r0, [pc, #68]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000cd0:	f004 fb6e 	bl	80053b0 <HAL_ADC_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000cda:	f000 fdfc 	bl	80018d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_ADC2_Init+0xc4>)
 8000ce0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce2:	2306      	movs	r3, #6
 8000ce4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cea:	237f      	movs	r3, #127	; 0x7f
 8000cec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cee:	2304      	movs	r3, #4
 8000cf0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_ADC2_Init+0xbc>)
 8000cfc:	f004 fcae 	bl	800565c <HAL_ADC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000d06:	f000 fde6 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000f0 	.word	0x200000f0
 8000d18:	50040100 	.word	0x50040100
 8000d1c:	08600004 	.word	0x08600004

08000d20 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a37      	ldr	r2, [pc, #220]	; (8000e1c <HAL_ADC_MspInit+0xfc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d131      	bne.n	8000da6 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLLSAI1);
 8000d42:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000d46:	f7ff fefb 	bl	8000b40 <LL_RCC_SetADCClockSource>

    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000d4a:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <HAL_ADC_MspInit+0x100>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4a33      	ldr	r2, [pc, #204]	; (8000e20 <HAL_ADC_MspInit+0x100>)
 8000d52:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000d54:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <HAL_ADC_MspInit+0x100>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d10b      	bne.n	8000d74 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000d5c:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000d62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d68:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d90:	230b      	movs	r3, #11
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4822      	ldr	r0, [pc, #136]	; (8000e28 <HAL_ADC_MspInit+0x108>)
 8000da0:	f005 fa66 	bl	8006270 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000da4:	e035      	b.n	8000e12 <HAL_ADC_MspInit+0xf2>
  else if(adcHandle->Instance==ADC2)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <HAL_ADC_MspInit+0x10c>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d130      	bne.n	8000e12 <HAL_ADC_MspInit+0xf2>
    LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLLSAI1);
 8000db0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000db4:	f7ff fec4 	bl	8000b40 <LL_RCC_SetADCClockSource>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_ADC_MspInit+0x100>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_ADC_MspInit+0x100>)
 8000dc0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_ADC_MspInit+0x100>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d10b      	bne.n	8000de2 <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_ADC_MspInit+0x104>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dfe:	230b      	movs	r3, #11
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <HAL_ADC_MspInit+0x108>)
 8000e0e:	f005 fa2f 	bl	8006270 <HAL_GPIO_Init>
}
 8000e12:	bf00      	nop
 8000e14:	3730      	adds	r7, #48	; 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	50040000 	.word	0x50040000
 8000e20:	20000154 	.word	0x20000154
 8000e24:	40021000 	.word	0x40021000
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	50040100 	.word	0x50040100

08000e30 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e3c:	4907      	ldr	r1, [pc, #28]	; (8000e5c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40021000 	.word	0x40021000

08000e60 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <LL_SYSCFG_SetEXTISource+0x68>)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	3302      	adds	r3, #2
 8000e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	ea02 0103 	and.w	r1, r2, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	fa93 f3a3 	rbit	r3, r3
 8000e8c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	e003      	b.n	8000ea4 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fab3 f383 	clz	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	fa03 f202 	lsl.w	r2, r3, r2
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <LL_SYSCFG_SetEXTISource+0x68>)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000eba:	bf00      	nop
 8000ebc:	371c      	adds	r7, #28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40010000 	.word	0x40010000

08000ecc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	613b      	str	r3, [r7, #16]
  return result;
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	e003      	b.n	8000efe <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	fab3 f383 	clz	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2103      	movs	r1, #3
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	401a      	ands	r2, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	61fb      	str	r3, [r7, #28]
  return result;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000f20:	2320      	movs	r3, #32
 8000f22:	e003      	b.n	8000f2c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	fab3 f383 	clz	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	431a      	orrs	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	601a      	str	r2, [r3, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	372c      	adds	r7, #44	; 0x2c
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b08b      	sub	sp, #44	; 0x2c
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa93 f3a3 	rbit	r3, r3
 8000f60:	613b      	str	r3, [r7, #16]
  return result;
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	e003      	b.n	8000f78 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	401a      	ands	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	61fb      	str	r3, [r7, #28]
  return result;
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	e003      	b.n	8000fa6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	60da      	str	r2, [r3, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	372c      	adds	r7, #44	; 0x2c
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000ffe:	2004      	movs	r0, #4
 8001000:	f7ff ff16 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001004:	2080      	movs	r0, #128	; 0x80
 8001006:	f7ff ff13 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ff10 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(OSCOPE_GPIO_Port, OSCOPE_Pin);
 8001010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001014:	4828      	ldr	r0, [pc, #160]	; (80010b8 <MX_GPIO_Init+0xdc>)
 8001016:	f7ff ffd3 	bl	8000fc0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, ANKLE_IMU_BT_Pin|ANKLE_IMU_P0_Pin|ANKLE_IMU_P1_Pin|ANKLE_IMU_RST_Pin
 800101a:	211f      	movs	r1, #31
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f7ff ffce 	bl	8000fc0 <LL_GPIO_ResetOutputPin>
                          |ANKLE_IMU_CS_Pin);

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin;
 8001024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001028:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800102a:	2301      	movs	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OSCOPE_GPIO_Port, &GPIO_InitStruct);
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	481e      	ldr	r0, [pc, #120]	; (80010b8 <MX_GPIO_Init+0xdc>)
 8001040:	f007 f8e6 	bl	8008210 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ANKLE_IMU_BT_Pin|ANKLE_IMU_P0_Pin|ANKLE_IMU_P1_Pin|ANKLE_IMU_RST_Pin
 8001044:	231f      	movs	r3, #31
 8001046:	607b      	str	r3, [r7, #4]
                          |ANKLE_IMU_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001048:	2301      	movs	r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f007 f8d6 	bl	8008210 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE8);
 8001064:	4915      	ldr	r1, [pc, #84]	; (80010bc <MX_GPIO_Init+0xe0>)
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fefa 	bl	8000e60 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 800106c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001070:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001076:	2301      	movs	r3, #1
 8001078:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001082:	2302      	movs	r3, #2
 8001084:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4618      	mov	r0, r3
 800108e:	f006 fe7d 	bl	8007d8c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(ANKLE_IMU_INT_GPIO_Port, ANKLE_IMU_INT_Pin, LL_GPIO_PULL_UP);
 8001092:	2201      	movs	r2, #1
 8001094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f7ff ff53 	bl	8000f46 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ANKLE_IMU_INT_GPIO_Port, ANKLE_IMU_INT_Pin, LL_GPIO_MODE_INPUT);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f7ff ff0f 	bl	8000ecc <LL_GPIO_SetPinMode>

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	48000800 	.word	0x48000800
 80010bc:	000f0002 	.word	0x000f0002

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60da      	str	r2, [r3, #12]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	60da      	str	r2, [r3, #12]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60da      	str	r2, [r3, #12]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	f023 0203 	bic.w	r2, r3, #3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	621a      	str	r2, [r3, #32]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	60da      	str	r2, [r3, #12]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f023 0201 	bic.w	r2, r3, #1
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60da      	str	r2, [r3, #12]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <LL_RCC_SetLPTIMClockSource>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <LL_RCC_SetLPTIMClockSource+0x30>)
 80012e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	041b      	lsls	r3, r3, #16
 80012ec:	43db      	mvns	r3, r3
 80012ee:	401a      	ands	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	041b      	lsls	r3, r3, #16
 80012f4:	4904      	ldr	r1, [pc, #16]	; (8001308 <LL_RCC_SetLPTIMClockSource+0x30>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40021000 	.word	0x40021000

0800130c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001316:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <LL_APB1_GRP2_EnableClock+0x2c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4313      	orrs	r3, r2
 800131e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001322:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4013      	ands	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40021000 	.word	0x40021000

0800133c <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSI);
 8001340:	4819      	ldr	r0, [pc, #100]	; (80013a8 <MX_LPTIM2_Init+0x6c>)
 8001342:	f7ff ffc9 	bl	80012d8 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001346:	2020      	movs	r0, #32
 8001348:	f7ff ffe0 	bl	800130c <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800134c:	f7ff feb8 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001350:	4603      	mov	r3, r0
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff08 	bl	800116c <NVIC_EncodePriority>
 800135c:	4603      	mov	r3, r0
 800135e:	4619      	mov	r1, r3
 8001360:	2042      	movs	r0, #66	; 0x42
 8001362:	f7ff fed9 	bl	8001118 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 8001366:	2042      	movs	r0, #66	; 0x42
 8001368:	f7ff feb8 	bl	80010dc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 800136c:	2100      	movs	r1, #0
 800136e:	480f      	ldr	r0, [pc, #60]	; (80013ac <MX_LPTIM2_Init+0x70>)
 8001370:	f7ff ff9e 	bl	80012b0 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8001374:	2100      	movs	r1, #0
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_LPTIM2_Init+0x70>)
 8001378:	f7ff ff64 	bl	8001244 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 800137c:	2100      	movs	r1, #0
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <MX_LPTIM2_Init+0x70>)
 8001380:	f7ff ff4d 	bl	800121e <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001384:	2100      	movs	r1, #0
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <MX_LPTIM2_Init+0x70>)
 8001388:	f7ff ff23 	bl	80011d2 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 800138c:	2100      	movs	r1, #0
 800138e:	4807      	ldr	r0, [pc, #28]	; (80013ac <MX_LPTIM2_Init+0x70>)
 8001390:	f7ff ff32 	bl	80011f8 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_LPTIM2_Init+0x70>)
 8001396:	f7ff ff7b 	bl	8001290 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 800139a:	2100      	movs	r1, #0
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <MX_LPTIM2_Init+0x70>)
 800139e:	f7ff ff64 	bl	800126a <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	00300010 	.word	0x00300010
 80013ac:	40009400 	.word	0x40009400

080013b0 <LL_LPTIM_Enable>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	611a      	str	r2, [r3, #16]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_LPTIM_StartCounter>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	f023 0206 	bic.w	r2, r3, #6
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	611a      	str	r2, [r3, #16]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_LPTIM_SetAutoReload>:
{
 80013f6:	b480      	push	{r7}
 80013f8:	b083      	sub	sp, #12
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	0c1b      	lsrs	r3, r3, #16
 8001406:	041b      	lsls	r3, r3, #16
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f043 0202 	orr.w	r2, r3, #2
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_RCC_HSI_Enable>:
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <LL_RCC_HSI_Enable+0x1c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a04      	ldr	r2, [pc, #16]	; (8001458 <LL_RCC_HSI_Enable+0x1c>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <LL_RCC_HSI_IsReady>:
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <LL_RCC_HSI_IsReady+0x24>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146c:	d101      	bne.n	8001472 <LL_RCC_HSI_IsReady+0x16>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <LL_RCC_HSI_IsReady+0x18>
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000

08001484 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	061b      	lsls	r3, r3, #24
 8001498:	4904      	ldr	r1, [pc, #16]	; (80014ac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <LL_RCC_LSI_Enable>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <LL_RCC_LSI_Enable+0x20>)
 80014b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <LL_RCC_LSI_Enable+0x20>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000

080014d4 <LL_RCC_LSI_IsReady>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <LL_RCC_LSI_IsReady+0x24>)
 80014da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d101      	bne.n	80014ea <LL_RCC_LSI_IsReady+0x16>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <LL_RCC_LSI_IsReady+0x18>
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000

080014fc <LL_RCC_SetSysClkSource>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <LL_RCC_SetSysClkSource+0x24>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 0203 	bic.w	r2, r3, #3
 800150c:	4904      	ldr	r1, [pc, #16]	; (8001520 <LL_RCC_SetSysClkSource+0x24>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4313      	orrs	r3, r2
 8001512:	608b      	str	r3, [r1, #8]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000

08001524 <LL_RCC_GetSysClkSource>:
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <LL_RCC_GetSysClkSource+0x18>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 030c 	and.w	r3, r3, #12
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <LL_RCC_SetAHBPrescaler>:
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <LL_RCC_SetAHBPrescaler+0x24>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001550:	4904      	ldr	r1, [pc, #16]	; (8001564 <LL_RCC_SetAHBPrescaler+0x24>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4313      	orrs	r3, r2
 8001556:	608b      	str	r3, [r1, #8]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000

08001568 <LL_RCC_SetAPB1Prescaler>:
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001578:	4904      	ldr	r1, [pc, #16]	; (800158c <LL_RCC_SetAPB1Prescaler+0x24>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4313      	orrs	r3, r2
 800157e:	608b      	str	r3, [r1, #8]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000

08001590 <LL_RCC_SetAPB2Prescaler>:
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015a0:	4904      	ldr	r1, [pc, #16]	; (80015b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000

080015b8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <LL_RCC_PLL_Enable+0x1c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <LL_RCC_PLL_Enable+0x1c>)
 80015c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <LL_RCC_PLL_IsReady+0x24>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015e8:	d101      	bne.n	80015ee <LL_RCC_PLL_IsReady+0x16>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <LL_RCC_PLL_IsReady+0x18>
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001614:	4013      	ands	r3, r2
 8001616:	68f9      	ldr	r1, [r7, #12]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	4311      	orrs	r1, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	0212      	lsls	r2, r2, #8
 8001620:	4311      	orrs	r1, r2
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	4904      	ldr	r1, [pc, #16]	; (8001638 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001628:	4313      	orrs	r3, r2
 800162a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40021000 	.word	0x40021000
 800163c:	f9ff808c 	.word	0xf9ff808c

08001640 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800164a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000

08001660 <LL_RCC_PLLSAI1_Enable>:
  * @brief  Enable PLLSAI1
  * @rmtoll CR           PLLSAI1ON     LL_RCC_PLLSAI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_Enable(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <LL_RCC_PLLSAI1_Enable+0x1c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <LL_RCC_PLLSAI1_Enable+0x1c>)
 800166a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000

08001680 <LL_RCC_PLLSAI1_IsReady>:
  * @brief  Check if PLLSAI1 Ready
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <LL_RCC_PLLSAI1_IsReady+0x24>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800168c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001690:	d101      	bne.n	8001696 <LL_RCC_PLLSAI1_IsReady+0x16>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <LL_RCC_PLLSAI1_IsReady+0x18>
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <LL_RCC_PLLSAI1_ConfigDomain_ADC>:
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_6
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80016be:	68f9      	ldr	r1, [r7, #12]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	430b      	orrs	r3, r1
 80016c4:	490a      	ldr	r1, [pc, #40]	; (80016f0 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLR);
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80016d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	0211      	lsls	r1, r2, #8
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	4904      	ldr	r1, [pc, #16]	; (80016f0 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	610b      	str	r3, [r1, #16]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40021000 	.word	0x40021000

080016f4 <LL_RCC_PLLSAI1_EnableDomain_ADC>:
  * @brief  Enable PLLSAI1 output mapped on ADC domain clock
  * @rmtoll PLLSAI1CFGR  PLLSAI1REN    LL_RCC_PLLSAI1_EnableDomain_ADC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_ADC(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1REN);
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 80016fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001702:	6113      	str	r3, [r2, #16]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <LL_FLASH_SetLatency+0x24>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 0207 	bic.w	r2, r3, #7
 8001724:	4904      	ldr	r1, [pc, #16]	; (8001738 <LL_FLASH_SetLatency+0x24>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40022000 	.word	0x40022000

0800173c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <LL_FLASH_GetLatency+0x18>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40022000 	.word	0x40022000

08001758 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001768:	4904      	ldr	r1, [pc, #16]	; (800177c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40007000 	.word	0x40007000

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001786:	f003 fc12 	bl	8004fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178a:	f000 f83b 	bl	8001804 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800178e:	f000 f88d 	bl	80018ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001792:	f7ff fc23 	bl	8000fdc <MX_GPIO_Init>
  MX_LPTIM2_Init();
 8001796:	f7ff fdd1 	bl	800133c <MX_LPTIM2_Init>
  MX_SPI1_Init();
 800179a:	f000 faeb 	bl	8001d74 <MX_SPI1_Init>
  MX_TIM2_Init();
 800179e:	f000 ff1f 	bl	80025e0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80017a2:	f7ff f9e3 	bl	8000b6c <MX_ADC1_Init>
  MX_ADC2_Init();
 80017a6:	f7ff fa57 	bl	8000c58 <MX_ADC2_Init>
/*******************************************************************************
* USER ADDED DEFINITIONS
*******************************************************************************/

  	Prosthesis_Init_t Prosthesis_Init;
	Prosthesis_Init.Joint = Combined;
 80017aa:	2301      	movs	r3, #1
 80017ac:	717b      	strb	r3, [r7, #5]
	Prosthesis_Init.Side = Left;
 80017ae:	2300      	movs	r3, #0
 80017b0:	713b      	strb	r3, [r7, #4]
* USER ADDED INITIALIZATIONS
*******************************************************************************/

//	LL_SYSTICK_EnableIT(); do i actually need this?

	LL_LPTIM_Enable(LPTIM2);
 80017b2:	4812      	ldr	r0, [pc, #72]	; (80017fc <main+0x7c>)
 80017b4:	f7ff fdfc 	bl	80013b0 <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 80017b8:	4810      	ldr	r0, [pc, #64]	; (80017fc <main+0x7c>)
 80017ba:	f7ff fe2f 	bl	800141c <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 80017be:	213f      	movs	r1, #63	; 0x3f
 80017c0:	480e      	ldr	r0, [pc, #56]	; (80017fc <main+0x7c>)
 80017c2:	f7ff fe18 	bl	80013f6 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 80017c6:	2104      	movs	r1, #4
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <main+0x7c>)
 80017ca:	f7ff fe01 	bl	80013d0 <LL_LPTIM_StartCounter>

  	if(BNO08x_Init(0))
 80017ce:	2000      	movs	r0, #0
 80017d0:	f001 f8a0 	bl	8002914 <BNO08x_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <main+0x5e>
  		Error_Handler();
 80017da:	f000 f87c 	bl	80018d6 <Error_Handler>

	InitProsthesisControl(&Prosthesis_Init);
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 f8b1 	bl	8001948 <InitProsthesisControl>
* USER ADDED MAIN LOOP
*******************************************************************************/

  while (1)
  {
	  if(isProsthesisControlRequired)
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <main+0x80>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0fb      	beq.n	80017e6 <main+0x66>
	  {
		  RunProsthesisControl();
 80017ee:	f000 f8bd 	bl	800196c <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 80017f2:	4b03      	ldr	r3, [pc, #12]	; (8001800 <main+0x80>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 80017f8:	e7f5      	b.n	80017e6 <main+0x66>
 80017fa:	bf00      	nop
 80017fc:	40009400 	.word	0x40009400
 8001800:	20000158 	.word	0x20000158

08001804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001808:	2004      	movs	r0, #4
 800180a:	f7ff ff83 	bl	8001714 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 800180e:	bf00      	nop
 8001810:	f7ff ff94 	bl	800173c <LL_FLASH_GetLatency>
 8001814:	4603      	mov	r3, r0
 8001816:	2b04      	cmp	r3, #4
 8001818:	d1fa      	bne.n	8001810 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800181a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800181e:	f7ff ff9b 	bl	8001758 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8001822:	f7ff fe0b 	bl	800143c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001826:	bf00      	nop
 8001828:	f7ff fe18 	bl	800145c <LL_RCC_HSI_IsReady>
 800182c:	4603      	mov	r3, r0
 800182e:	2b01      	cmp	r3, #1
 8001830:	d1fa      	bne.n	8001828 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001832:	2010      	movs	r0, #16
 8001834:	f7ff fe26 	bl	8001484 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_LSI_Enable();
 8001838:	f7ff fe3a 	bl	80014b0 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 800183c:	bf00      	nop
 800183e:	f7ff fe49 	bl	80014d4 <LL_RCC_LSI_IsReady>
 8001842:	4603      	mov	r3, r0
 8001844:	2b01      	cmp	r3, #1
 8001846:	d1fa      	bne.n	800183e <SystemClock_Config+0x3a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 8001848:	2300      	movs	r3, #0
 800184a:	220a      	movs	r2, #10
 800184c:	2100      	movs	r1, #0
 800184e:	2002      	movs	r0, #2
 8001850:	f7ff fed6 	bl	8001600 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001854:	f7ff fef4 	bl	8001640 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001858:	f7ff feae 	bl	80015b8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800185c:	bf00      	nop
 800185e:	f7ff febb 	bl	80015d8 <LL_RCC_PLL_IsReady>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d1fa      	bne.n	800185e <SystemClock_Config+0x5a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001868:	2003      	movs	r0, #3
 800186a:	f7ff fe47 	bl	80014fc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800186e:	bf00      	nop
 8001870:	f7ff fe58 	bl	8001524 <LL_RCC_GetSysClkSource>
 8001874:	4603      	mov	r3, r0
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d1fa      	bne.n	8001870 <SystemClock_Config+0x6c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff fe60 	bl	8001540 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001880:	2000      	movs	r0, #0
 8001882:	f7ff fe71 	bl	8001568 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff fe82 	bl	8001590 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 800188c:	4806      	ldr	r0, [pc, #24]	; (80018a8 <SystemClock_Config+0xa4>)
 800188e:	f006 fd2d 	bl	80082ec <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001892:	200f      	movs	r0, #15
 8001894:	f003 fba4 	bl	8004fe0 <HAL_InitTick>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800189e:	f000 f81a 	bl	80018d6 <Error_Handler>
  }
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	04c4b400 	.word	0x04c4b400

080018ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  LL_RCC_PLLSAI1_ConfigDomain_ADC(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLSAI1R_DIV_2);
 80018b0:	2300      	movs	r3, #0
 80018b2:	2208      	movs	r2, #8
 80018b4:	2100      	movs	r1, #0
 80018b6:	2002      	movs	r0, #2
 80018b8:	f7ff fef6 	bl	80016a8 <LL_RCC_PLLSAI1_ConfigDomain_ADC>
  LL_RCC_PLLSAI1_EnableDomain_ADC();
 80018bc:	f7ff ff1a 	bl	80016f4 <LL_RCC_PLLSAI1_EnableDomain_ADC>
  LL_RCC_PLLSAI1_Enable();
 80018c0:	f7ff fece 	bl	8001660 <LL_RCC_PLLSAI1_Enable>

   /* Wait till PLLSAI1 is ready */
  while(LL_RCC_PLLSAI1_IsReady() != 1)
 80018c4:	bf00      	nop
 80018c6:	f7ff fedb 	bl	8001680 <LL_RCC_PLLSAI1_IsReady>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d1fa      	bne.n	80018c6 <PeriphCommonClock_Config+0x1a>
  {

  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018da:	b672      	cpsid	i
}
 80018dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018de:	e7fe      	b.n	80018de <Error_Handler+0x8>

080018e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f4:	f043 0204 	orr.w	r2, r3, #4
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	b29b      	uxth	r3, r3
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b04      	cmp	r3, #4
 8001934:	d101      	bne.n	800193a <LL_ADC_IsActiveFlag_EOC+0x18>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_IsActiveFlag_EOC+0x1a>
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <InitProsthesisControl>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void InitProsthesisControl(Prosthesis_Init_t *Device_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29a      	uxth	r2, r3
	memcpy(&Device, Device_Init, sizeof(Device));
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <InitProsthesisControl+0x20>)
 8001958:	801a      	strh	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000015c 	.word	0x2000015c

0800196c <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	GetInputs();
 8001970:	f000 f81a 	bl	80019a8 <GetInputs>
	ProcessInputs();
 8001974:	f000 f860 	bl	8001a38 <ProcessInputs>

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <RunProsthesisControl+0x34>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <RunProsthesisControl+0x22>
	{
		isFirst = 0;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <RunProsthesisControl+0x34>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <RunProsthesisControl+0x38>)
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 800198c:	e006      	b.n	800199c <RunProsthesisControl+0x30>
	else if(isSecond)
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <RunProsthesisControl+0x38>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <RunProsthesisControl+0x30>
		isSecond = 0;
 8001996:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <RunProsthesisControl+0x38>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2000015e 	.word	0x2000015e
 80019a4:	2000015f 	.word	0x2000015f

080019a8 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	if (BNO08x_resetOccurred)
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <GetInputs+0x4c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <GetInputs+0x16>
	{
		BNO08x_resetOccurred = 0;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <GetInputs+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
		if(BNO08x_StartReports())
 80019ba:	f000 ffd3 	bl	8002964 <BNO08x_StartReports>
		{
			// User may add error handling for this if desired
		}
	}

	BNO08x_ReadSensors();
 80019be:	f001 f801 	bl	80029c4 <BNO08x_ReadSensors>

	CM_LoadCell.Raw.bot[0] = ReadLoadCell(ADC1);
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <GetInputs+0x50>)
 80019c4:	f000 f81e 	bl	8001a04 <ReadLoadCell>
 80019c8:	4603      	mov	r3, r0
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <GetInputs+0x54>)
 80019d4:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell.Raw.top[0] = ReadLoadCell(ADC2);
 80019d8:	4809      	ldr	r0, [pc, #36]	; (8001a00 <GetInputs+0x58>)
 80019da:	f000 f813 	bl	8001a04 <ReadLoadCell>
 80019de:	4603      	mov	r3, r0
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <GetInputs+0x54>)
 80019ea:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000744 	.word	0x20000744
 80019f8:	50040000 	.word	0x50040000
 80019fc:	20000184 	.word	0x20000184
 8001a00:	50040100 	.word	0x50040100

08001a04 <ReadLoadCell>:

static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff67 	bl	80018e0 <LL_ADC_REG_StartConversion>
	while (!LL_ADC_IsActiveFlag_EOC(ADCx));
 8001a12:	bf00      	nop
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff84 	bl	8001922 <LL_ADC_IsActiveFlag_EOC>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f9      	beq.n	8001a14 <ReadLoadCell+0x10>
	uint16_t data = LL_ADC_REG_ReadConversionData12(ADCx);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff71 	bl	8001908 <LL_ADC_REG_ReadConversionData12>
 8001a26:	4603      	mov	r3, r0
 8001a28:	81fb      	strh	r3, [r7, #14]
	return data;
 8001a2a:	89fb      	ldrh	r3, [r7, #14]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	0000      	movs	r0, r0
	...

08001a38 <ProcessInputs>:

static void ProcessInputs(void)
{
 8001a38:	b5b0      	push	{r4, r5, r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 6; i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e00c      	b.n	8001a5e <ProcessInputs+0x26>
		CM_IMU_Data.array[i] = BNO08x_IMU_Data[i];
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	4944      	ldr	r1, [pc, #272]	; (8001b5c <ProcessInputs+0x124>)
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	440a      	add	r2, r1
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	4943      	ldr	r1, [pc, #268]	; (8001b60 <ProcessInputs+0x128>)
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	2b05      	cmp	r3, #5
 8001a62:	d9ef      	bls.n	8001a44 <ProcessInputs+0xc>

	float yaw, pitch, roll;
	QuaternionsToYPR(BNO08x_IMU_Data[6], BNO08x_IMU_Data[7], BNO08x_IMU_Data[8], BNO08x_IMU_Data[9], &yaw, &pitch, &roll);
 8001a64:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <ProcessInputs+0x124>)
 8001a66:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <ProcessInputs+0x124>)
 8001a6c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a70:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <ProcessInputs+0x124>)
 8001a72:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <ProcessInputs+0x124>)
 8001a78:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8001a7c:	463a      	mov	r2, r7
 8001a7e:	1d39      	adds	r1, r7, #4
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	4618      	mov	r0, r3
 8001a86:	eef0 1a46 	vmov.f32	s3, s12
 8001a8a:	eeb0 1a66 	vmov.f32	s2, s13
 8001a8e:	eef0 0a47 	vmov.f32	s1, s14
 8001a92:	eeb0 0a67 	vmov.f32	s0, s15
 8001a96:	f000 fe0f 	bl	80026b8 <QuaternionsToYPR>
	CM_IMU_Data.Struct.yaw = yaw * RAD_TO_DEG;
 8001a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a9e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001b64 <ProcessInputs+0x12c>
 8001aa2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aa6:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001b68 <ProcessInputs+0x130>
 8001aaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <ProcessInputs+0x128>)
 8001ab0:	edc3 7a06 	vstr	s15, [r3, #24]
	CM_IMU_Data.Struct.pitch = pitch * RAD_TO_DEG;
 8001ab4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001b64 <ProcessInputs+0x12c>
 8001abc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ac0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001b68 <ProcessInputs+0x130>
 8001ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <ProcessInputs+0x128>)
 8001aca:	edc3 7a07 	vstr	s15, [r3, #28]
	CM_IMU_Data.Struct.roll = roll * RAD_TO_DEG;
 8001ace:	edd7 7a00 	vldr	s15, [r7]
 8001ad2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001b64 <ProcessInputs+0x12c>
 8001ad6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ada:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001b68 <ProcessInputs+0x130>
 8001ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae2:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <ProcessInputs+0x128>)
 8001ae4:	edc3 7a08 	vstr	s15, [r3, #32]

	// Filtering of load cells
	if(isFirst)
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <ProcessInputs+0x134>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d018      	beq.n	8001b22 <ProcessInputs+0xea>
	{
		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[0];
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <ProcessInputs+0x138>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <ProcessInputs+0x138>)
 8001af6:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[0];
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <ProcessInputs+0x138>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <ProcessInputs+0x138>)
 8001afe:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <ProcessInputs+0x138>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <ProcessInputs+0x138>)
 8001b06:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <ProcessInputs+0x138>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <ProcessInputs+0x138>)
 8001b0e:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[0];
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <ProcessInputs+0x138>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <ProcessInputs+0x138>)
 8001b16:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[0];
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <ProcessInputs+0x138>)
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <ProcessInputs+0x138>)
 8001b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[1];
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[1];
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
	}
}
 8001b20:	e110      	b.n	8001d44 <ProcessInputs+0x30c>
	else if(isSecond)
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <ProcessInputs+0x13c>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d026      	beq.n	8001b78 <ProcessInputs+0x140>
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <ProcessInputs+0x138>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <ProcessInputs+0x138>)
 8001b30:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <ProcessInputs+0x138>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <ProcessInputs+0x138>)
 8001b38:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <ProcessInputs+0x138>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <ProcessInputs+0x138>)
 8001b40:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <ProcessInputs+0x138>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <ProcessInputs+0x138>)
 8001b48:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <ProcessInputs+0x138>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <ProcessInputs+0x138>)
 8001b50:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <ProcessInputs+0x138>)
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <ProcessInputs+0x138>)
 8001b58:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001b5a:	e0f3      	b.n	8001d44 <ProcessInputs+0x30c>
 8001b5c:	2000071c 	.word	0x2000071c
 8001b60:	20000160 	.word	0x20000160
 8001b64:	43340000 	.word	0x43340000
 8001b68:	40490ff9 	.word	0x40490ff9
 8001b6c:	2000015e 	.word	0x2000015e
 8001b70:	20000184 	.word	0x20000184
 8001b74:	2000015f 	.word	0x2000015f
		CM_LoadCell.Filtered.bot[0] =   1.6556 * CM_LoadCell.Filtered.bot[1] - 0.7068 * CM_LoadCell.Filtered.bot[2]
 8001b78:	4b7d      	ldr	r3, [pc, #500]	; (8001d70 <ProcessInputs+0x338>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fc87 	bl	8000490 <__aeabi_f2d>
 8001b82:	a373      	add	r3, pc, #460	; (adr r3, 8001d50 <ProcessInputs+0x318>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fcda 	bl	8000540 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4614      	mov	r4, r2
 8001b92:	461d      	mov	r5, r3
 8001b94:	4b76      	ldr	r3, [pc, #472]	; (8001d70 <ProcessInputs+0x338>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fc79 	bl	8000490 <__aeabi_f2d>
 8001b9e:	a36e      	add	r3, pc, #440	; (adr r3, 8001d58 <ProcessInputs+0x320>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fccc 	bl	8000540 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb0e 	bl	80001d0 <__aeabi_dsub>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
									  + 0.0128 * CM_LoadCell.Raw.bot[0] + 0.0256 * CM_LoadCell.Raw.bot[1] + 0.0128 * CM_LoadCell.Raw.bot[2];
 8001bbc:	4b6c      	ldr	r3, [pc, #432]	; (8001d70 <ProcessInputs+0x338>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fc65 	bl	8000490 <__aeabi_f2d>
 8001bc6:	a366      	add	r3, pc, #408	; (adr r3, 8001d60 <ProcessInputs+0x328>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	f7fe fcb8 	bl	8000540 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f7fe fafc 	bl	80001d4 <__adddf3>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4614      	mov	r4, r2
 8001be2:	461d      	mov	r5, r3
 8001be4:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <ProcessInputs+0x338>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fc51 	bl	8000490 <__aeabi_f2d>
 8001bee:	a35e      	add	r3, pc, #376	; (adr r3, 8001d68 <ProcessInputs+0x330>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fca4 	bl	8000540 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f7fe fae8 	bl	80001d4 <__adddf3>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	4b58      	ldr	r3, [pc, #352]	; (8001d70 <ProcessInputs+0x338>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc3d 	bl	8000490 <__aeabi_f2d>
 8001c16:	a352      	add	r3, pc, #328	; (adr r3, 8001d60 <ProcessInputs+0x328>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe fc90 	bl	8000540 <__aeabi_dmul>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4620      	mov	r0, r4
 8001c26:	4629      	mov	r1, r5
 8001c28:	f7fe fad4 	bl	80001d4 <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe ff34 	bl	8000aa0 <__aeabi_d2f>
 8001c38:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.bot[0] =   1.6556 * CM_LoadCell.Filtered.bot[1] - 0.7068 * CM_LoadCell.Filtered.bot[2]
 8001c3a:	4a4d      	ldr	r2, [pc, #308]	; (8001d70 <ProcessInputs+0x338>)
 8001c3c:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] =   1.6556 * CM_LoadCell.Filtered.top[1] - 0.7068 * CM_LoadCell.Filtered.top[2]
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <ProcessInputs+0x338>)
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fc24 	bl	8000490 <__aeabi_f2d>
 8001c48:	a341      	add	r3, pc, #260	; (adr r3, 8001d50 <ProcessInputs+0x318>)
 8001c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4e:	f7fe fc77 	bl	8000540 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	4b45      	ldr	r3, [pc, #276]	; (8001d70 <ProcessInputs+0x338>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc16 	bl	8000490 <__aeabi_f2d>
 8001c64:	a33c      	add	r3, pc, #240	; (adr r3, 8001d58 <ProcessInputs+0x320>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe fc69 	bl	8000540 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe faab 	bl	80001d0 <__aeabi_dsub>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4614      	mov	r4, r2
 8001c80:	461d      	mov	r5, r3
									  + 0.0128 * CM_LoadCell.Raw.top[0] + 0.0256 * CM_LoadCell.Raw.top[1] + 0.0128 * CM_LoadCell.Raw.top[2];
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <ProcessInputs+0x338>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc02 	bl	8000490 <__aeabi_f2d>
 8001c8c:	a334      	add	r3, pc, #208	; (adr r3, 8001d60 <ProcessInputs+0x328>)
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	f7fe fc55 	bl	8000540 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe fa99 	bl	80001d4 <__adddf3>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4614      	mov	r4, r2
 8001ca8:	461d      	mov	r5, r3
 8001caa:	4b31      	ldr	r3, [pc, #196]	; (8001d70 <ProcessInputs+0x338>)
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fbee 	bl	8000490 <__aeabi_f2d>
 8001cb4:	a32c      	add	r3, pc, #176	; (adr r3, 8001d68 <ProcessInputs+0x330>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	f7fe fc41 	bl	8000540 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fa85 	bl	80001d4 <__adddf3>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <ProcessInputs+0x338>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fbda 	bl	8000490 <__aeabi_f2d>
 8001cdc:	a320      	add	r3, pc, #128	; (adr r3, 8001d60 <ProcessInputs+0x328>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	f7fe fc2d 	bl	8000540 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4620      	mov	r0, r4
 8001cec:	4629      	mov	r1, r5
 8001cee:	f7fe fa71 	bl	80001d4 <__adddf3>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f7fe fed1 	bl	8000aa0 <__aeabi_d2f>
 8001cfe:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.top[0] =   1.6556 * CM_LoadCell.Filtered.top[1] - 0.7068 * CM_LoadCell.Filtered.top[2]
 8001d00:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <ProcessInputs+0x338>)
 8001d02:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[1];
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <ProcessInputs+0x338>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <ProcessInputs+0x338>)
 8001d0a:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <ProcessInputs+0x338>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <ProcessInputs+0x338>)
 8001d12:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[1];
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <ProcessInputs+0x338>)
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <ProcessInputs+0x338>)
 8001d1a:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <ProcessInputs+0x338>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <ProcessInputs+0x338>)
 8001d22:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[1];
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <ProcessInputs+0x338>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <ProcessInputs+0x338>)
 8001d2a:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <ProcessInputs+0x338>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <ProcessInputs+0x338>)
 8001d32:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[1];
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <ProcessInputs+0x338>)
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <ProcessInputs+0x338>)
 8001d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <ProcessInputs+0x338>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <ProcessInputs+0x338>)
 8001d42:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001d44:	bf00      	nop
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d4c:	f3af 8000 	nop.w
 8001d50:	6cf41f21 	.word	0x6cf41f21
 8001d54:	3ffa7d56 	.word	0x3ffa7d56
 8001d58:	089a0275 	.word	0x089a0275
 8001d5c:	3fe69e1b 	.word	0x3fe69e1b
 8001d60:	eb1c432d 	.word	0xeb1c432d
 8001d64:	3f8a36e2 	.word	0x3f8a36e2
 8001d68:	eb1c432d 	.word	0xeb1c432d
 8001d6c:	3f9a36e2 	.word	0x3f9a36e2
 8001d70:	20000184 	.word	0x20000184

08001d74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <MX_SPI1_Init+0x78>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d8c:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001d8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001daa:	2220      	movs	r2, #32
 8001dac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001dce:	2208      	movs	r2, #8
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_SPI1_Init+0x74>)
 8001dd4:	f004 fd1a 	bl	800680c <HAL_SPI_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001dde:	f7ff fd7a 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200001bc 	.word	0x200001bc
 8001dec:	40013000 	.word	0x40013000

08001df0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_SPI_MspInit+0x7c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d128      	bne.n	8001e64 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_SPI_MspInit+0x80>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e42:	23e0      	movs	r3, #224	; 0xe0
 8001e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e52:	2305      	movs	r3, #5
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e60:	f004 fa06 	bl	8006270 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40013000 	.word	0x40013000
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a08      	ldr	r2, [pc, #32]	; (8001ea4 <HAL_SPI_MspDeInit+0x30>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d10a      	bne.n	8001e9c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_SPI_MspDeInit+0x34>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_SPI_MspDeInit+0x34>)
 8001e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e90:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001e92:	21e0      	movs	r1, #224	; 0xe0
 8001e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e98:	f004 fb94 	bl	80065c4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40013000 	.word	0x40013000
 8001ea8:	40021000 	.word	0x40021000

08001eac <bootn>:

// ------------------------------------------------------------------------
// Private methods

static void bootn(bool state)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_BT_GPIO_Port, ANKLE_IMU_BT_Pin,
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2101      	movs	r1, #1
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec0:	f004 fc74 	bl	80067ac <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <rstn>:

static void rstn(bool state)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_RST_GPIO_Port, ANKLE_IMU_RST_Pin,
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2108      	movs	r1, #8
 8001edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee0:	f004 fc64 	bl	80067ac <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <ps0_waken>:

static void ps0_waken(bool state)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_P0_GPIO_Port, ANKLE_IMU_P0_Pin,
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2102      	movs	r1, #2
 8001efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f00:	f004 fc54 	bl	80067ac <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <ps1>:

static void ps1(bool state)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_P1_GPIO_Port, ANKLE_IMU_P1_Pin,
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f004 fc44 	bl	80067ac <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <csn>:

static void csn(bool state)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_CS_GPIO_Port, ANKLE_IMU_CS_Pin,
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2110      	movs	r1, #16
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f004 fc34 	bl	80067ac <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <timeNowUs>:

static uint32_t timeNowUs(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <timeNowUs+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	200006d0 	.word	0x200006d0

08001f64 <hal_init_timer>:

static void hal_init_timer(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0

    HAL_TIM_Base_Start(&htim2);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <hal_init_timer+0x10>)
 8001f6a:	f005 faf1 	bl	8007550 <HAL_TIM_Base_Start>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200006d0 	.word	0x200006d0

08001f78 <spiDummyOp>:



static void spiDummyOp(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	23aa      	movs	r3, #170	; 0xaa
 8001f80:	713b      	strb	r3, [r7, #4]
    uint8_t dummyTx[1];
    uint8_t dummyRx[1];

    memset(dummyTx, 0xAA, sizeof(dummyTx));

    HAL_SPI_TransmitReceive(&hspi1, dummyTx, dummyRx, sizeof(dummyTx), 2);
 8001f82:	463a      	mov	r2, r7
 8001f84:	1d39      	adds	r1, r7, #4
 8001f86:	2302      	movs	r3, #2
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <spiDummyOp+0x24>)
 8001f8e:	f004 fd08 	bl	80069a2 <HAL_SPI_TransmitReceive>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200001bc 	.word	0x200001bc

08001fa0 <hal_init_hw>:



static void hal_init_hw(bool dfu)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    hal_init_timer();
 8001faa:	f7ff ffdb 	bl	8001f64 <hal_init_timer>

}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <enableInts>:

static void enableInts(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fba:	2017      	movs	r0, #23
 8001fbc:	f004 f92f 	bl	800621e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fc0:	2023      	movs	r0, #35	; 0x23
 8001fc2:	f004 f92c 	bl	800621e <HAL_NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <disableInts>:

static void disableInts()
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001fce:	2023      	movs	r0, #35	; 0x23
 8001fd0:	f004 f933 	bl	800623a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001fd4:	2017      	movs	r0, #23
 8001fd6:	f004 f930 	bl	800623a <HAL_NVIC_DisableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <spiActivate>:
// Attempt to start a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// If SPI periph is not in use and there is data to send or receive,
// this will start a SPI operation.
static void spiActivate(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
    if ((spiState == SPI_IDLE) && (rxBufLen == 0))
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <spiActivate+0x68>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d12a      	bne.n	8002042 <spiActivate+0x62>
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <spiActivate+0x6c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d126      	bne.n	8002042 <spiActivate+0x62>
    {
        if (rxReady)
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <spiActivate+0x70>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d021      	beq.n	8002042 <spiActivate+0x62>
        {
            // reset flag that was set with INTN
            rxReady = false;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <spiActivate+0x70>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]

            // assert CSN
            csn(false);
 8002004:	2000      	movs	r0, #0
 8002006:	f7ff ff91 	bl	8001f2c <csn>

            if (txBufLen > 0)
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <spiActivate+0x74>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <spiActivate+0x50>
            {
                spiState = SPI_WRITE;
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <spiActivate+0x68>)
 8002014:	2206      	movs	r2, #6
 8002016:	701a      	strb	r2, [r3, #0]

                // Start operation to write (and, incidentally, read)
                HAL_SPI_TransmitReceive_IT(&hspi1, txBuf, rxBuf, txBufLen);
 8002018:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <spiActivate+0x74>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <spiActivate+0x78>)
 8002020:	490e      	ldr	r1, [pc, #56]	; (800205c <spiActivate+0x7c>)
 8002022:	480f      	ldr	r0, [pc, #60]	; (8002060 <spiActivate+0x80>)
 8002024:	f004 fed0 	bl	8006dc8 <HAL_SPI_TransmitReceive_IT>

                // Deassert Wake
                ps0_waken(true);
 8002028:	2001      	movs	r0, #1
 800202a:	f7ff ff5f 	bl	8001eec <ps0_waken>
                // Start SPI operation to read header (writing zeros)
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
            }
        }
    }
}
 800202e:	e008      	b.n	8002042 <spiActivate+0x62>
                spiState = SPI_RD_HDR;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <spiActivate+0x68>)
 8002032:	2204      	movs	r2, #4
 8002034:	701a      	strb	r2, [r3, #0]
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
 8002036:	2304      	movs	r3, #4
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <spiActivate+0x78>)
 800203a:	490a      	ldr	r1, [pc, #40]	; (8002064 <spiActivate+0x84>)
 800203c:	4808      	ldr	r0, [pc, #32]	; (8002060 <spiActivate+0x80>)
 800203e:	f004 fec3 	bl	8006dc8 <HAL_SPI_TransmitReceive_IT>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000220 	.word	0x20000220
 800204c:	2000062c 	.word	0x2000062c
 8002050:	20000229 	.word	0x20000229
 8002054:	200006b4 	.word	0x200006b4
 8002058:	2000022c 	.word	0x2000022c
 800205c:	20000634 	.word	0x20000634
 8002060:	200001bc 	.word	0x200001bc
 8002064:	08008a50 	.word	0x08008a50

08002068 <spiCompleted>:
// Handle the end of a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// Depending on spiState, it may start a follow-up operation or transition
// to idle.  In the latter case, it will call spiActivate
static void spiCompleted(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
    // Get length of payload available
    uint16_t rxLen = (rxBuf[0] + (rxBuf[1] << 8)) & ~0x8000;
 800206e:	4b33      	ldr	r3, [pc, #204]	; (800213c <spiCompleted+0xd4>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <spiCompleted+0xd4>)
 8002076:	785b      	ldrb	r3, [r3, #1]
 8002078:	b29b      	uxth	r3, r3
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b29b      	uxth	r3, r3
 800207e:	4413      	add	r3, r2
 8002080:	b29b      	uxth	r3, r3
 8002082:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002086:	80fb      	strh	r3, [r7, #6]

    // Truncate that to max len we can read
    if (rxLen > sizeof(rxBuf))
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208e:	d902      	bls.n	8002096 <spiCompleted+0x2e>
    {
        rxLen = sizeof(rxBuf);
 8002090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002094:	80fb      	strh	r3, [r7, #6]
    }

    if (spiState == SPI_DUMMY)
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <spiCompleted+0xd8>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d103      	bne.n	80020a6 <spiCompleted+0x3e>
    {
        // SPI Dummy operation completed, transition now to idle
        spiState = SPI_IDLE;
 800209e:	4b28      	ldr	r3, [pc, #160]	; (8002140 <spiCompleted+0xd8>)
 80020a0:	2203      	movs	r2, #3
 80020a2:	701a      	strb	r2, [r3, #0]
        spiState = SPI_IDLE;

        // Activate the next operation, if any.
        spiActivate();
    }
}
 80020a4:	e045      	b.n	8002132 <spiCompleted+0xca>
    else if (spiState == SPI_RD_HDR)
 80020a6:	4b26      	ldr	r3, [pc, #152]	; (8002140 <spiCompleted+0xd8>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d11a      	bne.n	80020e4 <spiCompleted+0x7c>
        if (rxLen > READ_LEN) {
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d90b      	bls.n	80020cc <spiCompleted+0x64>
            spiState = SPI_RD_BODY;
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <spiCompleted+0xd8>)
 80020b6:	2205      	movs	r2, #5
 80020b8:	701a      	strb	r2, [r3, #0]
            HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf+READ_LEN, rxLen-READ_LEN);
 80020ba:	4a22      	ldr	r2, [pc, #136]	; (8002144 <spiCompleted+0xdc>)
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	3b04      	subs	r3, #4
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	4921      	ldr	r1, [pc, #132]	; (8002148 <spiCompleted+0xe0>)
 80020c4:	4821      	ldr	r0, [pc, #132]	; (800214c <spiCompleted+0xe4>)
 80020c6:	f004 fe7f 	bl	8006dc8 <HAL_SPI_TransmitReceive_IT>
}
 80020ca:	e032      	b.n	8002132 <spiCompleted+0xca>
            csn(true);            // deassert CSN
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7ff ff2d 	bl	8001f2c <csn>
            rxBufLen = 0;         // no rx data available
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <spiCompleted+0xe8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
            spiState = SPI_IDLE;  // back to idle state
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <spiCompleted+0xd8>)
 80020da:	2203      	movs	r2, #3
 80020dc:	701a      	strb	r2, [r3, #0]
            spiActivate();        // activate next operation, if any.
 80020de:	f7ff ff7f 	bl	8001fe0 <spiActivate>
}
 80020e2:	e026      	b.n	8002132 <spiCompleted+0xca>
    else if (spiState == SPI_RD_BODY)
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <spiCompleted+0xd8>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d10b      	bne.n	8002104 <spiCompleted+0x9c>
        csn(true);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff ff1d 	bl	8001f2c <csn>
        rxBufLen = rxLen;
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	4a16      	ldr	r2, [pc, #88]	; (8002150 <spiCompleted+0xe8>)
 80020f6:	6013      	str	r3, [r2, #0]
        spiState = SPI_IDLE;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <spiCompleted+0xd8>)
 80020fa:	2203      	movs	r2, #3
 80020fc:	701a      	strb	r2, [r3, #0]
        spiActivate();
 80020fe:	f7ff ff6f 	bl	8001fe0 <spiActivate>
}
 8002102:	e016      	b.n	8002132 <spiCompleted+0xca>
    else if (spiState == SPI_WRITE)
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <spiCompleted+0xd8>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b06      	cmp	r3, #6
 800210a:	d112      	bne.n	8002132 <spiCompleted+0xca>
        csn(true);
 800210c:	2001      	movs	r0, #1
 800210e:	f7ff ff0d 	bl	8001f2c <csn>
        rxBufLen = (txBufLen < rxLen) ? txBufLen : rxLen;
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <spiCompleted+0xec>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4293      	cmp	r3, r2
 800211a:	bf28      	it	cs
 800211c:	4613      	movcs	r3, r2
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <spiCompleted+0xe8>)
 8002120:	6013      	str	r3, [r2, #0]
        txBufLen = 0;
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <spiCompleted+0xec>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
        spiState = SPI_IDLE;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <spiCompleted+0xd8>)
 800212a:	2203      	movs	r2, #3
 800212c:	701a      	strb	r2, [r3, #0]
        spiActivate();
 800212e:	f7ff ff57 	bl	8001fe0 <spiActivate>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000022c 	.word	0x2000022c
 8002140:	20000220 	.word	0x20000220
 8002144:	20000230 	.word	0x20000230
 8002148:	08008a50 	.word	0x08008a50
 800214c:	200001bc 	.word	0x200001bc
 8002150:	2000062c 	.word	0x2000062c
 8002154:	200006b4 	.word	0x200006b4

08002158 <HAL_GPIO_EXTI_Callback>:


// Interrupt handlers and SPI operation callbacks

void HAL_GPIO_EXTI_Callback(uint16_t n)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
    rxTimestamp_us = timeNowUs();
 8002162:	f7ff fef3 	bl	8001f4c <timeNowUs>
 8002166:	4603      	mov	r3, r0
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <HAL_GPIO_EXTI_Callback+0x2c>)
 800216a:	6013      	str	r3, [r2, #0]

    inReset = false;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_GPIO_EXTI_Callback+0x30>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
    rxReady = true;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_GPIO_EXTI_Callback+0x34>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]

    // Start read, if possible
    spiActivate();
 8002178:	f7ff ff32 	bl	8001fe0 <spiActivate>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000224 	.word	0x20000224
 8002188:	20000228 	.word	0x20000228
 800218c:	20000229 	.word	0x20000229

08002190 <EXTI15_10_IRQHandler>:

// Handle INTN Interrupt through STM32 HAL
// (It, in turn, calls HAL_GPIO_EXTI_Callback, above)
void EXTI15_10_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002194:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002198:	f004 fb20 	bl	80067dc <HAL_GPIO_EXTI_IRQHandler>
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi1)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    if (isOpen)
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_SPI_TxRxCpltCallback+0x1c>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_SPI_TxRxCpltCallback+0x14>
    {
        spiCompleted();
 80021b0:	f7ff ff5a 	bl	8002068 <spiCompleted>
    }
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200006cc 	.word	0x200006cc

080021c0 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi1)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    // Shouldn't happen
    while (1);
 80021c8:	e7fe      	b.n	80021c8 <HAL_SPI_ErrorCallback+0x8>

080021ca <delayUs>:
//{
//    HAL_SPI_IRQHandler(&hspi1);
//}

void delayUs(uint32_t delay)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 80021d2:	f7ff febb 	bl	8001f4c <timeNowUs>
 80021d6:	4603      	mov	r3, r0
 80021d8:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	60fb      	str	r3, [r7, #12]
    while ((now - start) < delay) {
 80021de:	e003      	b.n	80021e8 <delayUs+0x1e>
        now = timeNowUs();
 80021e0:	f7ff feb4 	bl	8001f4c <timeNowUs>
 80021e4:	4603      	mov	r3, r0
 80021e6:	60bb      	str	r3, [r7, #8]
    while ((now - start) < delay) {
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d8f5      	bhi.n	80021e0 <delayUs+0x16>
    }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <resetDelayUs>:

void resetDelayUs(uint32_t delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 8002208:	f7ff fea0 	bl	8001f4c <timeNowUs>
 800220c:	4603      	mov	r3, r0
 800220e:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60fb      	str	r3, [r7, #12]
    while (((now - start) < delay) && (inReset))
 8002214:	e003      	b.n	800221e <resetDelayUs+0x1e>
    {
        now = timeNowUs();
 8002216:	f7ff fe99 	bl	8001f4c <timeNowUs>
 800221a:	4603      	mov	r3, r0
 800221c:	60bb      	str	r3, [r7, #8]
    while (((now - start) < delay) && (inReset))
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	d904      	bls.n	8002234 <resetDelayUs+0x34>
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <resetDelayUs+0x3c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <resetDelayUs+0x16>
    }
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000228 	.word	0x20000228

08002240 <sh2_spi_hal_open>:

// ------------------------------------------------------------------------
// SH2 SPI Hal Methods

static int sh2_spi_hal_open(sh2_Hal_t *self)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    int retval = SH2_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]

    if (isOpen)
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <sh2_spi_hal_open+0x94>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <sh2_spi_hal_open+0x1a>
    {
        // Can't open if another instance is already open
        return SH2_ERR;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295
 8002258:	e038      	b.n	80022cc <sh2_spi_hal_open+0x8c>
    }

    isOpen = true;
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <sh2_spi_hal_open+0x94>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]

    // Init hardware (false -> non-DFU config)
    hal_init_hw(false);
 8002260:	2000      	movs	r0, #0
 8002262:	f7ff fe9d 	bl	8001fa0 <hal_init_hw>

    // Hold in reset
    rstn(false);
 8002266:	2000      	movs	r0, #0
 8002268:	f7ff fe30 	bl	8001ecc <rstn>

    // deassert CSN
    csn(true);
 800226c:	2001      	movs	r0, #1
 800226e:	f7ff fe5d 	bl	8001f2c <csn>

    // Clear rx, tx buffers
    rxBufLen = 0;
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <sh2_spi_hal_open+0x98>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
    txBufLen = 0;
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <sh2_spi_hal_open+0x9c>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    rxDataReady = false;
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <sh2_spi_hal_open+0xa0>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
    rxReady = false;
 8002284:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <sh2_spi_hal_open+0xa4>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]

    inReset = true;  // will change back to false when INTN serviced
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <sh2_spi_hal_open+0xa8>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]

    // Do dummy SPI operation
    // (First SPI op after reconfig has bad initial state of signals
    // so this is a throwaway operation.  Afterward, all is well.)
    spiState = SPI_DUMMY;
 8002290:	4b16      	ldr	r3, [pc, #88]	; (80022ec <sh2_spi_hal_open+0xac>)
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
    spiDummyOp();
 8002296:	f7ff fe6f 	bl	8001f78 <spiDummyOp>
    spiState = SPI_IDLE;
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <sh2_spi_hal_open+0xac>)
 800229c:	2203      	movs	r2, #3
 800229e:	701a      	strb	r2, [r3, #0]

    // Delay for RESET_DELAY_US to ensure reset takes effect
    delayUs(RESET_DELAY_US);
 80022a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80022a4:	f7ff ff91 	bl	80021ca <delayUs>

    // To boot in SHTP-SPI mode, must have PS1=1, PS0=1.
    // PS1 is set via jumper.
    // PS0 will be 1 PS1 jumper is 1 AND PS0_WAKEN sig is 1.
    // So we set PS0_WAKEN signal to 1
    ps0_waken(true);
 80022a8:	2001      	movs	r0, #1
 80022aa:	f7ff fe1f 	bl	8001eec <ps0_waken>
    ps1(true);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f7ff fe2c 	bl	8001f0c <ps1>

    // Deassert reset, boot in non-DFU mode
    bootn(true);
 80022b4:	2001      	movs	r0, #1
 80022b6:	f7ff fdf9 	bl	8001eac <bootn>
    rstn(true);
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff fe06 	bl	8001ecc <rstn>

    // enable interrupts
    enableInts();
 80022c0:	f7ff fe79 	bl	8001fb6 <enableInts>

    // Wait for INTN to be asserted
    resetDelayUs(START_DELAY_US);
 80022c4:	480a      	ldr	r0, [pc, #40]	; (80022f0 <sh2_spi_hal_open+0xb0>)
 80022c6:	f7ff ff9b 	bl	8002200 <resetDelayUs>

    return retval;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200006cc 	.word	0x200006cc
 80022d8:	2000062c 	.word	0x2000062c
 80022dc:	200006b4 	.word	0x200006b4
 80022e0:	20000630 	.word	0x20000630
 80022e4:	20000229 	.word	0x20000229
 80022e8:	20000228 	.word	0x20000228
 80022ec:	20000220 	.word	0x20000220
 80022f0:	001e8480 	.word	0x001e8480

080022f4 <sh2_spi_hal_close>:

static void sh2_spi_hal_close(sh2_Hal_t *self)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    // Disable interrupts
    disableInts();
 80022fc:	f7ff fe65 	bl	8001fca <disableInts>

    // Set state machine to INIT state
    spiState = SPI_INIT;
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <sh2_spi_hal_close+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]

    // Hold sensor hub in reset
    rstn(false);
 8002306:	2000      	movs	r0, #0
 8002308:	f7ff fde0 	bl	8001ecc <rstn>

    // deassert CSN
    csn(true);
 800230c:	2001      	movs	r0, #1
 800230e:	f7ff fe0d 	bl	8001f2c <csn>

    // Deinit SPI peripheral
    HAL_SPI_DeInit(&hspi1);
 8002312:	4812      	ldr	r0, [pc, #72]	; (800235c <sh2_spi_hal_close+0x68>)
 8002314:	f004 fb1d 	bl	8006952 <HAL_SPI_DeInit>

    // Deinit timer
    __HAL_TIM_DISABLE(&htim2);
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <sh2_spi_hal_close+0x6c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a1a      	ldr	r2, [r3, #32]
 800231e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10f      	bne.n	8002348 <sh2_spi_hal_close+0x54>
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <sh2_spi_hal_close+0x6c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	f240 4344 	movw	r3, #1092	; 0x444
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <sh2_spi_hal_close+0x54>
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <sh2_spi_hal_close+0x6c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <sh2_spi_hal_close+0x6c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

    // No longer open
    isOpen = false;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <sh2_spi_hal_close+0x70>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000220 	.word	0x20000220
 800235c:	200001bc 	.word	0x200001bc
 8002360:	200006d0 	.word	0x200006d0
 8002364:	200006cc 	.word	0x200006cc

08002368 <sh2_spi_hal_read>:

static int sh2_spi_hal_read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
    int retval = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]

    // If there is received data available...
    if (rxBufLen > 0)
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <sh2_spi_hal_read+0x6c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d022      	beq.n	80023c8 <sh2_spi_hal_read+0x60>
    {
        // And if the data will fit in this buffer...
        if (len >= rxBufLen)
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <sh2_spi_hal_read+0x6c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	d311      	bcc.n	80023b0 <sh2_spi_hal_read+0x48>
        {
            // Copy data to the client buffer
            memcpy(pBuffer, rxBuf, rxBufLen);
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <sh2_spi_hal_read+0x6c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	4911      	ldr	r1, [pc, #68]	; (80023d8 <sh2_spi_hal_read+0x70>)
 8002394:	68b8      	ldr	r0, [r7, #8]
 8002396:	f005 ffe3 	bl	8008360 <memcpy>
            retval = rxBufLen;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <sh2_spi_hal_read+0x6c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	617b      	str	r3, [r7, #20]

            // Set timestamp of that data
            *t = rxTimestamp_us;
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <sh2_spi_hal_read+0x74>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	601a      	str	r2, [r3, #0]

            // Clear rxBuf so we can receive again
            rxBufLen = 0;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <sh2_spi_hal_read+0x6c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e005      	b.n	80023bc <sh2_spi_hal_read+0x54>
        }
        else
        {
            // Discard what was read and return error because buffer was too small.
            retval = SH2_ERR_BAD_PARAM;
 80023b0:	f06f 0301 	mvn.w	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
            rxBufLen = 0;
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <sh2_spi_hal_read+0x6c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
        }

        // Now that rxBuf is empty, activate SPI processing to send any
        // potential write that was blocked.
        disableInts();
 80023bc:	f7ff fe05 	bl	8001fca <disableInts>
        spiActivate();
 80023c0:	f7ff fe0e 	bl	8001fe0 <spiActivate>
        enableInts();
 80023c4:	f7ff fdf7 	bl	8001fb6 <enableInts>
    }

    return retval;
 80023c8:	697b      	ldr	r3, [r7, #20]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000062c 	.word	0x2000062c
 80023d8:	2000022c 	.word	0x2000022c
 80023dc:	20000224 	.word	0x20000224

080023e0 <sh2_spi_hal_write>:

static int sh2_spi_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
    int retval = SH2_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

    // Validate parameters
    if ((self == 0) || (len > sizeof(txBuf)) ||
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <sh2_spi_hal_write+0x28>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b80      	cmp	r3, #128	; 0x80
 80023fa:	d805      	bhi.n	8002408 <sh2_spi_hal_write+0x28>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <sh2_spi_hal_write+0x2e>
        ((len > 0) && (pBuffer == 0)))
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <sh2_spi_hal_write+0x2e>
    {
        return SH2_ERR_BAD_PARAM;
 8002408:	f06f 0301 	mvn.w	r3, #1
 800240c:	e017      	b.n	800243e <sh2_spi_hal_write+0x5e>
    }

    // If tx buffer is not empty, return 0
    if (txBufLen != 0)
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <sh2_spi_hal_write+0x68>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <sh2_spi_hal_write+0x3a>
    {
        return 0;
 8002416:	2300      	movs	r3, #0
 8002418:	e011      	b.n	800243e <sh2_spi_hal_write+0x5e>
    }

    // Copy data to tx buffer
    memcpy(txBuf, pBuffer, len);
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	480b      	ldr	r0, [pc, #44]	; (800244c <sh2_spi_hal_write+0x6c>)
 8002420:	f005 ff9e 	bl	8008360 <memcpy>
    txBufLen = len;
 8002424:	4a08      	ldr	r2, [pc, #32]	; (8002448 <sh2_spi_hal_write+0x68>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
    retval = len;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	617b      	str	r3, [r7, #20]

    // disable SH2 interrupts for a moment
    disableInts();
 800242e:	f7ff fdcc 	bl	8001fca <disableInts>

    // Assert Wake
    ps0_waken(false);
 8002432:	2000      	movs	r0, #0
 8002434:	f7ff fd5a 	bl	8001eec <ps0_waken>

    // re-enable SH2 interrupts.
    enableInts();
 8002438:	f7ff fdbd 	bl	8001fb6 <enableInts>

    return retval;
 800243c:	697b      	ldr	r3, [r7, #20]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200006b4 	.word	0x200006b4
 800244c:	20000634 	.word	0x20000634

08002450 <sh2_spi_hal_getTimeUs>:

static uint32_t sh2_spi_hal_getTimeUs(sh2_Hal_t *self)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
    return timeNowUs();
 8002458:	f7ff fd78 	bl	8001f4c <timeNowUs>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <sh2_hal_init>:

// ------------------------------------------------------------------------
// Public methods

sh2_Hal_t *sh2_hal_init(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
    // Set up the HAL reference object for the client
    sh2Hal.open = sh2_spi_hal_open;
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <sh2_hal_init+0x30>)
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <sh2_hal_init+0x34>)
 8002470:	601a      	str	r2, [r3, #0]
    sh2Hal.close = sh2_spi_hal_close;
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <sh2_hal_init+0x30>)
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <sh2_hal_init+0x38>)
 8002476:	605a      	str	r2, [r3, #4]
    sh2Hal.read = sh2_spi_hal_read;
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <sh2_hal_init+0x30>)
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <sh2_hal_init+0x3c>)
 800247c:	609a      	str	r2, [r3, #8]
    sh2Hal.write = sh2_spi_hal_write;
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <sh2_hal_init+0x30>)
 8002480:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <sh2_hal_init+0x40>)
 8002482:	60da      	str	r2, [r3, #12]
    sh2Hal.getTimeUs = sh2_spi_hal_getTimeUs;
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <sh2_hal_init+0x30>)
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <sh2_hal_init+0x44>)
 8002488:	611a      	str	r2, [r3, #16]

    return &sh2Hal;
 800248a:	4b03      	ldr	r3, [pc, #12]	; (8002498 <sh2_hal_init+0x30>)
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	200006b8 	.word	0x200006b8
 800249c:	08002241 	.word	0x08002241
 80024a0:	080022f5 	.word	0x080022f5
 80024a4:	08002369 	.word	0x08002369
 80024a8:	080023e1 	.word	0x080023e1
 80024ac:	08002451 	.word	0x08002451

080024b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_MspInit+0x44>)
 80024b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_MspInit+0x44>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6613      	str	r3, [r2, #96]	; 0x60
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_MspInit+0x44>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_MspInit+0x44>)
 80024d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d2:	4a08      	ldr	r2, [pc, #32]	; (80024f4 <HAL_MspInit+0x44>)
 80024d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d8:	6593      	str	r3, [r2, #88]	; 0x58
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_MspInit+0x44>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <LL_LPTIM_ClearFLAG_ARRM>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f043 0202 	orr.w	r2, r3, #2
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	605a      	str	r2, [r3, #4]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b02      	cmp	r3, #2
 800252a:	d101      	bne.n	8002530 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002542:	e7fe      	b.n	8002542 <NMI_Handler+0x4>

08002544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <HardFault_Handler+0x4>

0800254a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <MemManage_Handler+0x4>

08002550 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <BusFault_Handler+0x4>

08002556 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <UsageFault_Handler+0x4>

0800255c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258a:	f002 fd65 	bl	8005058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0

/******************************************************************************
* USER ADDED LPTIM2_IRQHANDLER
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8002598:	4806      	ldr	r0, [pc, #24]	; (80025b4 <LPTIM2_IRQHandler+0x20>)
 800259a:	f7ff ffbd 	bl	8002518 <LL_LPTIM_IsActiveFlag_ARRM>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <LPTIM2_IRQHandler+0x24>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 80025aa:	4802      	ldr	r0, [pc, #8]	; (80025b4 <LPTIM2_IRQHandler+0x20>)
 80025ac:	f7ff ffa4 	bl	80024f8 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40009400 	.word	0x40009400
 80025b8:	20000158 	.word	0x20000158

080025bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <SystemInit+0x20>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <SystemInit+0x20>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <MX_TIM2_Init+0x98>)
 8002600:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002604:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <MX_TIM2_Init+0x98>)
 8002608:	224f      	movs	r2, #79	; 0x4f
 800260a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <MX_TIM2_Init+0x98>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002612:	4b19      	ldr	r3, [pc, #100]	; (8002678 <MX_TIM2_Init+0x98>)
 8002614:	f04f 32ff 	mov.w	r2, #4294967295
 8002618:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <MX_TIM2_Init+0x98>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002620:	4b15      	ldr	r3, [pc, #84]	; (8002678 <MX_TIM2_Init+0x98>)
 8002622:	2200      	movs	r2, #0
 8002624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002626:	4814      	ldr	r0, [pc, #80]	; (8002678 <MX_TIM2_Init+0x98>)
 8002628:	f004 ff3a 	bl	80074a0 <HAL_TIM_Base_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002632:	f7ff f950 	bl	80018d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800263a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	4619      	mov	r1, r3
 8002642:	480d      	ldr	r0, [pc, #52]	; (8002678 <MX_TIM2_Init+0x98>)
 8002644:	f004 ffec 	bl	8007620 <HAL_TIM_ConfigClockSource>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800264e:	f7ff f942 	bl	80018d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	4619      	mov	r1, r3
 800265e:	4806      	ldr	r0, [pc, #24]	; (8002678 <MX_TIM2_Init+0x98>)
 8002660:	f005 f9dc 	bl	8007a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800266a:	f7ff f934 	bl	80018d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200006d0 	.word	0x200006d0

0800267c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268c:	d10b      	bne.n	80026a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_TIM_Base_MspInit+0x38>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <HAL_TIM_Base_MspInit+0x38>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_TIM_Base_MspInit+0x38>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000

080026b8 <QuaternionsToYPR>:

	return globalAngle;
}

void QuaternionsToYPR(float r, float i, float j, float k, float *yaw, float *pitch, float *roll)
{
 80026b8:	b5b0      	push	{r4, r5, r7, lr}
 80026ba:	b08e      	sub	sp, #56	; 0x38
 80026bc:	af00      	add	r7, sp, #0
 80026be:	ed87 0a07 	vstr	s0, [r7, #28]
 80026c2:	edc7 0a06 	vstr	s1, [r7, #24]
 80026c6:	ed87 1a05 	vstr	s2, [r7, #20]
 80026ca:	edc7 1a04 	vstr	s3, [r7, #16]
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
	float siny_cosp = 2 * (r * k + i * j);
 80026d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80026d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80026dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e0:	edd7 6a06 	vldr	s13, [r7, #24]
 80026e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026f4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float cosy_cosp = 1 - 2 * (j * j + k * k);
 80026f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80026fc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002700:	edd7 7a04 	vldr	s15, [r7, #16]
 8002704:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800270c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002718:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	*yaw = atan2(siny_cosp, cosy_cosp);
 800271c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800271e:	f7fd feb7 	bl	8000490 <__aeabi_f2d>
 8002722:	4604      	mov	r4, r0
 8002724:	460d      	mov	r5, r1
 8002726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002728:	f7fd feb2 	bl	8000490 <__aeabi_f2d>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	ec43 2b11 	vmov	d1, r2, r3
 8002734:	ec45 4b10 	vmov	d0, r4, r5
 8002738:	f005 ffd3 	bl	80086e2 <atan2>
 800273c:	ec53 2b10 	vmov	r2, r3, d0
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	f7fe f9ac 	bl	8000aa0 <__aeabi_d2f>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	601a      	str	r2, [r3, #0]

	float sinp = sqrt(1 + 2 * (r * j - i * k));
 800274e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002752:	edd7 7a05 	vldr	s15, [r7, #20]
 8002756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800275a:	edd7 6a06 	vldr	s13, [r7, #24]
 800275e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800276e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002772:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002776:	ee17 0a90 	vmov	r0, s15
 800277a:	f7fd fe89 	bl	8000490 <__aeabi_f2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	ec43 2b10 	vmov	d0, r2, r3
 8002786:	f005 ffae 	bl	80086e6 <sqrt>
 800278a:	ec53 2b10 	vmov	r2, r3, d0
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe f985 	bl	8000aa0 <__aeabi_d2f>
 8002796:	4603      	mov	r3, r0
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
	float cosp = sqrt(1 - 2 * (r * j - i * k));
 800279a:	ed97 7a07 	vldr	s14, [r7, #28]
 800279e:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a6:	edd7 6a06 	vldr	s13, [r7, #24]
 80027aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80027ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c2:	ee17 0a90 	vmov	r0, s15
 80027c6:	f7fd fe63 	bl	8000490 <__aeabi_f2d>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	ec43 2b10 	vmov	d0, r2, r3
 80027d2:	f005 ff88 	bl	80086e6 <sqrt>
 80027d6:	ec53 2b10 	vmov	r2, r3, d0
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	f7fe f95f 	bl	8000aa0 <__aeabi_d2f>
 80027e2:	4603      	mov	r3, r0
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
    *pitch = 2 * atan2(sinp, cosp) - M_PI / 2;
 80027e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027e8:	f7fd fe52 	bl	8000490 <__aeabi_f2d>
 80027ec:	4604      	mov	r4, r0
 80027ee:	460d      	mov	r5, r1
 80027f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027f2:	f7fd fe4d 	bl	8000490 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	ec43 2b11 	vmov	d1, r2, r3
 80027fe:	ec45 4b10 	vmov	d0, r4, r5
 8002802:	f005 ff6e 	bl	80086e2 <atan2>
 8002806:	ec51 0b10 	vmov	r0, r1, d0
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	f7fd fce1 	bl	80001d4 <__adddf3>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	a327      	add	r3, pc, #156	; (adr r3, 80028b8 <QuaternionsToYPR+0x200>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f7fd fcd6 	bl	80001d0 <__aeabi_dsub>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fe f938 	bl	8000aa0 <__aeabi_d2f>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	601a      	str	r2, [r3, #0]

    float sinr_cosp = 2 * (r * i + j * k);
 8002836:	ed97 7a07 	vldr	s14, [r7, #28]
 800283a:	edd7 7a06 	vldr	s15, [r7, #24]
 800283e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002842:	edd7 6a05 	vldr	s13, [r7, #20]
 8002846:	edd7 7a04 	vldr	s15, [r7, #16]
 800284a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002852:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002856:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosr_cosp = 1 - 2 * (i * i + j * j);
 800285a:	edd7 7a06 	vldr	s15, [r7, #24]
 800285e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002862:	edd7 7a05 	vldr	s15, [r7, #20]
 8002866:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800286a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287a:	edc7 7a08 	vstr	s15, [r7, #32]
    *roll = atan2(sinr_cosp, cosr_cosp);
 800287e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002880:	f7fd fe06 	bl	8000490 <__aeabi_f2d>
 8002884:	4604      	mov	r4, r0
 8002886:	460d      	mov	r5, r1
 8002888:	6a38      	ldr	r0, [r7, #32]
 800288a:	f7fd fe01 	bl	8000490 <__aeabi_f2d>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	ec43 2b11 	vmov	d1, r2, r3
 8002896:	ec45 4b10 	vmov	d0, r4, r5
 800289a:	f005 ff22 	bl	80086e2 <atan2>
 800289e:	ec53 2b10 	vmov	r2, r3, d0
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f7fe f8fb 	bl	8000aa0 <__aeabi_d2f>
 80028aa:	4602      	mov	r2, r0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	601a      	str	r2, [r3, #0]
}
 80028b0:	bf00      	nop
 80028b2:	3738      	adds	r7, #56	; 0x38
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bdb0      	pop	{r4, r5, r7, pc}
 80028b8:	54442d18 	.word	0x54442d18
 80028bc:	3ff921fb 	.word	0x3ff921fb

080028c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028c4:	f7ff fe7a 	bl	80025bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <LoopForever+0x6>)
  ldr r1, =_edata
 80028ca:	490d      	ldr	r1, [pc, #52]	; (8002900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <LoopForever+0xe>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d0:	e002      	b.n	80028d8 <LoopCopyDataInit>

080028d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d6:	3304      	adds	r3, #4

080028d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028dc:	d3f9      	bcc.n	80028d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028de:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028e0:	4c0a      	ldr	r4, [pc, #40]	; (800290c <LoopForever+0x16>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e4:	e001      	b.n	80028ea <LoopFillZerobss>

080028e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e8:	3204      	adds	r2, #4

080028ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ec:	d3fb      	bcc.n	80028e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ee:	f005 fd13 	bl	8008318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028f2:	f7fe ff45 	bl	8001780 <main>

080028f6 <LoopForever>:

LoopForever:
    b LoopForever
 80028f6:	e7fe      	b.n	80028f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002900:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002904:	08008f80 	.word	0x08008f80
  ldr r2, =_sbss
 8002908:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800290c:	20001200 	.word	0x20001200

08002910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <ADC1_2_IRQHandler>
	...

08002914 <BNO08x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

BNO08x_Error_e BNO08x_Init(uint8_t deviceIndex)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > BNO08X_NUMBER_OF_DEVICES)
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d000      	beq.n	8002926 <BNO08x_Init+0x12>
		while(1);
 8002924:	e7fe      	b.n	8002924 <BNO08x_Init+0x10>

	sh2_Hal_t *pSh2Hal = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
	pSh2Hal = sh2_hal_init();
 800292a:	f7ff fd9d 	bl	8002468 <sh2_hal_init>
 800292e:	60f8      	str	r0, [r7, #12]
	int status = sh2_open(pSh2Hal, EventHandler, NULL);
 8002930:	2200      	movs	r2, #0
 8002932:	490a      	ldr	r1, [pc, #40]	; (800295c <BNO08x_Init+0x48>)
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fc85 	bl	8003244 <sh2_open>
 800293a:	60b8      	str	r0, [r7, #8]
	if(status != SH2_OK)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <BNO08x_Init+0x32>
		return BNO08x_InitError;
 8002942:	2301      	movs	r3, #1
 8002944:	e006      	b.n	8002954 <BNO08x_Init+0x40>

	sh2_setSensorCallback(ReadEvent, NULL); // incompatible??
 8002946:	2100      	movs	r1, #0
 8002948:	4805      	ldr	r0, [pc, #20]	; (8002960 <BNO08x_Init+0x4c>)
 800294a:	f000 fd29 	bl	80033a0 <sh2_setSensorCallback>

  	BNO08x_StartReports();
 800294e:	f000 f809 	bl	8002964 <BNO08x_StartReports>

	return BNO08x_NoError;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	080029d1 	.word	0x080029d1
 8002960:	080029f9 	.word	0x080029f9

08002964 <BNO08x_StartReports>:

BNO08x_Error_e BNO08x_StartReports(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
		{SH2_ACCELEROMETER, {.reportInterval_us = 2000}},			// Max interval = 500 Hz = 2000 us
		{SH2_GYROSCOPE_CALIBRATED, {.reportInterval_us = 2500}},	// Max interval = 400 Hz = 2500 us
        {SH2_GAME_ROTATION_VECTOR, {.reportInterval_us = 2500}},	// Max interval = 400 Hz = 2500 us
    };

    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e01e      	b.n	80029ae <BNO08x_StartReports+0x4a>
    {
        int sensorId = sensorConfig[n].sensorId;
 8002970:	4913      	ldr	r1, [pc, #76]	; (80029c0 <BNO08x_StartReports+0x5c>)
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60bb      	str	r3, [r7, #8]

        int status = sh2_setSensorConfig(sensorId, &sensorConfig[n].config);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	b2d8      	uxtb	r0, r3
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <BNO08x_StartReports+0x5c>)
 8002992:	4413      	add	r3, r2
 8002994:	3304      	adds	r3, #4
 8002996:	4619      	mov	r1, r3
 8002998:	f000 fd18 	bl	80033cc <sh2_setSensorConfig>
 800299c:	6078      	str	r0, [r7, #4]
        if (status != 0)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <BNO08x_StartReports+0x44>
        	return BNO08x_StartReportError;
 80029a4:	2302      	movs	r3, #2
 80029a6:	e006      	b.n	80029b6 <BNO08x_StartReports+0x52>
    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d9dd      	bls.n	8002970 <BNO08x_StartReports+0xc>
    }

    return BNO08x_NoError;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	08008e50 	.word	0x08008e50

080029c4 <BNO08x_ReadSensors>:


void BNO08x_ReadSensors(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
	sh2_service();
 80029c8:	f000 fcd6 	bl	8003378 <sh2_service>
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <EventHandler>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void EventHandler(void * cookie, sh2_AsyncEvent_t *pEvent)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
    if (pEvent->eventId == SH2_RESET)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <EventHandler+0x18>
        BNO08x_resetOccurred = 1;
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <EventHandler+0x24>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	20000744 	.word	0x20000744

080029f8 <ReadEvent>:

static void ReadEvent(void * cookie, sh2_SensorEvent_t * event, int16_t *data)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b09a      	sub	sp, #104	; 0x68
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
    int rc;
    sh2_SensorValue_t value;

    rc = sh2_decodeSensorEvent(&value, event);
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fd08 	bl	8003420 <sh2_decodeSensorEvent>
 8002a10:	6678      	str	r0, [r7, #100]	; 0x64
    if (rc != SH2_OK)
 8002a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d12a      	bne.n	8002a6e <ReadEvent+0x76>
        return;

    switch(value.sensorId)
 8002a18:	7c3b      	ldrb	r3, [r7, #16]
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d01a      	beq.n	8002a54 <ReadEvent+0x5c>
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	dc26      	bgt.n	8002a70 <ReadEvent+0x78>
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d002      	beq.n	8002a2c <ReadEvent+0x34>
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d00a      	beq.n	8002a40 <ReadEvent+0x48>
 8002a2a:	e021      	b.n	8002a70 <ReadEvent+0x78>
    {
        case SH2_ACCELEROMETER:
        	BNO08x_IMU_Data[0] = value.un.accelerometer.x;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <ReadEvent+0x80>)
 8002a30:	6013      	str	r3, [r2, #0]
        	BNO08x_IMU_Data[1] = value.un.accelerometer.y;
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <ReadEvent+0x80>)
 8002a36:	6053      	str	r3, [r2, #4]
        	BNO08x_IMU_Data[2] = value.un.accelerometer.z;
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	4a0f      	ldr	r2, [pc, #60]	; (8002a78 <ReadEvent+0x80>)
 8002a3c:	6093      	str	r3, [r2, #8]
            break;
 8002a3e:	e017      	b.n	8002a70 <ReadEvent+0x78>

        case SH2_GYROSCOPE_CALIBRATED:
        	BNO08x_IMU_Data[3] = value.un.gyroscope.x;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <ReadEvent+0x80>)
 8002a44:	60d3      	str	r3, [r2, #12]
        	BNO08x_IMU_Data[4] = value.un.gyroscope.y;
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <ReadEvent+0x80>)
 8002a4a:	6113      	str	r3, [r2, #16]
        	BNO08x_IMU_Data[5] = value.un.gyroscope.z;
 8002a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <ReadEvent+0x80>)
 8002a50:	6153      	str	r3, [r2, #20]
            break;
 8002a52:	e00d      	b.n	8002a70 <ReadEvent+0x78>

        case SH2_GAME_ROTATION_VECTOR:
        	BNO08x_IMU_Data[6] = value.un.gameRotationVector.real;
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	4a08      	ldr	r2, [pc, #32]	; (8002a78 <ReadEvent+0x80>)
 8002a58:	6193      	str	r3, [r2, #24]
        	BNO08x_IMU_Data[7] = value.un.gameRotationVector.i;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <ReadEvent+0x80>)
 8002a5e:	61d3      	str	r3, [r2, #28]
        	BNO08x_IMU_Data[8] = value.un.gameRotationVector.j;
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <ReadEvent+0x80>)
 8002a64:	6213      	str	r3, [r2, #32]
        	BNO08x_IMU_Data[9] = value.un.gameRotationVector.k;
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	4a03      	ldr	r2, [pc, #12]	; (8002a78 <ReadEvent+0x80>)
 8002a6a:	6253      	str	r3, [r2, #36]	; 0x24
            break;
 8002a6c:	e000      	b.n	8002a70 <ReadEvent+0x78>
        return;
 8002a6e:	bf00      	nop
    }
}
 8002a70:	3768      	adds	r7, #104	; 0x68
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	2000071c 	.word	0x2000071c

08002a7c <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <opStart+0x18>
 8002a8e:	f06f 0302 	mvn.w	r3, #2
 8002a92:	e014      	b.n	8002abe <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
 8002aa8:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
    }

    return rc;
 8002abc:	68fb      	ldr	r3, [r7, #12]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	88fa      	ldrh	r2, [r7, #6]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	4798      	blx	r3
    }
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00f      	beq.n	8002b50 <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 8002b44:	e004      	b.n	8002b50 <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 8002b46:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffd6 	bl	8002afc <opCompleted>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	e00f      	b.n	8002b88 <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 8002b68:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <getReportLen+0x44>)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002b70:	79fa      	ldrb	r2, [r7, #7]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d105      	bne.n	8002b82 <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <getReportLen+0x44>)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	785b      	ldrb	r3, [r3, #1]
 8002b80:	e006      	b.n	8002b90 <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3301      	adds	r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b2f      	cmp	r3, #47	; 0x2f
 8002b8c:	d9ec      	bls.n	8002b68 <getReportLen+0x10>
        }
    }

    return 0;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	08008e98 	.word	0x08008e98

08002ba0 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	4613      	mov	r3, r2
 8002bae:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 8094 	bne.w	8002cf0 <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        return;
 8002bd6:	e090      	b.n	8002cfa <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 8002bde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	4413      	add	r3, r2
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ffb4 	bl	8002b58 <getReportLen>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 8002bf4:	7dbb      	ldrb	r3, [r7, #22]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d107      	bne.n	8002c0a <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
            return;
 8002c08:	e077      	b.n	8002cfa <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2bf1      	cmp	r3, #241	; 0xf1
 8002c0e:	d107      	bne.n	8002c20 <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 8002c10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4413      	add	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	2b84      	cmp	r3, #132	; 0x84
 8002c1e:	e059      	b.n	8002cd4 <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2bfc      	cmp	r3, #252	; 0xfc
 8002c24:	d156      	bne.n	8002cd4 <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d052      	beq.n	8002cd4 <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 8002c2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	4413      	add	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002c38:	2202      	movs	r2, #2
 8002c3a:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	785a      	ldrb	r2, [r3, #1]
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002c42:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	789b      	ldrb	r3, [r3, #2]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002c58:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	789b      	ldrb	r3, [r3, #2]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf14      	ite	ne
 8002c66:	2301      	movne	r3, #1
 8002c68:	2300      	moveq	r3, #0
 8002c6a:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002c6e:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	789b      	ldrb	r3, [r3, #2]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 8002c82:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002c84:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	789b      	ldrb	r3, [r3, #2]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf14      	ite	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	2300      	moveq	r3, #0
 8002c96:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002c9a:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8002ca2:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 8002ca4:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002ca6:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 8002cae:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002cb0:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 8002cb8:	4a11      	ldr	r2, [pc, #68]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002cba:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 8002cc2:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002cc4:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cce:	490c      	ldr	r1, [pc, #48]	; (8002d00 <sensorhubControlHdlr+0x160>)
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 8002cd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4413      	add	r3, r2
 8002cda:	7dba      	ldrb	r2, [r7, #22]
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	69f8      	ldr	r0, [r7, #28]
 8002ce2:	f7ff fef0 	bl	8002ac6 <opRx>
            cursor += reportLen;
 8002ce6:	7dbb      	ldrb	r3, [r7, #22]
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cec:	4413      	add	r3, r2
 8002cee:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cursor < len) {
 8002cf0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	f4ff af6f 	bcc.w	8002bd8 <sensorhubControlHdlr+0x38>
        }
    }
}
 8002cfa:	3728      	adds	r7, #40	; 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	200008c0 	.word	0x200008c0

08002d04 <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	4610      	mov	r0, r2
 8002d22:	4798      	blx	r3
 8002d24:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 8002d26:	6839      	ldr	r1, [r7, #0]
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff fea7 	bl	8002a7c <opStart>
 8002d2e:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <opProcess+0x36>
        return status;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	e034      	b.n	8002da4 <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 8002d3e:	e015      	b.n	8002d6c <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4e:	621a      	str	r2, [r3, #32]
            break;
 8002d50:	e01b      	b.n	8002d8a <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 f903 	bl	8004f62 <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4610      	mov	r0, r2
 8002d68:	4798      	blx	r3
 8002d6a:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0e1      	beq.n	8002d40 <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad2      	subs	r2, r2, r3
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d3da      	bcc.n	8002d40 <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f06f 0205 	mvn.w	r2, #5
 8002d9e:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 8002dac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002db0:	b087      	sub	sp, #28
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	4613      	mov	r3, r2
 8002dba:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <touSTimestamp+0x80>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d204      	bcs.n	8002dd0 <touSTimestamp+0x24>
        rollovers++;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <touSTimestamp+0x84>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <touSTimestamp+0x84>)
 8002dce:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 8002dd0:	4a16      	ldr	r2, [pc, #88]	; (8002e2c <touSTimestamp+0x80>)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 8002dd6:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <touSTimestamp+0x84>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	469a      	mov	sl, r3
 8002dde:	4693      	mov	fp, r2
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	4653      	mov	r3, sl
 8002dea:	2200      	movs	r2, #0
 8002dec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4413      	add	r3, r2
 8002df6:	2264      	movs	r2, #100	; 0x64
 8002df8:	fb02 f303 	mul.w	r3, r2, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4413      	add	r3, r2
 8002e02:	2200      	movs	r2, #0
 8002e04:	461c      	mov	r4, r3
 8002e06:	4615      	mov	r5, r2
 8002e08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e0c:	eb12 0804 	adds.w	r8, r2, r4
 8002e10:	eb43 0905 	adc.w	r9, r3, r5
 8002e14:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 8002e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	200008dc 	.word	0x200008dc
 8002e30:	200008e0 	.word	0x200008e0

08002e34 <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8002e34:	b5b0      	push	{r4, r5, r7, lr}
 8002e36:	b0a0      	sub	sp, #128	; 0x80
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    int32_t referenceDelta = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	67bb      	str	r3, [r7, #120]	; 0x78

    while (cursor < len) {
 8002e4e:	e099      	b.n	8002f84 <sensorhubInputHdlr+0x150>
        // Get next report id
        uint8_t reportId = payload[cursor];
 8002e50:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	4413      	add	r3, r2
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8002e5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fe78 	bl	8002b58 <getReportLen>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        if (reportLen == 0) {
 8002e6e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d107      	bne.n	8002e86 <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8002e84:	e084      	b.n	8002f90 <sensorhubInputHdlr+0x15c>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 8002e86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002e8a:	2bfb      	cmp	r3, #251	; 0xfb
 8002e8c:	d10a      	bne.n	8002ea4 <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 8002e8e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4413      	add	r3, r2
 8002e96:	667b      	str	r3, [r7, #100]	; 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 8002e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e9a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002e9e:	425b      	negs	r3, r3
 8002ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ea2:	e067      	b.n	8002f74 <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 8002ea4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002ea8:	2bfa      	cmp	r3, #250	; 0xfa
 8002eaa:	d10b      	bne.n	8002ec4 <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 8002eac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	66bb      	str	r3, [r7, #104]	; 0x68

                referenceDelta += rpt->timebase;
 8002eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002ebc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ebe:	4413      	add	r3, r2
 8002ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ec2:	e057      	b.n	8002f74 <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 8002ec4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002ec8:	2bef      	cmp	r3, #239	; 0xef
 8002eca:	d10b      	bne.n	8002ee4 <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 8002ecc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff fdf2 	bl	8002ac6 <opRx>
 8002ee2:	e047      	b.n	8002f74 <sensorhubInputHdlr+0x140>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 8002ee4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	4413      	add	r3, r2
 8002eec:	673b      	str	r3, [r7, #112]	; 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 8002eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	019b      	lsls	r3, r3, #6
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f00:	3303      	adds	r3, #3
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 8002f0c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002f10:	461a      	mov	r2, r3
 8002f12:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002f14:	6838      	ldr	r0, [r7, #0]
 8002f16:	f7ff ff49 	bl	8002dac <touSTimestamp>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 8002f22:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8002f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f28:	4413      	add	r3, r2
 8002f2a:	2264      	movs	r2, #100	; 0x64
 8002f2c:	fb02 f303 	mul.w	r3, r2, r3
 8002f30:	17da      	asrs	r2, r3, #31
 8002f32:	461c      	mov	r4, r3
 8002f34:	4615      	mov	r5, r2
 8002f36:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 8002f3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002f3e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                memcpy(event.report, pReport, reportLen);
 8002f42:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8002f46:	f107 0310 	add.w	r3, r7, #16
 8002f4a:	3312      	adds	r3, #18
 8002f4c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f005 fa06 	bl	8008360 <memcpy>
                event.len = reportLen;
 8002f54:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002f58:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <sensorhubInputHdlr+0x140>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f6c:	f107 0110 	add.w	r1, r7, #16
 8002f70:	4610      	mov	r0, r2
 8002f72:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 8002f74:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002f7e:	4413      	add	r3, r2
 8002f80:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    while (cursor < len) {
 8002f84:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	f4ff af60 	bcc.w	8002e50 <sensorhubInputHdlr+0x1c>
        }
    }
}
 8002f90:	3780      	adds	r7, #128	; 0x80
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bdb0      	pop	{r4, r5, r7, pc}

08002f96 <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	6978      	ldr	r0, [r7, #20]
 8002fb2:	f7ff ff3f 	bl	8002e34 <sensorhubInputHdlr>
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8002fd2:	88fa      	ldrh	r2, [r7, #6]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	6978      	ldr	r0, [r7, #20]
 8002fda:	f7ff ff2b 	bl	8002e34 <sensorhubInputHdlr>
}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8002fe6:	b5b0      	push	{r4, r5, r7, lr}
 8002fe8:	b09c      	sub	sp, #112	; 0x70
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	66bb      	str	r3, [r7, #104]	; 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 8003000:	232a      	movs	r3, #42	; 0x2a
 8003002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t reportLen = getReportLen(reportId);
 8003006:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fda4 	bl	8002b58 <getReportLen>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    while (cursor < len) {
 8003016:	e02d      	b.n	8003074 <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	461c      	mov	r4, r3
 800301e:	4615      	mov	r5, r2
 8003020:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 8003024:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003028:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        memcpy(event.report, payload+cursor, reportLen);
 800302c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	18d1      	adds	r1, r2, r3
 8003034:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8003038:	f107 0310 	add.w	r3, r7, #16
 800303c:	3312      	adds	r3, #18
 800303e:	4618      	mov	r0, r3
 8003040:	f005 f98e 	bl	8008360 <memcpy>
        event.len = reportLen;
 8003044:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003048:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 800304c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8003054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800305a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800305c:	f107 0110 	add.w	r1, r7, #16
 8003060:	4610      	mov	r0, r2
 8003062:	4798      	blx	r3
        }

        cursor += reportLen;
 8003064:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003068:	b29a      	uxth	r2, r3
 800306a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800306e:	4413      	add	r3, r2
 8003070:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    while (cursor < len) {
 8003074:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	429a      	cmp	r2, r3
 800307c:	d3cc      	bcc.n	8003018 <sensorhubInputGyroRvHdlr+0x32>
    }
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	3770      	adds	r7, #112	; 0x70
 8003084:	46bd      	mov	sp, r7
 8003086:	bdb0      	pop	{r4, r5, r7, pc}

08003088 <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d007      	beq.n	80030b2 <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        return;
 80030b0:	e021      	b.n	80030f6 <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d114      	bne.n	80030e4 <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2201      	movs	r2, #1
 80030be:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f7ff fd2d 	bl	8002b20 <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <executableDeviceHdlr+0x74>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00f      	beq.n	80030f4 <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030dc:	4907      	ldr	r1, [pc, #28]	; (80030fc <executableDeviceHdlr+0x74>)
 80030de:	4610      	mov	r0, r2
 80030e0:	4798      	blx	r3
            }
            break;
 80030e2:	e007      	b.n	80030f4 <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
            break;
 80030f2:	e000      	b.n	80030f6 <executableDeviceHdlr+0x6e>
            break;
 80030f4:	bf00      	nop
    }
}
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	200008c0 	.word	0x200008c0

08003100 <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6858      	ldr	r0, [r3, #4]
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	2102      	movs	r1, #2
 8003118:	f001 fef2 	bl	8004f00 <shtp_send>
 800311c:	4603      	mov	r3, r0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b08a      	sub	sp, #40	; 0x28
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <setSensorConfigStart+0x28>
 8003142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <setSensorConfigStart+0x3c>
 8003156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	789b      	ldrb	r3, [r3, #2]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <setSensorConfigStart+0x50>
 800316a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800316e:	f043 0304 	orr.w	r3, r3, #4
 8003172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	78db      	ldrb	r3, [r3, #3]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <setSensorConfigStart+0x64>
 800317e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003182:	f043 0308 	orr.w	r3, r3, #8
 8003186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	791b      	ldrb	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <setSensorConfigStart+0x78>
 8003192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003196:	f043 0310 	orr.w	r3, r3, #16
 800319a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    memset(&req, 0, sizeof(req));
 800319e:	f107 0308 	add.w	r3, r7, #8
 80031a2:	2211      	movs	r2, #17
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f005 f8e8 	bl	800837c <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 80031ac:	23fd      	movs	r3, #253	; 0xfd
 80031ae:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031b6:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 80031b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031bc:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	88db      	ldrh	r3, [r3, #6]
 80031c2:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	2211      	movs	r2, #17
 80031e4:	4619      	mov	r1, r3
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ff8a 	bl	8003100 <sendCtrl>
 80031ec:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 80031ee:	69f9      	ldr	r1, [r7, #28]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fc83 	bl	8002afc <opCompleted>

    return rc;
 80031f6:	69fb      	ldr	r3, [r7, #28]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3728      	adds	r7, #40	; 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <shtpEventCallback+0x3c>)
 800320e:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <shtpEventCallback+0x40>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <shtpEventCallback+0x40>)
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	2b00      	cmp	r3, #0
 8003222:	d006      	beq.n	8003232 <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800322c:	4904      	ldr	r1, [pc, #16]	; (8003240 <shtpEventCallback+0x40>)
 800322e:	4610      	mov	r0, r2
 8003230:	4798      	blx	r3
    }
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000748 	.word	0x20000748
 8003240:	200008c0 	.word	0x200008c0

08003244 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 8003250:	4b41      	ldr	r3, [pc, #260]	; (8003358 <sh2_open+0x114>)
 8003252:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <sh2_open+0x1c>
 800325a:	f06f 0301 	mvn.w	r3, #1
 800325e:	e077      	b.n	8003350 <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 8003260:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8003264:	2100      	movs	r1, #0
 8003266:	69b8      	ldr	r0, [r7, #24]
 8003268:	f005 f888 	bl	800837c <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2200      	movs	r2, #0
 8003270:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	639a      	str	r2, [r3, #56]	; 0x38
    pSh2->eventCookie = eventCookie;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	63da      	str	r2, [r3, #60]	; 0x3c
    pSh2->sensorCallback = 0;
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = 0;
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2200      	movs	r2, #0
 800328e:	645a      	str	r2, [r3, #68]	; 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fdbb 	bl	8004e10 <shtp_open>
 800329a:	4602      	mov	r2, r0
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 80032a8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ac:	e050      	b.n	8003350 <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4929      	ldr	r1, [pc, #164]	; (800335c <sh2_open+0x118>)
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fdde 	bl	8004e78 <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6858      	ldr	r0, [r3, #4]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	4a27      	ldr	r2, [pc, #156]	; (8003360 <sh2_open+0x11c>)
 80032c4:	2102      	movs	r1, #2
 80032c6:	f001 fdeb 	bl	8004ea0 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	6858      	ldr	r0, [r3, #4]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4a24      	ldr	r2, [pc, #144]	; (8003364 <sh2_open+0x120>)
 80032d2:	2103      	movs	r1, #3
 80032d4:	f001 fde4 	bl	8004ea0 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6858      	ldr	r0, [r3, #4]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	4a22      	ldr	r2, [pc, #136]	; (8003368 <sh2_open+0x124>)
 80032e0:	2104      	movs	r1, #4
 80032e2:	f001 fddd 	bl	8004ea0 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	6858      	ldr	r0, [r3, #4]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4a1f      	ldr	r2, [pc, #124]	; (800336c <sh2_open+0x128>)
 80032ee:	2105      	movs	r1, #5
 80032f0:	f001 fdd6 	bl	8004ea0 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	6858      	ldr	r0, [r3, #4]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <sh2_open+0x12c>)
 80032fc:	2101      	movs	r1, #1
 80032fe:	f001 fdcf 	bl	8004ea0 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	4610      	mov	r0, r2
 800330e:	4798      	blx	r3
 8003310:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8003316:	e00c      	b.n	8003332 <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4618      	mov	r0, r3
 800331e:	f001 fe20 	bl	8004f62 <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	4610      	mov	r0, r2
 800332e:	4798      	blx	r3
 8003330:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <sh2_open+0x130>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d807      	bhi.n	800334e <sh2_open+0x10a>
           (!pSh2->resetComplete))
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	7a1b      	ldrb	r3, [r3, #8]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f083 0301 	eor.w	r3, r3, #1
 8003348:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e4      	bne.n	8003318 <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000748 	.word	0x20000748
 800335c:	08003201 	.word	0x08003201
 8003360:	08002ba1 	.word	0x08002ba1
 8003364:	08002f97 	.word	0x08002f97
 8003368:	08002fbf 	.word	0x08002fbf
 800336c:	08002fe7 	.word	0x08002fe7
 8003370:	08003089 	.word	0x08003089
 8003374:	00030d3f 	.word	0x00030d3f

08003378 <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <sh2_service+0x24>)
 8003380:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f001 fde7 	bl	8004f62 <shtp_service>
    }
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000748 	.word	0x20000748

080033a0 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 80033aa:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <sh2_setSensorCallback+0x28>)
 80033ac:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = cookie;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44

    return SH2_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	20000748 	.word	0x20000748

080033cc <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <sh2_setSensorConfig+0x4c>)
 80033da:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	e012      	b.n	8003410 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3324      	adds	r3, #36	; 0x24
 80033ee:	2210      	movs	r2, #16
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 ffc2 	bl	800837c <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	79fa      	ldrb	r2, [r7, #7]
 80033fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 8003406:	4905      	ldr	r1, [pc, #20]	; (800341c <sh2_setSensorConfig+0x50>)
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff fc7b 	bl	8002d04 <opProcess>
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000748 	.word	0x20000748
 800341c:	08008ef8 	.word	0x08008ef8

08003420 <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	7c5a      	ldrb	r2, [r3, #17]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b2a      	cmp	r3, #42	; 0x2a
 8003448:	d00b      	beq.n	8003462 <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	7cda      	ldrb	r2, [r3, #19]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	7d1b      	ldrb	r3, [r3, #20]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	b2da      	uxtb	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	709a      	strb	r2, [r3, #2]
 8003460:	e005      	b.n	800346e <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	3b01      	subs	r3, #1
 8003474:	2b2d      	cmp	r3, #45	; 0x2d
 8003476:	f200 8155 	bhi.w	8003724 <sh2_decodeSensorEvent+0x304>
 800347a:	a201      	add	r2, pc, #4	; (adr r2, 8003480 <sh2_decodeSensorEvent+0x60>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	08003545 	.word	0x08003545
 8003484:	08003575 	.word	0x08003575
 8003488:	08003599 	.word	0x08003599
 800348c:	08003551 	.word	0x08003551
 8003490:	080035b1 	.word	0x080035b1
 8003494:	0800355d 	.word	0x0800355d
 8003498:	08003581 	.word	0x08003581
 800349c:	080035bd 	.word	0x080035bd
 80034a0:	080035c9 	.word	0x080035c9
 80034a4:	080035d5 	.word	0x080035d5
 80034a8:	080035e1 	.word	0x080035e1
 80034ac:	080035ed 	.word	0x080035ed
 80034b0:	080035f9 	.word	0x080035f9
 80034b4:	08003605 	.word	0x08003605
 80034b8:	080035a5 	.word	0x080035a5
 80034bc:	0800361d 	.word	0x0800361d
 80034c0:	08003635 	.word	0x08003635
 80034c4:	08003641 	.word	0x08003641
 80034c8:	0800364d 	.word	0x0800364d
 80034cc:	08003539 	.word	0x08003539
 80034d0:	08003569 	.word	0x08003569
 80034d4:	0800358d 	.word	0x0800358d
 80034d8:	08003611 	.word	0x08003611
 80034dc:	08003629 	.word	0x08003629
 80034e0:	08003659 	.word	0x08003659
 80034e4:	08003665 	.word	0x08003665
 80034e8:	08003671 	.word	0x08003671
 80034ec:	0800367d 	.word	0x0800367d
 80034f0:	08003725 	.word	0x08003725
 80034f4:	08003689 	.word	0x08003689
 80034f8:	08003695 	.word	0x08003695
 80034fc:	080036a1 	.word	0x080036a1
 8003500:	080036ad 	.word	0x080036ad
 8003504:	080036b9 	.word	0x080036b9
 8003508:	080036c5 	.word	0x080036c5
 800350c:	08003725 	.word	0x08003725
 8003510:	08003725 	.word	0x08003725
 8003514:	08003725 	.word	0x08003725
 8003518:	08003725 	.word	0x08003725
 800351c:	080036d1 	.word	0x080036d1
 8003520:	080036dd 	.word	0x080036dd
 8003524:	080036e9 	.word	0x080036e9
 8003528:	080036f5 	.word	0x080036f5
 800352c:	08003701 	.word	0x08003701
 8003530:	0800370d 	.word	0x0800370d
 8003534:	08003719 	.word	0x08003719
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 8003538:	6839      	ldr	r1, [r7, #0]
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8fc 	bl	8003738 <decodeRawAccelerometer>
 8003540:	60f8      	str	r0, [r7, #12]
            break;
 8003542:	e0f3      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 8003544:	6839      	ldr	r1, [r7, #0]
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f924 	bl	8003794 <decodeAccelerometer>
 800354c:	60f8      	str	r0, [r7, #12]
            break;
 800354e:	e0ed      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 8003550:	6839      	ldr	r1, [r7, #0]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f95e 	bl	8003814 <decodeLinearAcceleration>
 8003558:	60f8      	str	r0, [r7, #12]
            break;
 800355a:	e0e7      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 800355c:	6839      	ldr	r1, [r7, #0]
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f998 	bl	8003894 <decodeGravity>
 8003564:	60f8      	str	r0, [r7, #12]
            break;
 8003566:	e0e1      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f9d2 	bl	8003914 <decodeRawGyroscope>
 8003570:	60f8      	str	r0, [r7, #12]
            break;
 8003572:	e0db      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 8003574:	6839      	ldr	r1, [r7, #0]
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa04 	bl	8003984 <decodeGyroscopeCalibrated>
 800357c:	60f8      	str	r0, [r7, #12]
            break;
 800357e:	e0d5      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 8003580:	6839      	ldr	r1, [r7, #0]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa3e 	bl	8003a04 <decodeGyroscopeUncal>
 8003588:	60f8      	str	r0, [r7, #12]
            break;
 800358a:	e0cf      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 faaa 	bl	8003ae8 <decodeRawMagnetometer>
 8003594:	60f8      	str	r0, [r7, #12]
            break;
 8003596:	e0c9      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fad2 	bl	8003b44 <decodeMagneticFieldCalibrated>
 80035a0:	60f8      	str	r0, [r7, #12]
            break;
 80035a2:	e0c3      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 80035a4:	6839      	ldr	r1, [r7, #0]
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fb0c 	bl	8003bc4 <decodeMagneticFieldUncal>
 80035ac:	60f8      	str	r0, [r7, #12]
            break;
 80035ae:	e0bd      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 80035b0:	6839      	ldr	r1, [r7, #0]
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fb78 	bl	8003ca8 <decodeRotationVector>
 80035b8:	60f8      	str	r0, [r7, #12]
            break;
 80035ba:	e0b7      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 80035bc:	6839      	ldr	r1, [r7, #0]
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fbd6 	bl	8003d70 <decodeGameRotationVector>
 80035c4:	60f8      	str	r0, [r7, #12]
            break;
 80035c6:	e0b1      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 80035c8:	6839      	ldr	r1, [r7, #0]
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fc20 	bl	8003e10 <decodeGeomagneticRotationVector>
 80035d0:	60f8      	str	r0, [r7, #12]
            break;
 80035d2:	e0ab      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 80035d4:	6839      	ldr	r1, [r7, #0]
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fc7e 	bl	8003ed8 <decodePressure>
 80035dc:	60f8      	str	r0, [r7, #12]
            break;
 80035de:	e0a5      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fc94 	bl	8003f10 <decodeAmbientLight>
 80035e8:	60f8      	str	r0, [r7, #12]
            break;
 80035ea:	e09f      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fcaa 	bl	8003f48 <decodeHumidity>
 80035f4:	60f8      	str	r0, [r7, #12]
            break;
 80035f6:	e099      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fcc2 	bl	8003f84 <decodeProximity>
 8003600:	60f8      	str	r0, [r7, #12]
            break;
 8003602:	e093      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 8003604:	6839      	ldr	r1, [r7, #0]
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fcda 	bl	8003fc0 <decodeTemperature>
 800360c:	60f8      	str	r0, [r7, #12]
            break;
 800360e:	e08d      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fcf2 	bl	8003ffc <decodeReserved>
 8003618:	60f8      	str	r0, [r7, #12]
            break;
 800361a:	e087      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 800361c:	6839      	ldr	r1, [r7, #0]
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fd0a 	bl	8004038 <decodeTapDetector>
 8003624:	60f8      	str	r0, [r7, #12]
            break;
 8003626:	e081      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fd14 	bl	8004058 <decodeStepDetector>
 8003630:	60f8      	str	r0, [r7, #12]
            break;
 8003632:	e07b      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 8003634:	6839      	ldr	r1, [r7, #0]
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fd20 	bl	800407c <decodeStepCounter>
 800363c:	60f8      	str	r0, [r7, #12]
            break;
 800363e:	e075      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fd35 	bl	80040b2 <decodeSignificantMotion>
 8003648:	60f8      	str	r0, [r7, #12]
            break;
 800364a:	e06f      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fd42 	bl	80040d8 <decodeStabilityClassifier>
 8003654:	60f8      	str	r0, [r7, #12]
            break;
 8003656:	e069      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fd4c 	bl	80040f8 <decodeShakeDetector>
 8003660:	60f8      	str	r0, [r7, #12]
            break;
 8003662:	e063      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fd59 	bl	800411e <decodeFlipDetector>
 800366c:	60f8      	str	r0, [r7, #12]
            break;
 800366e:	e05d      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fd66 	bl	8004144 <decodePickupDetector>
 8003678:	60f8      	str	r0, [r7, #12]
            break;
 800367a:	e057      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fd73 	bl	800416a <decodeStabilityDetector>
 8003684:	60f8      	str	r0, [r7, #12]
            break;
 8003686:	e051      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 8003688:	6839      	ldr	r1, [r7, #0]
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fd80 	bl	8004190 <decodePersonalActivityClassifier>
 8003690:	60f8      	str	r0, [r7, #12]
            break;
 8003692:	e04b      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fdad 	bl	80041f6 <decodeSleepDetector>
 800369c:	60f8      	str	r0, [r7, #12]
            break;
 800369e:	e045      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fdb7 	bl	8004216 <decodeTiltDetector>
 80036a8:	60f8      	str	r0, [r7, #12]
            break;
 80036aa:	e03f      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fdc4 	bl	800423c <decodePocketDetector>
 80036b4:	60f8      	str	r0, [r7, #12]
            break;
 80036b6:	e039      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fdd1 	bl	8004262 <decodeCircleDetector>
 80036c0:	60f8      	str	r0, [r7, #12]
            break;
 80036c2:	e033      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 80036c4:	6839      	ldr	r1, [r7, #0]
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fdde 	bl	8004288 <decodeHeartRateMonitor>
 80036cc:	60f8      	str	r0, [r7, #12]
            break;
 80036ce:	e02d      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 80036d0:	6839      	ldr	r1, [r7, #0]
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fdec 	bl	80042b0 <decodeArvrStabilizedRV>
 80036d8:	60f8      	str	r0, [r7, #12]
            break;
 80036da:	e027      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fe4a 	bl	8004378 <decodeArvrStabilizedGRV>
 80036e4:	60f8      	str	r0, [r7, #12]
            break;
 80036e6:	e021      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 80036e8:	6839      	ldr	r1, [r7, #0]
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fe94 	bl	8004418 <decodeGyroIntegratedRV>
 80036f0:	60f8      	str	r0, [r7, #12]
            break;
 80036f2:	e01b      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 80036f4:	6839      	ldr	r1, [r7, #0]
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 ff14 	bl	8004524 <decodeIZroRequest>
 80036fc:	60f8      	str	r0, [r7, #12]
            break;
 80036fe:	e015      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 8003700:	6839      	ldr	r1, [r7, #0]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 ff22 	bl	800454c <decodeRawOptFlow>
 8003708:	60f8      	str	r0, [r7, #12]
            break;
 800370a:	e00f      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 ff9a 	bl	8004648 <decodeDeadReckoningPose>
 8003714:	60f8      	str	r0, [r7, #12]
            break;
 8003716:	e009      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f001 f87e 	bl	800481c <decodeWheelEncoder>
 8003720:	60f8      	str	r0, [r7, #12]
            break;
 8003722:	e003      	b.n	800372c <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	60fb      	str	r3, [r7, #12]
            break;
 800372a:	bf00      	nop
    }

    return rc;
 800372c:	68fb      	ldr	r3, [r7, #12]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop

08003738 <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	3316      	adds	r3, #22
 8003746:	4618      	mov	r0, r3
 8003748:	f001 f8d9 	bl	80048fe <read16>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	3318      	adds	r3, #24
 8003758:	4618      	mov	r0, r3
 800375a:	f001 f8d0 	bl	80048fe <read16>
 800375e:	4603      	mov	r3, r0
 8003760:	461a      	mov	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	331a      	adds	r3, #26
 800376a:	4618      	mov	r0, r3
 800376c:	f001 f8c7 	bl	80048fe <read16>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	331e      	adds	r3, #30
 800377c:	4618      	mov	r0, r3
 800377e:	f001 f8d4 	bl	800492a <read32>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	3316      	adds	r3, #22
 80037a2:	4618      	mov	r0, r3
 80037a4:	f001 f8ab 	bl	80048fe <read16>
 80037a8:	4603      	mov	r3, r0
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003810 <decodeAccelerometer+0x7c>
 80037b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	3318      	adds	r3, #24
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 f89a 	bl	80048fe <read16>
 80037ca:	4603      	mov	r3, r0
 80037cc:	ee07 3a90 	vmov	s15, r3
 80037d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003810 <decodeAccelerometer+0x7c>
 80037d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	331a      	adds	r3, #26
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 f889 	bl	80048fe <read16>
 80037ec:	4603      	mov	r3, r0
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003810 <decodeAccelerometer+0x7c>
 80037fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	3b800000 	.word	0x3b800000

08003814 <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	3316      	adds	r3, #22
 8003822:	4618      	mov	r0, r3
 8003824:	f001 f86b 	bl	80048fe <read16>
 8003828:	4603      	mov	r3, r0
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003832:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003890 <decodeLinearAcceleration+0x7c>
 8003836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	3318      	adds	r3, #24
 8003844:	4618      	mov	r0, r3
 8003846:	f001 f85a 	bl	80048fe <read16>
 800384a:	4603      	mov	r3, r0
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003854:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003890 <decodeLinearAcceleration+0x7c>
 8003858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	331a      	adds	r3, #26
 8003866:	4618      	mov	r0, r3
 8003868:	f001 f849 	bl	80048fe <read16>
 800386c:	4603      	mov	r3, r0
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003876:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003890 <decodeLinearAcceleration+0x7c>
 800387a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	3b800000 	.word	0x3b800000

08003894 <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	3316      	adds	r3, #22
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 f82b 	bl	80048fe <read16>
 80038a8:	4603      	mov	r3, r0
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003910 <decodeGravity+0x7c>
 80038b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 f81a 	bl	80048fe <read16>
 80038ca:	4603      	mov	r3, r0
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003910 <decodeGravity+0x7c>
 80038d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	331a      	adds	r3, #26
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 f809 	bl	80048fe <read16>
 80038ec:	4603      	mov	r3, r0
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003910 <decodeGravity+0x7c>
 80038fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	3b800000 	.word	0x3b800000

08003914 <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	3316      	adds	r3, #22
 8003922:	4618      	mov	r0, r3
 8003924:	f000 ffeb 	bl	80048fe <read16>
 8003928:	4603      	mov	r3, r0
 800392a:	461a      	mov	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	3318      	adds	r3, #24
 8003934:	4618      	mov	r0, r3
 8003936:	f000 ffe2 	bl	80048fe <read16>
 800393a:	4603      	mov	r3, r0
 800393c:	461a      	mov	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	331a      	adds	r3, #26
 8003946:	4618      	mov	r0, r3
 8003948:	f000 ffd9 	bl	80048fe <read16>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	331c      	adds	r3, #28
 8003958:	4618      	mov	r0, r3
 800395a:	f000 ffd0 	bl	80048fe <read16>
 800395e:	4603      	mov	r3, r0
 8003960:	461a      	mov	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	331e      	adds	r3, #30
 800396a:	4618      	mov	r0, r3
 800396c:	f000 ffdd 	bl	800492a <read32>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	3316      	adds	r3, #22
 8003992:	4618      	mov	r0, r3
 8003994:	f000 ffb3 	bl	80048fe <read16>
 8003998:	4603      	mov	r3, r0
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003a00 <decodeGyroscopeCalibrated+0x7c>
 80039a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	3318      	adds	r3, #24
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 ffa2 	bl	80048fe <read16>
 80039ba:	4603      	mov	r3, r0
 80039bc:	ee07 3a90 	vmov	s15, r3
 80039c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039c4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003a00 <decodeGyroscopeCalibrated+0x7c>
 80039c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	331a      	adds	r3, #26
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 ff91 	bl	80048fe <read16>
 80039dc:	4603      	mov	r3, r0
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003a00 <decodeGyroscopeCalibrated+0x7c>
 80039ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	3b000000 	.word	0x3b000000

08003a04 <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	3316      	adds	r3, #22
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 ff73 	bl	80048fe <read16>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a22:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003ae4 <decodeGyroscopeUncal+0xe0>
 8003a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	3318      	adds	r3, #24
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 ff62 	bl	80048fe <read16>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a44:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003ae4 <decodeGyroscopeUncal+0xe0>
 8003a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	331a      	adds	r3, #26
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 ff51 	bl	80048fe <read16>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a66:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003ae4 <decodeGyroscopeUncal+0xe0>
 8003a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	331c      	adds	r3, #28
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 ff40 	bl	80048fe <read16>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a88:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003ae4 <decodeGyroscopeUncal+0xe0>
 8003a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	331e      	adds	r3, #30
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 ff2f 	bl	80048fe <read16>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aaa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003ae4 <decodeGyroscopeUncal+0xe0>
 8003aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	3320      	adds	r3, #32
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 ff1e 	bl	80048fe <read16>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	ee07 3a90 	vmov	s15, r3
 8003ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003acc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003ae4 <decodeGyroscopeUncal+0xe0>
 8003ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	3b000000 	.word	0x3b000000

08003ae8 <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	3316      	adds	r3, #22
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 ff01 	bl	80048fe <read16>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	3318      	adds	r3, #24
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fef8 	bl	80048fe <read16>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	331a      	adds	r3, #26
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 feef 	bl	80048fe <read16>
 8003b20:	4603      	mov	r3, r0
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	331e      	adds	r3, #30
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fefc 	bl	800492a <read32>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	3316      	adds	r3, #22
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fed3 	bl	80048fe <read16>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b62:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003bc0 <decodeMagneticFieldCalibrated+0x7c>
 8003b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	3318      	adds	r3, #24
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fec2 	bl	80048fe <read16>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b84:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003bc0 <decodeMagneticFieldCalibrated+0x7c>
 8003b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	331a      	adds	r3, #26
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 feb1 	bl	80048fe <read16>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003bc0 <decodeMagneticFieldCalibrated+0x7c>
 8003baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	3d800000 	.word	0x3d800000

08003bc4 <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	3316      	adds	r3, #22
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fe93 	bl	80048fe <read16>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003ca4 <decodeMagneticFieldUncal+0xe0>
 8003be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	3318      	adds	r3, #24
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fe82 	bl	80048fe <read16>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	ee07 3a90 	vmov	s15, r3
 8003c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c04:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003ca4 <decodeMagneticFieldUncal+0xe0>
 8003c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	331a      	adds	r3, #26
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fe71 	bl	80048fe <read16>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c26:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003ca4 <decodeMagneticFieldUncal+0xe0>
 8003c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	331c      	adds	r3, #28
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fe60 	bl	80048fe <read16>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c48:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003ca4 <decodeMagneticFieldUncal+0xe0>
 8003c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	331e      	adds	r3, #30
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fe4f 	bl	80048fe <read16>
 8003c60:	4603      	mov	r3, r0
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c6a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003ca4 <decodeMagneticFieldUncal+0xe0>
 8003c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	3320      	adds	r3, #32
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fe3e 	bl	80048fe <read16>
 8003c82:	4603      	mov	r3, r0
 8003c84:	ee07 3a90 	vmov	s15, r3
 8003c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c8c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003ca4 <decodeMagneticFieldUncal+0xe0>
 8003c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	3d800000 	.word	0x3d800000

08003ca8 <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3316      	adds	r3, #22
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fe21 	bl	80048fe <read16>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003d68 <decodeRotationVector+0xc0>
 8003cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fe10 	bl	80048fe <read16>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	ee07 3a90 	vmov	s15, r3
 8003ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ce8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003d68 <decodeRotationVector+0xc0>
 8003cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	331a      	adds	r3, #26
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fdff 	bl	80048fe <read16>
 8003d00:	4603      	mov	r3, r0
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d0a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003d68 <decodeRotationVector+0xc0>
 8003d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	331c      	adds	r3, #28
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fdee 	bl	80048fe <read16>
 8003d22:	4603      	mov	r3, r0
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d2c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003d68 <decodeRotationVector+0xc0>
 8003d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	331e      	adds	r3, #30
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fddd 	bl	80048fe <read16>
 8003d44:	4603      	mov	r3, r0
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d4e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003d6c <decodeRotationVector+0xc4>
 8003d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	38800000 	.word	0x38800000
 8003d6c:	39800000 	.word	0x39800000

08003d70 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	3316      	adds	r3, #22
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fdbd 	bl	80048fe <read16>
 8003d84:	4603      	mov	r3, r0
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003e0c <decodeGameRotationVector+0x9c>
 8003d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	3318      	adds	r3, #24
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fdac 	bl	80048fe <read16>
 8003da6:	4603      	mov	r3, r0
 8003da8:	ee07 3a90 	vmov	s15, r3
 8003dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003e0c <decodeGameRotationVector+0x9c>
 8003db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	331a      	adds	r3, #26
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fd9b 	bl	80048fe <read16>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003e0c <decodeGameRotationVector+0x9c>
 8003dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	331c      	adds	r3, #28
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fd8a 	bl	80048fe <read16>
 8003dea:	4603      	mov	r3, r0
 8003dec:	ee07 3a90 	vmov	s15, r3
 8003df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003df4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003e0c <decodeGameRotationVector+0x9c>
 8003df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	38800000 	.word	0x38800000

08003e10 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	3316      	adds	r3, #22
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fd6d 	bl	80048fe <read16>
 8003e24:	4603      	mov	r3, r0
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e2e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003ed0 <decodeGeomagneticRotationVector+0xc0>
 8003e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	3318      	adds	r3, #24
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fd5c 	bl	80048fe <read16>
 8003e46:	4603      	mov	r3, r0
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e50:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003ed0 <decodeGeomagneticRotationVector+0xc0>
 8003e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	331a      	adds	r3, #26
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fd4b 	bl	80048fe <read16>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e72:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003ed0 <decodeGeomagneticRotationVector+0xc0>
 8003e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	331c      	adds	r3, #28
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fd3a 	bl	80048fe <read16>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e94:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003ed0 <decodeGeomagneticRotationVector+0xc0>
 8003e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	331e      	adds	r3, #30
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fd29 	bl	80048fe <read16>
 8003eac:	4603      	mov	r3, r0
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003ed4 <decodeGeomagneticRotationVector+0xc4>
 8003eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	38800000 	.word	0x38800000
 8003ed4:	39800000 	.word	0x39800000

08003ed8 <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	3316      	adds	r3, #22
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fd1f 	bl	800492a <read32>
 8003eec:	ee07 0a90 	vmov	s15, r0
 8003ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003f0c <decodePressure+0x34>
 8003ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	35800000 	.word	0x35800000

08003f10 <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	3316      	adds	r3, #22
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fd03 	bl	800492a <read32>
 8003f24:	ee07 0a90 	vmov	s15, r0
 8003f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f2c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003f44 <decodeAmbientLight+0x34>
 8003f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	3b800000 	.word	0x3b800000

08003f48 <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	3316      	adds	r3, #22
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fcd1 	bl	80048fe <read16>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f66:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003f80 <decodeHumidity+0x38>
 8003f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	3b800000 	.word	0x3b800000

08003f84 <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	3316      	adds	r3, #22
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fcb3 	bl	80048fe <read16>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003fbc <decodeProximity+0x38>
 8003fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	3d800000 	.word	0x3d800000

08003fc0 <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	3316      	adds	r3, #22
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 fc95 	bl	80048fe <read16>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fde:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003ff8 <decodeTemperature+0x38>
 8003fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	3c000000 	.word	0x3c000000

08003ffc <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	3316      	adds	r3, #22
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fc77 	bl	80048fe <read16>
 8004010:	4603      	mov	r3, r0
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004034 <decodeReserved+0x38>
 800401e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	3c000000 	.word	0x3c000000

08004038 <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	7d9a      	ldrb	r2, [r3, #22]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	3316      	adds	r3, #22
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fc1c 	bl	80048a4 <readu32>
 800406c:	4602      	mov	r2, r0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	3316      	adds	r3, #22
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fc0a 	bl	80048a4 <readu32>
 8004090:	4602      	mov	r2, r0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	331a      	adds	r3, #26
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fc02 	bl	80048a4 <readu32>
 80040a0:	4603      	mov	r3, r0
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	3316      	adds	r3, #22
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fbd9 	bl	8004878 <readu16>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	7d9a      	ldrb	r2, [r3, #22]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	3316      	adds	r3, #22
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fbb6 	bl	8004878 <readu16>
 800410c:	4603      	mov	r3, r0
 800410e:	461a      	mov	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	3316      	adds	r3, #22
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fba3 	bl	8004878 <readu16>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	3316      	adds	r3, #22
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fb90 	bl	8004878 <readu16>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	3316      	adds	r3, #22
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fb7d 	bl	8004878 <readu16>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	7d9b      	ldrb	r3, [r3, #22]
 800419e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	7d9b      	ldrb	r3, [r3, #22]
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	09db      	lsrs	r3, r3, #7
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	7dda      	ldrb	r2, [r3, #23]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e00d      	b.n	80041e2 <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3306      	adds	r3, #6
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	7c99      	ldrb	r1, [r3, #18]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4413      	add	r3, r2
 80041d6:	3317      	adds	r3, #23
 80041d8:	460a      	mov	r2, r1
 80041da:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3301      	adds	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	ddee      	ble.n	80041c6 <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	7d9a      	ldrb	r2, [r3, #22]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	3316      	adds	r3, #22
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fb27 	bl	8004878 <readu16>
 800422a:	4603      	mov	r3, r0
 800422c:	461a      	mov	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	3316      	adds	r3, #22
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fb14 	bl	8004878 <readu16>
 8004250:	4603      	mov	r3, r0
 8004252:	461a      	mov	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	3316      	adds	r3, #22
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fb01 	bl	8004878 <readu16>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	3316      	adds	r3, #22
 8004296:	4618      	mov	r0, r3
 8004298:	f000 faee 	bl	8004878 <readu16>
 800429c:	4603      	mov	r3, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	3316      	adds	r3, #22
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fb1d 	bl	80048fe <read16>
 80042c4:	4603      	mov	r3, r0
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ce:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004370 <decodeArvrStabilizedRV+0xc0>
 80042d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	3318      	adds	r3, #24
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fb0c 	bl	80048fe <read16>
 80042e6:	4603      	mov	r3, r0
 80042e8:	ee07 3a90 	vmov	s15, r3
 80042ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004370 <decodeArvrStabilizedRV+0xc0>
 80042f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	331a      	adds	r3, #26
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fafb 	bl	80048fe <read16>
 8004308:	4603      	mov	r3, r0
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004312:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004370 <decodeArvrStabilizedRV+0xc0>
 8004316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	331c      	adds	r3, #28
 8004324:	4618      	mov	r0, r3
 8004326:	f000 faea 	bl	80048fe <read16>
 800432a:	4603      	mov	r3, r0
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004334:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004370 <decodeArvrStabilizedRV+0xc0>
 8004338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	331e      	adds	r3, #30
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fad9 	bl	80048fe <read16>
 800434c:	4603      	mov	r3, r0
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004356:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004374 <decodeArvrStabilizedRV+0xc4>
 800435a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	38800000 	.word	0x38800000
 8004374:	39800000 	.word	0x39800000

08004378 <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	3316      	adds	r3, #22
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fab9 	bl	80048fe <read16>
 800438c:	4603      	mov	r3, r0
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004396:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004414 <decodeArvrStabilizedGRV+0x9c>
 800439a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	3318      	adds	r3, #24
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 faa8 	bl	80048fe <read16>
 80043ae:	4603      	mov	r3, r0
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043b8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004414 <decodeArvrStabilizedGRV+0x9c>
 80043bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	331a      	adds	r3, #26
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa97 	bl	80048fe <read16>
 80043d0:	4603      	mov	r3, r0
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043da:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004414 <decodeArvrStabilizedGRV+0x9c>
 80043de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	331c      	adds	r3, #28
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fa86 	bl	80048fe <read16>
 80043f2:	4603      	mov	r3, r0
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043fc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004414 <decodeArvrStabilizedGRV+0x9c>
 8004400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	38800000 	.word	0x38800000

08004418 <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	3312      	adds	r3, #18
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fa69 	bl	80048fe <read16>
 800442c:	4603      	mov	r3, r0
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004436:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800451c <decodeGyroIntegratedRV+0x104>
 800443a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	3314      	adds	r3, #20
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fa58 	bl	80048fe <read16>
 800444e:	4603      	mov	r3, r0
 8004450:	ee07 3a90 	vmov	s15, r3
 8004454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004458:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800451c <decodeGyroIntegratedRV+0x104>
 800445c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	3316      	adds	r3, #22
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fa47 	bl	80048fe <read16>
 8004470:	4603      	mov	r3, r0
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800447a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800451c <decodeGyroIntegratedRV+0x104>
 800447e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	3318      	adds	r3, #24
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fa36 	bl	80048fe <read16>
 8004492:	4603      	mov	r3, r0
 8004494:	ee07 3a90 	vmov	s15, r3
 8004498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800449c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800451c <decodeGyroIntegratedRV+0x104>
 80044a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	331a      	adds	r3, #26
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fa25 	bl	80048fe <read16>
 80044b4:	4603      	mov	r3, r0
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044be:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004520 <decodeGyroIntegratedRV+0x108>
 80044c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	331c      	adds	r3, #28
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fa14 	bl	80048fe <read16>
 80044d6:	4603      	mov	r3, r0
 80044d8:	ee07 3a90 	vmov	s15, r3
 80044dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004520 <decodeGyroIntegratedRV+0x108>
 80044e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	331e      	adds	r3, #30
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fa03 	bl	80048fe <read16>
 80044f8:	4603      	mov	r3, r0
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004502:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004520 <decodeGyroIntegratedRV+0x108>
 8004506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    return SH2_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	38800000 	.word	0x38800000
 8004520:	3a800000 	.word	0x3a800000

08004524 <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	7d9a      	ldrb	r2, [r3, #22]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	7dda      	ldrb	r2, [r3, #23]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	3316      	adds	r3, #22
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f9cf 	bl	80048fe <read16>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	3318      	adds	r3, #24
 800456c:	4618      	mov	r0, r3
 800456e:	f000 f9c6 	bl	80048fe <read16>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	331a      	adds	r3, #26
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f9bd 	bl	80048fe <read16>
 8004584:	4603      	mov	r3, r0
 8004586:	461a      	mov	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	331c      	adds	r3, #28
 8004590:	4618      	mov	r0, r3
 8004592:	f000 f9a5 	bl	80048e0 <read8>
 8004596:	4603      	mov	r3, r0
 8004598:	b2da      	uxtb	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	331d      	adds	r3, #29
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f99b 	bl	80048e0 <read8>
 80045aa:	4603      	mov	r3, r0
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	331e      	adds	r3, #30
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f991 	bl	80048e0 <read8>
 80045be:	4603      	mov	r3, r0
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	331f      	adds	r3, #31
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 f987 	bl	80048e0 <read8>
 80045d2:	4603      	mov	r3, r0
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	3320      	adds	r3, #32
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 f97d 	bl	80048e0 <read8>
 80045e6:	4603      	mov	r3, r0
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	3321      	adds	r3, #33	; 0x21
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f973 	bl	80048e0 <read8>
 80045fa:	4603      	mov	r3, r0
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	3322      	adds	r3, #34	; 0x22
 8004608:	4618      	mov	r0, r3
 800460a:	f000 f969 	bl	80048e0 <read8>
 800460e:	4603      	mov	r3, r0
 8004610:	b2da      	uxtb	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	3324      	adds	r3, #36	; 0x24
 800461c:	4618      	mov	r0, r3
 800461e:	f000 f96e 	bl	80048fe <read16>
 8004622:	4603      	mov	r3, r0
 8004624:	461a      	mov	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	3326      	adds	r3, #38	; 0x26
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f97b 	bl	800492a <read32>
 8004634:	4603      	mov	r3, r0
 8004636:	461a      	mov	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	3316      	adds	r3, #22
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f967 	bl	800492a <read32>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	331a      	adds	r3, #26
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f95e 	bl	800492a <read32>
 800466e:	ee07 0a90 	vmov	s15, r0
 8004672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004676:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8004810 <decodeDeadReckoningPose+0x1c8>
 800467a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	331e      	adds	r3, #30
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f94e 	bl	800492a <read32>
 800468e:	ee07 0a90 	vmov	s15, r0
 8004692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004696:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004810 <decodeDeadReckoningPose+0x1c8>
 800469a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	3322      	adds	r3, #34	; 0x22
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 f93e 	bl	800492a <read32>
 80046ae:	ee07 0a90 	vmov	s15, r0
 80046b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004810 <decodeDeadReckoningPose+0x1c8>
 80046ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	3326      	adds	r3, #38	; 0x26
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f92e 	bl	800492a <read32>
 80046ce:	ee07 0a90 	vmov	s15, r0
 80046d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046d6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004814 <decodeDeadReckoningPose+0x1cc>
 80046da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	332a      	adds	r3, #42	; 0x2a
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f91e 	bl	800492a <read32>
 80046ee:	ee07 0a90 	vmov	s15, r0
 80046f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004814 <decodeDeadReckoningPose+0x1cc>
 80046fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	332e      	adds	r3, #46	; 0x2e
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f90e 	bl	800492a <read32>
 800470e:	ee07 0a90 	vmov	s15, r0
 8004712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004716:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004814 <decodeDeadReckoningPose+0x1cc>
 800471a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	3332      	adds	r3, #50	; 0x32
 8004728:	4618      	mov	r0, r3
 800472a:	f000 f8fe 	bl	800492a <read32>
 800472e:	ee07 0a90 	vmov	s15, r0
 8004732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004736:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004814 <decodeDeadReckoningPose+0x1cc>
 800473a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	3336      	adds	r3, #54	; 0x36
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f8ee 	bl	800492a <read32>
 800474e:	ee07 0a90 	vmov	s15, r0
 8004752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004756:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004818 <decodeDeadReckoningPose+0x1d0>
 800475a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	333a      	adds	r3, #58	; 0x3a
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f8de 	bl	800492a <read32>
 800476e:	ee07 0a90 	vmov	s15, r0
 8004772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004776:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004818 <decodeDeadReckoningPose+0x1d0>
 800477a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	333e      	adds	r3, #62	; 0x3e
 8004788:	4618      	mov	r0, r3
 800478a:	f000 f8ce 	bl	800492a <read32>
 800478e:	ee07 0a90 	vmov	s15, r0
 8004792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004796:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004818 <decodeDeadReckoningPose+0x1d0>
 800479a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	3342      	adds	r3, #66	; 0x42
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 f8be 	bl	800492a <read32>
 80047ae:	ee07 0a90 	vmov	s15, r0
 80047b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047b6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004818 <decodeDeadReckoningPose+0x1d0>
 80047ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	3346      	adds	r3, #70	; 0x46
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f8ae 	bl	800492a <read32>
 80047ce:	ee07 0a90 	vmov	s15, r0
 80047d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047d6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004818 <decodeDeadReckoningPose+0x1d0>
 80047da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	334a      	adds	r3, #74	; 0x4a
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 f89e 	bl	800492a <read32>
 80047ee:	ee07 0a90 	vmov	s15, r0
 80047f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004818 <decodeDeadReckoningPose+0x1d0>
 80047fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    return SH2_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	37000000 	.word	0x37000000
 8004814:	30800000 	.word	0x30800000
 8004818:	33000000 	.word	0x33000000

0800481c <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	3316      	adds	r3, #22
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f87d 	bl	800492a <read32>
 8004830:	4603      	mov	r3, r0
 8004832:	461a      	mov	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	331a      	adds	r3, #26
 800483c:	4618      	mov	r0, r3
 800483e:	f000 f84f 	bl	80048e0 <read8>
 8004842:	4603      	mov	r3, r0
 8004844:	b2da      	uxtb	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	331b      	adds	r3, #27
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f846 	bl	80048e0 <read8>
 8004854:	4603      	mov	r3, r0
 8004856:	b2da      	uxtb	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	331c      	adds	r3, #28
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f84c 	bl	80048fe <read16>
 8004866:	4603      	mov	r3, r0
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b21a      	sxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3301      	adds	r3, #1
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	b21b      	sxth	r3, r3
 8004890:	4313      	orrs	r3, r2
 8004892:	b21b      	sxth	r3, r3
 8004894:	81fb      	strh	r3, [r7, #14]
    return retval;
 8004896:	89fb      	ldrh	r3, [r7, #14]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3301      	adds	r3, #1
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3302      	adds	r3, #2
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	041b      	lsls	r3, r3, #16
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3303      	adds	r3, #3
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	061b      	lsls	r3, r3, #24
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
    return retval;
 80048d2:	68fb      	ldr	r3, [r7, #12]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	73fb      	strb	r3, [r7, #15]
    return retval;
 80048ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	b21a      	sxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3301      	adds	r3, #1
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	b21b      	sxth	r3, r3
 8004916:	4313      	orrs	r3, r2
 8004918:	81fb      	strh	r3, [r7, #14]
    return retval;
 800491a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3301      	adds	r3, #1
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3302      	adds	r3, #2
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	041b      	lsls	r3, r3, #16
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3303      	adds	r3, #3
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	061b      	lsls	r3, r3, #24
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
    return retval;
 8004958:	68fb      	ldr	r3, [r7, #12]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	e00b      	b.n	800498c <shtp_init+0x24>
        instances[n].pHal = 0;
 8004974:	4a0b      	ldr	r2, [pc, #44]	; (80049a4 <shtp_init+0x3c>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f640 1114 	movw	r1, #2324	; 0x914
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3301      	adds	r3, #1
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	ddf0      	ble.n	8004974 <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <shtp_init+0x40>)
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	200008e4 	.word	0x200008e4
 80049a8:	200011f8 	.word	0x200011f8

080049ac <getInstance>:

static shtp_t *getInstance(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	e014      	b.n	80049e2 <getInstance+0x36>
        if (instances[n].pHal == 0) {
 80049b8:	4a0f      	ldr	r2, [pc, #60]	; (80049f8 <getInstance+0x4c>)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f640 1114 	movw	r1, #2324	; 0x914
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d107      	bne.n	80049dc <getInstance+0x30>
            // This instance is free
            return &instances[n];
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f640 1214 	movw	r2, #2324	; 0x914
 80049d2:	fb02 f303 	mul.w	r3, r2, r3
 80049d6:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <getInstance+0x4c>)
 80049d8:	4413      	add	r3, r2
 80049da:	e006      	b.n	80049ea <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3301      	adds	r3, #1
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	dde7      	ble.n	80049b8 <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	200008e4 	.word	0x200008e4

080049fc <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	460a      	mov	r2, r1
 8004a06:	80fb      	strh	r3, [r7, #6]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 8004a0c:	88fa      	ldrh	r2, [r7, #6]
 8004a0e:	88bb      	ldrh	r3, [r7, #4]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d201      	bcs.n	8004a18 <min_u16+0x1c>
        return a;
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	e000      	b.n	8004a1a <min_u16+0x1e>
    }
    else {
        return b;
 8004a18:	88bb      	ldrh	r3, [r7, #4]
    }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 8004a26:	b590      	push	{r4, r7, lr}
 8004a28:	b089      	sub	sp, #36	; 0x24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	460b      	mov	r3, r1
 8004a34:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	76fb      	strb	r3, [r7, #27]
    uint16_t cursor = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	833b      	strh	r3, [r7, #24]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	833b      	strh	r3, [r7, #24]
    remaining = len;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0) {
 8004a4a:	e079      	b.n	8004b40 <txProcess+0x11a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 8004a4c:	8afb      	ldrh	r3, [r7, #22]
 8004a4e:	217c      	movs	r1, #124	; 0x7c
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff ffd3 	bl	80049fc <min_u16>
 8004a56:	4603      	mov	r3, r0
 8004a58:	82bb      	strh	r3, [r7, #20]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 8004a5a:	8abb      	ldrh	r3, [r7, #20]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	827b      	strh	r3, [r7, #18]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 8004a60:	8a7b      	ldrh	r3, [r7, #18]
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 8004a68:	8a7b      	ldrh	r3, [r7, #18]
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 8004a7a:	7efb      	ldrb	r3, [r7, #27]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d006      	beq.n	8004a8e <txProcess+0x68>
            pShtp->outTransfer[1] |= 0x80;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	7b5b      	ldrb	r3, [r3, #13]
 8004a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	7afa      	ldrb	r2, [r7, #11]
 8004a92:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 8004a94:	7afa      	ldrb	r2, [r7, #11]
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8004aa6:	7819      	ldrb	r1, [r3, #0]
 8004aa8:	1c4b      	adds	r3, r1, #1
 8004aaa:	b2dc      	uxtb	r4, r3
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4403      	add	r3, r0
 8004ab8:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8004abc:	4622      	mov	r2, r4
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	460a      	mov	r2, r1
 8004ac4:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	1d18      	adds	r0, r3, #4
 8004acc:	8b3b      	ldrh	r3, [r7, #24]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	8aba      	ldrh	r2, [r7, #20]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	f003 fc43 	bl	8008360 <memcpy>
        remaining -= transferLen;
 8004ada:	8afa      	ldrh	r2, [r7, #22]
 8004adc:	8abb      	ldrh	r3, [r7, #20]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	82fb      	strh	r3, [r7, #22]
        cursor += transferLen;
 8004ae2:	8b3a      	ldrh	r2, [r7, #24]
 8004ae4:	8abb      	ldrh	r3, [r7, #20]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	833b      	strh	r3, [r7, #24]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	6810      	ldr	r0, [r2, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f102 010c 	add.w	r1, r2, #12
 8004afa:	8a7a      	ldrh	r2, [r7, #18]
 8004afc:	4798      	blx	r3
 8004afe:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8004b00:	e00d      	b.n	8004b1e <txProcess+0xf8>
        {
            shtp_service(pShtp);
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fa2d 	bl	8004f62 <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	6810      	ldr	r0, [r2, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	f102 010c 	add.w	r1, r2, #12
 8004b18:	8a7a      	ldrh	r2, [r7, #18]
 8004b1a:	4798      	blx	r3
 8004b1c:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0ee      	beq.n	8004b02 <txProcess+0xdc>
        }
        
        if (status < 0)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da08      	bge.n	8004b3c <txProcess+0x116>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
            return status;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	e005      	b.n	8004b48 <txProcess+0x122>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	76fb      	strb	r3, [r7, #27]
    while (remaining > 0) {
 8004b40:	8afb      	ldrh	r3, [r7, #22]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d182      	bne.n	8004a4c <txProcess+0x26>
    }

    return SH2_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3724      	adds	r7, #36	; 0x24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd90      	pop	{r4, r7, pc}

08004b50 <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d813      	bhi.n	8004b96 <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 813a 	beq.w	8004dfa <rxAssemble+0x2aa>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	6892      	ldr	r2, [r2, #8]
 8004b8e:	2101      	movs	r1, #1
 8004b90:	4610      	mov	r0, r2
 8004b92:	4798      	blx	r3
        }
        return;
 8004b94:	e131      	b.n	8004dfa <rxAssemble+0x2aa>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	4413      	add	r3, r2
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004bb0:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b25b      	sxtb	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	09db      	lsrs	r3, r3, #7
 8004bbe:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	789b      	ldrb	r3, [r3, #2]
 8004bc4:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	78db      	ldrb	r3, [r3, #3]
 8004bca:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 8004bcc:	7dfa      	ldrb	r2, [r7, #23]
 8004bce:	68f9      	ldr	r1, [r7, #12]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	7dba      	ldrb	r2, [r7, #22]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d00a      	beq.n	8004bfc <rxAssemble+0xac>
        if (pShtp->eventCallback) {
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d006      	beq.n	8004bfc <rxAssemble+0xac>
            pShtp->eventCallback(pShtp->eventCookie,
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	2106      	movs	r1, #6
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 8004bfc:	8abb      	ldrh	r3, [r7, #20]
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d813      	bhi.n	8004c2a <rxAssemble+0xda>
        pShtp->rxShortFragments++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80f2 	beq.w	8004dfe <rxAssemble+0x2ae>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	6892      	ldr	r2, [r2, #8]
 8004c22:	2101      	movs	r1, #1
 8004c24:	4610      	mov	r0, r2
 8004c26:	4798      	blx	r3
        }
        return;
 8004c28:	e0e9      	b.n	8004dfe <rxAssemble+0x2ae>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b07      	cmp	r3, #7
 8004c2e:	d913      	bls.n	8004c58 <rxAssemble+0x108>
        // Invalid channel id.
        pShtp->rxBadChan++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

        if (pShtp->eventCallback) {
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80dd 	beq.w	8004e02 <rxAssemble+0x2b2>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	6892      	ldr	r2, [r2, #8]
 8004c50:	2103      	movs	r1, #3
 8004c52:	4610      	mov	r0, r2
 8004c54:	4798      	blx	r3
        }
        return;
 8004c56:	e0d4      	b.n	8004e02 <rxAssemble+0x2b2>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d040      	beq.n	8004ce4 <rxAssemble+0x194>
        // Check this against previously received data.
        if (!continuation ||
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	f083 0301 	eor.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d119      	bne.n	8004ca2 <rxAssemble+0x152>
            (chan != pShtp->inChan) ||
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
        if (!continuation ||
 8004c74:	7dfa      	ldrb	r2, [r7, #23]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d113      	bne.n	8004ca2 <rxAssemble+0x152>
            (seq != pShtp->chan[chan].nextInSeq) ||
 8004c7a:	7dfa      	ldrb	r2, [r7, #23]
 8004c7c:	68f9      	ldr	r1, [r7, #12]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8004c8c:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8004c8e:	7dba      	ldrb	r2, [r7, #22]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d106      	bne.n	8004ca2 <rxAssemble+0x152>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 8004c94:	8abb      	ldrh	r3, [r7, #20]
 8004c96:	3b04      	subs	r3, #4
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	f8b2 208c 	ldrh.w	r2, [r2, #140]	; 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d020      	beq.n	8004ce4 <rxAssemble+0x194>
            
            if (pShtp->eventCallback) {
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d006      	beq.n	8004cb8 <rxAssemble+0x168>
                pShtp->eventCallback(pShtp->eventCookie,
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	6892      	ldr	r2, [r2, #8]
 8004cb2:	2105      	movs	r1, #5
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

            pShtp->rxInterruptedPayloads++;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            if (pShtp->eventCallback) {
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d006      	beq.n	8004ce4 <rxAssemble+0x194>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	6892      	ldr	r2, [r2, #8]
 8004cde:	2107      	movs	r1, #7
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 8004ce4:	7dfa      	ldrb	r2, [r7, #23]
 8004ce6:	7dbb      	ldrb	r3, [r7, #22]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	b2d8      	uxtb	r0, r3
 8004cec:	68f9      	ldr	r1, [r7, #12]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d122      	bne.n	8004d50 <rxAssemble+0x200>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 8004d0a:	8abb      	ldrh	r3, [r7, #20]
 8004d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d10:	d912      	bls.n	8004d38 <rxAssemble+0x1e8>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
            
            if (pShtp->eventCallback) {
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d06e      	beq.n	8004e06 <rxAssemble+0x2b6>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	6892      	ldr	r2, [r2, #8]
 8004d30:	2102      	movs	r1, #2
 8004d32:	4610      	mov	r0, r2
 8004d34:	4798      	blx	r3
            }

            return;
 8004d36:	e066      	b.n	8004e06 <rxAssemble+0x2b6>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
        pShtp->inChan = chan;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	7dfa      	ldrb	r2, [r7, #23]
 8004d4c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 8004d50:	88fa      	ldrh	r2, [r7, #6]
 8004d52:	8abb      	ldrh	r3, [r7, #20]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d901      	bls.n	8004d5c <rxAssemble+0x20c>
        // Only use the valid portion of the transfer
        len = payloadLen;
 8004d58:	8abb      	ldrh	r3, [r7, #20]
 8004d5a:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	338f      	adds	r3, #143	; 0x8f
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	; 0x490
 8004d66:	1898      	adds	r0, r3, r2
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	1d19      	adds	r1, r3, #4
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	3b04      	subs	r3, #4
 8004d70:	461a      	mov	r2, r3
 8004d72:	f003 faf5 	bl	8008360 <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	4413      	add	r3, r2
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b04      	subs	r3, #4
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
    pShtp->inRemaining = payloadLen - len;
 8004d8c:	8aba      	ldrh	r2, [r7, #20]
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d131      	bne.n	8004e08 <rxAssemble+0x2b8>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 8004da4:	7dfa      	ldrb	r2, [r7, #23]
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	4613      	mov	r3, r2
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d025      	beq.n	8004e08 <rxAssemble+0x2b8>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8004dbc:	7dfa      	ldrb	r2, [r7, #23]
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8004dce:	681c      	ldr	r4, [r3, #0]
 8004dd0:	7dfa      	ldrb	r2, [r7, #23]
 8004dd2:	68f9      	ldr	r1, [r7, #12]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8004de2:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f103 018f 	add.w	r1, r3, #143	; 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8004df6:	47a0      	blx	r4
 8004df8:	e006      	b.n	8004e08 <rxAssemble+0x2b8>
        return;
 8004dfa:	bf00      	nop
 8004dfc:	e004      	b.n	8004e08 <rxAssemble+0x2b8>
        return;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <rxAssemble+0x2b8>
        return;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <rxAssemble+0x2b8>
            return;
 8004e06:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd90      	pop	{r4, r7, pc}
	...

08004e10 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <shtp_open+0x64>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f083 0301 	eor.w	r3, r3, #1
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 8004e26:	f7ff fd9f 	bl	8004968 <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <shtp_open+0x24>
        // Error
        return 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e01b      	b.n	8004e6c <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 8004e34:	f7ff fdba 	bl	80049ac <getInstance>
 8004e38:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e013      	b.n	8004e6c <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 8004e44:	f640 1214 	movw	r2, #2324	; 0x914
 8004e48:	2100      	movs	r1, #0
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f003 fa96 	bl	800837c <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
 8004e58:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <shtp_open+0x54>
        return 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e003      	b.n	8004e6c <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	601a      	str	r2, [r3, #0]

    return pShtp;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	200011f8 	.word	0x200011f8

08004e78 <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	609a      	str	r2, [r3, #8]
}
 8004e94:	bf00      	nop
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	607a      	str	r2, [r7, #4]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	460b      	mov	r3, r1
 8004eae:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 8004eb4:	7afb      	ldrb	r3, [r7, #11]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <shtp_listenChan+0x20>
 8004eba:	7afb      	ldrb	r3, [r7, #11]
 8004ebc:	2b07      	cmp	r3, #7
 8004ebe:	d902      	bls.n	8004ec6 <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 8004ec0:	f06f 0301 	mvn.w	r3, #1
 8004ec4:	e016      	b.n	8004ef4 <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 8004ec6:	7afa      	ldrb	r2, [r7, #11]
 8004ec8:	6979      	ldr	r1, [r7, #20]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 8004edc:	7afa      	ldrb	r2, [r7, #11]
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	607a      	str	r2, [r7, #4]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	72fb      	strb	r3, [r7, #11]
 8004f10:	4613      	mov	r3, r2
 8004f12:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 8004f18:	893b      	ldrh	r3, [r7, #8]
 8004f1a:	2b80      	cmp	r3, #128	; 0x80
 8004f1c:	d909      	bls.n	8004f32 <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f8d3 3910 	ldr.w	r3, [r3, #2320]	; 0x910
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
        return SH2_ERR_BAD_PARAM;
 8004f2c:	f06f 0301 	mvn.w	r3, #1
 8004f30:	e013      	b.n	8004f5a <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 8004f32:	7afb      	ldrb	r3, [r7, #11]
 8004f34:	2b07      	cmp	r3, #7
 8004f36:	d909      	bls.n	8004f4c <shtp_send+0x4c>
        pShtp->badTxChan++;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
        return SH2_ERR_BAD_PARAM;
 8004f46:	f06f 0301 	mvn.w	r3, #1
 8004f4a:	e006      	b.n	8004f5a <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8004f4c:	893b      	ldrh	r3, [r7, #8]
 8004f4e:	7af9      	ldrb	r1, [r7, #11]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6978      	ldr	r0, [r7, #20]
 8004f54:	f7ff fd67 	bl	8004a26 <txProcess>
 8004f58:	4603      	mov	r3, r0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 8004f62:	b590      	push	{r4, r7, lr}
 8004f64:	b087      	sub	sp, #28
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689c      	ldr	r4, [r3, #8]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8004f82:	f107 030c 	add.w	r3, r7, #12
 8004f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f8a:	47a0      	blx	r4
 8004f8c:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	dd08      	ble.n	8004fa6 <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6978      	ldr	r0, [r7, #20]
 8004fa2:	f7ff fdd5 	bl	8004b50 <rxAssemble>
    }
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd90      	pop	{r4, r7, pc}

08004fae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fb8:	2003      	movs	r0, #3
 8004fba:	f001 f909 	bl	80061d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004fbe:	200f      	movs	r0, #15
 8004fc0:	f000 f80e 	bl	8004fe0 <HAL_InitTick>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	71fb      	strb	r3, [r7, #7]
 8004fce:	e001      	b.n	8004fd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004fd0:	f7fd fa6e 	bl	80024b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004fec:	4b17      	ldr	r3, [pc, #92]	; (800504c <HAL_InitTick+0x6c>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d023      	beq.n	800503c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004ff4:	4b16      	ldr	r3, [pc, #88]	; (8005050 <HAL_InitTick+0x70>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b14      	ldr	r3, [pc, #80]	; (800504c <HAL_InitTick+0x6c>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005002:	fbb3 f3f1 	udiv	r3, r3, r1
 8005006:	fbb2 f3f3 	udiv	r3, r2, r3
 800500a:	4618      	mov	r0, r3
 800500c:	f001 f923 	bl	8006256 <HAL_SYSTICK_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b0f      	cmp	r3, #15
 800501a:	d809      	bhi.n	8005030 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800501c:	2200      	movs	r2, #0
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	f04f 30ff 	mov.w	r0, #4294967295
 8005024:	f001 f8df 	bl	80061e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005028:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <HAL_InitTick+0x74>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e007      	b.n	8005040 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
 8005034:	e004      	b.n	8005040 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
 800503a:	e001      	b.n	8005040 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000008 	.word	0x20000008
 8005050:	20000000 	.word	0x20000000
 8005054:	20000004 	.word	0x20000004

08005058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_IncTick+0x20>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_IncTick+0x24>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4413      	add	r3, r2
 8005068:	4a04      	ldr	r2, [pc, #16]	; (800507c <HAL_IncTick+0x24>)
 800506a:	6013      	str	r3, [r2, #0]
}
 800506c:	bf00      	nop
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000008 	.word	0x20000008
 800507c:	200011fc 	.word	0x200011fc

08005080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return uwTick;
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <HAL_GetTick+0x14>)
 8005086:	681b      	ldr	r3, [r3, #0]
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	200011fc 	.word	0x200011fc

08005098 <LL_ADC_SetCommonClock>:
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	609a      	str	r2, [r3, #8]
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <LL_ADC_SetCommonPathInternalCh>:
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	609a      	str	r2, [r3, #8]
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <LL_ADC_GetCommonPathInternalCh>:
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <LL_ADC_SetOffset>:
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3360      	adds	r3, #96	; 0x60
 8005112:	461a      	mov	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	4b08      	ldr	r3, [pc, #32]	; (8005144 <LL_ADC_SetOffset+0x44>)
 8005122:	4013      	ands	r3, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	4313      	orrs	r3, r2
 8005130:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	601a      	str	r2, [r3, #0]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	03fff000 	.word	0x03fff000

08005148 <LL_ADC_GetOffsetChannel>:
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3360      	adds	r3, #96	; 0x60
 8005156:	461a      	mov	r2, r3
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <LL_ADC_SetOffsetState>:
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3360      	adds	r3, #96	; 0x60
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	431a      	orrs	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	601a      	str	r2, [r3, #0]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <LL_ADC_REG_SetSequencerRanks>:
{
 80051aa:	b480      	push	{r7}
 80051ac:	b087      	sub	sp, #28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3330      	adds	r3, #48	; 0x30
 80051ba:	461a      	mov	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	4413      	add	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	211f      	movs	r1, #31
 80051d6:	fa01 f303 	lsl.w	r3, r1, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	401a      	ands	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	0e9b      	lsrs	r3, r3, #26
 80051e2:	f003 011f 	and.w	r1, r3, #31
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	fa01 f303 	lsl.w	r3, r1, r3
 80051f0:	431a      	orrs	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	601a      	str	r2, [r3, #0]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <LL_ADC_SetChannelSamplingTime>:
{
 8005202:	b480      	push	{r7}
 8005204:	b087      	sub	sp, #28
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3314      	adds	r3, #20
 8005212:	461a      	mov	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	0e5b      	lsrs	r3, r3, #25
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	4413      	add	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	0d1b      	lsrs	r3, r3, #20
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2107      	movs	r1, #7
 8005230:	fa01 f303 	lsl.w	r3, r1, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	401a      	ands	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	0d1b      	lsrs	r3, r3, #20
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	431a      	orrs	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	601a      	str	r2, [r3, #0]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_ADC_SetChannelSingleDiff>:
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005270:	43db      	mvns	r3, r3
 8005272:	401a      	ands	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f003 0318 	and.w	r3, r3, #24
 800527a:	4908      	ldr	r1, [pc, #32]	; (800529c <LL_ADC_SetChannelSingleDiff+0x44>)
 800527c:	40d9      	lsrs	r1, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	400b      	ands	r3, r1
 8005282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005286:	431a      	orrs	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	0007ffff 	.word	0x0007ffff

080052a0 <LL_ADC_DisableDeepPowerDown>:
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80052b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6093      	str	r3, [r2, #8]
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <LL_ADC_IsDeepPowerDownEnabled>:
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d8:	d101      	bne.n	80052de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <LL_ADC_EnableInternalRegulator>:
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80052fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005300:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	609a      	str	r2, [r3, #8]
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005324:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005328:	d101      	bne.n	800532e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <LL_ADC_IsEnabled>:
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <LL_ADC_IsEnabled+0x18>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <LL_ADC_IsEnabled+0x1a>
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <LL_ADC_REG_IsConversionOngoing>:
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b04      	cmp	r3, #4
 8005374:	d101      	bne.n	800537a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <LL_ADC_INJ_IsConversionOngoing>:
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b08      	cmp	r3, #8
 800539a:	d101      	bne.n	80053a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b089      	sub	sp, #36	; 0x24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80053bc:	2300      	movs	r3, #0
 80053be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e136      	b.n	8005638 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fb fca1 	bl	8000d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff ff67 	bl	80052c4 <LL_ADC_IsDeepPowerDownEnabled>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d004      	beq.n	8005406 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff4d 	bl	80052a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff ff82 	bl	8005314 <LL_ADC_IsInternalRegulatorEnabled>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d115      	bne.n	8005442 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff ff66 	bl	80052ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005420:	4b87      	ldr	r3, [pc, #540]	; (8005640 <HAL_ADC_Init+0x290>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	099b      	lsrs	r3, r3, #6
 8005426:	4a87      	ldr	r2, [pc, #540]	; (8005644 <HAL_ADC_Init+0x294>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	099b      	lsrs	r3, r3, #6
 800542e:	3301      	adds	r3, #1
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005434:	e002      	b.n	800543c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	3b01      	subs	r3, #1
 800543a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f9      	bne.n	8005436 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff ff64 	bl	8005314 <LL_ADC_IsInternalRegulatorEnabled>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10d      	bne.n	800546e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	f043 0210 	orr.w	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	f043 0201 	orr.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff ff75 	bl	8005362 <LL_ADC_REG_IsConversionOngoing>
 8005478:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	f040 80cf 	bne.w	8005626 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f040 80cb 	bne.w	8005626 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005494:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005498:	f043 0202 	orr.w	r2, r3, #2
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff ff49 	bl	800533c <LL_ADC_IsEnabled>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d115      	bne.n	80054dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054b0:	4865      	ldr	r0, [pc, #404]	; (8005648 <HAL_ADC_Init+0x298>)
 80054b2:	f7ff ff43 	bl	800533c <LL_ADC_IsEnabled>
 80054b6:	4604      	mov	r4, r0
 80054b8:	4864      	ldr	r0, [pc, #400]	; (800564c <HAL_ADC_Init+0x29c>)
 80054ba:	f7ff ff3f 	bl	800533c <LL_ADC_IsEnabled>
 80054be:	4603      	mov	r3, r0
 80054c0:	431c      	orrs	r4, r3
 80054c2:	4863      	ldr	r0, [pc, #396]	; (8005650 <HAL_ADC_Init+0x2a0>)
 80054c4:	f7ff ff3a 	bl	800533c <LL_ADC_IsEnabled>
 80054c8:	4603      	mov	r3, r0
 80054ca:	4323      	orrs	r3, r4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	4619      	mov	r1, r3
 80054d6:	485f      	ldr	r0, [pc, #380]	; (8005654 <HAL_ADC_Init+0x2a4>)
 80054d8:	f7ff fdde 	bl	8005098 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	7e5b      	ldrb	r3, [r3, #25]
 80054e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80054ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80054f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d106      	bne.n	8005518 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	3b01      	subs	r3, #1
 8005510:	045b      	lsls	r3, r3, #17
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4313      	orrs	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	4b47      	ldr	r3, [pc, #284]	; (8005658 <HAL_ADC_Init+0x2a8>)
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	69b9      	ldr	r1, [r7, #24]
 8005544:	430b      	orrs	r3, r1
 8005546:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff ff08 	bl	8005362 <LL_ADC_REG_IsConversionOngoing>
 8005552:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ff15 	bl	8005388 <LL_ADC_INJ_IsConversionOngoing>
 800555e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d13d      	bne.n	80055e2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d13a      	bne.n	80055e2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005570:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005578:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005588:	f023 0302 	bic.w	r3, r3, #2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	69b9      	ldr	r1, [r7, #24]
 8005592:	430b      	orrs	r3, r1
 8005594:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800559c:	2b01      	cmp	r3, #1
 800559e:	d118      	bne.n	80055d2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055aa:	f023 0304 	bic.w	r3, r3, #4
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055b6:	4311      	orrs	r1, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055bc:	4311      	orrs	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055c2:	430a      	orrs	r2, r1
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	611a      	str	r2, [r3, #16]
 80055d0:	e007      	b.n	80055e2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0201 	bic.w	r2, r2, #1
 80055e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d10c      	bne.n	8005604 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	f023 010f 	bic.w	r1, r3, #15
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	1e5a      	subs	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	631a      	str	r2, [r3, #48]	; 0x30
 8005602:	e007      	b.n	8005614 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 020f 	bic.w	r2, r2, #15
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	f023 0303 	bic.w	r3, r3, #3
 800561c:	f043 0201 	orr.w	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	655a      	str	r2, [r3, #84]	; 0x54
 8005624:	e007      	b.n	8005636 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562a:	f043 0210 	orr.w	r2, r3, #16
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005636:	7ffb      	ldrb	r3, [r7, #31]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3724      	adds	r7, #36	; 0x24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd90      	pop	{r4, r7, pc}
 8005640:	20000000 	.word	0x20000000
 8005644:	053e2d63 	.word	0x053e2d63
 8005648:	50040000 	.word	0x50040000
 800564c:	50040100 	.word	0x50040100
 8005650:	50040200 	.word	0x50040200
 8005654:	50040300 	.word	0x50040300
 8005658:	fff0c007 	.word	0xfff0c007

0800565c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b0b6      	sub	sp, #216	; 0xd8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_ADC_ConfigChannel+0x22>
 800567a:	2302      	movs	r3, #2
 800567c:	e3c7      	b.n	8005e0e <HAL_ADC_ConfigChannel+0x7b2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fe69 	bl	8005362 <LL_ADC_REG_IsConversionOngoing>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	f040 83a8 	bne.w	8005de8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b05      	cmp	r3, #5
 800569e:	d824      	bhi.n	80056ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	3b02      	subs	r3, #2
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d81b      	bhi.n	80056e2 <HAL_ADC_ConfigChannel+0x86>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <HAL_ADC_ConfigChannel+0x54>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	080056c9 	.word	0x080056c9
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	080056d9 	.word	0x080056d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	220c      	movs	r2, #12
 80056c4:	605a      	str	r2, [r3, #4]
          break;
 80056c6:	e011      	b.n	80056ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2212      	movs	r2, #18
 80056cc:	605a      	str	r2, [r3, #4]
          break;
 80056ce:	e00d      	b.n	80056ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2218      	movs	r2, #24
 80056d4:	605a      	str	r2, [r3, #4]
          break;
 80056d6:	e009      	b.n	80056ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056de:	605a      	str	r2, [r3, #4]
          break;
 80056e0:	e004      	b.n	80056ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2206      	movs	r2, #6
 80056e6:	605a      	str	r2, [r3, #4]
          break;
 80056e8:	e000      	b.n	80056ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80056ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6859      	ldr	r1, [r3, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	f7ff fd56 	bl	80051aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fe2d 	bl	8005362 <LL_ADC_REG_IsConversionOngoing>
 8005708:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fe39 	bl	8005388 <LL_ADC_INJ_IsConversionOngoing>
 8005716:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800571a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 81a6 	bne.w	8005a70 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005728:	2b00      	cmp	r3, #0
 800572a:	f040 81a1 	bne.w	8005a70 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6819      	ldr	r1, [r3, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	461a      	mov	r2, r3
 800573c:	f7ff fd61 	bl	8005202 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	08db      	lsrs	r3, r3, #3
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b04      	cmp	r3, #4
 8005760:	d00a      	beq.n	8005778 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6919      	ldr	r1, [r3, #16]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005772:	f7ff fcc5 	bl	8005100 <LL_ADC_SetOffset>
 8005776:	e17b      	b.n	8005a70 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff fce2 	bl	8005148 <LL_ADC_GetOffsetChannel>
 8005784:	4603      	mov	r3, r0
 8005786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x148>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2100      	movs	r1, #0
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fcd7 	bl	8005148 <LL_ADC_GetOffsetChannel>
 800579a:	4603      	mov	r3, r0
 800579c:	0e9b      	lsrs	r3, r3, #26
 800579e:	f003 021f 	and.w	r2, r3, #31
 80057a2:	e01e      	b.n	80057e2 <HAL_ADC_ConfigChannel+0x186>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fccc 	bl	8005148 <LL_ADC_GetOffsetChannel>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057ba:	fa93 f3a3 	rbit	r3, r3
 80057be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 80057c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 80057ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 80057d2:	2320      	movs	r3, #32
 80057d4:	e004      	b.n	80057e0 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 80057d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057da:	fab3 f383 	clz	r3, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <HAL_ADC_ConfigChannel+0x19e>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	0e9b      	lsrs	r3, r3, #26
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	e018      	b.n	800582c <HAL_ADC_ConfigChannel+0x1d0>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005802:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005806:	fa93 f3a3 	rbit	r3, r3
 800580a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800580e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005812:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005816:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800581e:	2320      	movs	r3, #32
 8005820:	e004      	b.n	800582c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8005822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005826:	fab3 f383 	clz	r3, r3
 800582a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800582c:	429a      	cmp	r2, r3
 800582e:	d106      	bne.n	800583e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2200      	movs	r2, #0
 8005836:	2100      	movs	r1, #0
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fc9b 	bl	8005174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2101      	movs	r1, #1
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fc7f 	bl	8005148 <LL_ADC_GetOffsetChannel>
 800584a:	4603      	mov	r3, r0
 800584c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <HAL_ADC_ConfigChannel+0x20e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2101      	movs	r1, #1
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fc74 	bl	8005148 <LL_ADC_GetOffsetChannel>
 8005860:	4603      	mov	r3, r0
 8005862:	0e9b      	lsrs	r3, r3, #26
 8005864:	f003 021f 	and.w	r2, r3, #31
 8005868:	e01e      	b.n	80058a8 <HAL_ADC_ConfigChannel+0x24c>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2101      	movs	r1, #1
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff fc69 	bl	8005148 <LL_ADC_GetOffsetChannel>
 8005876:	4603      	mov	r3, r0
 8005878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005880:	fa93 f3a3 	rbit	r3, r3
 8005884:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005888:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800588c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8005898:	2320      	movs	r3, #32
 800589a:	e004      	b.n	80058a6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800589c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058a0:	fab3 f383 	clz	r3, r3
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d105      	bne.n	80058c0 <HAL_ADC_ConfigChannel+0x264>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	0e9b      	lsrs	r3, r3, #26
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	e018      	b.n	80058f2 <HAL_ADC_ConfigChannel+0x296>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058cc:	fa93 f3a3 	rbit	r3, r3
 80058d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80058d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80058dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80058e4:	2320      	movs	r3, #32
 80058e6:	e004      	b.n	80058f2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80058e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058ec:	fab3 f383 	clz	r3, r3
 80058f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d106      	bne.n	8005904 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	2101      	movs	r1, #1
 80058fe:	4618      	mov	r0, r3
 8005900:	f7ff fc38 	bl	8005174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2102      	movs	r1, #2
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fc1c 	bl	8005148 <LL_ADC_GetOffsetChannel>
 8005910:	4603      	mov	r3, r0
 8005912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <HAL_ADC_ConfigChannel+0x2d4>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2102      	movs	r1, #2
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff fc11 	bl	8005148 <LL_ADC_GetOffsetChannel>
 8005926:	4603      	mov	r3, r0
 8005928:	0e9b      	lsrs	r3, r3, #26
 800592a:	f003 021f 	and.w	r2, r3, #31
 800592e:	e01e      	b.n	800596e <HAL_ADC_ConfigChannel+0x312>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2102      	movs	r1, #2
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fc06 	bl	8005148 <LL_ADC_GetOffsetChannel>
 800593c:	4603      	mov	r3, r0
 800593e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005946:	fa93 f3a3 	rbit	r3, r3
 800594a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800594e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800595e:	2320      	movs	r3, #32
 8005960:	e004      	b.n	800596c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005962:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005966:	fab3 f383 	clz	r3, r3
 800596a:	b2db      	uxtb	r3, r3
 800596c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005976:	2b00      	cmp	r3, #0
 8005978:	d105      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x32a>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	0e9b      	lsrs	r3, r3, #26
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	e016      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x358>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005992:	fa93 f3a3 	rbit	r3, r3
 8005996:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800599a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800599e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80059a6:	2320      	movs	r3, #32
 80059a8:	e004      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80059aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ae:	fab3 f383 	clz	r3, r3
 80059b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d106      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2200      	movs	r2, #0
 80059be:	2102      	movs	r1, #2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fbd7 	bl	8005174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2103      	movs	r1, #3
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff fbbb 	bl	8005148 <LL_ADC_GetOffsetChannel>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <HAL_ADC_ConfigChannel+0x396>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2103      	movs	r1, #3
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fbb0 	bl	8005148 <LL_ADC_GetOffsetChannel>
 80059e8:	4603      	mov	r3, r0
 80059ea:	0e9b      	lsrs	r3, r3, #26
 80059ec:	f003 021f 	and.w	r2, r3, #31
 80059f0:	e017      	b.n	8005a22 <HAL_ADC_ConfigChannel+0x3c6>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2103      	movs	r1, #3
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fba5 	bl	8005148 <LL_ADC_GetOffsetChannel>
 80059fe:	4603      	mov	r3, r0
 8005a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a04:	fa93 f3a3 	rbit	r3, r3
 8005a08:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a0c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005a14:	2320      	movs	r3, #32
 8005a16:	e003      	b.n	8005a20 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a1a:	fab3 f383 	clz	r3, r3
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d105      	bne.n	8005a3a <HAL_ADC_ConfigChannel+0x3de>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	0e9b      	lsrs	r3, r3, #26
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	e011      	b.n	8005a5e <HAL_ADC_ConfigChannel+0x402>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a42:	fa93 f3a3 	rbit	r3, r3
 8005a46:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8005a52:	2320      	movs	r3, #32
 8005a54:	e003      	b.n	8005a5e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8005a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a58:	fab3 f383 	clz	r3, r3
 8005a5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d106      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2200      	movs	r2, #0
 8005a68:	2103      	movs	r1, #3
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fb82 	bl	8005174 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fc61 	bl	800533c <LL_ADC_IsEnabled>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f040 813f 	bne.w	8005d00 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6819      	ldr	r1, [r3, #0]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f7ff fbe2 	bl	8005258 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4a8e      	ldr	r2, [pc, #568]	; (8005cd4 <HAL_ADC_ConfigChannel+0x678>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	f040 8130 	bne.w	8005d00 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <HAL_ADC_ConfigChannel+0x46c>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	0e9b      	lsrs	r3, r3, #26
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	f003 031f 	and.w	r3, r3, #31
 8005abc:	2b09      	cmp	r3, #9
 8005abe:	bf94      	ite	ls
 8005ac0:	2301      	movls	r3, #1
 8005ac2:	2300      	movhi	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	e019      	b.n	8005afc <HAL_ADC_ConfigChannel+0x4a0>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad0:	fa93 f3a3 	rbit	r3, r3
 8005ad4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005ad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ad8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	e003      	b.n	8005aec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ae6:	fab3 f383 	clz	r3, r3
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	3301      	adds	r3, #1
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2b09      	cmp	r3, #9
 8005af4:	bf94      	ite	ls
 8005af6:	2301      	movls	r3, #1
 8005af8:	2300      	movhi	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d079      	beq.n	8005bf4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d107      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x4c0>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	0e9b      	lsrs	r3, r3, #26
 8005b12:	3301      	adds	r3, #1
 8005b14:	069b      	lsls	r3, r3, #26
 8005b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b1a:	e015      	b.n	8005b48 <HAL_ADC_ConfigChannel+0x4ec>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b24:	fa93 f3a3 	rbit	r3, r3
 8005b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8005b34:	2320      	movs	r3, #32
 8005b36:	e003      	b.n	8005b40 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8005b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b3a:	fab3 f383 	clz	r3, r3
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	3301      	adds	r3, #1
 8005b42:	069b      	lsls	r3, r3, #26
 8005b44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <HAL_ADC_ConfigChannel+0x50c>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	0e9b      	lsrs	r3, r3, #26
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	2101      	movs	r1, #1
 8005b62:	fa01 f303 	lsl.w	r3, r1, r3
 8005b66:	e017      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x53c>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b70:	fa93 f3a3 	rbit	r3, r3
 8005b74:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b78:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005b80:	2320      	movs	r3, #32
 8005b82:	e003      	b.n	8005b8c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b86:	fab3 f383 	clz	r3, r3
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2101      	movs	r1, #1
 8005b94:	fa01 f303 	lsl.w	r3, r1, r3
 8005b98:	ea42 0103 	orr.w	r1, r2, r3
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <HAL_ADC_ConfigChannel+0x562>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	0e9b      	lsrs	r3, r3, #26
 8005bae:	3301      	adds	r3, #1
 8005bb0:	f003 021f 	and.w	r2, r3, #31
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4413      	add	r3, r2
 8005bba:	051b      	lsls	r3, r3, #20
 8005bbc:	e018      	b.n	8005bf0 <HAL_ADC_ConfigChannel+0x594>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	fa93 f3a3 	rbit	r3, r3
 8005bca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005bd6:	2320      	movs	r3, #32
 8005bd8:	e003      	b.n	8005be2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bdc:	fab3 f383 	clz	r3, r3
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	3301      	adds	r3, #1
 8005be4:	f003 021f 	and.w	r2, r3, #31
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	e080      	b.n	8005cf6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d107      	bne.n	8005c10 <HAL_ADC_ConfigChannel+0x5b4>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	0e9b      	lsrs	r3, r3, #26
 8005c06:	3301      	adds	r3, #1
 8005c08:	069b      	lsls	r3, r3, #26
 8005c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c0e:	e015      	b.n	8005c3c <HAL_ADC_ConfigChannel+0x5e0>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	fa93 f3a3 	rbit	r3, r3
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c20:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005c28:	2320      	movs	r3, #32
 8005c2a:	e003      	b.n	8005c34 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	fab3 f383 	clz	r3, r3
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	3301      	adds	r3, #1
 8005c36:	069b      	lsls	r3, r3, #26
 8005c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <HAL_ADC_ConfigChannel+0x600>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	0e9b      	lsrs	r3, r3, #26
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f003 031f 	and.w	r3, r3, #31
 8005c54:	2101      	movs	r1, #1
 8005c56:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5a:	e017      	b.n	8005c8c <HAL_ADC_ConfigChannel+0x630>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	fa93 f3a3 	rbit	r3, r3
 8005c68:	61fb      	str	r3, [r7, #28]
  return result;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005c74:	2320      	movs	r3, #32
 8005c76:	e003      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	fab3 f383 	clz	r3, r3
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	3301      	adds	r3, #1
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2101      	movs	r1, #1
 8005c88:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8c:	ea42 0103 	orr.w	r1, r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <HAL_ADC_ConfigChannel+0x65c>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	0e9b      	lsrs	r3, r3, #26
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f003 021f 	and.w	r2, r3, #31
 8005ca8:	4613      	mov	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	4413      	add	r3, r2
 8005cae:	3b1e      	subs	r3, #30
 8005cb0:	051b      	lsls	r3, r3, #20
 8005cb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cb6:	e01d      	b.n	8005cf4 <HAL_ADC_ConfigChannel+0x698>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	fa93 f3a3 	rbit	r3, r3
 8005cc4:	613b      	str	r3, [r7, #16]
  return result;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d103      	bne.n	8005cd8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	e005      	b.n	8005ce0 <HAL_ADC_ConfigChannel+0x684>
 8005cd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	fab3 f383 	clz	r3, r3
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	f003 021f 	and.w	r2, r3, #31
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	4413      	add	r3, r2
 8005cec:	3b1e      	subs	r3, #30
 8005cee:	051b      	lsls	r3, r3, #20
 8005cf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	6892      	ldr	r2, [r2, #8]
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	f7ff fa81 	bl	8005202 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4b44      	ldr	r3, [pc, #272]	; (8005e18 <HAL_ADC_ConfigChannel+0x7bc>)
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d07a      	beq.n	8005e02 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d0c:	4843      	ldr	r0, [pc, #268]	; (8005e1c <HAL_ADC_ConfigChannel+0x7c0>)
 8005d0e:	f7ff f9e9 	bl	80050e4 <LL_ADC_GetCommonPathInternalCh>
 8005d12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a41      	ldr	r2, [pc, #260]	; (8005e20 <HAL_ADC_ConfigChannel+0x7c4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d12c      	bne.n	8005d7a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d126      	bne.n	8005d7a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a3c      	ldr	r2, [pc, #240]	; (8005e24 <HAL_ADC_ConfigChannel+0x7c8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_ADC_ConfigChannel+0x6e4>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a3b      	ldr	r2, [pc, #236]	; (8005e28 <HAL_ADC_ConfigChannel+0x7cc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d15d      	bne.n	8005dfc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4834      	ldr	r0, [pc, #208]	; (8005e1c <HAL_ADC_ConfigChannel+0x7c0>)
 8005d4c:	f7ff f9b7 	bl	80050be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d50:	4b36      	ldr	r3, [pc, #216]	; (8005e2c <HAL_ADC_ConfigChannel+0x7d0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	099b      	lsrs	r3, r3, #6
 8005d56:	4a36      	ldr	r2, [pc, #216]	; (8005e30 <HAL_ADC_ConfigChannel+0x7d4>)
 8005d58:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5c:	099b      	lsrs	r3, r3, #6
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	4613      	mov	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d6a:	e002      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f9      	bne.n	8005d6c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d78:	e040      	b.n	8005dfc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a2d      	ldr	r2, [pc, #180]	; (8005e34 <HAL_ADC_ConfigChannel+0x7d8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d118      	bne.n	8005db6 <HAL_ADC_ConfigChannel+0x75a>
 8005d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d112      	bne.n	8005db6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a23      	ldr	r2, [pc, #140]	; (8005e24 <HAL_ADC_ConfigChannel+0x7c8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_ADC_ConfigChannel+0x748>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <HAL_ADC_ConfigChannel+0x7cc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d12d      	bne.n	8005e00 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dac:	4619      	mov	r1, r3
 8005dae:	481b      	ldr	r0, [pc, #108]	; (8005e1c <HAL_ADC_ConfigChannel+0x7c0>)
 8005db0:	f7ff f985 	bl	80050be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005db4:	e024      	b.n	8005e00 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <HAL_ADC_ConfigChannel+0x7dc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d120      	bne.n	8005e02 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005dc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d11a      	bne.n	8005e02 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a14      	ldr	r2, [pc, #80]	; (8005e24 <HAL_ADC_ConfigChannel+0x7c8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d115      	bne.n	8005e02 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dde:	4619      	mov	r1, r3
 8005de0:	480e      	ldr	r0, [pc, #56]	; (8005e1c <HAL_ADC_ConfigChannel+0x7c0>)
 8005de2:	f7ff f96c 	bl	80050be <LL_ADC_SetCommonPathInternalCh>
 8005de6:	e00c      	b.n	8005e02 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005dfa:	e002      	b.n	8005e02 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005e0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	37d8      	adds	r7, #216	; 0xd8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	80080000 	.word	0x80080000
 8005e1c:	50040300 	.word	0x50040300
 8005e20:	c7520000 	.word	0xc7520000
 8005e24:	50040000 	.word	0x50040000
 8005e28:	50040200 	.word	0x50040200
 8005e2c:	20000000 	.word	0x20000000
 8005e30:	053e2d63 	.word	0x053e2d63
 8005e34:	cb840000 	.word	0xcb840000
 8005e38:	80000001 	.word	0x80000001

08005e3c <LL_ADC_IsEnabled>:
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <LL_ADC_IsEnabled+0x18>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <LL_ADC_IsEnabled+0x1a>
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <LL_ADC_REG_IsConversionOngoing>:
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d101      	bne.n	8005e7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005e88:	b590      	push	{r4, r7, lr}
 8005e8a:	b09f      	sub	sp, #124	; 0x7c
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e093      	b.n	8005fce <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a47      	ldr	r2, [pc, #284]	; (8005fd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d102      	bne.n	8005ec6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ec0:	4b46      	ldr	r3, [pc, #280]	; (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005ec2:	60bb      	str	r3, [r7, #8]
 8005ec4:	e001      	b.n	8005eca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10b      	bne.n	8005ee8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e072      	b.n	8005fce <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff ffb9 	bl	8005e62 <LL_ADC_REG_IsConversionOngoing>
 8005ef0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ffb3 	bl	8005e62 <LL_ADC_REG_IsConversionOngoing>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d154      	bne.n	8005fac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d151      	bne.n	8005fac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f08:	4b35      	ldr	r3, [pc, #212]	; (8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005f0a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02c      	beq.n	8005f6e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	6859      	ldr	r1, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f26:	035b      	lsls	r3, r3, #13
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f30:	4829      	ldr	r0, [pc, #164]	; (8005fd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005f32:	f7ff ff83 	bl	8005e3c <LL_ADC_IsEnabled>
 8005f36:	4604      	mov	r4, r0
 8005f38:	4828      	ldr	r0, [pc, #160]	; (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005f3a:	f7ff ff7f 	bl	8005e3c <LL_ADC_IsEnabled>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	431c      	orrs	r4, r3
 8005f42:	4828      	ldr	r0, [pc, #160]	; (8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005f44:	f7ff ff7a 	bl	8005e3c <LL_ADC_IsEnabled>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4323      	orrs	r3, r4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d137      	bne.n	8005fc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005f58:	f023 030f 	bic.w	r3, r3, #15
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	6811      	ldr	r1, [r2, #0]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	6892      	ldr	r2, [r2, #8]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	431a      	orrs	r2, r3
 8005f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f6c:	e028      	b.n	8005fc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f78:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f7a:	4817      	ldr	r0, [pc, #92]	; (8005fd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005f7c:	f7ff ff5e 	bl	8005e3c <LL_ADC_IsEnabled>
 8005f80:	4604      	mov	r4, r0
 8005f82:	4816      	ldr	r0, [pc, #88]	; (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005f84:	f7ff ff5a 	bl	8005e3c <LL_ADC_IsEnabled>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	431c      	orrs	r4, r3
 8005f8c:	4815      	ldr	r0, [pc, #84]	; (8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005f8e:	f7ff ff55 	bl	8005e3c <LL_ADC_IsEnabled>
 8005f92:	4603      	mov	r3, r0
 8005f94:	4323      	orrs	r3, r4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d112      	bne.n	8005fc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005fa2:	f023 030f 	bic.w	r3, r3, #15
 8005fa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fa8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005faa:	e009      	b.n	8005fc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	f043 0220 	orr.w	r2, r3, #32
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005fbe:	e000      	b.n	8005fc2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005fca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	377c      	adds	r7, #124	; 0x7c
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd90      	pop	{r4, r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	50040000 	.word	0x50040000
 8005fdc:	50040100 	.word	0x50040100
 8005fe0:	50040300 	.word	0x50040300
 8005fe4:	50040200 	.word	0x50040200

08005fe8 <__NVIC_SetPriorityGrouping>:
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	; (800602c <__NVIC_SetPriorityGrouping+0x44>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006004:	4013      	ands	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800601a:	4a04      	ldr	r2, [pc, #16]	; (800602c <__NVIC_SetPriorityGrouping+0x44>)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	60d3      	str	r3, [r2, #12]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	e000ed00 	.word	0xe000ed00

08006030 <__NVIC_GetPriorityGrouping>:
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006034:	4b04      	ldr	r3, [pc, #16]	; (8006048 <__NVIC_GetPriorityGrouping+0x18>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	0a1b      	lsrs	r3, r3, #8
 800603a:	f003 0307 	and.w	r3, r3, #7
}
 800603e:	4618      	mov	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	e000ed00 	.word	0xe000ed00

0800604c <__NVIC_EnableIRQ>:
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605a:	2b00      	cmp	r3, #0
 800605c:	db0b      	blt.n	8006076 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	f003 021f 	and.w	r2, r3, #31
 8006064:	4907      	ldr	r1, [pc, #28]	; (8006084 <__NVIC_EnableIRQ+0x38>)
 8006066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	2001      	movs	r0, #1
 800606e:	fa00 f202 	lsl.w	r2, r0, r2
 8006072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	e000e100 	.word	0xe000e100

08006088 <__NVIC_DisableIRQ>:
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006096:	2b00      	cmp	r3, #0
 8006098:	db12      	blt.n	80060c0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	f003 021f 	and.w	r2, r3, #31
 80060a0:	490a      	ldr	r1, [pc, #40]	; (80060cc <__NVIC_DisableIRQ+0x44>)
 80060a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	2001      	movs	r0, #1
 80060aa:	fa00 f202 	lsl.w	r2, r0, r2
 80060ae:	3320      	adds	r3, #32
 80060b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80060b4:	f3bf 8f4f 	dsb	sy
}
 80060b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060ba:	f3bf 8f6f 	isb	sy
}
 80060be:	bf00      	nop
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	e000e100 	.word	0xe000e100

080060d0 <__NVIC_SetPriority>:
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	6039      	str	r1, [r7, #0]
 80060da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	db0a      	blt.n	80060fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	490c      	ldr	r1, [pc, #48]	; (800611c <__NVIC_SetPriority+0x4c>)
 80060ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ee:	0112      	lsls	r2, r2, #4
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	440b      	add	r3, r1
 80060f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80060f8:	e00a      	b.n	8006110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	4908      	ldr	r1, [pc, #32]	; (8006120 <__NVIC_SetPriority+0x50>)
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	3b04      	subs	r3, #4
 8006108:	0112      	lsls	r2, r2, #4
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	440b      	add	r3, r1
 800610e:	761a      	strb	r2, [r3, #24]
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	e000e100 	.word	0xe000e100
 8006120:	e000ed00 	.word	0xe000ed00

08006124 <NVIC_EncodePriority>:
{
 8006124:	b480      	push	{r7}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f1c3 0307 	rsb	r3, r3, #7
 800613e:	2b04      	cmp	r3, #4
 8006140:	bf28      	it	cs
 8006142:	2304      	movcs	r3, #4
 8006144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	3304      	adds	r3, #4
 800614a:	2b06      	cmp	r3, #6
 800614c:	d902      	bls.n	8006154 <NVIC_EncodePriority+0x30>
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3b03      	subs	r3, #3
 8006152:	e000      	b.n	8006156 <NVIC_EncodePriority+0x32>
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43da      	mvns	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	401a      	ands	r2, r3
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800616c:	f04f 31ff 	mov.w	r1, #4294967295
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	43d9      	mvns	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800617c:	4313      	orrs	r3, r2
}
 800617e:	4618      	mov	r0, r3
 8006180:	3724      	adds	r7, #36	; 0x24
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3b01      	subs	r3, #1
 8006198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800619c:	d301      	bcc.n	80061a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800619e:	2301      	movs	r3, #1
 80061a0:	e00f      	b.n	80061c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061a2:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <SysTick_Config+0x40>)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061aa:	210f      	movs	r1, #15
 80061ac:	f04f 30ff 	mov.w	r0, #4294967295
 80061b0:	f7ff ff8e 	bl	80060d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061b4:	4b05      	ldr	r3, [pc, #20]	; (80061cc <SysTick_Config+0x40>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061ba:	4b04      	ldr	r3, [pc, #16]	; (80061cc <SysTick_Config+0x40>)
 80061bc:	2207      	movs	r2, #7
 80061be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	e000e010 	.word	0xe000e010

080061d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff ff05 	bl	8005fe8 <__NVIC_SetPriorityGrouping>
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b086      	sub	sp, #24
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	4603      	mov	r3, r0
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80061f4:	2300      	movs	r3, #0
 80061f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80061f8:	f7ff ff1a 	bl	8006030 <__NVIC_GetPriorityGrouping>
 80061fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	6978      	ldr	r0, [r7, #20]
 8006204:	f7ff ff8e 	bl	8006124 <NVIC_EncodePriority>
 8006208:	4602      	mov	r2, r0
 800620a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800620e:	4611      	mov	r1, r2
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff ff5d 	bl	80060d0 <__NVIC_SetPriority>
}
 8006216:	bf00      	nop
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	4603      	mov	r3, r0
 8006226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff ff0d 	bl	800604c <__NVIC_EnableIRQ>
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	4603      	mov	r3, r0
 8006242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff ff1d 	bl	8006088 <__NVIC_DisableIRQ>
}
 800624e:	bf00      	nop
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff ff94 	bl	800618c <SysTick_Config>
 8006264:	4603      	mov	r3, r0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800627e:	e17f      	b.n	8006580 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	2101      	movs	r1, #1
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	fa01 f303 	lsl.w	r3, r1, r3
 800628c:	4013      	ands	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8171 	beq.w	800657a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d005      	beq.n	80062b0 <HAL_GPIO_Init+0x40>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d130      	bne.n	8006312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	2203      	movs	r2, #3
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	43db      	mvns	r3, r3
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4013      	ands	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80062e6:	2201      	movs	r2, #1
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43db      	mvns	r3, r3
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4013      	ands	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	f003 0201 	and.w	r2, r3, #1
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	2b03      	cmp	r3, #3
 800631c:	d118      	bne.n	8006350 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006324:	2201      	movs	r2, #1
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	43db      	mvns	r3, r3
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4013      	ands	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	08db      	lsrs	r3, r3, #3
 800633a:	f003 0201 	and.w	r2, r3, #1
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	2b03      	cmp	r3, #3
 800635a:	d017      	beq.n	800638c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	2203      	movs	r2, #3
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	43db      	mvns	r3, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4013      	ands	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	2b02      	cmp	r3, #2
 8006396:	d123      	bne.n	80063e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	08da      	lsrs	r2, r3, #3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3208      	adds	r2, #8
 80063a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	220f      	movs	r2, #15
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	43db      	mvns	r3, r3
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4013      	ands	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	08da      	lsrs	r2, r3, #3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3208      	adds	r2, #8
 80063da:	6939      	ldr	r1, [r7, #16]
 80063dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	2203      	movs	r2, #3
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	43db      	mvns	r3, r3
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4013      	ands	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f003 0203 	and.w	r2, r3, #3
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80ac 	beq.w	800657a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006422:	4b5f      	ldr	r3, [pc, #380]	; (80065a0 <HAL_GPIO_Init+0x330>)
 8006424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006426:	4a5e      	ldr	r2, [pc, #376]	; (80065a0 <HAL_GPIO_Init+0x330>)
 8006428:	f043 0301 	orr.w	r3, r3, #1
 800642c:	6613      	str	r3, [r2, #96]	; 0x60
 800642e:	4b5c      	ldr	r3, [pc, #368]	; (80065a0 <HAL_GPIO_Init+0x330>)
 8006430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	60bb      	str	r3, [r7, #8]
 8006438:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800643a:	4a5a      	ldr	r2, [pc, #360]	; (80065a4 <HAL_GPIO_Init+0x334>)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	089b      	lsrs	r3, r3, #2
 8006440:	3302      	adds	r3, #2
 8006442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006446:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	220f      	movs	r2, #15
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	43db      	mvns	r3, r3
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4013      	ands	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006464:	d025      	beq.n	80064b2 <HAL_GPIO_Init+0x242>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a4f      	ldr	r2, [pc, #316]	; (80065a8 <HAL_GPIO_Init+0x338>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01f      	beq.n	80064ae <HAL_GPIO_Init+0x23e>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a4e      	ldr	r2, [pc, #312]	; (80065ac <HAL_GPIO_Init+0x33c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d019      	beq.n	80064aa <HAL_GPIO_Init+0x23a>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a4d      	ldr	r2, [pc, #308]	; (80065b0 <HAL_GPIO_Init+0x340>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <HAL_GPIO_Init+0x236>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a4c      	ldr	r2, [pc, #304]	; (80065b4 <HAL_GPIO_Init+0x344>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00d      	beq.n	80064a2 <HAL_GPIO_Init+0x232>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a4b      	ldr	r2, [pc, #300]	; (80065b8 <HAL_GPIO_Init+0x348>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d007      	beq.n	800649e <HAL_GPIO_Init+0x22e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a4a      	ldr	r2, [pc, #296]	; (80065bc <HAL_GPIO_Init+0x34c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d101      	bne.n	800649a <HAL_GPIO_Init+0x22a>
 8006496:	2306      	movs	r3, #6
 8006498:	e00c      	b.n	80064b4 <HAL_GPIO_Init+0x244>
 800649a:	2307      	movs	r3, #7
 800649c:	e00a      	b.n	80064b4 <HAL_GPIO_Init+0x244>
 800649e:	2305      	movs	r3, #5
 80064a0:	e008      	b.n	80064b4 <HAL_GPIO_Init+0x244>
 80064a2:	2304      	movs	r3, #4
 80064a4:	e006      	b.n	80064b4 <HAL_GPIO_Init+0x244>
 80064a6:	2303      	movs	r3, #3
 80064a8:	e004      	b.n	80064b4 <HAL_GPIO_Init+0x244>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e002      	b.n	80064b4 <HAL_GPIO_Init+0x244>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_GPIO_Init+0x244>
 80064b2:	2300      	movs	r3, #0
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	f002 0203 	and.w	r2, r2, #3
 80064ba:	0092      	lsls	r2, r2, #2
 80064bc:	4093      	lsls	r3, r2
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80064c4:	4937      	ldr	r1, [pc, #220]	; (80065a4 <HAL_GPIO_Init+0x334>)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	3302      	adds	r3, #2
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064d2:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <HAL_GPIO_Init+0x350>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	43db      	mvns	r3, r3
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4013      	ands	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80064f6:	4a32      	ldr	r2, [pc, #200]	; (80065c0 <HAL_GPIO_Init+0x350>)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80064fc:	4b30      	ldr	r3, [pc, #192]	; (80065c0 <HAL_GPIO_Init+0x350>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	43db      	mvns	r3, r3
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4013      	ands	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <HAL_GPIO_Init+0x350>)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006526:	4b26      	ldr	r3, [pc, #152]	; (80065c0 <HAL_GPIO_Init+0x350>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	43db      	mvns	r3, r3
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4013      	ands	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800654a:	4a1d      	ldr	r2, [pc, #116]	; (80065c0 <HAL_GPIO_Init+0x350>)
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006550:	4b1b      	ldr	r3, [pc, #108]	; (80065c0 <HAL_GPIO_Init+0x350>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	43db      	mvns	r3, r3
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4013      	ands	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006574:	4a12      	ldr	r2, [pc, #72]	; (80065c0 <HAL_GPIO_Init+0x350>)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	3301      	adds	r3, #1
 800657e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	fa22 f303 	lsr.w	r3, r2, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	f47f ae78 	bne.w	8006280 <HAL_GPIO_Init+0x10>
  }
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	40021000 	.word	0x40021000
 80065a4:	40010000 	.word	0x40010000
 80065a8:	48000400 	.word	0x48000400
 80065ac:	48000800 	.word	0x48000800
 80065b0:	48000c00 	.word	0x48000c00
 80065b4:	48001000 	.word	0x48001000
 80065b8:	48001400 	.word	0x48001400
 80065bc:	48001800 	.word	0x48001800
 80065c0:	40010400 	.word	0x40010400

080065c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80065d2:	e0cd      	b.n	8006770 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80065d4:	2201      	movs	r2, #1
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	4013      	ands	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 80c0 	beq.w	800676a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80065ea:	4a68      	ldr	r2, [pc, #416]	; (800678c <HAL_GPIO_DeInit+0x1c8>)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	089b      	lsrs	r3, r3, #2
 80065f0:	3302      	adds	r3, #2
 80065f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	220f      	movs	r2, #15
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4013      	ands	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006612:	d025      	beq.n	8006660 <HAL_GPIO_DeInit+0x9c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a5e      	ldr	r2, [pc, #376]	; (8006790 <HAL_GPIO_DeInit+0x1cc>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d01f      	beq.n	800665c <HAL_GPIO_DeInit+0x98>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a5d      	ldr	r2, [pc, #372]	; (8006794 <HAL_GPIO_DeInit+0x1d0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d019      	beq.n	8006658 <HAL_GPIO_DeInit+0x94>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a5c      	ldr	r2, [pc, #368]	; (8006798 <HAL_GPIO_DeInit+0x1d4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d013      	beq.n	8006654 <HAL_GPIO_DeInit+0x90>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a5b      	ldr	r2, [pc, #364]	; (800679c <HAL_GPIO_DeInit+0x1d8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00d      	beq.n	8006650 <HAL_GPIO_DeInit+0x8c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a5a      	ldr	r2, [pc, #360]	; (80067a0 <HAL_GPIO_DeInit+0x1dc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d007      	beq.n	800664c <HAL_GPIO_DeInit+0x88>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a59      	ldr	r2, [pc, #356]	; (80067a4 <HAL_GPIO_DeInit+0x1e0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d101      	bne.n	8006648 <HAL_GPIO_DeInit+0x84>
 8006644:	2306      	movs	r3, #6
 8006646:	e00c      	b.n	8006662 <HAL_GPIO_DeInit+0x9e>
 8006648:	2307      	movs	r3, #7
 800664a:	e00a      	b.n	8006662 <HAL_GPIO_DeInit+0x9e>
 800664c:	2305      	movs	r3, #5
 800664e:	e008      	b.n	8006662 <HAL_GPIO_DeInit+0x9e>
 8006650:	2304      	movs	r3, #4
 8006652:	e006      	b.n	8006662 <HAL_GPIO_DeInit+0x9e>
 8006654:	2303      	movs	r3, #3
 8006656:	e004      	b.n	8006662 <HAL_GPIO_DeInit+0x9e>
 8006658:	2302      	movs	r3, #2
 800665a:	e002      	b.n	8006662 <HAL_GPIO_DeInit+0x9e>
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <HAL_GPIO_DeInit+0x9e>
 8006660:	2300      	movs	r3, #0
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	f002 0203 	and.w	r2, r2, #3
 8006668:	0092      	lsls	r2, r2, #2
 800666a:	4093      	lsls	r3, r2
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	429a      	cmp	r2, r3
 8006670:	d132      	bne.n	80066d8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006672:	4b4d      	ldr	r3, [pc, #308]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	43db      	mvns	r3, r3
 800667a:	494b      	ldr	r1, [pc, #300]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 800667c:	4013      	ands	r3, r2
 800667e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006680:	4b49      	ldr	r3, [pc, #292]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	43db      	mvns	r3, r3
 8006688:	4947      	ldr	r1, [pc, #284]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 800668a:	4013      	ands	r3, r2
 800668c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800668e:	4b46      	ldr	r3, [pc, #280]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	43db      	mvns	r3, r3
 8006696:	4944      	ldr	r1, [pc, #272]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 8006698:	4013      	ands	r3, r2
 800669a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800669c:	4b42      	ldr	r3, [pc, #264]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	43db      	mvns	r3, r3
 80066a4:	4940      	ldr	r1, [pc, #256]	; (80067a8 <HAL_GPIO_DeInit+0x1e4>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	220f      	movs	r2, #15
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80066ba:	4a34      	ldr	r2, [pc, #208]	; (800678c <HAL_GPIO_DeInit+0x1c8>)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	089b      	lsrs	r3, r3, #2
 80066c0:	3302      	adds	r3, #2
 80066c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	43da      	mvns	r2, r3
 80066ca:	4830      	ldr	r0, [pc, #192]	; (800678c <HAL_GPIO_DeInit+0x1c8>)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	089b      	lsrs	r3, r3, #2
 80066d0:	400a      	ands	r2, r1
 80066d2:	3302      	adds	r3, #2
 80066d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	2103      	movs	r1, #3
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	08da      	lsrs	r2, r3, #3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3208      	adds	r2, #8
 80066f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	220f      	movs	r2, #15
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	43db      	mvns	r3, r3
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	08d2      	lsrs	r2, r2, #3
 800670c:	4019      	ands	r1, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3208      	adds	r2, #8
 8006712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	2103      	movs	r1, #3
 8006720:	fa01 f303 	lsl.w	r3, r1, r3
 8006724:	43db      	mvns	r3, r3
 8006726:	401a      	ands	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	2101      	movs	r1, #1
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	fa01 f303 	lsl.w	r3, r1, r3
 8006738:	43db      	mvns	r3, r3
 800673a:	401a      	ands	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	2103      	movs	r1, #3
 800674a:	fa01 f303 	lsl.w	r3, r1, r3
 800674e:	43db      	mvns	r3, r3
 8006750:	401a      	ands	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675a:	2101      	movs	r1, #1
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	fa01 f303 	lsl.w	r3, r1, r3
 8006762:	43db      	mvns	r3, r3
 8006764:	401a      	ands	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	3301      	adds	r3, #1
 800676e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	f47f af2b 	bne.w	80065d4 <HAL_GPIO_DeInit+0x10>
  }
}
 800677e:	bf00      	nop
 8006780:	bf00      	nop
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	40010000 	.word	0x40010000
 8006790:	48000400 	.word	0x48000400
 8006794:	48000800 	.word	0x48000800
 8006798:	48000c00 	.word	0x48000c00
 800679c:	48001000 	.word	0x48001000
 80067a0:	48001400 	.word	0x48001400
 80067a4:	48001800 	.word	0x48001800
 80067a8:	40010400 	.word	0x40010400

080067ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	807b      	strh	r3, [r7, #2]
 80067b8:	4613      	mov	r3, r2
 80067ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067bc:	787b      	ldrb	r3, [r7, #1]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067c2:	887a      	ldrh	r2, [r7, #2]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067c8:	e002      	b.n	80067d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067ca:	887a      	ldrh	r2, [r7, #2]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80067e6:	4b08      	ldr	r3, [pc, #32]	; (8006808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067e8:	695a      	ldr	r2, [r3, #20]
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d006      	beq.n	8006800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067f2:	4a05      	ldr	r2, [pc, #20]	; (8006808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067f4:	88fb      	ldrh	r3, [r7, #6]
 80067f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067f8:	88fb      	ldrh	r3, [r7, #6]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fb fcac 	bl	8002158 <HAL_GPIO_EXTI_Callback>
  }
}
 8006800:	bf00      	nop
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	40010400 	.word	0x40010400

0800680c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e095      	b.n	800694a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	2b00      	cmp	r3, #0
 8006824:	d108      	bne.n	8006838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800682e:	d009      	beq.n	8006844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	61da      	str	r2, [r3, #28]
 8006836:	e005      	b.n	8006844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fb fac6 	bl	8001df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800687a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006884:	d902      	bls.n	800688c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e002      	b.n	8006892 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800688c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006890:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800689a:	d007      	beq.n	80068ac <HAL_SPI_Init+0xa0>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068a4:	d002      	beq.n	80068ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ee:	ea42 0103 	orr.w	r1, r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	0c1b      	lsrs	r3, r3, #16
 8006908:	f003 0204 	and.w	r2, r3, #4
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006928:	ea42 0103 	orr.w	r1, r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e01a      	b.n	800699a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7fb fa79 	bl	8001e74 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b08a      	sub	sp, #40	; 0x28
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
 80069ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069b0:	2301      	movs	r3, #1
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_SPI_TransmitReceive+0x26>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e1fb      	b.n	8006dc0 <HAL_SPI_TransmitReceive+0x41e>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069d0:	f7fe fb56 	bl	8005080 <HAL_GetTick>
 80069d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80069e4:	887b      	ldrh	r3, [r7, #2]
 80069e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80069e8:	887b      	ldrh	r3, [r7, #2]
 80069ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069ec:	7efb      	ldrb	r3, [r7, #27]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d00e      	beq.n	8006a10 <HAL_SPI_TransmitReceive+0x6e>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f8:	d106      	bne.n	8006a08 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d102      	bne.n	8006a08 <HAL_SPI_TransmitReceive+0x66>
 8006a02:	7efb      	ldrb	r3, [r7, #27]
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d003      	beq.n	8006a10 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a0e:	e1cd      	b.n	8006dac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <HAL_SPI_TransmitReceive+0x80>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_SPI_TransmitReceive+0x80>
 8006a1c:	887b      	ldrh	r3, [r7, #2]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d103      	bne.n	8006a2a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a28:	e1c0      	b.n	8006dac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d003      	beq.n	8006a3e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2205      	movs	r2, #5
 8006a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	887a      	ldrh	r2, [r7, #2]
 8006a4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	887a      	ldrh	r2, [r7, #2]
 8006a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	887a      	ldrh	r2, [r7, #2]
 8006a64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	887a      	ldrh	r2, [r7, #2]
 8006a6a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a80:	d802      	bhi.n	8006a88 <HAL_SPI_TransmitReceive+0xe6>
 8006a82:	8a3b      	ldrh	r3, [r7, #16]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d908      	bls.n	8006a9a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a96:	605a      	str	r2, [r3, #4]
 8006a98:	e007      	b.n	8006aaa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aa8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d007      	beq.n	8006ac8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ac6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ad0:	d97c      	bls.n	8006bcc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x13e>
 8006ada:	8a7b      	ldrh	r3, [r7, #18]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d169      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	881a      	ldrh	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	1c9a      	adds	r2, r3, #2
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b04:	e056      	b.n	8006bb4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d11b      	bne.n	8006b4c <HAL_SPI_TransmitReceive+0x1aa>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <HAL_SPI_TransmitReceive+0x1aa>
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d113      	bne.n	8006b4c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	881a      	ldrh	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d11c      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x1f2>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d016      	beq.n	8006b94 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	b292      	uxth	r2, r2
 8006b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b78:	1c9a      	adds	r2, r3, #2
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3b01      	subs	r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b90:	2301      	movs	r3, #1
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b94:	f7fe fa74 	bl	8005080 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d807      	bhi.n	8006bb4 <HAL_SPI_TransmitReceive+0x212>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d003      	beq.n	8006bb4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bb2:	e0fb      	b.n	8006dac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1a3      	bne.n	8006b06 <HAL_SPI_TransmitReceive+0x164>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d19d      	bne.n	8006b06 <HAL_SPI_TransmitReceive+0x164>
 8006bca:	e0df      	b.n	8006d8c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_SPI_TransmitReceive+0x23a>
 8006bd4:	8a7b      	ldrh	r3, [r7, #18]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	f040 80cb 	bne.w	8006d72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d912      	bls.n	8006c0c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	881a      	ldrh	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	1c9a      	adds	r2, r3, #2
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b02      	subs	r3, #2
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c0a:	e0b2      	b.n	8006d72 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	330c      	adds	r3, #12
 8006c16:	7812      	ldrb	r2, [r2, #0]
 8006c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c32:	e09e      	b.n	8006d72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d134      	bne.n	8006cac <HAL_SPI_TransmitReceive+0x30a>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d02f      	beq.n	8006cac <HAL_SPI_TransmitReceive+0x30a>
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d12c      	bne.n	8006cac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d912      	bls.n	8006c82 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	881a      	ldrh	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	1c9a      	adds	r2, r3, #2
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	3b02      	subs	r3, #2
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c80:	e012      	b.n	8006ca8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	330c      	adds	r3, #12
 8006c8c:	7812      	ldrb	r2, [r2, #0]
 8006c8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d148      	bne.n	8006d4c <HAL_SPI_TransmitReceive+0x3aa>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d042      	beq.n	8006d4c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d923      	bls.n	8006d1a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	b292      	uxth	r2, r2
 8006cde:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	1c9a      	adds	r2, r3, #2
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b02      	subs	r3, #2
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d81f      	bhi.n	8006d48 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d16:	605a      	str	r2, [r3, #4]
 8006d18:	e016      	b.n	8006d48 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f103 020c 	add.w	r2, r3, #12
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	7812      	ldrb	r2, [r2, #0]
 8006d28:	b2d2      	uxtb	r2, r2
 8006d2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d4c:	f7fe f998 	bl	8005080 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d803      	bhi.n	8006d64 <HAL_SPI_TransmitReceive+0x3c2>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d62:	d102      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x3c8>
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d103      	bne.n	8006d72 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006d70:	e01c      	b.n	8006dac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f47f af5b 	bne.w	8006c34 <HAL_SPI_TransmitReceive+0x292>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f47f af54 	bne.w	8006c34 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 fafd 	bl	8007390 <SPI_EndRxTxTransaction>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d006      	beq.n	8006daa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2220      	movs	r2, #32
 8006da6:	661a      	str	r2, [r3, #96]	; 0x60
 8006da8:	e000      	b.n	8006dac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006daa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3728      	adds	r7, #40	; 0x28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d101      	bne.n	8006de8 <HAL_SPI_TransmitReceive_IT+0x20>
 8006de4:	2302      	movs	r3, #2
 8006de6:	e091      	b.n	8006f0c <HAL_SPI_TransmitReceive_IT+0x144>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006df6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dfe:	7dbb      	ldrb	r3, [r7, #22]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d00d      	beq.n	8006e20 <HAL_SPI_TransmitReceive_IT+0x58>
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e0a:	d106      	bne.n	8006e1a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <HAL_SPI_TransmitReceive_IT+0x52>
 8006e14:	7dbb      	ldrb	r3, [r7, #22]
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d002      	beq.n	8006e20 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e1e:	e070      	b.n	8006f02 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006e2c:	887b      	ldrh	r3, [r7, #2]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e36:	e064      	b.n	8006f02 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	d003      	beq.n	8006e4c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2205      	movs	r2, #5
 8006e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	887a      	ldrh	r2, [r7, #2]
 8006e5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	887a      	ldrh	r2, [r7, #2]
 8006e62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	887a      	ldrh	r2, [r7, #2]
 8006e6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	887a      	ldrh	r2, [r7, #2]
 8006e76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e82:	d906      	bls.n	8006e92 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a24      	ldr	r2, [pc, #144]	; (8006f18 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006e88:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4a23      	ldr	r2, [pc, #140]	; (8006f1c <HAL_SPI_TransmitReceive_IT+0x154>)
 8006e8e:	651a      	str	r2, [r3, #80]	; 0x50
 8006e90:	e005      	b.n	8006e9e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4a22      	ldr	r2, [pc, #136]	; (8006f20 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006e96:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4a22      	ldr	r2, [pc, #136]	; (8006f24 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006e9c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ea6:	d802      	bhi.n	8006eae <HAL_SPI_TransmitReceive_IT+0xe6>
 8006ea8:	887b      	ldrh	r3, [r7, #2]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d908      	bls.n	8006ec0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ebc:	605a      	str	r2, [r3, #4]
 8006ebe:	e007      	b.n	8006ed0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ece:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006ede:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eea:	2b40      	cmp	r3, #64	; 0x40
 8006eec:	d008      	beq.n	8006f00 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e000      	b.n	8006f02 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006f00:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	0800708d 	.word	0x0800708d
 8006f1c:	080070f3 	.word	0x080070f3
 8006f20:	08006f3d 	.word	0x08006f3d
 8006f24:	08006ffb 	.word	0x08006ffb

08006f28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d923      	bls.n	8006f98 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	b292      	uxth	r2, r2
 8006f5c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	1c9a      	adds	r2, r3, #2
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b02      	subs	r3, #2
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d11f      	bne.n	8006fc6 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f94:	605a      	str	r2, [r3, #4]
 8006f96:	e016      	b.n	8006fc6 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f103 020c 	add.w	r2, r3, #12
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	7812      	ldrb	r2, [r2, #0]
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10f      	bne.n	8006ff2 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fe0:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fa15 	bl	800741c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b01      	cmp	r3, #1
 800700a:	d912      	bls.n	8007032 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	881a      	ldrh	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	1c9a      	adds	r2, r3, #2
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b02      	subs	r3, #2
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007030:	e012      	b.n	8007058 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d110      	bne.n	8007084 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007070:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f9cc 	bl	800741c <SPI_CloseRxTx_ISR>
    }
  }
}
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	b292      	uxth	r2, r2
 80070a0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	1c9a      	adds	r2, r3, #2
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10f      	bne.n	80070ea <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070d8:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f999 	bl	800741c <SPI_CloseRxTx_ISR>
    }
  }
}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	881a      	ldrh	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	1c9a      	adds	r2, r3, #2
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d110      	bne.n	800714a <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007136:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f969 	bl	800741c <SPI_CloseRxTx_ISR>
    }
  }
}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	4613      	mov	r3, r2
 8007162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007164:	f7fd ff8c 	bl	8005080 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4413      	add	r3, r2
 8007172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007174:	f7fd ff84 	bl	8005080 <HAL_GetTick>
 8007178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800717a:	4b39      	ldr	r3, [pc, #228]	; (8007260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	015b      	lsls	r3, r3, #5
 8007180:	0d1b      	lsrs	r3, r3, #20
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	fb02 f303 	mul.w	r3, r2, r3
 8007188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800718a:	e054      	b.n	8007236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007192:	d050      	beq.n	8007236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007194:	f7fd ff74 	bl	8005080 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d902      	bls.n	80071aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d13d      	bne.n	8007226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071c2:	d111      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071cc:	d004      	beq.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d6:	d107      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f0:	d10f      	bne.n	8007212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e017      	b.n	8007256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	3b01      	subs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4013      	ands	r3, r2
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	429a      	cmp	r2, r3
 8007244:	bf0c      	ite	eq
 8007246:	2301      	moveq	r3, #1
 8007248:	2300      	movne	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	79fb      	ldrb	r3, [r7, #7]
 8007250:	429a      	cmp	r2, r3
 8007252:	d19b      	bne.n	800718c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000000 	.word	0x20000000

08007264 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007276:	f7fd ff03 	bl	8005080 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	1a9b      	subs	r3, r3, r2
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	4413      	add	r3, r2
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007286:	f7fd fefb 	bl	8005080 <HAL_GetTick>
 800728a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	330c      	adds	r3, #12
 8007292:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007294:	4b3d      	ldr	r3, [pc, #244]	; (800738c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	00da      	lsls	r2, r3, #3
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	0d1b      	lsrs	r3, r3, #20
 80072a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072ac:	e060      	b.n	8007370 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80072b4:	d107      	bne.n	80072c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072cc:	d050      	beq.n	8007370 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072ce:	f7fd fed7 	bl	8005080 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072da:	429a      	cmp	r2, r3
 80072dc:	d902      	bls.n	80072e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d13d      	bne.n	8007360 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072fc:	d111      	bne.n	8007322 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007306:	d004      	beq.n	8007312 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007310:	d107      	bne.n	8007322 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007320:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800732a:	d10f      	bne.n	800734c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800734a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e010      	b.n	8007382 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	3b01      	subs	r3, #1
 800736e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	4013      	ands	r3, r2
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	429a      	cmp	r2, r3
 800737e:	d196      	bne.n	80072ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3728      	adds	r7, #40	; 0x28
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000000 	.word	0x20000000

08007390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af02      	add	r7, sp, #8
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff ff5b 	bl	8007264 <SPI_WaitFifoStateUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d007      	beq.n	80073c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b8:	f043 0220 	orr.w	r2, r3, #32
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e027      	b.n	8007414 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2200      	movs	r2, #0
 80073cc:	2180      	movs	r1, #128	; 0x80
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7ff fec0 	bl	8007154 <SPI_WaitFlagStateUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073de:	f043 0220 	orr.w	r2, r3, #32
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e014      	b.n	8007414 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f7ff ff34 	bl	8007264 <SPI_WaitFifoStateUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007406:	f043 0220 	orr.w	r2, r3, #32
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e000      	b.n	8007414 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007424:	f7fd fe2c 	bl	8005080 <HAL_GetTick>
 8007428:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0220 	bic.w	r2, r2, #32
 8007438:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	2164      	movs	r1, #100	; 0x64
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff ffa6 	bl	8007390 <SPI_EndRxTxTransaction>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800744e:	f043 0220 	orr.w	r2, r3, #32
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800745a:	2b00      	cmp	r3, #0
 800745c:	d115      	bne.n	800748a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b04      	cmp	r3, #4
 8007468:	d107      	bne.n	800747a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff fd58 	bl	8006f28 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007478:	e00e      	b.n	8007498 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7fa fe8c 	bl	80021a0 <HAL_SPI_TxRxCpltCallback>
}
 8007488:	e006      	b.n	8007498 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fa fe94 	bl	80021c0 <HAL_SPI_ErrorCallback>
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e049      	b.n	8007546 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d106      	bne.n	80074cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fb f8d8 	bl	800267c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f000 f968 	bl	80077b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b01      	cmp	r3, #1
 8007562:	d001      	beq.n	8007568 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e047      	b.n	80075f8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a23      	ldr	r2, [pc, #140]	; (8007604 <HAL_TIM_Base_Start+0xb4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d01d      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007582:	d018      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <HAL_TIM_Base_Start+0xb8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d013      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1e      	ldr	r2, [pc, #120]	; (800760c <HAL_TIM_Base_Start+0xbc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00e      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1c      	ldr	r2, [pc, #112]	; (8007610 <HAL_TIM_Base_Start+0xc0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d009      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1b      	ldr	r2, [pc, #108]	; (8007614 <HAL_TIM_Base_Start+0xc4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d004      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a19      	ldr	r2, [pc, #100]	; (8007618 <HAL_TIM_Base_Start+0xc8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d115      	bne.n	80075e2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	4b17      	ldr	r3, [pc, #92]	; (800761c <HAL_TIM_Base_Start+0xcc>)
 80075be:	4013      	ands	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b06      	cmp	r3, #6
 80075c6:	d015      	beq.n	80075f4 <HAL_TIM_Base_Start+0xa4>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ce:	d011      	beq.n	80075f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e0:	e008      	b.n	80075f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0201 	orr.w	r2, r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	e000      	b.n	80075f6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	40012c00 	.word	0x40012c00
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800
 8007610:	40000c00 	.word	0x40000c00
 8007614:	40013400 	.word	0x40013400
 8007618:	40014000 	.word	0x40014000
 800761c:	00010007 	.word	0x00010007

08007620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007634:	2b01      	cmp	r3, #1
 8007636:	d101      	bne.n	800763c <HAL_TIM_ConfigClockSource+0x1c>
 8007638:	2302      	movs	r3, #2
 800763a:	e0b6      	b.n	80077aa <HAL_TIM_ConfigClockSource+0x18a>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800765a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800765e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007678:	d03e      	beq.n	80076f8 <HAL_TIM_ConfigClockSource+0xd8>
 800767a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800767e:	f200 8087 	bhi.w	8007790 <HAL_TIM_ConfigClockSource+0x170>
 8007682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007686:	f000 8086 	beq.w	8007796 <HAL_TIM_ConfigClockSource+0x176>
 800768a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800768e:	d87f      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x170>
 8007690:	2b70      	cmp	r3, #112	; 0x70
 8007692:	d01a      	beq.n	80076ca <HAL_TIM_ConfigClockSource+0xaa>
 8007694:	2b70      	cmp	r3, #112	; 0x70
 8007696:	d87b      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x170>
 8007698:	2b60      	cmp	r3, #96	; 0x60
 800769a:	d050      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x11e>
 800769c:	2b60      	cmp	r3, #96	; 0x60
 800769e:	d877      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x170>
 80076a0:	2b50      	cmp	r3, #80	; 0x50
 80076a2:	d03c      	beq.n	800771e <HAL_TIM_ConfigClockSource+0xfe>
 80076a4:	2b50      	cmp	r3, #80	; 0x50
 80076a6:	d873      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x170>
 80076a8:	2b40      	cmp	r3, #64	; 0x40
 80076aa:	d058      	beq.n	800775e <HAL_TIM_ConfigClockSource+0x13e>
 80076ac:	2b40      	cmp	r3, #64	; 0x40
 80076ae:	d86f      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x170>
 80076b0:	2b30      	cmp	r3, #48	; 0x30
 80076b2:	d064      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x15e>
 80076b4:	2b30      	cmp	r3, #48	; 0x30
 80076b6:	d86b      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x170>
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	d060      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x15e>
 80076bc:	2b20      	cmp	r3, #32
 80076be:	d867      	bhi.n	8007790 <HAL_TIM_ConfigClockSource+0x170>
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d05c      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x15e>
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d05a      	beq.n	800777e <HAL_TIM_ConfigClockSource+0x15e>
 80076c8:	e062      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	6899      	ldr	r1, [r3, #8]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f000 f97f 	bl	80079dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	609a      	str	r2, [r3, #8]
      break;
 80076f6:	e04f      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6818      	ldr	r0, [r3, #0]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	6899      	ldr	r1, [r3, #8]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f000 f968 	bl	80079dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800771a:	609a      	str	r2, [r3, #8]
      break;
 800771c:	e03c      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6859      	ldr	r1, [r3, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	461a      	mov	r2, r3
 800772c:	f000 f8dc 	bl	80078e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2150      	movs	r1, #80	; 0x50
 8007736:	4618      	mov	r0, r3
 8007738:	f000 f935 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 800773c:	e02c      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	6859      	ldr	r1, [r3, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	461a      	mov	r2, r3
 800774c:	f000 f8fb 	bl	8007946 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2160      	movs	r1, #96	; 0x60
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f925 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 800775c:	e01c      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	6859      	ldr	r1, [r3, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	461a      	mov	r2, r3
 800776c:	f000 f8bc 	bl	80078e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2140      	movs	r1, #64	; 0x40
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f915 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 800777c:	e00c      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4619      	mov	r1, r3
 8007788:	4610      	mov	r0, r2
 800778a:	f000 f90c 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 800778e:	e003      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
      break;
 8007794:	e000      	b.n	8007798 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a40      	ldr	r2, [pc, #256]	; (80078c8 <TIM_Base_SetConfig+0x114>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d013      	beq.n	80077f4 <TIM_Base_SetConfig+0x40>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d2:	d00f      	beq.n	80077f4 <TIM_Base_SetConfig+0x40>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a3d      	ldr	r2, [pc, #244]	; (80078cc <TIM_Base_SetConfig+0x118>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00b      	beq.n	80077f4 <TIM_Base_SetConfig+0x40>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a3c      	ldr	r2, [pc, #240]	; (80078d0 <TIM_Base_SetConfig+0x11c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d007      	beq.n	80077f4 <TIM_Base_SetConfig+0x40>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a3b      	ldr	r2, [pc, #236]	; (80078d4 <TIM_Base_SetConfig+0x120>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_Base_SetConfig+0x40>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a3a      	ldr	r2, [pc, #232]	; (80078d8 <TIM_Base_SetConfig+0x124>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d108      	bne.n	8007806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a2f      	ldr	r2, [pc, #188]	; (80078c8 <TIM_Base_SetConfig+0x114>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d01f      	beq.n	800784e <TIM_Base_SetConfig+0x9a>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007814:	d01b      	beq.n	800784e <TIM_Base_SetConfig+0x9a>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a2c      	ldr	r2, [pc, #176]	; (80078cc <TIM_Base_SetConfig+0x118>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d017      	beq.n	800784e <TIM_Base_SetConfig+0x9a>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a2b      	ldr	r2, [pc, #172]	; (80078d0 <TIM_Base_SetConfig+0x11c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d013      	beq.n	800784e <TIM_Base_SetConfig+0x9a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a2a      	ldr	r2, [pc, #168]	; (80078d4 <TIM_Base_SetConfig+0x120>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d00f      	beq.n	800784e <TIM_Base_SetConfig+0x9a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a29      	ldr	r2, [pc, #164]	; (80078d8 <TIM_Base_SetConfig+0x124>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00b      	beq.n	800784e <TIM_Base_SetConfig+0x9a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a28      	ldr	r2, [pc, #160]	; (80078dc <TIM_Base_SetConfig+0x128>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d007      	beq.n	800784e <TIM_Base_SetConfig+0x9a>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a27      	ldr	r2, [pc, #156]	; (80078e0 <TIM_Base_SetConfig+0x12c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d003      	beq.n	800784e <TIM_Base_SetConfig+0x9a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a26      	ldr	r2, [pc, #152]	; (80078e4 <TIM_Base_SetConfig+0x130>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d108      	bne.n	8007860 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a10      	ldr	r2, [pc, #64]	; (80078c8 <TIM_Base_SetConfig+0x114>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00f      	beq.n	80078ac <TIM_Base_SetConfig+0xf8>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a12      	ldr	r2, [pc, #72]	; (80078d8 <TIM_Base_SetConfig+0x124>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d00b      	beq.n	80078ac <TIM_Base_SetConfig+0xf8>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a11      	ldr	r2, [pc, #68]	; (80078dc <TIM_Base_SetConfig+0x128>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d007      	beq.n	80078ac <TIM_Base_SetConfig+0xf8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a10      	ldr	r2, [pc, #64]	; (80078e0 <TIM_Base_SetConfig+0x12c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d003      	beq.n	80078ac <TIM_Base_SetConfig+0xf8>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a0f      	ldr	r2, [pc, #60]	; (80078e4 <TIM_Base_SetConfig+0x130>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d103      	bne.n	80078b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	691a      	ldr	r2, [r3, #16]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	615a      	str	r2, [r3, #20]
}
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	40012c00 	.word	0x40012c00
 80078cc:	40000400 	.word	0x40000400
 80078d0:	40000800 	.word	0x40000800
 80078d4:	40000c00 	.word	0x40000c00
 80078d8:	40013400 	.word	0x40013400
 80078dc:	40014000 	.word	0x40014000
 80078e0:	40014400 	.word	0x40014400
 80078e4:	40014800 	.word	0x40014800

080078e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0201 	bic.w	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f023 030a 	bic.w	r3, r3, #10
 8007924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007946:	b480      	push	{r7}
 8007948:	b087      	sub	sp, #28
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f023 0210 	bic.w	r2, r3, #16
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	031b      	lsls	r3, r3, #12
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007982:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	621a      	str	r2, [r3, #32]
}
 800799a:	bf00      	nop
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f043 0307 	orr.w	r3, r3, #7
 80079c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	609a      	str	r2, [r3, #8]
}
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	021a      	lsls	r2, r3, #8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	609a      	str	r2, [r3, #8]
}
 8007a10:	bf00      	nop
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e068      	b.n	8007b06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a2e      	ldr	r2, [pc, #184]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d004      	beq.n	8007a68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a2d      	ldr	r2, [pc, #180]	; (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d108      	bne.n	8007a7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01d      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa6:	d018      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1a      	ldr	r2, [pc, #104]	; (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00e      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a18      	ldr	r2, [pc, #96]	; (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d009      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a13      	ldr	r2, [pc, #76]	; (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a14      	ldr	r2, [pc, #80]	; (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d10c      	bne.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	40012c00 	.word	0x40012c00
 8007b18:	40013400 	.word	0x40013400
 8007b1c:	40000400 	.word	0x40000400
 8007b20:	40000800 	.word	0x40000800
 8007b24:	40000c00 	.word	0x40000c00
 8007b28:	40014000 	.word	0x40014000

08007b2c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <LL_EXTI_EnableIT_0_31+0x20>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	4904      	ldr	r1, [pc, #16]	; (8007b4c <LL_EXTI_EnableIT_0_31+0x20>)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	600b      	str	r3, [r1, #0]
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40010400 	.word	0x40010400

08007b50 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007b58:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <LL_EXTI_EnableIT_32_63+0x20>)
 8007b5a:	6a1a      	ldr	r2, [r3, #32]
 8007b5c:	4904      	ldr	r1, [pc, #16]	; (8007b70 <LL_EXTI_EnableIT_32_63+0x20>)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	620b      	str	r3, [r1, #32]
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	40010400 	.word	0x40010400

08007b74 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <LL_EXTI_DisableIT_0_31+0x24>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	43db      	mvns	r3, r3
 8007b84:	4904      	ldr	r1, [pc, #16]	; (8007b98 <LL_EXTI_DisableIT_0_31+0x24>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40010400 	.word	0x40010400

08007b9c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <LL_EXTI_DisableIT_32_63+0x24>)
 8007ba6:	6a1a      	ldr	r2, [r3, #32]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	43db      	mvns	r3, r3
 8007bac:	4904      	ldr	r1, [pc, #16]	; (8007bc0 <LL_EXTI_DisableIT_32_63+0x24>)
 8007bae:	4013      	ands	r3, r2
 8007bb0:	620b      	str	r3, [r1, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40010400 	.word	0x40010400

08007bc4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007bcc:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	4904      	ldr	r1, [pc, #16]	; (8007be4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	604b      	str	r3, [r1, #4]

}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	40010400 	.word	0x40010400

08007be8 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007bf0:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bf4:	4904      	ldr	r1, [pc, #16]	; (8007c08 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	40010400 	.word	0x40010400

08007c0c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007c14:	4b06      	ldr	r3, [pc, #24]	; (8007c30 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	43db      	mvns	r3, r3
 8007c1c:	4904      	ldr	r1, [pc, #16]	; (8007c30 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007c1e:	4013      	ands	r3, r2
 8007c20:	604b      	str	r3, [r1, #4]
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40010400 	.word	0x40010400

08007c34 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	43db      	mvns	r3, r3
 8007c44:	4904      	ldr	r1, [pc, #16]	; (8007c58 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007c46:	4013      	ands	r3, r2
 8007c48:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007c4a:	bf00      	nop
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	40010400 	.word	0x40010400

08007c5c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007c64:	4b05      	ldr	r3, [pc, #20]	; (8007c7c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	4904      	ldr	r1, [pc, #16]	; (8007c7c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	608b      	str	r3, [r1, #8]

}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	40010400 	.word	0x40010400

08007c80 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007c88:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c8c:	4904      	ldr	r1, [pc, #16]	; (8007ca0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	40010400 	.word	0x40010400

08007ca4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007cac:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	43db      	mvns	r3, r3
 8007cb4:	4904      	ldr	r1, [pc, #16]	; (8007cc8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	608b      	str	r3, [r1, #8]

}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40010400 	.word	0x40010400

08007ccc <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007cd4:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	43db      	mvns	r3, r3
 8007cdc:	4904      	ldr	r1, [pc, #16]	; (8007cf0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40010400 	.word	0x40010400

08007cf4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	4904      	ldr	r1, [pc, #16]	; (8007d14 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60cb      	str	r3, [r1, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	40010400 	.word	0x40010400

08007d18 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d24:	4904      	ldr	r1, [pc, #16]	; (8007d38 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	40010400 	.word	0x40010400

08007d3c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007d44:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	43db      	mvns	r3, r3
 8007d4c:	4904      	ldr	r1, [pc, #16]	; (8007d60 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007d4e:	4013      	ands	r3, r2
 8007d50:	60cb      	str	r3, [r1, #12]
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40010400 	.word	0x40010400

08007d64 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	43db      	mvns	r3, r3
 8007d74:	4904      	ldr	r1, [pc, #16]	; (8007d88 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007d76:	4013      	ands	r3, r2
 8007d78:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40010400 	.word	0x40010400

08007d8c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7a1b      	ldrb	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 80d1 	beq.w	8007f44 <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d063      	beq.n	8007e72 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7a5b      	ldrb	r3, [r3, #9]
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d01c      	beq.n	8007dec <LL_EXTI_Init+0x60>
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	dc25      	bgt.n	8007e02 <LL_EXTI_Init+0x76>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <LL_EXTI_Init+0x34>
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d00b      	beq.n	8007dd6 <LL_EXTI_Init+0x4a>
 8007dbe:	e020      	b.n	8007e02 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff ff21 	bl	8007c0c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff feac 	bl	8007b2c <LL_EXTI_EnableIT_0_31>
          break;
 8007dd4:	e018      	b.n	8007e08 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff feca 	bl	8007b74 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff feed 	bl	8007bc4 <LL_EXTI_EnableEvent_0_31>
          break;
 8007dea:	e00d      	b.n	8007e08 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff fe9b 	bl	8007b2c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7ff fee2 	bl	8007bc4 <LL_EXTI_EnableEvent_0_31>
          break;
 8007e00:	e002      	b.n	8007e08 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8007e02:	2301      	movs	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]
          break;
 8007e06:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7a9b      	ldrb	r3, [r3, #10]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d030      	beq.n	8007e72 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	7a9b      	ldrb	r3, [r3, #10]
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d01c      	beq.n	8007e52 <LL_EXTI_Init+0xc6>
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	dc25      	bgt.n	8007e68 <LL_EXTI_Init+0xdc>
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d002      	beq.n	8007e26 <LL_EXTI_Init+0x9a>
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d00b      	beq.n	8007e3c <LL_EXTI_Init+0xb0>
 8007e24:	e020      	b.n	8007e68 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff ff86 	bl	8007d3c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff ff11 	bl	8007c5c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8007e3a:	e01b      	b.n	8007e74 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff ff2f 	bl	8007ca4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff ff52 	bl	8007cf4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007e50:	e010      	b.n	8007e74 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7ff ff00 	bl	8007c5c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff ff47 	bl	8007cf4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007e66:	e005      	b.n	8007e74 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f043 0302 	orr.w	r3, r3, #2
 8007e6e:	60fb      	str	r3, [r7, #12]
            break;
 8007e70:	e000      	b.n	8007e74 <LL_EXTI_Init+0xe8>
        }
      }
 8007e72:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d078      	beq.n	8007f6e <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	7a5b      	ldrb	r3, [r3, #9]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d01c      	beq.n	8007ebe <LL_EXTI_Init+0x132>
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	dc25      	bgt.n	8007ed4 <LL_EXTI_Init+0x148>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <LL_EXTI_Init+0x106>
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d00b      	beq.n	8007ea8 <LL_EXTI_Init+0x11c>
 8007e90:	e020      	b.n	8007ed4 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fecc 	bl	8007c34 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fe55 	bl	8007b50 <LL_EXTI_EnableIT_32_63>
          break;
 8007ea6:	e01a      	b.n	8007ede <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff fe75 	bl	8007b9c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fe96 	bl	8007be8 <LL_EXTI_EnableEvent_32_63>
          break;
 8007ebc:	e00f      	b.n	8007ede <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff fe44 	bl	8007b50 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fe8b 	bl	8007be8 <LL_EXTI_EnableEvent_32_63>
          break;
 8007ed2:	e004      	b.n	8007ede <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f043 0304 	orr.w	r3, r3, #4
 8007eda:	60fb      	str	r3, [r7, #12]
          break;
 8007edc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	7a9b      	ldrb	r3, [r3, #10]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d043      	beq.n	8007f6e <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	7a9b      	ldrb	r3, [r3, #10]
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d01c      	beq.n	8007f28 <LL_EXTI_Init+0x19c>
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	dc25      	bgt.n	8007f3e <LL_EXTI_Init+0x1b2>
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d002      	beq.n	8007efc <LL_EXTI_Init+0x170>
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d00b      	beq.n	8007f12 <LL_EXTI_Init+0x186>
 8007efa:	e020      	b.n	8007f3e <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff ff2f 	bl	8007d64 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff feb8 	bl	8007c80 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8007f10:	e02e      	b.n	8007f70 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff fed8 	bl	8007ccc <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff fef9 	bl	8007d18 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007f26:	e023      	b.n	8007f70 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fea7 	bl	8007c80 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff feee 	bl	8007d18 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007f3c:	e018      	b.n	8007f70 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
            break;
 8007f42:	e015      	b.n	8007f70 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fe13 	bl	8007b74 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff fe5a 	bl	8007c0c <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7ff fe1d 	bl	8007b9c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff fe64 	bl	8007c34 <LL_EXTI_DisableEvent_32_63>
 8007f6c:	e000      	b.n	8007f70 <LL_EXTI_Init+0x1e4>
      }
 8007f6e:	bf00      	nop
  }

  return status;
 8007f70:	68fb      	ldr	r3, [r7, #12]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <LL_GPIO_SetPinMode>:
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b08b      	sub	sp, #44	; 0x2c
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	fa93 f3a3 	rbit	r3, r3
 8007f94:	613b      	str	r3, [r7, #16]
  return result;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	e003      	b.n	8007fac <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	fab3 f383 	clz	r3, r3
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	2103      	movs	r1, #3
 8007fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	401a      	ands	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	fa93 f3a3 	rbit	r3, r3
 8007fc2:	61fb      	str	r3, [r7, #28]
  return result;
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007fce:	2320      	movs	r3, #32
 8007fd0:	e003      	b.n	8007fda <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	fab3 f383 	clz	r3, r3
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	601a      	str	r2, [r3, #0]
}
 8007fe8:	bf00      	nop
 8007fea:	372c      	adds	r7, #44	; 0x2c
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <LL_GPIO_SetPinOutputType>:
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	43db      	mvns	r3, r3
 8008008:	401a      	ands	r2, r3
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	fb01 f303 	mul.w	r3, r1, r3
 8008012:	431a      	orrs	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	605a      	str	r2, [r3, #4]
}
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <LL_GPIO_SetPinSpeed>:
{
 8008024:	b480      	push	{r7}
 8008026:	b08b      	sub	sp, #44	; 0x2c
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	fa93 f3a3 	rbit	r3, r3
 800803e:	613b      	str	r3, [r7, #16]
  return result;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800804a:	2320      	movs	r3, #32
 800804c:	e003      	b.n	8008056 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	fab3 f383 	clz	r3, r3
 8008054:	b2db      	uxtb	r3, r3
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	2103      	movs	r1, #3
 800805a:	fa01 f303 	lsl.w	r3, r1, r3
 800805e:	43db      	mvns	r3, r3
 8008060:	401a      	ands	r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	fa93 f3a3 	rbit	r3, r3
 800806c:	61fb      	str	r3, [r7, #28]
  return result;
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008078:	2320      	movs	r3, #32
 800807a:	e003      	b.n	8008084 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	fab3 f383 	clz	r3, r3
 8008082:	b2db      	uxtb	r3, r3
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	fa01 f303 	lsl.w	r3, r1, r3
 800808c:	431a      	orrs	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	609a      	str	r2, [r3, #8]
}
 8008092:	bf00      	nop
 8008094:	372c      	adds	r7, #44	; 0x2c
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <LL_GPIO_SetPinPull>:
{
 800809e:	b480      	push	{r7}
 80080a0:	b08b      	sub	sp, #44	; 0x2c
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	fa93 f3a3 	rbit	r3, r3
 80080b8:	613b      	str	r3, [r7, #16]
  return result;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80080c4:	2320      	movs	r3, #32
 80080c6:	e003      	b.n	80080d0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	fab3 f383 	clz	r3, r3
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	2103      	movs	r1, #3
 80080d4:	fa01 f303 	lsl.w	r3, r1, r3
 80080d8:	43db      	mvns	r3, r3
 80080da:	401a      	ands	r2, r3
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	fa93 f3a3 	rbit	r3, r3
 80080e6:	61fb      	str	r3, [r7, #28]
  return result;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80080f2:	2320      	movs	r3, #32
 80080f4:	e003      	b.n	80080fe <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	fab3 f383 	clz	r3, r3
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	fa01 f303 	lsl.w	r3, r1, r3
 8008106:	431a      	orrs	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	60da      	str	r2, [r3, #12]
}
 800810c:	bf00      	nop
 800810e:	372c      	adds	r7, #44	; 0x2c
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <LL_GPIO_SetAFPin_0_7>:
{
 8008118:	b480      	push	{r7}
 800811a:	b08b      	sub	sp, #44	; 0x2c
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a1a      	ldr	r2, [r3, #32]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	fa93 f3a3 	rbit	r3, r3
 8008132:	613b      	str	r3, [r7, #16]
  return result;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800813e:	2320      	movs	r3, #32
 8008140:	e003      	b.n	800814a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	fab3 f383 	clz	r3, r3
 8008148:	b2db      	uxtb	r3, r3
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	210f      	movs	r1, #15
 800814e:	fa01 f303 	lsl.w	r3, r1, r3
 8008152:	43db      	mvns	r3, r3
 8008154:	401a      	ands	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	fa93 f3a3 	rbit	r3, r3
 8008160:	61fb      	str	r3, [r7, #28]
  return result;
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800816c:	2320      	movs	r3, #32
 800816e:	e003      	b.n	8008178 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	fab3 f383 	clz	r3, r3
 8008176:	b2db      	uxtb	r3, r3
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	fa01 f303 	lsl.w	r3, r1, r3
 8008180:	431a      	orrs	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	621a      	str	r2, [r3, #32]
}
 8008186:	bf00      	nop
 8008188:	372c      	adds	r7, #44	; 0x2c
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <LL_GPIO_SetAFPin_8_15>:
{
 8008192:	b480      	push	{r7}
 8008194:	b08b      	sub	sp, #44	; 0x2c
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	0a1b      	lsrs	r3, r3, #8
 80081a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	fa93 f3a3 	rbit	r3, r3
 80081ae:	613b      	str	r3, [r7, #16]
  return result;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80081ba:	2320      	movs	r3, #32
 80081bc:	e003      	b.n	80081c6 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	fab3 f383 	clz	r3, r3
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	210f      	movs	r1, #15
 80081ca:	fa01 f303 	lsl.w	r3, r1, r3
 80081ce:	43db      	mvns	r3, r3
 80081d0:	401a      	ands	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	0a1b      	lsrs	r3, r3, #8
 80081d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	fa93 f3a3 	rbit	r3, r3
 80081de:	61fb      	str	r3, [r7, #28]
  return result;
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80081ea:	2320      	movs	r3, #32
 80081ec:	e003      	b.n	80081f6 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	fab3 f383 	clz	r3, r3
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	fa01 f303 	lsl.w	r3, r1, r3
 80081fe:	431a      	orrs	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008204:	bf00      	nop
 8008206:	372c      	adds	r7, #44	; 0x2c
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b088      	sub	sp, #32
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	fa93 f3a3 	rbit	r3, r3
 8008226:	60fb      	str	r3, [r7, #12]
  return result;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <LL_GPIO_Init+0x26>
    return 32U;
 8008232:	2320      	movs	r3, #32
 8008234:	e003      	b.n	800823e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	fab3 f383 	clz	r3, r3
 800823c:	b2db      	uxtb	r3, r3
 800823e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008240:	e048      	b.n	80082d4 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	2101      	movs	r1, #1
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	fa01 f303 	lsl.w	r3, r1, r3
 800824e:	4013      	ands	r3, r2
 8008250:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d03a      	beq.n	80082ce <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d003      	beq.n	8008268 <LL_GPIO_Init+0x58>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d10e      	bne.n	8008286 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	461a      	mov	r2, r3
 800826e:	69b9      	ldr	r1, [r7, #24]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff fed7 	bl	8008024 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	6819      	ldr	r1, [r3, #0]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	461a      	mov	r2, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff feb7 	bl	8007ff4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	461a      	mov	r2, r3
 800828c:	69b9      	ldr	r1, [r7, #24]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7ff ff05 	bl	800809e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d111      	bne.n	80082c0 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	2bff      	cmp	r3, #255	; 0xff
 80082a0:	d807      	bhi.n	80082b2 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	461a      	mov	r2, r3
 80082a8:	69b9      	ldr	r1, [r7, #24]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff ff34 	bl	8008118 <LL_GPIO_SetAFPin_0_7>
 80082b0:	e006      	b.n	80082c0 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	461a      	mov	r2, r3
 80082b8:	69b9      	ldr	r1, [r7, #24]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff ff69 	bl	8008192 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	461a      	mov	r2, r3
 80082c6:	69b9      	ldr	r1, [r7, #24]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff fe56 	bl	8007f7a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	3301      	adds	r3, #1
 80082d2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	fa22 f303 	lsr.w	r3, r2, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1af      	bne.n	8008242 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3720      	adds	r7, #32
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80082f4:	4a04      	ldr	r2, [pc, #16]	; (8008308 <LL_SetSystemCoreClock+0x1c>)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6013      	str	r3, [r2, #0]
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000000 	.word	0x20000000

0800830c <__errno>:
 800830c:	4b01      	ldr	r3, [pc, #4]	; (8008314 <__errno+0x8>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	2000000c 	.word	0x2000000c

08008318 <__libc_init_array>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	4d0d      	ldr	r5, [pc, #52]	; (8008350 <__libc_init_array+0x38>)
 800831c:	4c0d      	ldr	r4, [pc, #52]	; (8008354 <__libc_init_array+0x3c>)
 800831e:	1b64      	subs	r4, r4, r5
 8008320:	10a4      	asrs	r4, r4, #2
 8008322:	2600      	movs	r6, #0
 8008324:	42a6      	cmp	r6, r4
 8008326:	d109      	bne.n	800833c <__libc_init_array+0x24>
 8008328:	4d0b      	ldr	r5, [pc, #44]	; (8008358 <__libc_init_array+0x40>)
 800832a:	4c0c      	ldr	r4, [pc, #48]	; (800835c <__libc_init_array+0x44>)
 800832c:	f000 fb84 	bl	8008a38 <_init>
 8008330:	1b64      	subs	r4, r4, r5
 8008332:	10a4      	asrs	r4, r4, #2
 8008334:	2600      	movs	r6, #0
 8008336:	42a6      	cmp	r6, r4
 8008338:	d105      	bne.n	8008346 <__libc_init_array+0x2e>
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008340:	4798      	blx	r3
 8008342:	3601      	adds	r6, #1
 8008344:	e7ee      	b.n	8008324 <__libc_init_array+0xc>
 8008346:	f855 3b04 	ldr.w	r3, [r5], #4
 800834a:	4798      	blx	r3
 800834c:	3601      	adds	r6, #1
 800834e:	e7f2      	b.n	8008336 <__libc_init_array+0x1e>
 8008350:	08008f78 	.word	0x08008f78
 8008354:	08008f78 	.word	0x08008f78
 8008358:	08008f78 	.word	0x08008f78
 800835c:	08008f7c 	.word	0x08008f7c

08008360 <memcpy>:
 8008360:	440a      	add	r2, r1
 8008362:	4291      	cmp	r1, r2
 8008364:	f100 33ff 	add.w	r3, r0, #4294967295
 8008368:	d100      	bne.n	800836c <memcpy+0xc>
 800836a:	4770      	bx	lr
 800836c:	b510      	push	{r4, lr}
 800836e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008376:	4291      	cmp	r1, r2
 8008378:	d1f9      	bne.n	800836e <memcpy+0xe>
 800837a:	bd10      	pop	{r4, pc}

0800837c <memset>:
 800837c:	4402      	add	r2, r0
 800837e:	4603      	mov	r3, r0
 8008380:	4293      	cmp	r3, r2
 8008382:	d100      	bne.n	8008386 <memset+0xa>
 8008384:	4770      	bx	lr
 8008386:	f803 1b01 	strb.w	r1, [r3], #1
 800838a:	e7f9      	b.n	8008380 <memset+0x4>
 800838c:	0000      	movs	r0, r0
	...

08008390 <atan>:
 8008390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	ec55 4b10 	vmov	r4, r5, d0
 8008398:	4bc3      	ldr	r3, [pc, #780]	; (80086a8 <atan+0x318>)
 800839a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800839e:	429e      	cmp	r6, r3
 80083a0:	46ab      	mov	fp, r5
 80083a2:	dd18      	ble.n	80083d6 <atan+0x46>
 80083a4:	4bc1      	ldr	r3, [pc, #772]	; (80086ac <atan+0x31c>)
 80083a6:	429e      	cmp	r6, r3
 80083a8:	dc01      	bgt.n	80083ae <atan+0x1e>
 80083aa:	d109      	bne.n	80083c0 <atan+0x30>
 80083ac:	b144      	cbz	r4, 80083c0 <atan+0x30>
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	4620      	mov	r0, r4
 80083b4:	4629      	mov	r1, r5
 80083b6:	f7f7 ff0d 	bl	80001d4 <__adddf3>
 80083ba:	4604      	mov	r4, r0
 80083bc:	460d      	mov	r5, r1
 80083be:	e006      	b.n	80083ce <atan+0x3e>
 80083c0:	f1bb 0f00 	cmp.w	fp, #0
 80083c4:	f300 8131 	bgt.w	800862a <atan+0x29a>
 80083c8:	a59b      	add	r5, pc, #620	; (adr r5, 8008638 <atan+0x2a8>)
 80083ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80083ce:	ec45 4b10 	vmov	d0, r4, r5
 80083d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d6:	4bb6      	ldr	r3, [pc, #728]	; (80086b0 <atan+0x320>)
 80083d8:	429e      	cmp	r6, r3
 80083da:	dc14      	bgt.n	8008406 <atan+0x76>
 80083dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80083e0:	429e      	cmp	r6, r3
 80083e2:	dc0d      	bgt.n	8008400 <atan+0x70>
 80083e4:	a396      	add	r3, pc, #600	; (adr r3, 8008640 <atan+0x2b0>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	ee10 0a10 	vmov	r0, s0
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7f7 fef0 	bl	80001d4 <__adddf3>
 80083f4:	4baf      	ldr	r3, [pc, #700]	; (80086b4 <atan+0x324>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	f7f8 fb32 	bl	8000a60 <__aeabi_dcmpgt>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d1e6      	bne.n	80083ce <atan+0x3e>
 8008400:	f04f 3aff 	mov.w	sl, #4294967295
 8008404:	e02b      	b.n	800845e <atan+0xce>
 8008406:	f000 f963 	bl	80086d0 <fabs>
 800840a:	4bab      	ldr	r3, [pc, #684]	; (80086b8 <atan+0x328>)
 800840c:	429e      	cmp	r6, r3
 800840e:	ec55 4b10 	vmov	r4, r5, d0
 8008412:	f300 80bf 	bgt.w	8008594 <atan+0x204>
 8008416:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800841a:	429e      	cmp	r6, r3
 800841c:	f300 80a0 	bgt.w	8008560 <atan+0x1d0>
 8008420:	ee10 2a10 	vmov	r2, s0
 8008424:	ee10 0a10 	vmov	r0, s0
 8008428:	462b      	mov	r3, r5
 800842a:	4629      	mov	r1, r5
 800842c:	f7f7 fed2 	bl	80001d4 <__adddf3>
 8008430:	4ba0      	ldr	r3, [pc, #640]	; (80086b4 <atan+0x324>)
 8008432:	2200      	movs	r2, #0
 8008434:	f7f7 fecc 	bl	80001d0 <__aeabi_dsub>
 8008438:	2200      	movs	r2, #0
 800843a:	4606      	mov	r6, r0
 800843c:	460f      	mov	r7, r1
 800843e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008442:	4620      	mov	r0, r4
 8008444:	4629      	mov	r1, r5
 8008446:	f7f7 fec5 	bl	80001d4 <__adddf3>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f8 f99f 	bl	8000794 <__aeabi_ddiv>
 8008456:	f04f 0a00 	mov.w	sl, #0
 800845a:	4604      	mov	r4, r0
 800845c:	460d      	mov	r5, r1
 800845e:	4622      	mov	r2, r4
 8008460:	462b      	mov	r3, r5
 8008462:	4620      	mov	r0, r4
 8008464:	4629      	mov	r1, r5
 8008466:	f7f8 f86b 	bl	8000540 <__aeabi_dmul>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4680      	mov	r8, r0
 8008470:	4689      	mov	r9, r1
 8008472:	f7f8 f865 	bl	8000540 <__aeabi_dmul>
 8008476:	a374      	add	r3, pc, #464	; (adr r3, 8008648 <atan+0x2b8>)
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	4606      	mov	r6, r0
 800847e:	460f      	mov	r7, r1
 8008480:	f7f8 f85e 	bl	8000540 <__aeabi_dmul>
 8008484:	a372      	add	r3, pc, #456	; (adr r3, 8008650 <atan+0x2c0>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f7f7 fea3 	bl	80001d4 <__adddf3>
 800848e:	4632      	mov	r2, r6
 8008490:	463b      	mov	r3, r7
 8008492:	f7f8 f855 	bl	8000540 <__aeabi_dmul>
 8008496:	a370      	add	r3, pc, #448	; (adr r3, 8008658 <atan+0x2c8>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f7f7 fe9a 	bl	80001d4 <__adddf3>
 80084a0:	4632      	mov	r2, r6
 80084a2:	463b      	mov	r3, r7
 80084a4:	f7f8 f84c 	bl	8000540 <__aeabi_dmul>
 80084a8:	a36d      	add	r3, pc, #436	; (adr r3, 8008660 <atan+0x2d0>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f7f7 fe91 	bl	80001d4 <__adddf3>
 80084b2:	4632      	mov	r2, r6
 80084b4:	463b      	mov	r3, r7
 80084b6:	f7f8 f843 	bl	8000540 <__aeabi_dmul>
 80084ba:	a36b      	add	r3, pc, #428	; (adr r3, 8008668 <atan+0x2d8>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f7 fe88 	bl	80001d4 <__adddf3>
 80084c4:	4632      	mov	r2, r6
 80084c6:	463b      	mov	r3, r7
 80084c8:	f7f8 f83a 	bl	8000540 <__aeabi_dmul>
 80084cc:	a368      	add	r3, pc, #416	; (adr r3, 8008670 <atan+0x2e0>)
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	f7f7 fe7f 	bl	80001d4 <__adddf3>
 80084d6:	4642      	mov	r2, r8
 80084d8:	464b      	mov	r3, r9
 80084da:	f7f8 f831 	bl	8000540 <__aeabi_dmul>
 80084de:	a366      	add	r3, pc, #408	; (adr r3, 8008678 <atan+0x2e8>)
 80084e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e4:	4680      	mov	r8, r0
 80084e6:	4689      	mov	r9, r1
 80084e8:	4630      	mov	r0, r6
 80084ea:	4639      	mov	r1, r7
 80084ec:	f7f8 f828 	bl	8000540 <__aeabi_dmul>
 80084f0:	a363      	add	r3, pc, #396	; (adr r3, 8008680 <atan+0x2f0>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f7 fe6b 	bl	80001d0 <__aeabi_dsub>
 80084fa:	4632      	mov	r2, r6
 80084fc:	463b      	mov	r3, r7
 80084fe:	f7f8 f81f 	bl	8000540 <__aeabi_dmul>
 8008502:	a361      	add	r3, pc, #388	; (adr r3, 8008688 <atan+0x2f8>)
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f7f7 fe62 	bl	80001d0 <__aeabi_dsub>
 800850c:	4632      	mov	r2, r6
 800850e:	463b      	mov	r3, r7
 8008510:	f7f8 f816 	bl	8000540 <__aeabi_dmul>
 8008514:	a35e      	add	r3, pc, #376	; (adr r3, 8008690 <atan+0x300>)
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f7f7 fe59 	bl	80001d0 <__aeabi_dsub>
 800851e:	4632      	mov	r2, r6
 8008520:	463b      	mov	r3, r7
 8008522:	f7f8 f80d 	bl	8000540 <__aeabi_dmul>
 8008526:	a35c      	add	r3, pc, #368	; (adr r3, 8008698 <atan+0x308>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	f7f7 fe50 	bl	80001d0 <__aeabi_dsub>
 8008530:	4632      	mov	r2, r6
 8008532:	463b      	mov	r3, r7
 8008534:	f7f8 f804 	bl	8000540 <__aeabi_dmul>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4640      	mov	r0, r8
 800853e:	4649      	mov	r1, r9
 8008540:	f7f7 fe48 	bl	80001d4 <__adddf3>
 8008544:	4622      	mov	r2, r4
 8008546:	462b      	mov	r3, r5
 8008548:	f7f7 fffa 	bl	8000540 <__aeabi_dmul>
 800854c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	d14b      	bne.n	80085ee <atan+0x25e>
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f7 fe39 	bl	80001d0 <__aeabi_dsub>
 800855e:	e72c      	b.n	80083ba <atan+0x2a>
 8008560:	ee10 0a10 	vmov	r0, s0
 8008564:	4b53      	ldr	r3, [pc, #332]	; (80086b4 <atan+0x324>)
 8008566:	2200      	movs	r2, #0
 8008568:	4629      	mov	r1, r5
 800856a:	f7f7 fe31 	bl	80001d0 <__aeabi_dsub>
 800856e:	4b51      	ldr	r3, [pc, #324]	; (80086b4 <atan+0x324>)
 8008570:	4606      	mov	r6, r0
 8008572:	460f      	mov	r7, r1
 8008574:	2200      	movs	r2, #0
 8008576:	4620      	mov	r0, r4
 8008578:	4629      	mov	r1, r5
 800857a:	f7f7 fe2b 	bl	80001d4 <__adddf3>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4630      	mov	r0, r6
 8008584:	4639      	mov	r1, r7
 8008586:	f7f8 f905 	bl	8000794 <__aeabi_ddiv>
 800858a:	f04f 0a01 	mov.w	sl, #1
 800858e:	4604      	mov	r4, r0
 8008590:	460d      	mov	r5, r1
 8008592:	e764      	b.n	800845e <atan+0xce>
 8008594:	4b49      	ldr	r3, [pc, #292]	; (80086bc <atan+0x32c>)
 8008596:	429e      	cmp	r6, r3
 8008598:	da1d      	bge.n	80085d6 <atan+0x246>
 800859a:	ee10 0a10 	vmov	r0, s0
 800859e:	4b48      	ldr	r3, [pc, #288]	; (80086c0 <atan+0x330>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	4629      	mov	r1, r5
 80085a4:	f7f7 fe14 	bl	80001d0 <__aeabi_dsub>
 80085a8:	4b45      	ldr	r3, [pc, #276]	; (80086c0 <atan+0x330>)
 80085aa:	4606      	mov	r6, r0
 80085ac:	460f      	mov	r7, r1
 80085ae:	2200      	movs	r2, #0
 80085b0:	4620      	mov	r0, r4
 80085b2:	4629      	mov	r1, r5
 80085b4:	f7f7 ffc4 	bl	8000540 <__aeabi_dmul>
 80085b8:	4b3e      	ldr	r3, [pc, #248]	; (80086b4 <atan+0x324>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	f7f7 fe0a 	bl	80001d4 <__adddf3>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4630      	mov	r0, r6
 80085c6:	4639      	mov	r1, r7
 80085c8:	f7f8 f8e4 	bl	8000794 <__aeabi_ddiv>
 80085cc:	f04f 0a02 	mov.w	sl, #2
 80085d0:	4604      	mov	r4, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	e743      	b.n	800845e <atan+0xce>
 80085d6:	462b      	mov	r3, r5
 80085d8:	ee10 2a10 	vmov	r2, s0
 80085dc:	4939      	ldr	r1, [pc, #228]	; (80086c4 <atan+0x334>)
 80085de:	2000      	movs	r0, #0
 80085e0:	f7f8 f8d8 	bl	8000794 <__aeabi_ddiv>
 80085e4:	f04f 0a03 	mov.w	sl, #3
 80085e8:	4604      	mov	r4, r0
 80085ea:	460d      	mov	r5, r1
 80085ec:	e737      	b.n	800845e <atan+0xce>
 80085ee:	4b36      	ldr	r3, [pc, #216]	; (80086c8 <atan+0x338>)
 80085f0:	4e36      	ldr	r6, [pc, #216]	; (80086cc <atan+0x33c>)
 80085f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80085f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80085fa:	e9da 2300 	ldrd	r2, r3, [sl]
 80085fe:	f7f7 fde7 	bl	80001d0 <__aeabi_dsub>
 8008602:	4622      	mov	r2, r4
 8008604:	462b      	mov	r3, r5
 8008606:	f7f7 fde3 	bl	80001d0 <__aeabi_dsub>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008612:	f7f7 fddd 	bl	80001d0 <__aeabi_dsub>
 8008616:	f1bb 0f00 	cmp.w	fp, #0
 800861a:	4604      	mov	r4, r0
 800861c:	460d      	mov	r5, r1
 800861e:	f6bf aed6 	bge.w	80083ce <atan+0x3e>
 8008622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008626:	461d      	mov	r5, r3
 8008628:	e6d1      	b.n	80083ce <atan+0x3e>
 800862a:	a51d      	add	r5, pc, #116	; (adr r5, 80086a0 <atan+0x310>)
 800862c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008630:	e6cd      	b.n	80083ce <atan+0x3e>
 8008632:	bf00      	nop
 8008634:	f3af 8000 	nop.w
 8008638:	54442d18 	.word	0x54442d18
 800863c:	bff921fb 	.word	0xbff921fb
 8008640:	8800759c 	.word	0x8800759c
 8008644:	7e37e43c 	.word	0x7e37e43c
 8008648:	e322da11 	.word	0xe322da11
 800864c:	3f90ad3a 	.word	0x3f90ad3a
 8008650:	24760deb 	.word	0x24760deb
 8008654:	3fa97b4b 	.word	0x3fa97b4b
 8008658:	a0d03d51 	.word	0xa0d03d51
 800865c:	3fb10d66 	.word	0x3fb10d66
 8008660:	c54c206e 	.word	0xc54c206e
 8008664:	3fb745cd 	.word	0x3fb745cd
 8008668:	920083ff 	.word	0x920083ff
 800866c:	3fc24924 	.word	0x3fc24924
 8008670:	5555550d 	.word	0x5555550d
 8008674:	3fd55555 	.word	0x3fd55555
 8008678:	2c6a6c2f 	.word	0x2c6a6c2f
 800867c:	bfa2b444 	.word	0xbfa2b444
 8008680:	52defd9a 	.word	0x52defd9a
 8008684:	3fadde2d 	.word	0x3fadde2d
 8008688:	af749a6d 	.word	0xaf749a6d
 800868c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008690:	fe231671 	.word	0xfe231671
 8008694:	3fbc71c6 	.word	0x3fbc71c6
 8008698:	9998ebc4 	.word	0x9998ebc4
 800869c:	3fc99999 	.word	0x3fc99999
 80086a0:	54442d18 	.word	0x54442d18
 80086a4:	3ff921fb 	.word	0x3ff921fb
 80086a8:	440fffff 	.word	0x440fffff
 80086ac:	7ff00000 	.word	0x7ff00000
 80086b0:	3fdbffff 	.word	0x3fdbffff
 80086b4:	3ff00000 	.word	0x3ff00000
 80086b8:	3ff2ffff 	.word	0x3ff2ffff
 80086bc:	40038000 	.word	0x40038000
 80086c0:	3ff80000 	.word	0x3ff80000
 80086c4:	bff00000 	.word	0xbff00000
 80086c8:	08008f28 	.word	0x08008f28
 80086cc:	08008f08 	.word	0x08008f08

080086d0 <fabs>:
 80086d0:	ec51 0b10 	vmov	r0, r1, d0
 80086d4:	ee10 2a10 	vmov	r2, s0
 80086d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086dc:	ec43 2b10 	vmov	d0, r2, r3
 80086e0:	4770      	bx	lr

080086e2 <atan2>:
 80086e2:	f000 b82d 	b.w	8008740 <__ieee754_atan2>

080086e6 <sqrt>:
 80086e6:	b538      	push	{r3, r4, r5, lr}
 80086e8:	ed2d 8b02 	vpush	{d8}
 80086ec:	ec55 4b10 	vmov	r4, r5, d0
 80086f0:	f000 f8f0 	bl	80088d4 <__ieee754_sqrt>
 80086f4:	4622      	mov	r2, r4
 80086f6:	462b      	mov	r3, r5
 80086f8:	4620      	mov	r0, r4
 80086fa:	4629      	mov	r1, r5
 80086fc:	eeb0 8a40 	vmov.f32	s16, s0
 8008700:	eef0 8a60 	vmov.f32	s17, s1
 8008704:	f7f8 f9b6 	bl	8000a74 <__aeabi_dcmpun>
 8008708:	b990      	cbnz	r0, 8008730 <sqrt+0x4a>
 800870a:	2200      	movs	r2, #0
 800870c:	2300      	movs	r3, #0
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f7f8 f987 	bl	8000a24 <__aeabi_dcmplt>
 8008716:	b158      	cbz	r0, 8008730 <sqrt+0x4a>
 8008718:	f7ff fdf8 	bl	800830c <__errno>
 800871c:	2321      	movs	r3, #33	; 0x21
 800871e:	6003      	str	r3, [r0, #0]
 8008720:	2200      	movs	r2, #0
 8008722:	2300      	movs	r3, #0
 8008724:	4610      	mov	r0, r2
 8008726:	4619      	mov	r1, r3
 8008728:	f7f8 f834 	bl	8000794 <__aeabi_ddiv>
 800872c:	ec41 0b18 	vmov	d8, r0, r1
 8008730:	eeb0 0a48 	vmov.f32	s0, s16
 8008734:	eef0 0a68 	vmov.f32	s1, s17
 8008738:	ecbd 8b02 	vpop	{d8}
 800873c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008740 <__ieee754_atan2>:
 8008740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008744:	ec57 6b11 	vmov	r6, r7, d1
 8008748:	4273      	negs	r3, r6
 800874a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80088d0 <__ieee754_atan2+0x190>
 800874e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008752:	4333      	orrs	r3, r6
 8008754:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008758:	4573      	cmp	r3, lr
 800875a:	ec51 0b10 	vmov	r0, r1, d0
 800875e:	ee11 8a10 	vmov	r8, s2
 8008762:	d80a      	bhi.n	800877a <__ieee754_atan2+0x3a>
 8008764:	4244      	negs	r4, r0
 8008766:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800876a:	4304      	orrs	r4, r0
 800876c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008770:	4574      	cmp	r4, lr
 8008772:	ee10 9a10 	vmov	r9, s0
 8008776:	468c      	mov	ip, r1
 8008778:	d907      	bls.n	800878a <__ieee754_atan2+0x4a>
 800877a:	4632      	mov	r2, r6
 800877c:	463b      	mov	r3, r7
 800877e:	f7f7 fd29 	bl	80001d4 <__adddf3>
 8008782:	ec41 0b10 	vmov	d0, r0, r1
 8008786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800878a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800878e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008792:	4334      	orrs	r4, r6
 8008794:	d103      	bne.n	800879e <__ieee754_atan2+0x5e>
 8008796:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879a:	f7ff bdf9 	b.w	8008390 <atan>
 800879e:	17bc      	asrs	r4, r7, #30
 80087a0:	f004 0402 	and.w	r4, r4, #2
 80087a4:	ea53 0909 	orrs.w	r9, r3, r9
 80087a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80087ac:	d107      	bne.n	80087be <__ieee754_atan2+0x7e>
 80087ae:	2c02      	cmp	r4, #2
 80087b0:	d060      	beq.n	8008874 <__ieee754_atan2+0x134>
 80087b2:	2c03      	cmp	r4, #3
 80087b4:	d1e5      	bne.n	8008782 <__ieee754_atan2+0x42>
 80087b6:	a142      	add	r1, pc, #264	; (adr r1, 80088c0 <__ieee754_atan2+0x180>)
 80087b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087bc:	e7e1      	b.n	8008782 <__ieee754_atan2+0x42>
 80087be:	ea52 0808 	orrs.w	r8, r2, r8
 80087c2:	d106      	bne.n	80087d2 <__ieee754_atan2+0x92>
 80087c4:	f1bc 0f00 	cmp.w	ip, #0
 80087c8:	da5f      	bge.n	800888a <__ieee754_atan2+0x14a>
 80087ca:	a13f      	add	r1, pc, #252	; (adr r1, 80088c8 <__ieee754_atan2+0x188>)
 80087cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087d0:	e7d7      	b.n	8008782 <__ieee754_atan2+0x42>
 80087d2:	4572      	cmp	r2, lr
 80087d4:	d10f      	bne.n	80087f6 <__ieee754_atan2+0xb6>
 80087d6:	4293      	cmp	r3, r2
 80087d8:	f104 34ff 	add.w	r4, r4, #4294967295
 80087dc:	d107      	bne.n	80087ee <__ieee754_atan2+0xae>
 80087de:	2c02      	cmp	r4, #2
 80087e0:	d84c      	bhi.n	800887c <__ieee754_atan2+0x13c>
 80087e2:	4b35      	ldr	r3, [pc, #212]	; (80088b8 <__ieee754_atan2+0x178>)
 80087e4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80087e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80087ec:	e7c9      	b.n	8008782 <__ieee754_atan2+0x42>
 80087ee:	2c02      	cmp	r4, #2
 80087f0:	d848      	bhi.n	8008884 <__ieee754_atan2+0x144>
 80087f2:	4b32      	ldr	r3, [pc, #200]	; (80088bc <__ieee754_atan2+0x17c>)
 80087f4:	e7f6      	b.n	80087e4 <__ieee754_atan2+0xa4>
 80087f6:	4573      	cmp	r3, lr
 80087f8:	d0e4      	beq.n	80087c4 <__ieee754_atan2+0x84>
 80087fa:	1a9b      	subs	r3, r3, r2
 80087fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008800:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008804:	da1e      	bge.n	8008844 <__ieee754_atan2+0x104>
 8008806:	2f00      	cmp	r7, #0
 8008808:	da01      	bge.n	800880e <__ieee754_atan2+0xce>
 800880a:	323c      	adds	r2, #60	; 0x3c
 800880c:	db1e      	blt.n	800884c <__ieee754_atan2+0x10c>
 800880e:	4632      	mov	r2, r6
 8008810:	463b      	mov	r3, r7
 8008812:	f7f7 ffbf 	bl	8000794 <__aeabi_ddiv>
 8008816:	ec41 0b10 	vmov	d0, r0, r1
 800881a:	f7ff ff59 	bl	80086d0 <fabs>
 800881e:	f7ff fdb7 	bl	8008390 <atan>
 8008822:	ec51 0b10 	vmov	r0, r1, d0
 8008826:	2c01      	cmp	r4, #1
 8008828:	d013      	beq.n	8008852 <__ieee754_atan2+0x112>
 800882a:	2c02      	cmp	r4, #2
 800882c:	d015      	beq.n	800885a <__ieee754_atan2+0x11a>
 800882e:	2c00      	cmp	r4, #0
 8008830:	d0a7      	beq.n	8008782 <__ieee754_atan2+0x42>
 8008832:	a319      	add	r3, pc, #100	; (adr r3, 8008898 <__ieee754_atan2+0x158>)
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	f7f7 fcca 	bl	80001d0 <__aeabi_dsub>
 800883c:	a318      	add	r3, pc, #96	; (adr r3, 80088a0 <__ieee754_atan2+0x160>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	e014      	b.n	800886e <__ieee754_atan2+0x12e>
 8008844:	a118      	add	r1, pc, #96	; (adr r1, 80088a8 <__ieee754_atan2+0x168>)
 8008846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800884a:	e7ec      	b.n	8008826 <__ieee754_atan2+0xe6>
 800884c:	2000      	movs	r0, #0
 800884e:	2100      	movs	r1, #0
 8008850:	e7e9      	b.n	8008826 <__ieee754_atan2+0xe6>
 8008852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008856:	4619      	mov	r1, r3
 8008858:	e793      	b.n	8008782 <__ieee754_atan2+0x42>
 800885a:	a30f      	add	r3, pc, #60	; (adr r3, 8008898 <__ieee754_atan2+0x158>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	f7f7 fcb6 	bl	80001d0 <__aeabi_dsub>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	a10d      	add	r1, pc, #52	; (adr r1, 80088a0 <__ieee754_atan2+0x160>)
 800886a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800886e:	f7f7 fcaf 	bl	80001d0 <__aeabi_dsub>
 8008872:	e786      	b.n	8008782 <__ieee754_atan2+0x42>
 8008874:	a10a      	add	r1, pc, #40	; (adr r1, 80088a0 <__ieee754_atan2+0x160>)
 8008876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800887a:	e782      	b.n	8008782 <__ieee754_atan2+0x42>
 800887c:	a10c      	add	r1, pc, #48	; (adr r1, 80088b0 <__ieee754_atan2+0x170>)
 800887e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008882:	e77e      	b.n	8008782 <__ieee754_atan2+0x42>
 8008884:	2000      	movs	r0, #0
 8008886:	2100      	movs	r1, #0
 8008888:	e77b      	b.n	8008782 <__ieee754_atan2+0x42>
 800888a:	a107      	add	r1, pc, #28	; (adr r1, 80088a8 <__ieee754_atan2+0x168>)
 800888c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008890:	e777      	b.n	8008782 <__ieee754_atan2+0x42>
 8008892:	bf00      	nop
 8008894:	f3af 8000 	nop.w
 8008898:	33145c07 	.word	0x33145c07
 800889c:	3ca1a626 	.word	0x3ca1a626
 80088a0:	54442d18 	.word	0x54442d18
 80088a4:	400921fb 	.word	0x400921fb
 80088a8:	54442d18 	.word	0x54442d18
 80088ac:	3ff921fb 	.word	0x3ff921fb
 80088b0:	54442d18 	.word	0x54442d18
 80088b4:	3fe921fb 	.word	0x3fe921fb
 80088b8:	08008f48 	.word	0x08008f48
 80088bc:	08008f60 	.word	0x08008f60
 80088c0:	54442d18 	.word	0x54442d18
 80088c4:	c00921fb 	.word	0xc00921fb
 80088c8:	54442d18 	.word	0x54442d18
 80088cc:	bff921fb 	.word	0xbff921fb
 80088d0:	7ff00000 	.word	0x7ff00000

080088d4 <__ieee754_sqrt>:
 80088d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d8:	ec55 4b10 	vmov	r4, r5, d0
 80088dc:	4e55      	ldr	r6, [pc, #340]	; (8008a34 <__ieee754_sqrt+0x160>)
 80088de:	43ae      	bics	r6, r5
 80088e0:	ee10 0a10 	vmov	r0, s0
 80088e4:	ee10 3a10 	vmov	r3, s0
 80088e8:	462a      	mov	r2, r5
 80088ea:	4629      	mov	r1, r5
 80088ec:	d110      	bne.n	8008910 <__ieee754_sqrt+0x3c>
 80088ee:	ee10 2a10 	vmov	r2, s0
 80088f2:	462b      	mov	r3, r5
 80088f4:	f7f7 fe24 	bl	8000540 <__aeabi_dmul>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4620      	mov	r0, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	f7f7 fc68 	bl	80001d4 <__adddf3>
 8008904:	4604      	mov	r4, r0
 8008906:	460d      	mov	r5, r1
 8008908:	ec45 4b10 	vmov	d0, r4, r5
 800890c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008910:	2d00      	cmp	r5, #0
 8008912:	dc10      	bgt.n	8008936 <__ieee754_sqrt+0x62>
 8008914:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008918:	4330      	orrs	r0, r6
 800891a:	d0f5      	beq.n	8008908 <__ieee754_sqrt+0x34>
 800891c:	b15d      	cbz	r5, 8008936 <__ieee754_sqrt+0x62>
 800891e:	ee10 2a10 	vmov	r2, s0
 8008922:	462b      	mov	r3, r5
 8008924:	ee10 0a10 	vmov	r0, s0
 8008928:	f7f7 fc52 	bl	80001d0 <__aeabi_dsub>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	f7f7 ff30 	bl	8000794 <__aeabi_ddiv>
 8008934:	e7e6      	b.n	8008904 <__ieee754_sqrt+0x30>
 8008936:	1512      	asrs	r2, r2, #20
 8008938:	d074      	beq.n	8008a24 <__ieee754_sqrt+0x150>
 800893a:	07d4      	lsls	r4, r2, #31
 800893c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008940:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008948:	bf5e      	ittt	pl
 800894a:	0fda      	lsrpl	r2, r3, #31
 800894c:	005b      	lslpl	r3, r3, #1
 800894e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008952:	2400      	movs	r4, #0
 8008954:	0fda      	lsrs	r2, r3, #31
 8008956:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800895a:	107f      	asrs	r7, r7, #1
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	2516      	movs	r5, #22
 8008960:	4620      	mov	r0, r4
 8008962:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008966:	1886      	adds	r6, r0, r2
 8008968:	428e      	cmp	r6, r1
 800896a:	bfde      	ittt	le
 800896c:	1b89      	suble	r1, r1, r6
 800896e:	18b0      	addle	r0, r6, r2
 8008970:	18a4      	addle	r4, r4, r2
 8008972:	0049      	lsls	r1, r1, #1
 8008974:	3d01      	subs	r5, #1
 8008976:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800897a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800897e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008982:	d1f0      	bne.n	8008966 <__ieee754_sqrt+0x92>
 8008984:	462a      	mov	r2, r5
 8008986:	f04f 0e20 	mov.w	lr, #32
 800898a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800898e:	4281      	cmp	r1, r0
 8008990:	eb06 0c05 	add.w	ip, r6, r5
 8008994:	dc02      	bgt.n	800899c <__ieee754_sqrt+0xc8>
 8008996:	d113      	bne.n	80089c0 <__ieee754_sqrt+0xec>
 8008998:	459c      	cmp	ip, r3
 800899a:	d811      	bhi.n	80089c0 <__ieee754_sqrt+0xec>
 800899c:	f1bc 0f00 	cmp.w	ip, #0
 80089a0:	eb0c 0506 	add.w	r5, ip, r6
 80089a4:	da43      	bge.n	8008a2e <__ieee754_sqrt+0x15a>
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	db41      	blt.n	8008a2e <__ieee754_sqrt+0x15a>
 80089aa:	f100 0801 	add.w	r8, r0, #1
 80089ae:	1a09      	subs	r1, r1, r0
 80089b0:	459c      	cmp	ip, r3
 80089b2:	bf88      	it	hi
 80089b4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80089b8:	eba3 030c 	sub.w	r3, r3, ip
 80089bc:	4432      	add	r2, r6
 80089be:	4640      	mov	r0, r8
 80089c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80089c4:	f1be 0e01 	subs.w	lr, lr, #1
 80089c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80089cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80089d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80089d4:	d1db      	bne.n	800898e <__ieee754_sqrt+0xba>
 80089d6:	430b      	orrs	r3, r1
 80089d8:	d006      	beq.n	80089e8 <__ieee754_sqrt+0x114>
 80089da:	1c50      	adds	r0, r2, #1
 80089dc:	bf13      	iteet	ne
 80089de:	3201      	addne	r2, #1
 80089e0:	3401      	addeq	r4, #1
 80089e2:	4672      	moveq	r2, lr
 80089e4:	f022 0201 	bicne.w	r2, r2, #1
 80089e8:	1063      	asrs	r3, r4, #1
 80089ea:	0852      	lsrs	r2, r2, #1
 80089ec:	07e1      	lsls	r1, r4, #31
 80089ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80089f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80089f6:	bf48      	it	mi
 80089f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80089fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008a00:	4614      	mov	r4, r2
 8008a02:	e781      	b.n	8008908 <__ieee754_sqrt+0x34>
 8008a04:	0ad9      	lsrs	r1, r3, #11
 8008a06:	3815      	subs	r0, #21
 8008a08:	055b      	lsls	r3, r3, #21
 8008a0a:	2900      	cmp	r1, #0
 8008a0c:	d0fa      	beq.n	8008a04 <__ieee754_sqrt+0x130>
 8008a0e:	02cd      	lsls	r5, r1, #11
 8008a10:	d50a      	bpl.n	8008a28 <__ieee754_sqrt+0x154>
 8008a12:	f1c2 0420 	rsb	r4, r2, #32
 8008a16:	fa23 f404 	lsr.w	r4, r3, r4
 8008a1a:	1e55      	subs	r5, r2, #1
 8008a1c:	4093      	lsls	r3, r2
 8008a1e:	4321      	orrs	r1, r4
 8008a20:	1b42      	subs	r2, r0, r5
 8008a22:	e78a      	b.n	800893a <__ieee754_sqrt+0x66>
 8008a24:	4610      	mov	r0, r2
 8008a26:	e7f0      	b.n	8008a0a <__ieee754_sqrt+0x136>
 8008a28:	0049      	lsls	r1, r1, #1
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	e7ef      	b.n	8008a0e <__ieee754_sqrt+0x13a>
 8008a2e:	4680      	mov	r8, r0
 8008a30:	e7bd      	b.n	80089ae <__ieee754_sqrt+0xda>
 8008a32:	bf00      	nop
 8008a34:	7ff00000 	.word	0x7ff00000

08008a38 <_init>:
 8008a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3a:	bf00      	nop
 8008a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3e:	bc08      	pop	{r3}
 8008a40:	469e      	mov	lr, r3
 8008a42:	4770      	bx	lr

08008a44 <_fini>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr
