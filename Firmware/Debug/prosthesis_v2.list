
prosthesis_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e60  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08009fe8  08009fe8  00019fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a528  0800a528  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800a528  0800a528  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a528  0800a528  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a528  0800a528  0001a528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a52c  0800a52c  0001a52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  20000074  0800a5a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001264  0800a5a4  00021264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d632  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004049  00000000  00000000  0003d6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  00041720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  000430c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d78e  00000000  00000000  00044888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1e0  00000000  00000000  00072016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110e4b  00000000  00000000  0008d1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019e041  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e7c  00000000  00000000  0019e094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009fd0 	.word	0x08009fd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08009fd0 	.word	0x08009fd0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	4413      	add	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	211f      	movs	r1, #31
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0e9b      	lsrs	r3, r3, #26
 8000b9e:	f003 011f 	and.w	r1, r3, #31
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3314      	adds	r3, #20
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	0e5b      	lsrs	r3, r3, #25
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0d1b      	lsrs	r3, r3, #20
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	2107      	movs	r1, #7
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	0d1b      	lsrs	r3, r3, #20
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0318 	and.w	r3, r3, #24
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c38:	40d9      	lsrs	r1, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c42:	431a      	orrs	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	0007ffff 	.word	0x0007ffff

08000c5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6093      	str	r3, [r2, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000cba:	4905      	ldr	r1, [pc, #20]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000

08000d04 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000d6a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000d6e:	f7ff ff9b 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000d72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d76:	f7ff ffad 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	f7ff ffaa 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000d80:	2301      	movs	r3, #1
 8000d82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d84:	2303      	movs	r3, #3
 8000d86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4832      	ldr	r0, [pc, #200]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000d92:	f008 fd0a 	bl	80097aa <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_0);
 8000d96:	2101      	movs	r1, #1
 8000d98:	4830      	ldr	r0, [pc, #192]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000d9a:	f7ff ffb3 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4619      	mov	r1, r3
 8000db0:	482b      	ldr	r0, [pc, #172]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000db2:	f008 fb3f 	bl	8009434 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4822      	ldr	r0, [pc, #136]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dd6:	f008 fb53 	bl	8009480 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 8000dda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000dde:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4619      	mov	r1, r3
 8000dea:	481e      	ldr	r0, [pc, #120]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000dec:	f008 fada 	bl	80093a4 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000df0:	2100      	movs	r1, #0
 8000df2:	481c      	ldr	r0, [pc, #112]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000df4:	f7ff fea4 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000df8:	4819      	ldr	r0, [pc, #100]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dfa:	f7ff ff2f 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e00:	f7ff ff3e 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_ADC1_Init+0x140>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	099b      	lsrs	r3, r3, #6
 8000e0a:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <MX_ADC1_Init+0x144>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	099a      	lsrs	r2, r3, #6
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e26:	e002      	b.n	8000e2e <MX_ADC1_Init+0x106>
  {
    wait_loop_index--;
 8000e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f9      	bne.n	8000e28 <MX_ADC1_Init+0x100>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <MX_ADC1_Init+0x14c>)
 8000e36:	2106      	movs	r1, #6
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e3a:	f7ff fe94 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <MX_ADC1_Init+0x14c>)
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e44:	f7ff febb 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000e48:	227f      	movs	r2, #127	; 0x7f
 8000e4a:	490a      	ldr	r1, [pc, #40]	; (8000e74 <MX_ADC1_Init+0x14c>)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e4e:	f7ff fee1 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3750      	adds	r7, #80	; 0x50
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	48000800 	.word	0x48000800
 8000e60:	50040000 	.word	0x50040000
 8000e64:	50040300 	.word	0x50040300
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	053e2d63 	.word	0x053e2d63
 8000e70:	cccccccd 	.word	0xcccccccd
 8000e74:	04300002 	.word	0x04300002

08000e78 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	; 0x50
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000e7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000eba:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000ebe:	f7ff fef3 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000ec2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec6:	f7ff ff05 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f7ff ff02 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4831      	ldr	r0, [pc, #196]	; (8000fa8 <MX_ADC2_Init+0x130>)
 8000ee2:	f008 fc62 	bl	80097aa <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_1);
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	482f      	ldr	r0, [pc, #188]	; (8000fa8 <MX_ADC2_Init+0x130>)
 8000eea:	f7ff ff0b 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efe:	4619      	mov	r1, r3
 8000f00:	482a      	ldr	r0, [pc, #168]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f02:	f008 fa97 	bl	8009434 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4821      	ldr	r0, [pc, #132]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f26:	f008 faab 	bl	8009480 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 8000f2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f2e:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4619      	mov	r1, r3
 8000f36:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <MX_ADC2_Init+0x138>)
 8000f38:	f008 fa34 	bl	80093a4 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <MX_ADC2_Init+0x138>)
 8000f40:	f7ff fdfe 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000f44:	4819      	ldr	r0, [pc, #100]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f46:	f7ff fe89 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000f4a:	4818      	ldr	r0, [pc, #96]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f4c:	f7ff fe98 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_ADC2_Init+0x13c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	099b      	lsrs	r3, r3, #6
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <MX_ADC2_Init+0x140>)
 8000f58:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5c:	099a      	lsrs	r2, r3, #6
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_ADC2_Init+0x144>)
 8000f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f72:	e002      	b.n	8000f7a <MX_ADC2_Init+0x102>
  {
    wait_loop_index--;
 8000f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f76:	3b01      	subs	r3, #1
 8000f78:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f9      	bne.n	8000f74 <MX_ADC2_Init+0xfc>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <MX_ADC2_Init+0x148>)
 8000f82:	2106      	movs	r1, #6
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f86:	f7ff fdee 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <MX_ADC2_Init+0x148>)
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f90:	f7ff fe15 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000f94:	227f      	movs	r2, #127	; 0x7f
 8000f96:	490a      	ldr	r1, [pc, #40]	; (8000fc0 <MX_ADC2_Init+0x148>)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f9a:	f7ff fe3b 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	; 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	50040100 	.word	0x50040100
 8000fb0:	50040300 	.word	0x50040300
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	053e2d63 	.word	0x053e2d63
 8000fbc:	cccccccd 	.word	0xcccccccd
 8000fc0:	08600004 	.word	0x08600004

08000fc4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <MX_CAN1_Init+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fe2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000fe6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <MX_CAN1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_CAN1_Init+0x64>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_CAN1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_CAN1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_CAN1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_CAN1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_CAN1_Init+0x64>)
 8001016:	f005 fa91 	bl	800653c <HAL_CAN_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001020:	f000 fd06 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000090 	.word	0x20000090
 800102c:	40006400 	.word	0x40006400

08001030 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <HAL_CAN_MspInit+0x9c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d138      	bne.n	80010c4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105c:	6593      	str	r3, [r2, #88]	; 0x58
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001082:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001094:	2309      	movs	r3, #9
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <HAL_CAN_MspInit+0xa4>)
 80010a0:	f006 fa7a 	bl	8007598 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2101      	movs	r1, #1
 80010a8:	2014      	movs	r0, #20
 80010aa:	f006 f9f0 	bl	800748e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010ae:	2014      	movs	r0, #20
 80010b0:	f006 fa09 	bl	80074c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2101      	movs	r1, #1
 80010b8:	2015      	movs	r0, #21
 80010ba:	f006 f9e8 	bl	800748e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010be:	2015      	movs	r0, #21
 80010c0:	f006 fa01 	bl	80074c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40006400 	.word	0x40006400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000400 	.word	0x48000400

080010d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b44      	ldr	r3, [pc, #272]	; (8001200 <MX_GPIO_Init+0x128>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a43      	ldr	r2, [pc, #268]	; (8001200 <MX_GPIO_Init+0x128>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <MX_GPIO_Init+0x128>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <MX_GPIO_Init+0x128>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a3d      	ldr	r2, [pc, #244]	; (8001200 <MX_GPIO_Init+0x128>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <MX_GPIO_Init+0x128>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b38      	ldr	r3, [pc, #224]	; (8001200 <MX_GPIO_Init+0x128>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a37      	ldr	r2, [pc, #220]	; (8001200 <MX_GPIO_Init+0x128>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b35      	ldr	r3, [pc, #212]	; (8001200 <MX_GPIO_Init+0x128>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b32      	ldr	r3, [pc, #200]	; (8001200 <MX_GPIO_Init+0x128>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a31      	ldr	r2, [pc, #196]	; (8001200 <MX_GPIO_Init+0x128>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <MX_GPIO_Init+0x128>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSCOPE_GPIO_Port, OSCOPE_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	482b      	ldr	r0, [pc, #172]	; (8001204 <MX_GPIO_Init+0x12c>)
 8001156:	f006 fcbd 	bl	8007ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANKLE_IMU_BT_Pin|ANKLE_IMU_P0_Pin|ANKLE_IMU_P1_Pin|ANKLE_IMU_RST_Pin
 800115a:	2200      	movs	r2, #0
 800115c:	211f      	movs	r1, #31
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f006 fcb7 	bl	8007ad4 <HAL_GPIO_WritePin>
                          |ANKLE_IMU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2107      	movs	r1, #7
 800116a:	4827      	ldr	r0, [pc, #156]	; (8001208 <MX_GPIO_Init+0x130>)
 800116c:	f006 fcb2 	bl	8007ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OSCOPE_Pin;
 8001170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OSCOPE_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	481e      	ldr	r0, [pc, #120]	; (8001204 <MX_GPIO_Init+0x12c>)
 800118a:	f006 fa05 	bl	8007598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ANKLE_IMU_BT_Pin|ANKLE_IMU_P0_Pin|ANKLE_IMU_P1_Pin|ANKLE_IMU_RST_Pin
 800118e:	231f      	movs	r3, #31
 8001190:	617b      	str	r3, [r7, #20]
                          |ANKLE_IMU_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a8:	f006 f9f6 	bl	8007598 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin;
 80011ac:	2307      	movs	r3, #7
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011b0:	2311      	movs	r3, #17
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <MX_GPIO_Init+0x130>)
 80011c4:	f006 f9e8 	bl	8007598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANKLE_IMU_INT_Pin;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ANKLE_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f006 f9d9 	bl	8007598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2017      	movs	r0, #23
 80011ec:	f006 f94f 	bl	800748e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011f0:	2017      	movs	r0, #23
 80011f2:	f006 f968 	bl	80074c6 <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
 8001204:	48000800 	.word	0x48000800
 8001208:	48000400 	.word	0x48000400

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4907      	ldr	r1, [pc, #28]	; (8001260 <__NVIC_EnableIRQ+0x38>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60da      	str	r2, [r3, #12]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60da      	str	r2, [r3, #12]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60da      	str	r2, [r3, #12]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60da      	str	r2, [r3, #12]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f023 0203 	bic.w	r2, r3, #3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	621a      	str	r2, [r3, #32]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f023 0201 	bic.w	r2, r3, #1
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60da      	str	r2, [r3, #12]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <LL_RCC_SetLPTIMClockSource>:
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <LL_RCC_SetLPTIMClockSource+0x30>)
 800142e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0c1b      	lsrs	r3, r3, #16
 8001436:	041b      	lsls	r3, r3, #16
 8001438:	43db      	mvns	r3, r3
 800143a:	401a      	ands	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	041b      	lsls	r3, r3, #16
 8001440:	4904      	ldr	r1, [pc, #16]	; (8001454 <LL_RCC_SetLPTIMClockSource+0x30>)
 8001442:	4313      	orrs	r3, r2
 8001444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40021000 	.word	0x40021000

08001458 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001462:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4313      	orrs	r3, r2
 800146a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <LL_APB1_GRP2_EnableClock+0x2c>)
 800146e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4013      	ands	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000

08001488 <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSI);
 800148c:	4819      	ldr	r0, [pc, #100]	; (80014f4 <MX_LPTIM2_Init+0x6c>)
 800148e:	f7ff ffc9 	bl	8001424 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 8001492:	2020      	movs	r0, #32
 8001494:	f7ff ffe0 	bl	8001458 <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001498:	f7ff feb8 	bl	800120c <__NVIC_GetPriorityGrouping>
 800149c:	4603      	mov	r3, r0
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff08 	bl	80012b8 <NVIC_EncodePriority>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4619      	mov	r1, r3
 80014ac:	2042      	movs	r0, #66	; 0x42
 80014ae:	f7ff fed9 	bl	8001264 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 80014b2:	2042      	movs	r0, #66	; 0x42
 80014b4:	f7ff feb8 	bl	8001228 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 80014b8:	2100      	movs	r1, #0
 80014ba:	480f      	ldr	r0, [pc, #60]	; (80014f8 <MX_LPTIM2_Init+0x70>)
 80014bc:	f7ff ff9e 	bl	80013fc <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 80014c0:	2100      	movs	r1, #0
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_LPTIM2_Init+0x70>)
 80014c4:	f7ff ff64 	bl	8001390 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 80014c8:	2100      	movs	r1, #0
 80014ca:	480b      	ldr	r0, [pc, #44]	; (80014f8 <MX_LPTIM2_Init+0x70>)
 80014cc:	f7ff ff4d 	bl	800136a <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 80014d0:	2100      	movs	r1, #0
 80014d2:	4809      	ldr	r0, [pc, #36]	; (80014f8 <MX_LPTIM2_Init+0x70>)
 80014d4:	f7ff ff23 	bl	800131e <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 80014d8:	2100      	movs	r1, #0
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_LPTIM2_Init+0x70>)
 80014dc:	f7ff ff32 	bl	8001344 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_LPTIM2_Init+0x70>)
 80014e2:	f7ff ff7b 	bl	80013dc <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 80014e6:	2100      	movs	r1, #0
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_LPTIM2_Init+0x70>)
 80014ea:	f7ff ff64 	bl	80013b6 <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	00300010 	.word	0x00300010
 80014f8:	40009400 	.word	0x40009400

080014fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800150c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_LPTIM_Enable>:
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f043 0201 	orr.w	r2, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	611a      	str	r2, [r3, #16]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_LPTIM_StartCounter>:
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f023 0206 	bic.w	r2, r3, #6
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	611a      	str	r2, [r3, #16]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_LPTIM_SetAutoReload>:
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	041b      	lsls	r3, r3, #16
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	619a      	str	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f043 0202 	orr.w	r2, r3, #2
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_RCC_HSE_Enable>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <LL_RCC_HSE_Enable+0x1c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <LL_RCC_HSE_Enable+0x1c>)
 80015ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <LL_RCC_HSE_IsReady>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <LL_RCC_HSE_IsReady+0x24>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015e0:	d101      	bne.n	80015e6 <LL_RCC_HSE_IsReady+0x16>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <LL_RCC_HSE_IsReady+0x18>
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <LL_RCC_LSI_Enable>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <LL_RCC_LSI_Enable+0x20>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <LL_RCC_LSI_Enable+0x20>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <LL_RCC_LSI_IsReady>:
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <LL_RCC_LSI_IsReady+0x24>)
 8001622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b02      	cmp	r3, #2
 800162c:	d101      	bne.n	8001632 <LL_RCC_LSI_IsReady+0x16>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <LL_RCC_LSI_IsReady+0x18>
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <LL_RCC_SetSysClkSource>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <LL_RCC_SetSysClkSource+0x24>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f023 0203 	bic.w	r2, r3, #3
 8001654:	4904      	ldr	r1, [pc, #16]	; (8001668 <LL_RCC_SetSysClkSource+0x24>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000

0800166c <LL_RCC_GetSysClkSource>:
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <LL_RCC_GetSysClkSource+0x18>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 030c 	and.w	r3, r3, #12
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000

08001688 <LL_RCC_SetAHBPrescaler>:
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <LL_RCC_SetAHBPrescaler+0x24>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001698:	4904      	ldr	r1, [pc, #16]	; (80016ac <LL_RCC_SetAHBPrescaler+0x24>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000

080016b0 <LL_RCC_SetAPB1Prescaler>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c0:	4904      	ldr	r1, [pc, #16]	; (80016d4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000

080016d8 <LL_RCC_SetAPB2Prescaler>:
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <LL_RCC_SetAPB2Prescaler+0x24>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016e8:	4904      	ldr	r1, [pc, #16]	; (80016fc <LL_RCC_SetAPB2Prescaler+0x24>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40021000 	.word	0x40021000

08001700 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <LL_RCC_PLL_Enable+0x1c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <LL_RCC_PLL_Enable+0x1c>)
 800170a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <LL_RCC_PLL_IsReady+0x24>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001730:	d101      	bne.n	8001736 <LL_RCC_PLL_IsReady+0x16>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <LL_RCC_PLL_IsReady+0x18>
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000

08001748 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800175c:	4013      	ands	r3, r2
 800175e:	68f9      	ldr	r1, [r7, #12]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	4311      	orrs	r1, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	0212      	lsls	r2, r2, #8
 8001768:	4311      	orrs	r1, r2
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	4904      	ldr	r1, [pc, #16]	; (8001780 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001770:	4313      	orrs	r3, r2
 8001772:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40021000 	.word	0x40021000
 8001784:	f9ff808c 	.word	0xf9ff808c

08001788 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <LL_FLASH_SetLatency+0x24>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 0207 	bic.w	r2, r3, #7
 80017b8:	4904      	ldr	r1, [pc, #16]	; (80017cc <LL_FLASH_SetLatency+0x24>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40022000 	.word	0x40022000

080017d0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <LL_FLASH_GetLatency+0x18>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40022000 	.word	0x40022000

080017ec <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80017fc:	4904      	ldr	r1, [pc, #16]	; (8001810 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40007000 	.word	0x40007000

08001814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001814:	b5b0      	push	{r4, r5, r7, lr}
 8001816:	b098      	sub	sp, #96	; 0x60
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181a:	f004 fe1a 	bl	8006452 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181e:	f000 f8b7 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001822:	f7ff fc59 	bl	80010d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001826:	f000 ffb7 	bl	8002798 <MX_SPI1_Init>
  MX_TIM2_Init();
 800182a:	f001 f925 	bl	8002a78 <MX_TIM2_Init>
  MX_LPTIM2_Init();
 800182e:	f7ff fe2b 	bl	8001488 <MX_LPTIM2_Init>
  MX_ADC1_Init();
 8001832:	f7ff fa79 	bl	8000d28 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001836:	f7ff fb1f 	bl	8000e78 <MX_ADC2_Init>
  MX_CAN1_Init();
 800183a:	f7ff fbc3 	bl	8000fc4 <MX_CAN1_Init>
/*******************************************************************************
* USER ADDED DEFINITIONS
*******************************************************************************/

  	AKxx_x_Init_t Motor_Init[AKXX_X_NUMBER_OF_DEVICES];
  	Motor_Init[AnkleIndex].canId = AnkleMotorCAN_ID;
 800183e:	2301      	movs	r3, #1
 8001840:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  	Motor_Init[AnkleIndex].Motor = AK80_9;
 8001844:	2301      	movs	r3, #1
 8001846:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

	CAN_FilterTypeDef CAN1_FilterInit[AKXX_X_NUMBER_OF_DEVICES];
	CAN1_FilterInit[AnkleIndex].FilterActivation = ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN1_FilterInit[AnkleIndex].FilterBank = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
	CAN1_FilterInit[AnkleIndex].FilterFIFOAssignment = CAN_RX_FIFO0;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
	CAN1_FilterInit[AnkleIndex].FilterIdHigh = AnkleMotorCAN_ID << 5;
 8001856:	2320      	movs	r3, #32
 8001858:	60bb      	str	r3, [r7, #8]
	CAN1_FilterInit[AnkleIndex].FilterIdLow = AnkleMotorCAN_ID << 5;
 800185a:	2320      	movs	r3, #32
 800185c:	60fb      	str	r3, [r7, #12]
	CAN1_FilterInit[AnkleIndex].FilterMaskIdHigh = AnkleMotorCAN_ID << 5;
 800185e:	2320      	movs	r3, #32
 8001860:	613b      	str	r3, [r7, #16]
	CAN1_FilterInit[AnkleIndex].FilterMaskIdLow = AnkleMotorCAN_ID << 5;
 8001862:	2320      	movs	r3, #32
 8001864:	617b      	str	r3, [r7, #20]
	CAN1_FilterInit[AnkleIndex].FilterMode = CAN_FILTERMODE_IDLIST;
 8001866:	2301      	movs	r3, #1
 8001868:	623b      	str	r3, [r7, #32]
	CAN1_FilterInit[AnkleIndex].FilterScale = CAN_FILTERSCALE_16BIT;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24

	memcpy(&CAN1_FilterInit[KneeIndex], &CAN1_FilterInit[AnkleIndex], sizeof(CAN_FilterTypeDef));
 800186e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001872:	f107 0508 	add.w	r5, r7, #8
 8001876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001882:	e884 0003 	stmia.w	r4, {r0, r1}
	CAN1_FilterInit[KneeIndex].FilterBank = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	647b      	str	r3, [r7, #68]	; 0x44
	CAN1_FilterInit[KneeIndex].FilterFIFOAssignment = CAN_RX_FIFO1;
 800188a:	2301      	movs	r3, #1
 800188c:	643b      	str	r3, [r7, #64]	; 0x40
	CAN1_FilterInit[KneeIndex].FilterIdHigh = KneeMotorCAN_ID << 5;
 800188e:	2340      	movs	r3, #64	; 0x40
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
	CAN1_FilterInit[KneeIndex].FilterIdLow = KneeMotorCAN_ID << 5;
 8001892:	2340      	movs	r3, #64	; 0x40
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
	CAN1_FilterInit[KneeIndex].FilterMaskIdHigh = KneeMotorCAN_ID << 5;
 8001896:	2340      	movs	r3, #64	; 0x40
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
	CAN1_FilterInit[KneeIndex].FilterMaskIdLow = KneeMotorCAN_ID << 5;
 800189a:	2340      	movs	r3, #64	; 0x40
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c

	Prosthesis_Init_t Prosthesis_Init;
	Prosthesis_Init.Joint = Ankle;
 800189e:	2300      	movs	r3, #0
 80018a0:	713b      	strb	r3, [r7, #4]
	Prosthesis_Init.Side = Right;
 80018a2:	2301      	movs	r3, #1
 80018a4:	717b      	strb	r3, [r7, #5]

/*******************************************************************************
* USER ADDED INITIALIZATIONS
*******************************************************************************/

	LL_LPTIM_Enable(LPTIM2);
 80018a6:	4835      	ldr	r0, [pc, #212]	; (800197c <main+0x168>)
 80018a8:	f7ff fe3c 	bl	8001524 <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 80018ac:	4833      	ldr	r0, [pc, #204]	; (800197c <main+0x168>)
 80018ae:	f7ff fe6f 	bl	8001590 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 80018b2:	213f      	movs	r1, #63	; 0x3f
 80018b4:	4831      	ldr	r0, [pc, #196]	; (800197c <main+0x168>)
 80018b6:	f7ff fe58 	bl	800156a <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 80018ba:	2104      	movs	r1, #4
 80018bc:	482f      	ldr	r0, [pc, #188]	; (800197c <main+0x168>)
 80018be:	f7ff fe41 	bl	8001544 <LL_LPTIM_StartCounter>

	LL_ADC_Enable(ADC1);
 80018c2:	482f      	ldr	r0, [pc, #188]	; (8001980 <main+0x16c>)
 80018c4:	f7ff fe1a 	bl	80014fc <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 80018c8:	482e      	ldr	r0, [pc, #184]	; (8001984 <main+0x170>)
 80018ca:	f7ff fe17 	bl	80014fc <LL_ADC_Enable>

	if(HAL_CAN_ConfigFilter(&hcan1, &CAN1_FilterInit[AnkleIndex]))
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4619      	mov	r1, r3
 80018d4:	482c      	ldr	r0, [pc, #176]	; (8001988 <main+0x174>)
 80018d6:	f004 ff2c 	bl	8006732 <HAL_CAN_ConfigFilter>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <main+0xd2>
		ErrorHandler(CAN_Error);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f000 f9ed 	bl	8001cc0 <ErrorHandler>
	if(HAL_CAN_ConfigFilter(&hcan1, &CAN1_FilterInit[KneeIndex]))
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	3328      	adds	r3, #40	; 0x28
 80018ec:	4619      	mov	r1, r3
 80018ee:	4826      	ldr	r0, [pc, #152]	; (8001988 <main+0x174>)
 80018f0:	f004 ff1f 	bl	8006732 <HAL_CAN_ConfigFilter>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <main+0xec>
		ErrorHandler(CAN_Error);
 80018fa:	2003      	movs	r0, #3
 80018fc:	f000 f9e0 	bl	8001cc0 <ErrorHandler>
	if(HAL_CAN_Start(&hcan1))
 8001900:	4821      	ldr	r0, [pc, #132]	; (8001988 <main+0x174>)
 8001902:	f004 ffe0 	bl	80068c6 <HAL_CAN_Start>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <main+0xfe>
		ErrorHandler(CAN_Error);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 f9d7 	bl	8001cc0 <ErrorHandler>

	if((Prosthesis_Init.Joint == Ankle) || (Prosthesis_Init.Joint == Combined))
 8001912:	793b      	ldrb	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <main+0x10a>
 8001918:	793b      	ldrb	r3, [r7, #4]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d113      	bne.n	8001946 <main+0x132>
	{
	  	if(BNO08x_Init()) // move this to knee??
 800191e:	f001 ff17 	bl	8003750 <BNO08x_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <main+0x11a>
	  		ErrorHandler(AnkleIMU_Error);
 8001928:	2001      	movs	r0, #1
 800192a:	f000 f9c9 	bl	8001cc0 <ErrorHandler>

		if(AKxx_x_Init(AnkleIndex, &Motor_Init[AnkleIndex]))
 800192e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001932:	4619      	mov	r1, r3
 8001934:	2000      	movs	r0, #0
 8001936:	f001 fa41 	bl	8002dbc <AKxx_x_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <main+0x132>
			ErrorHandler(AnkleMotorError);
 8001940:	2002      	movs	r0, #2
 8001942:	f000 f9bd 	bl	8001cc0 <ErrorHandler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001946:	2112      	movs	r1, #18
 8001948:	480f      	ldr	r0, [pc, #60]	; (8001988 <main+0x174>)
 800194a:	f005 fa2e 	bl	8006daa <HAL_CAN_ActivateNotification>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <main+0x146>
		ErrorHandler(CAN_Error);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 f9b3 	bl	8001cc0 <ErrorHandler>

	InitProsthesisControl(&Prosthesis_Init);
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	4618      	mov	r0, r3
 800195e:	f000 f8bd 	bl	8001adc <InitProsthesisControl>

/*******************************************************************************
* USER ADDED TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(ImpedanceControl);
 8001962:	2003      	movs	r0, #3
 8001964:	f000 f948 	bl	8001bf8 <RequireTestProgram>
* USER ADDED MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if(isProsthesisControlRequired)
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <main+0x178>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0fb      	beq.n	8001968 <main+0x154>
	  {
		  RunProsthesisControl();
 8001970:	f000 f95c 	bl	8001c2c <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <main+0x178>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 800197a:	e7f5      	b.n	8001968 <main+0x154>
 800197c:	40009400 	.word	0x40009400
 8001980:	50040000 	.word	0x50040000
 8001984:	50040100 	.word	0x50040100
 8001988:	20000090 	.word	0x20000090
 800198c:	200000b8 	.word	0x200000b8

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001994:	2004      	movs	r0, #4
 8001996:	f7ff ff07 	bl	80017a8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 800199a:	bf00      	nop
 800199c:	f7ff ff18 	bl	80017d0 <LL_FLASH_GetLatency>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d1fa      	bne.n	800199c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80019a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019aa:	f7ff ff1f 	bl	80017ec <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80019ae:	f7ff fdff 	bl	80015b0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80019b2:	bf00      	nop
 80019b4:	f7ff fe0c 	bl	80015d0 <LL_RCC_HSE_IsReady>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d1fa      	bne.n	80019b4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_LSI_Enable();
 80019be:	f7ff fe1b 	bl	80015f8 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 80019c2:	bf00      	nop
 80019c4:	f7ff fe2a 	bl	800161c <LL_RCC_LSI_IsReady>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d1fa      	bne.n	80019c4 <SystemClock_Config+0x34>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_3, 10, LL_RCC_PLLR_DIV_2);
 80019ce:	2300      	movs	r3, #0
 80019d0:	220a      	movs	r2, #10
 80019d2:	2120      	movs	r1, #32
 80019d4:	2003      	movs	r0, #3
 80019d6:	f7ff feb7 	bl	8001748 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80019da:	f7ff fed5 	bl	8001788 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80019de:	f7ff fe8f 	bl	8001700 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80019e2:	bf00      	nop
 80019e4:	f7ff fe9c 	bl	8001720 <LL_RCC_PLL_IsReady>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d1fa      	bne.n	80019e4 <SystemClock_Config+0x54>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80019ee:	2003      	movs	r0, #3
 80019f0:	f7ff fe28 	bl	8001644 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80019f4:	bf00      	nop
 80019f6:	f7ff fe39 	bl	800166c <LL_RCC_GetSysClkSource>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	d1fa      	bne.n	80019f6 <SystemClock_Config+0x66>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff fe41 	bl	8001688 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff fe52 	bl	80016b0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff fe63 	bl	80016d8 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <SystemClock_Config+0x9c>)
 8001a14:	f007 ff38 	bl	8009888 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001a18:	200f      	movs	r0, #15
 8001a1a:	f004 fd33 	bl	8006484 <HAL_InitTick>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a24:	f000 f804 	bl	8001a30 <Error_Handler>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	04c4b400 	.word	0x04c4b400

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <Error_Handler+0x8>

08001a3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4e:	f043 0204 	orr.w	r2, r3, #4
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	b29b      	uxth	r3, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d101      	bne.n	8001a94 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <InitProsthesisControl>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void InitProsthesisControl(Prosthesis_Init_t *Device_Init)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b29a      	uxth	r2, r3
	memcpy(&Device, Device_Init, sizeof(Device));
 8001aea:	4b3c      	ldr	r3, [pc, #240]	; (8001bdc <InitProsthesisControl+0x100>)
 8001aec:	801a      	strh	r2, [r3, #0]

	memset(&CM_AnkleJoint, 0, sizeof(CM_AnkleJoint));
 8001aee:	22a8      	movs	r2, #168	; 0xa8
 8001af0:	2100      	movs	r1, #0
 8001af2:	483b      	ldr	r0, [pc, #236]	; (8001be0 <InitProsthesisControl+0x104>)
 8001af4:	f007 ff10 	bl	8009918 <memset>

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001af8:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <InitProsthesisControl+0x100>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <InitProsthesisControl+0x2c>
 8001b00:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <InitProsthesisControl+0x100>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d142      	bne.n	8001b8e <InitProsthesisControl+0xb2>
	{
		float startPosition = 0.0f;
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
		float startKd = 0.0f;
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
		float startKp = 0.0f;
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]

		CM_AnkleJoint.EarlyStanceCtrl.position = startPosition;
 8001b1a:	4a31      	ldr	r2, [pc, #196]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
		CM_AnkleJoint.EarlyStanceCtrl.kd = startKd;
 8001b20:	4a2f      	ldr	r2, [pc, #188]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	6293      	str	r3, [r2, #40]	; 0x28
		CM_AnkleJoint.EarlyStanceCtrl.kp = startKp;
 8001b26:	4a2e      	ldr	r2, [pc, #184]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

		CM_AnkleJoint.MidStanceCtrl.position = startPosition;
 8001b2c:	4a2c      	ldr	r2, [pc, #176]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
		CM_AnkleJoint.MidStanceCtrl.kd = startKd;
 8001b32:	4a2b      	ldr	r2, [pc, #172]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	63d3      	str	r3, [r2, #60]	; 0x3c
		CM_AnkleJoint.MidStanceCtrl.kp = startKp;
 8001b38:	4a29      	ldr	r2, [pc, #164]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40

		CM_AnkleJoint.LateStanceCtrl.position = startPosition;
 8001b3e:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	6593      	str	r3, [r2, #88]	; 0x58
		CM_AnkleJoint.LateStanceCtrl.kd = startKd;
 8001b44:	4a26      	ldr	r2, [pc, #152]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6513      	str	r3, [r2, #80]	; 0x50
		CM_AnkleJoint.LateStanceCtrl.kp = startKp;
 8001b4a:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6553      	str	r3, [r2, #84]	; 0x54

		CM_AnkleJoint.SwingFlexCtrl.position = startPosition;
 8001b50:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	66d3      	str	r3, [r2, #108]	; 0x6c
		CM_AnkleJoint.SwingFlexCtrl.kd = startKd;
 8001b56:	4a22      	ldr	r2, [pc, #136]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	6653      	str	r3, [r2, #100]	; 0x64
		CM_AnkleJoint.SwingFlexCtrl.kp = startKp;
 8001b5c:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6693      	str	r3, [r2, #104]	; 0x68

		CM_AnkleJoint.SwingExtCtrl.position = startPosition;
 8001b62:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		CM_AnkleJoint.SwingExtCtrl.kd = startKd;
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	6793      	str	r3, [r2, #120]	; 0x78
		CM_AnkleJoint.SwingExtCtrl.kp = startKp;
 8001b70:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	67d3      	str	r3, [r2, #124]	; 0x7c

		CM_AnkleJoint.SwingDescCtrl.position = startPosition;
 8001b76:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		CM_AnkleJoint.SwingDescCtrl.kd = startKd;
 8001b7e:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		CM_AnkleJoint.SwingDescCtrl.kp = startKp;
 8001b86:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <InitProsthesisControl+0x104>)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	}

	CM_LoadCell.intoStanceThreshold = 1300; //??
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <InitProsthesisControl+0x108>)
 8001b90:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <InitProsthesisControl+0x10c>)
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
	CM_LoadCell.outOfStanceThreshold = 1300 + 50; //??
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <InitProsthesisControl+0x108>)
 8001b96:	4a15      	ldr	r2, [pc, #84]	; (8001bec <InitProsthesisControl+0x110>)
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30

	CM_footSpeedThreshold = 0.0f;
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <InitProsthesisControl+0x114>)
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

	if(testProgram != ZeroMotorPosition)
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <InitProsthesisControl+0x118>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d010      	beq.n	8001bcc <InitProsthesisControl+0xf0>
	{
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <InitProsthesisControl+0x100>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <InitProsthesisControl+0xde>
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <InitProsthesisControl+0x100>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <InitProsthesisControl+0xf0>
			if(AKxx_x_EnterMotorCtrlMode(AnkleIndex))
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f001 f9e6 	bl	8002f8c <AKxx_x_EnterMotorCtrlMode>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <InitProsthesisControl+0xf0>
				ErrorHandler(AnkleMotorError);
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f000 f87a 	bl	8001cc0 <ErrorHandler>
	}

	ActivateLED(Blue);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f000 fd65 	bl	800269c <ActivateLED>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200000f8 	.word	0x200000f8
 8001be0:	20000100 	.word	0x20000100
 8001be4:	200001b0 	.word	0x200001b0
 8001be8:	44a28000 	.word	0x44a28000
 8001bec:	44a8c000 	.word	0x44a8c000
 8001bf0:	200001a8 	.word	0x200001a8
 8001bf4:	200000fa 	.word	0x200000fa

08001bf8 <RequireTestProgram>:

void RequireTestProgram(TestProgram_e option)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <RequireTestProgram+0x2c>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	7013      	strb	r3, [r2, #0]
	if(testProgram != None)
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <RequireTestProgram+0x2c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <RequireTestProgram+0x30>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	200000fa 	.word	0x200000fa
 8001c28:	200000fc 	.word	0x200000fc

08001c2c <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	GetInputs();
 8001c30:	f000 f868 	bl	8001d04 <GetInputs>
	ProcessInputs();
 8001c34:	f000 f8bc 	bl	8001db0 <ProcessInputs>

	if(isTestProgramRequired)
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <RunProsthesisControl+0x80>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <RunProsthesisControl+0x18>
		RunTestProgram();
 8001c40:	f000 fcc6 	bl	80025d0 <RunTestProgram>

	RunStateMachine();
 8001c44:	f000 faae 	bl	80021a4 <RunStateMachine>

	static uint8_t missedAnkleMotorCalls = 0;
	if(CM_AnkleJoint.motorDataReceived)
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <RunProsthesisControl+0x84>)
 8001c4a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <RunProsthesisControl+0x3c>
	{
		missedAnkleMotorCalls = 0;
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <RunProsthesisControl+0x88>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
		CM_AnkleJoint.motorDataReceived = 0;
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <RunProsthesisControl+0x84>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		ServiceMotor(AnkleIndex);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f000 fc15 	bl	8002490 <ServiceMotor>
 8001c66:	e005      	b.n	8001c74 <RunProsthesisControl+0x48>
	}
	else
		missedAnkleMotorCalls++;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <RunProsthesisControl+0x88>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <RunProsthesisControl+0x88>)
 8001c72:	701a      	strb	r2, [r3, #0]

	if(missedAnkleMotorCalls >= 5)
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <RunProsthesisControl+0x88>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d902      	bls.n	8001c82 <RunProsthesisControl+0x56>
		ErrorHandler(AnkleMotorError);
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f000 f81f 	bl	8001cc0 <ErrorHandler>

	// Check for first and second executions, needed for load cell filter
	if(isFirst)
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <RunProsthesisControl+0x8c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <RunProsthesisControl+0x6c>
	{
		isFirst = 0;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <RunProsthesisControl+0x8c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <RunProsthesisControl+0x90>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 8001c96:	e006      	b.n	8001ca6 <RunProsthesisControl+0x7a>
	else if(isSecond)
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <RunProsthesisControl+0x90>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <RunProsthesisControl+0x7a>
		isSecond = 0;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <RunProsthesisControl+0x90>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200000fc 	.word	0x200000fc
 8001cb0:	20000100 	.word	0x20000100
 8001cb4:	200001f0 	.word	0x200001f0
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	200000fb 	.word	0x200000fb

08001cc0 <ErrorHandler>:

void ErrorHandler(Error_e error)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
	ActivateLED(Red);
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f000 fce6 	bl	800269c <ActivateLED>

	HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 8001cd0:	2112      	movs	r1, #18
 8001cd2:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <ErrorHandler+0x38>)
 8001cd4:	f005 f88f 	bl	8006df6 <HAL_CAN_DeactivateNotification>

	CM_ledCode = error;
 8001cd8:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <ErrorHandler+0x3c>)
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	7013      	strb	r3, [r2, #0]

	while(1)
	{
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <ErrorHandler+0x40>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <ErrorHandler+0x2e>
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <ErrorHandler+0x40>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d1f7      	bne.n	8001cde <ErrorHandler+0x1e>
			AKxx_x_ExitMotorCtrlMode(AnkleIndex);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f001 f968 	bl	8002fc4 <AKxx_x_ExitMotorCtrlMode>
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001cf4:	e7f3      	b.n	8001cde <ErrorHandler+0x1e>
 8001cf6:	bf00      	nop
 8001cf8:	20000090 	.word	0x20000090
 8001cfc:	200001ea 	.word	0x200001ea
 8001d00:	200000f8 	.word	0x200000f8

08001d04 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	CM_LoadCell.Raw.bot[0] = ReadLoadCell(ADC1);
 8001d08:	4818      	ldr	r0, [pc, #96]	; (8001d6c <GetInputs+0x68>)
 8001d0a:	f000 f839 	bl	8001d80 <ReadLoadCell>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <GetInputs+0x6c>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell.Raw.top[0] = ReadLoadCell(ADC2);
 8001d1e:	4815      	ldr	r0, [pc, #84]	; (8001d74 <GetInputs+0x70>)
 8001d20:	f000 f82e 	bl	8001d80 <ReadLoadCell>
 8001d24:	4603      	mov	r3, r0
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <GetInputs+0x6c>)
 8001d30:	edc3 7a03 	vstr	s15, [r3, #12]

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <GetInputs+0x74>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <GetInputs+0x40>
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <GetInputs+0x74>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d110      	bne.n	8001d66 <GetInputs+0x62>
	{
		if(BNO08x_resetOccurred) //move to knee??
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <GetInputs+0x78>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <GetInputs+0x5e>
		{
			BNO08x_resetOccurred = 0;
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <GetInputs+0x78>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
			if(BNO08x_StartReports())
 8001d52:	f001 fd29 	bl	80037a8 <BNO08x_StartReports>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <GetInputs+0x5e>
				ErrorHandler(AnkleIMU_Error);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f7ff ffaf 	bl	8001cc0 <ErrorHandler>
		}

		BNO08x_ReadSensors();
 8001d62:	f001 fd2f 	bl	80037c4 <BNO08x_ReadSensors>
	}
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	50040000 	.word	0x50040000
 8001d70:	200001b0 	.word	0x200001b0
 8001d74:	50040100 	.word	0x50040100
 8001d78:	200000f8 	.word	0x200000f8
 8001d7c:	200002fc 	.word	0x200002fc

08001d80 <ReadLoadCell>:

static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff fe56 	bl	8001a3a <LL_ADC_REG_StartConversion>
	while (!LL_ADC_IsActiveFlag_EOC(ADCx));
 8001d8e:	bf00      	nop
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff fe73 	bl	8001a7c <LL_ADC_IsActiveFlag_EOC>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f9      	beq.n	8001d90 <ReadLoadCell+0x10>
	return LL_ADC_REG_ReadConversionData12(ADCx);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff fe60 	bl	8001a62 <LL_ADC_REG_ReadConversionData12>
 8001da2:	4603      	mov	r3, r0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	0000      	movs	r0, r0
	...

08001db0 <ProcessInputs>:

static void ProcessInputs(void)
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
	// Filter load cells
	if(isFirst)
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <ProcessInputs+0x7c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d018      	beq.n	8001df0 <ProcessInputs+0x40>
	{
		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[0];
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <ProcessInputs+0x80>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <ProcessInputs+0x80>)
 8001dc4:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[0];
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <ProcessInputs+0x80>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <ProcessInputs+0x80>)
 8001dcc:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <ProcessInputs+0x80>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <ProcessInputs+0x80>)
 8001dd4:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <ProcessInputs+0x80>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <ProcessInputs+0x80>)
 8001ddc:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[0];
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <ProcessInputs+0x80>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <ProcessInputs+0x80>)
 8001de4:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[0];
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <ProcessInputs+0x80>)
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <ProcessInputs+0x80>)
 8001dec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001dee:	e109      	b.n	8002004 <ProcessInputs+0x254>
	}
	else if(isSecond)
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <ProcessInputs+0x84>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01f      	beq.n	8001e38 <ProcessInputs+0x88>
	{
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <ProcessInputs+0x80>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <ProcessInputs+0x80>)
 8001dfe:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <ProcessInputs+0x80>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <ProcessInputs+0x80>)
 8001e06:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <ProcessInputs+0x80>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <ProcessInputs+0x80>)
 8001e0e:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <ProcessInputs+0x80>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <ProcessInputs+0x80>)
 8001e16:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <ProcessInputs+0x80>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <ProcessInputs+0x80>)
 8001e1e:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <ProcessInputs+0x80>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	4a02      	ldr	r2, [pc, #8]	; (8001e30 <ProcessInputs+0x80>)
 8001e26:	6293      	str	r3, [r2, #40]	; 0x28
 8001e28:	e0ec      	b.n	8002004 <ProcessInputs+0x254>
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	200001b0 	.word	0x200001b0
 8001e34:	200000fb 	.word	0x200000fb
	}
	else
	{
		// 2nd order low-pass Butterworth (fc = 20 Hz, fs = 500 Hz)
		CM_LoadCell.Filtered.bot[0] =   1.6475 * CM_LoadCell.Filtered.bot[1] - 0.7009 * CM_LoadCell.Filtered.bot[2]
 8001e38:	4ba3      	ldr	r3, [pc, #652]	; (80020c8 <ProcessInputs+0x318>)
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb27 	bl	8000490 <__aeabi_f2d>
 8001e42:	a399      	add	r3, pc, #612	; (adr r3, 80020a8 <ProcessInputs+0x2f8>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fb7a 	bl	8000540 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4614      	mov	r4, r2
 8001e52:	461d      	mov	r5, r3
 8001e54:	4b9c      	ldr	r3, [pc, #624]	; (80020c8 <ProcessInputs+0x318>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb19 	bl	8000490 <__aeabi_f2d>
 8001e5e:	a394      	add	r3, pc, #592	; (adr r3, 80020b0 <ProcessInputs+0x300>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fb6c 	bl	8000540 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	4629      	mov	r1, r5
 8001e70:	f7fe f9ae 	bl	80001d0 <__aeabi_dsub>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4614      	mov	r4, r2
 8001e7a:	461d      	mov	r5, r3
									  + 0.0134 * CM_LoadCell.Raw.bot[0] + 0.0267 * CM_LoadCell.Raw.bot[1] + 0.0134 * CM_LoadCell.Raw.bot[2];
 8001e7c:	4b92      	ldr	r3, [pc, #584]	; (80020c8 <ProcessInputs+0x318>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb05 	bl	8000490 <__aeabi_f2d>
 8001e86:	a38c      	add	r3, pc, #560	; (adr r3, 80020b8 <ProcessInputs+0x308>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fb58 	bl	8000540 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	f7fe f99c 	bl	80001d4 <__adddf3>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <ProcessInputs+0x318>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe faf1 	bl	8000490 <__aeabi_f2d>
 8001eae:	a384      	add	r3, pc, #528	; (adr r3, 80020c0 <ProcessInputs+0x310>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fb44 	bl	8000540 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe f988 	bl	80001d4 <__adddf3>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4614      	mov	r4, r2
 8001eca:	461d      	mov	r5, r3
 8001ecc:	4b7e      	ldr	r3, [pc, #504]	; (80020c8 <ProcessInputs+0x318>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fadd 	bl	8000490 <__aeabi_f2d>
 8001ed6:	a378      	add	r3, pc, #480	; (adr r3, 80020b8 <ProcessInputs+0x308>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fb30 	bl	8000540 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe f974 	bl	80001d4 <__adddf3>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fdd4 	bl	8000aa0 <__aeabi_d2f>
 8001ef8:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.bot[0] =   1.6475 * CM_LoadCell.Filtered.bot[1] - 0.7009 * CM_LoadCell.Filtered.bot[2]
 8001efa:	4a73      	ldr	r2, [pc, #460]	; (80020c8 <ProcessInputs+0x318>)
 8001efc:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] =   1.6475 * CM_LoadCell.Filtered.top[1] - 0.7009 * CM_LoadCell.Filtered.top[2]
 8001efe:	4b72      	ldr	r3, [pc, #456]	; (80020c8 <ProcessInputs+0x318>)
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fac4 	bl	8000490 <__aeabi_f2d>
 8001f08:	a367      	add	r3, pc, #412	; (adr r3, 80020a8 <ProcessInputs+0x2f8>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb17 	bl	8000540 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4614      	mov	r4, r2
 8001f18:	461d      	mov	r5, r3
 8001f1a:	4b6b      	ldr	r3, [pc, #428]	; (80020c8 <ProcessInputs+0x318>)
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fab6 	bl	8000490 <__aeabi_f2d>
 8001f24:	a362      	add	r3, pc, #392	; (adr r3, 80020b0 <ProcessInputs+0x300>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f7fe fb09 	bl	8000540 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4620      	mov	r0, r4
 8001f34:	4629      	mov	r1, r5
 8001f36:	f7fe f94b 	bl	80001d0 <__aeabi_dsub>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4614      	mov	r4, r2
 8001f40:	461d      	mov	r5, r3
									  + 0.0134 * CM_LoadCell.Raw.top[0] + 0.0267 * CM_LoadCell.Raw.top[1] + 0.0134 * CM_LoadCell.Raw.top[2];
 8001f42:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <ProcessInputs+0x318>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe faa2 	bl	8000490 <__aeabi_f2d>
 8001f4c:	a35a      	add	r3, pc, #360	; (adr r3, 80020b8 <ProcessInputs+0x308>)
 8001f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f52:	f7fe faf5 	bl	8000540 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe f939 	bl	80001d4 <__adddf3>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4614      	mov	r4, r2
 8001f68:	461d      	mov	r5, r3
 8001f6a:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <ProcessInputs+0x318>)
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fa8e 	bl	8000490 <__aeabi_f2d>
 8001f74:	a352      	add	r3, pc, #328	; (adr r3, 80020c0 <ProcessInputs+0x310>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fae1 	bl	8000540 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4620      	mov	r0, r4
 8001f84:	4629      	mov	r1, r5
 8001f86:	f7fe f925 	bl	80001d4 <__adddf3>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4614      	mov	r4, r2
 8001f90:	461d      	mov	r5, r3
 8001f92:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <ProcessInputs+0x318>)
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fa7a 	bl	8000490 <__aeabi_f2d>
 8001f9c:	a346      	add	r3, pc, #280	; (adr r3, 80020b8 <ProcessInputs+0x308>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe facd 	bl	8000540 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4620      	mov	r0, r4
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7fe f911 	bl	80001d4 <__adddf3>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7fe fd71 	bl	8000aa0 <__aeabi_d2f>
 8001fbe:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.top[0] =   1.6475 * CM_LoadCell.Filtered.top[1] - 0.7009 * CM_LoadCell.Filtered.top[2]
 8001fc0:	4a41      	ldr	r2, [pc, #260]	; (80020c8 <ProcessInputs+0x318>)
 8001fc2:	6253      	str	r3, [r2, #36]	; 0x24

		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[1];
 8001fc4:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <ProcessInputs+0x318>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a3f      	ldr	r2, [pc, #252]	; (80020c8 <ProcessInputs+0x318>)
 8001fca:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8001fcc:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <ProcessInputs+0x318>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a3d      	ldr	r2, [pc, #244]	; (80020c8 <ProcessInputs+0x318>)
 8001fd2:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[1];
 8001fd4:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <ProcessInputs+0x318>)
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	4a3b      	ldr	r2, [pc, #236]	; (80020c8 <ProcessInputs+0x318>)
 8001fda:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <ProcessInputs+0x318>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a39      	ldr	r2, [pc, #228]	; (80020c8 <ProcessInputs+0x318>)
 8001fe2:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[1];
 8001fe4:	4b38      	ldr	r3, [pc, #224]	; (80020c8 <ProcessInputs+0x318>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	4a37      	ldr	r2, [pc, #220]	; (80020c8 <ProcessInputs+0x318>)
 8001fea:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <ProcessInputs+0x318>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a35      	ldr	r2, [pc, #212]	; (80020c8 <ProcessInputs+0x318>)
 8001ff2:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[1];
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <ProcessInputs+0x318>)
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	4a33      	ldr	r2, [pc, #204]	; (80020c8 <ProcessInputs+0x318>)
 8001ffa:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8001ffc:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <ProcessInputs+0x318>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <ProcessInputs+0x318>)
 8002002:	6293      	str	r3, [r2, #40]	; 0x28
	}

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002004:	4b31      	ldr	r3, [pc, #196]	; (80020cc <ProcessInputs+0x31c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <ProcessInputs+0x266>
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <ProcessInputs+0x31c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	f040 80b8 	bne.w	8002186 <ProcessInputs+0x3d6>
	{
		if(Device.Side == Left)
 8002016:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <ProcessInputs+0x31c>)
 8002018:	785b      	ldrb	r3, [r3, #1]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d160      	bne.n	80020e0 <ProcessInputs+0x330>
		{
			CM_AnkleJoint.IMU_Data.ax = -BNO08x_IMU_Data[0];
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <ProcessInputs+0x320>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	eef1 7a67 	vneg.f32	s15, s15
 8002028:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <ProcessInputs+0x324>)
 800202a:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
			CM_AnkleJoint.IMU_Data.ay = BNO08x_IMU_Data[1];
 800202e:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <ProcessInputs+0x320>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <ProcessInputs+0x324>)
 8002034:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
			CM_AnkleJoint.IMU_Data.az = -BNO08x_IMU_Data[2];
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <ProcessInputs+0x320>)
 800203a:	edd3 7a02 	vldr	s15, [r3, #8]
 800203e:	eef1 7a67 	vneg.f32	s15, s15
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <ProcessInputs+0x324>)
 8002044:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
			CM_AnkleJoint.IMU_Data.gx = -BNO08x_IMU_Data[3] * RAD_TO_DEG;
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <ProcessInputs+0x320>)
 800204a:	edd3 7a03 	vldr	s15, [r3, #12]
 800204e:	eef1 7a67 	vneg.f32	s15, s15
 8002052:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80020d8 <ProcessInputs+0x328>
 8002056:	ee27 7a87 	vmul.f32	s14, s15, s14
 800205a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80020dc <ProcessInputs+0x32c>
 800205e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <ProcessInputs+0x324>)
 8002064:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
			CM_AnkleJoint.IMU_Data.gy = BNO08x_IMU_Data[4] * RAD_TO_DEG;
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <ProcessInputs+0x320>)
 800206a:	edd3 7a04 	vldr	s15, [r3, #16]
 800206e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80020d8 <ProcessInputs+0x328>
 8002072:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002076:	eddf 6a19 	vldr	s13, [pc, #100]	; 80020dc <ProcessInputs+0x32c>
 800207a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <ProcessInputs+0x324>)
 8002080:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
			CM_AnkleJoint.IMU_Data.gz = -BNO08x_IMU_Data[5] * RAD_TO_DEG;
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <ProcessInputs+0x320>)
 8002086:	edd3 7a05 	vldr	s15, [r3, #20]
 800208a:	eef1 7a67 	vneg.f32	s15, s15
 800208e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80020d8 <ProcessInputs+0x328>
 8002092:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002096:	eddf 6a11 	vldr	s13, [pc, #68]	; 80020dc <ProcessInputs+0x32c>
 800209a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <ProcessInputs+0x324>)
 80020a0:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 80020a4:	e021      	b.n	80020ea <ProcessInputs+0x33a>
 80020a6:	bf00      	nop
 80020a8:	f5c28f5c 	.word	0xf5c28f5c
 80020ac:	3ffa5c28 	.word	0x3ffa5c28
 80020b0:	d6388659 	.word	0xd6388659
 80020b4:	3fe66dc5 	.word	0x3fe66dc5
 80020b8:	8e219653 	.word	0x8e219653
 80020bc:	3f8b7175 	.word	0x3f8b7175
 80020c0:	ab367a10 	.word	0xab367a10
 80020c4:	3f9b573e 	.word	0x3f9b573e
 80020c8:	200001b0 	.word	0x200001b0
 80020cc:	200000f8 	.word	0x200000f8
 80020d0:	200002d4 	.word	0x200002d4
 80020d4:	20000100 	.word	0x20000100
 80020d8:	43340000 	.word	0x43340000
 80020dc:	40490ff9 	.word	0x40490ff9
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <ProcessInputs+0x3e0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
		}
		else
			memcpy(&CM_AnkleJoint.IMU_Data, &BNO08x_IMU_Data, sizeof(AnkleIMU_Data_t));
 80020e4:	4a2b      	ldr	r2, [pc, #172]	; (8002194 <ProcessInputs+0x3e4>)
 80020e6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

		float yaw, pitch, roll;
		QuaternionsToYPR(BNO08x_IMU_Data[6], BNO08x_IMU_Data[7], BNO08x_IMU_Data[8], BNO08x_IMU_Data[9], &yaw, &pitch, &roll);
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <ProcessInputs+0x3e0>)
 80020ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <ProcessInputs+0x3e0>)
 80020f2:	ed93 7a07 	vldr	s14, [r3, #28]
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <ProcessInputs+0x3e0>)
 80020f8:	edd3 6a08 	vldr	s13, [r3, #32]
 80020fc:	4b24      	ldr	r3, [pc, #144]	; (8002190 <ProcessInputs+0x3e0>)
 80020fe:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8002102:	1d3a      	adds	r2, r7, #4
 8002104:	f107 0108 	add.w	r1, r7, #8
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	4618      	mov	r0, r3
 800210e:	eef0 1a46 	vmov.f32	s3, s12
 8002112:	eeb0 1a66 	vmov.f32	s2, s13
 8002116:	eef0 0a47 	vmov.f32	s1, s14
 800211a:	eeb0 0a67 	vmov.f32	s0, s15
 800211e:	f000 fd1f 	bl	8002b60 <QuaternionsToYPR>
		CM_AnkleJoint.IMU_Data.yaw = yaw * RAD_TO_DEG;
 8002122:	edd7 7a03 	vldr	s15, [r7, #12]
 8002126:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002198 <ProcessInputs+0x3e8>
 800212a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800212e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800219c <ProcessInputs+0x3ec>
 8002132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <ProcessInputs+0x3e4>)
 8002138:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
		CM_AnkleJoint.IMU_Data.pitch = pitch * RAD_TO_DEG;
 800213c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002140:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002198 <ProcessInputs+0x3e8>
 8002144:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002148:	eddf 6a14 	vldr	s13, [pc, #80]	; 800219c <ProcessInputs+0x3ec>
 800214c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <ProcessInputs+0x3e4>)
 8002152:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
		CM_AnkleJoint.IMU_Data.roll = roll * RAD_TO_DEG;
 8002156:	edd7 7a01 	vldr	s15, [r7, #4]
 800215a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002198 <ProcessInputs+0x3e8>
 800215e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002162:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800219c <ProcessInputs+0x3ec>
 8002166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <ProcessInputs+0x3e4>)
 800216c:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

		CM_footSpeed = CM_AnkleJoint.IMU_Data.gz + CM_AnkleJoint.MotorReadData.speed;
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <ProcessInputs+0x3e4>)
 8002172:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <ProcessInputs+0x3e4>)
 8002178:	edd3 7a02 	vldr	s15, [r3, #8]
 800217c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <ProcessInputs+0x3f0>)
 8002182:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bdb0      	pop	{r4, r5, r7, pc}
 800218e:	bf00      	nop
 8002190:	200002d4 	.word	0x200002d4
 8002194:	20000100 	.word	0x20000100
 8002198:	43340000 	.word	0x43340000
 800219c:	40490ff9 	.word	0x40490ff9
 80021a0:	200001ec 	.word	0x200001ec

080021a4 <RunStateMachine>:

static void RunStateMachine(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
	static StateMachine_e state = EarlyStance;
	switch(state)
 80021a8:	4b86      	ldr	r3, [pc, #536]	; (80023c4 <RunStateMachine+0x220>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	f200 8158 	bhi.w	8002462 <RunStateMachine+0x2be>
 80021b2:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <RunStateMachine+0x14>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080021d1 	.word	0x080021d1
 80021bc:	0800223d 	.word	0x0800223d
 80021c0:	080022a3 	.word	0x080022a3
 80021c4:	0800230f 	.word	0x0800230f
 80021c8:	0800235f 	.word	0x0800235f
 80021cc:	080023f1 	.word	0x080023f1
	{
	case EarlyStance:
		CM_state_angles = -10;
 80021d0:	4b7d      	ldr	r3, [pc, #500]	; (80023c8 <RunStateMachine+0x224>)
 80021d2:	22f6      	movs	r2, #246	; 0xf6
 80021d4:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1100; //??
 80021d6:	4b7d      	ldr	r3, [pc, #500]	; (80023cc <RunStateMachine+0x228>)
 80021d8:	f240 424c 	movw	r2, #1100	; 0x44c
 80021dc:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -30;
 80021de:	4b7c      	ldr	r3, [pc, #496]	; (80023d0 <RunStateMachine+0x22c>)
 80021e0:	22e2      	movs	r2, #226	; 0xe2
 80021e2:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -200;
 80021e4:	4b7b      	ldr	r3, [pc, #492]	; (80023d4 <RunStateMachine+0x230>)
 80021e6:	f64f 7238 	movw	r2, #65336	; 0xff38
 80021ea:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 80021ec:	4b7a      	ldr	r3, [pc, #488]	; (80023d8 <RunStateMachine+0x234>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d013      	beq.n	800221c <RunStateMachine+0x78>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80021f4:	4b79      	ldr	r3, [pc, #484]	; (80023dc <RunStateMachine+0x238>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <RunStateMachine+0x60>
 80021fc:	4b77      	ldr	r3, [pc, #476]	; (80023dc <RunStateMachine+0x238>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d10b      	bne.n	800221c <RunStateMachine+0x78>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.EarlyStanceCtrl.position;
 8002204:	4b76      	ldr	r3, [pc, #472]	; (80023e0 <RunStateMachine+0x23c>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	4a75      	ldr	r2, [pc, #468]	; (80023e0 <RunStateMachine+0x23c>)
 800220a:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.EarlyStanceCtrl.kd;
 800220c:	4b74      	ldr	r3, [pc, #464]	; (80023e0 <RunStateMachine+0x23c>)
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	4a73      	ldr	r2, [pc, #460]	; (80023e0 <RunStateMachine+0x23c>)
 8002212:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.EarlyStanceCtrl.kp;
 8002214:	4b72      	ldr	r3, [pc, #456]	; (80023e0 <RunStateMachine+0x23c>)
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	4a71      	ldr	r2, [pc, #452]	; (80023e0 <RunStateMachine+0x23c>)
 800221a:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_footSpeed > CM_footSpeedThreshold)
 800221c:	4b71      	ldr	r3, [pc, #452]	; (80023e4 <RunStateMachine+0x240>)
 800221e:	ed93 7a00 	vldr	s14, [r3]
 8002222:	4b71      	ldr	r3, [pc, #452]	; (80023e8 <RunStateMachine+0x244>)
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002230:	dc00      	bgt.n	8002234 <RunStateMachine+0x90>
			state = MidStance;

		break;
 8002232:	e116      	b.n	8002462 <RunStateMachine+0x2be>
			state = MidStance;
 8002234:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <RunStateMachine+0x220>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
		break;
 800223a:	e112      	b.n	8002462 <RunStateMachine+0x2be>

	case MidStance:
		CM_state_angles = 5;
 800223c:	4b62      	ldr	r3, [pc, #392]	; (80023c8 <RunStateMachine+0x224>)
 800223e:	2205      	movs	r2, #5
 8002240:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1200;
 8002242:	4b62      	ldr	r3, [pc, #392]	; (80023cc <RunStateMachine+0x228>)
 8002244:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002248:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -20;
 800224a:	4b61      	ldr	r3, [pc, #388]	; (80023d0 <RunStateMachine+0x22c>)
 800224c:	22ec      	movs	r2, #236	; 0xec
 800224e:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -120;
 8002250:	4b60      	ldr	r3, [pc, #384]	; (80023d4 <RunStateMachine+0x230>)
 8002252:	f64f 7288 	movw	r2, #65416	; 0xff88
 8002256:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 8002258:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <RunStateMachine+0x234>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d013      	beq.n	8002288 <RunStateMachine+0xe4>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002260:	4b5e      	ldr	r3, [pc, #376]	; (80023dc <RunStateMachine+0x238>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <RunStateMachine+0xcc>
 8002268:	4b5c      	ldr	r3, [pc, #368]	; (80023dc <RunStateMachine+0x238>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10b      	bne.n	8002288 <RunStateMachine+0xe4>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.MidStanceCtrl.position;
 8002270:	4b5b      	ldr	r3, [pc, #364]	; (80023e0 <RunStateMachine+0x23c>)
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	4a5a      	ldr	r2, [pc, #360]	; (80023e0 <RunStateMachine+0x23c>)
 8002276:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.MidStanceCtrl.kd;
 8002278:	4b59      	ldr	r3, [pc, #356]	; (80023e0 <RunStateMachine+0x23c>)
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	4a58      	ldr	r2, [pc, #352]	; (80023e0 <RunStateMachine+0x23c>)
 800227e:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.MidStanceCtrl.kp;
 8002280:	4b57      	ldr	r3, [pc, #348]	; (80023e0 <RunStateMachine+0x23c>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	4a56      	ldr	r2, [pc, #344]	; (80023e0 <RunStateMachine+0x23c>)
 8002286:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_AnkleJoint.MotorReadData.speed < 0)
 8002288:	4b55      	ldr	r3, [pc, #340]	; (80023e0 <RunStateMachine+0x23c>)
 800228a:	edd3 7a02 	vldr	s15, [r3, #8]
 800228e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	d400      	bmi.n	800229a <RunStateMachine+0xf6>
			state = LateStance;

		break;
 8002298:	e0e3      	b.n	8002462 <RunStateMachine+0x2be>
			state = LateStance;
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <RunStateMachine+0x220>)
 800229c:	2202      	movs	r2, #2
 800229e:	701a      	strb	r2, [r3, #0]
		break;
 80022a0:	e0df      	b.n	8002462 <RunStateMachine+0x2be>

	case LateStance:
		CM_state_angles = 20;
 80022a2:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <RunStateMachine+0x224>)
 80022a4:	2214      	movs	r2, #20
 80022a6:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1300;
 80022a8:	4b48      	ldr	r3, [pc, #288]	; (80023cc <RunStateMachine+0x228>)
 80022aa:	f240 5214 	movw	r2, #1300	; 0x514
 80022ae:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -10;
 80022b0:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <RunStateMachine+0x22c>)
 80022b2:	22f6      	movs	r2, #246	; 0xf6
 80022b4:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -40;
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <RunStateMachine+0x230>)
 80022b8:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 80022bc:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <RunStateMachine+0x234>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d013      	beq.n	80022ee <RunStateMachine+0x14a>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80022c6:	4b45      	ldr	r3, [pc, #276]	; (80023dc <RunStateMachine+0x238>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <RunStateMachine+0x132>
 80022ce:	4b43      	ldr	r3, [pc, #268]	; (80023dc <RunStateMachine+0x238>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10b      	bne.n	80022ee <RunStateMachine+0x14a>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.LateStanceCtrl.position;
 80022d6:	4b42      	ldr	r3, [pc, #264]	; (80023e0 <RunStateMachine+0x23c>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	4a41      	ldr	r2, [pc, #260]	; (80023e0 <RunStateMachine+0x23c>)
 80022dc:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.LateStanceCtrl.kd;
 80022de:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <RunStateMachine+0x23c>)
 80022e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e2:	4a3f      	ldr	r2, [pc, #252]	; (80023e0 <RunStateMachine+0x23c>)
 80022e4:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.LateStanceCtrl.kp;
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <RunStateMachine+0x23c>)
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	4a3d      	ldr	r2, [pc, #244]	; (80023e0 <RunStateMachine+0x23c>)
 80022ec:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_LoadCell.Filtered.bot[0] > CM_LoadCell.outOfStanceThreshold)
 80022ee:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <RunStateMachine+0x248>)
 80022f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80022f4:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <RunStateMachine+0x248>)
 80022f6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80022fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	dc00      	bgt.n	8002306 <RunStateMachine+0x162>
			state = SwingExtension; //SwingFlexion;??

		break;
 8002304:	e0ad      	b.n	8002462 <RunStateMachine+0x2be>
			state = SwingExtension; //SwingFlexion;??
 8002306:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <RunStateMachine+0x220>)
 8002308:	2204      	movs	r2, #4
 800230a:	701a      	strb	r2, [r3, #0]
		break;
 800230c:	e0a9      	b.n	8002462 <RunStateMachine+0x2be>

	case SwingFlexion:
		CM_state_angles = 35;
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <RunStateMachine+0x224>)
 8002310:	2223      	movs	r2, #35	; 0x23
 8002312:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1400;
 8002314:	4b2d      	ldr	r3, [pc, #180]	; (80023cc <RunStateMachine+0x228>)
 8002316:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800231a:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 0;
 800231c:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <RunStateMachine+0x22c>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 40;
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <RunStateMachine+0x230>)
 8002324:	2228      	movs	r2, #40	; 0x28
 8002326:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <RunStateMachine+0x234>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b03      	cmp	r3, #3
 800232e:	f000 8097 	beq.w	8002460 <RunStateMachine+0x2bc>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002332:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <RunStateMachine+0x238>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <RunStateMachine+0x1a0>
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <RunStateMachine+0x238>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	f040 808e 	bne.w	8002460 <RunStateMachine+0x2bc>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.SwingFlexCtrl.position;
 8002344:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <RunStateMachine+0x23c>)
 8002346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002348:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <RunStateMachine+0x23c>)
 800234a:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.SwingFlexCtrl.kd;
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <RunStateMachine+0x23c>)
 800234e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002350:	4a23      	ldr	r2, [pc, #140]	; (80023e0 <RunStateMachine+0x23c>)
 8002352:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.SwingFlexCtrl.kp;
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <RunStateMachine+0x23c>)
 8002356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002358:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <RunStateMachine+0x23c>)
 800235a:	6193      	str	r3, [r2, #24]
		}

//		if(CM_KneeJoint.jointSpeed < 0)??
//			state = SwingExtension;

		break;
 800235c:	e080      	b.n	8002460 <RunStateMachine+0x2bc>

	case SwingExtension:
		CM_state_angles = 50;
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <RunStateMachine+0x224>)
 8002360:	2232      	movs	r2, #50	; 0x32
 8002362:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1500;
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <RunStateMachine+0x228>)
 8002366:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800236a:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 10;
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <RunStateMachine+0x22c>)
 800236e:	220a      	movs	r2, #10
 8002370:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 120;
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <RunStateMachine+0x230>)
 8002374:	2278      	movs	r2, #120	; 0x78
 8002376:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <RunStateMachine+0x234>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d014      	beq.n	80023aa <RunStateMachine+0x206>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <RunStateMachine+0x238>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <RunStateMachine+0x1ec>
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <RunStateMachine+0x238>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10c      	bne.n	80023aa <RunStateMachine+0x206>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.SwingExtCtrl.position;
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <RunStateMachine+0x23c>)
 8002392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <RunStateMachine+0x23c>)
 8002398:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.SwingExtCtrl.kd;
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <RunStateMachine+0x23c>)
 800239c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <RunStateMachine+0x23c>)
 80023a0:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.SwingExtCtrl.kp;
 80023a2:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <RunStateMachine+0x23c>)
 80023a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a6:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <RunStateMachine+0x23c>)
 80023a8:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_footSpeed < 0)
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <RunStateMachine+0x240>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	d400      	bmi.n	80023bc <RunStateMachine+0x218>
			state = SwingDescension;

		break;
 80023ba:	e052      	b.n	8002462 <RunStateMachine+0x2be>
			state = SwingDescension;
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <RunStateMachine+0x220>)
 80023be:	2205      	movs	r2, #5
 80023c0:	701a      	strb	r2, [r3, #0]
		break;
 80023c2:	e04e      	b.n	8002462 <RunStateMachine+0x2be>
 80023c4:	200001f1 	.word	0x200001f1
 80023c8:	200001ac 	.word	0x200001ac
 80023cc:	200001e8 	.word	0x200001e8
 80023d0:	200001ad 	.word	0x200001ad
 80023d4:	200001ae 	.word	0x200001ae
 80023d8:	200000fa 	.word	0x200000fa
 80023dc:	200000f8 	.word	0x200000f8
 80023e0:	20000100 	.word	0x20000100
 80023e4:	200001ec 	.word	0x200001ec
 80023e8:	200001a8 	.word	0x200001a8
 80023ec:	200001b0 	.word	0x200001b0

	case SwingDescension:
		CM_state_angles = 65;
 80023f0:	4b1e      	ldr	r3, [pc, #120]	; (800246c <RunStateMachine+0x2c8>)
 80023f2:	2241      	movs	r2, #65	; 0x41
 80023f4:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1600;
 80023f6:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <RunStateMachine+0x2cc>)
 80023f8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80023fc:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 20;
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <RunStateMachine+0x2d0>)
 8002400:	2214      	movs	r2, #20
 8002402:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 200;
 8002404:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <RunStateMachine+0x2d4>)
 8002406:	22c8      	movs	r2, #200	; 0xc8
 8002408:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <RunStateMachine+0x2d8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d016      	beq.n	8002440 <RunStateMachine+0x29c>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <RunStateMachine+0x2dc>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <RunStateMachine+0x27e>
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <RunStateMachine+0x2dc>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d10e      	bne.n	8002440 <RunStateMachine+0x29c>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.SwingDescCtrl.position;
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <RunStateMachine+0x2e0>)
 8002424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002428:	4a16      	ldr	r2, [pc, #88]	; (8002484 <RunStateMachine+0x2e0>)
 800242a:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.SwingDescCtrl.kd;
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <RunStateMachine+0x2e0>)
 800242e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002432:	4a14      	ldr	r2, [pc, #80]	; (8002484 <RunStateMachine+0x2e0>)
 8002434:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.SwingDescCtrl.kp;
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <RunStateMachine+0x2e0>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	4a11      	ldr	r2, [pc, #68]	; (8002484 <RunStateMachine+0x2e0>)
 800243e:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_LoadCell.Filtered.bot[0] < CM_LoadCell.intoStanceThreshold)
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <RunStateMachine+0x2e4>)
 8002442:	ed93 7a06 	vldr	s14, [r3, #24]
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <RunStateMachine+0x2e4>)
 8002448:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800244c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	d400      	bmi.n	8002458 <RunStateMachine+0x2b4>
			state = EarlyStance;

		break;
 8002456:	e004      	b.n	8002462 <RunStateMachine+0x2be>
			state = EarlyStance;
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <RunStateMachine+0x2e8>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
		break;
 800245e:	e000      	b.n	8002462 <RunStateMachine+0x2be>
		break;
 8002460:	bf00      	nop
	}
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	200001ac 	.word	0x200001ac
 8002470:	200001e8 	.word	0x200001e8
 8002474:	200001ad 	.word	0x200001ad
 8002478:	200001ae 	.word	0x200001ae
 800247c:	200000fa 	.word	0x200000fa
 8002480:	200000f8 	.word	0x200000f8
 8002484:	20000100 	.word	0x20000100
 8002488:	200001b0 	.word	0x200001b0
 800248c:	200001f1 	.word	0x200001f1

08002490 <ServiceMotor>:

static void ServiceMotor(DeviceIndex_e deviceIndex)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
	static uint8_t firstCall = 1;
	if(firstCall)
 800249a:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <ServiceMotor+0x124>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <ServiceMotor+0x1e>
	{
		firstCall = 0;
 80024a2:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <ServiceMotor+0x124>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
		ActivateLED(Green);
 80024a8:	2001      	movs	r0, #1
 80024aa:	f000 f8f7 	bl	800269c <ActivateLED>
	}

	if(deviceIndex == AnkleIndex)
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d17a      	bne.n	80025aa <ServiceMotor+0x11a>
	{
		if(CM_AnkleJoint.MotorReadData.error)
 80024b4:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <ServiceMotor+0x128>)
 80024b6:	7c1b      	ldrb	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <ServiceMotor+0x32>
			ErrorHandler(AnkleMotorError);
 80024bc:	2002      	movs	r0, #2
 80024be:	f7ff fbff 	bl	8001cc0 <ErrorHandler>

		CM_AnkleJoint.MotorReadData.position = -MotorRxData[deviceIndex].position / ANKLE_GEAR_RATIO * RAD_TO_DEG;
 80024c2:	79fa      	ldrb	r2, [r7, #7]
 80024c4:	493d      	ldr	r1, [pc, #244]	; (80025bc <ServiceMotor+0x12c>)
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3304      	adds	r3, #4
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	eef1 7a67 	vneg.f32	s15, s15
 80024da:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80025c0 <ServiceMotor+0x130>
 80024de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80025c4 <ServiceMotor+0x134>
 80024e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <ServiceMotor+0x128>)
 80024ec:	edc3 7a01 	vstr	s15, [r3, #4]
		CM_AnkleJoint.MotorReadData.speed = -MotorRxData[deviceIndex].speed / ANKLE_GEAR_RATIO * RAD_TO_DEG;
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	4932      	ldr	r1, [pc, #200]	; (80025bc <ServiceMotor+0x12c>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	3308      	adds	r3, #8
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eef1 7a67 	vneg.f32	s15, s15
 8002508:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80025c0 <ServiceMotor+0x130>
 800250c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002510:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80025c4 <ServiceMotor+0x134>
 8002514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <ServiceMotor+0x128>)
 800251a:	edc3 7a02 	vstr	s15, [r3, #8]
		CM_AnkleJoint.MotorReadData.torque = -MotorRxData[deviceIndex].torque * ANKLE_GEAR_RATIO ;
 800251e:	79fa      	ldrb	r2, [r7, #7]
 8002520:	4926      	ldr	r1, [pc, #152]	; (80025bc <ServiceMotor+0x12c>)
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	330c      	adds	r3, #12
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	eef1 7a67 	vneg.f32	s15, s15
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <ServiceMotor+0x128>)
 8002538:	edc3 7a03 	vstr	s15, [r3, #12]

		if((testProgram == None) || (testProgram == ImpedanceControl))
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <ServiceMotor+0x138>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <ServiceMotor+0xbc>
 8002544:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <ServiceMotor+0x138>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d123      	bne.n	8002594 <ServiceMotor+0x104>
		{
			MotorTxData.position = -CM_AnkleJoint.ProsCtrl.position * ANKLE_GEAR_RATIO * DEG_TO_RAD;
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <ServiceMotor+0x128>)
 800254e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002552:	eef1 7a67 	vneg.f32	s15, s15
 8002556:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80025c4 <ServiceMotor+0x134>
 800255a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800255e:	eddf 6a18 	vldr	s13, [pc, #96]	; 80025c0 <ServiceMotor+0x130>
 8002562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002566:	4b19      	ldr	r3, [pc, #100]	; (80025cc <ServiceMotor+0x13c>)
 8002568:	edc3 7a02 	vstr	s15, [r3, #8]
			MotorTxData.kd = CM_AnkleJoint.ProsCtrl.kd;
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <ServiceMotor+0x128>)
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	4a16      	ldr	r2, [pc, #88]	; (80025cc <ServiceMotor+0x13c>)
 8002572:	6013      	str	r3, [r2, #0]
			MotorTxData.kp = CM_AnkleJoint.ProsCtrl.kp;
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <ServiceMotor+0x128>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <ServiceMotor+0x13c>)
 800257a:	6053      	str	r3, [r2, #4]

			if(AKxx_x_WriteMotor(deviceIndex, &MotorTxData))
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	4913      	ldr	r1, [pc, #76]	; (80025cc <ServiceMotor+0x13c>)
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fce5 	bl	8002f50 <AKxx_x_WriteMotor>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <ServiceMotor+0x11a>
				ErrorHandler(AnkleMotorError);
 800258c:	2002      	movs	r0, #2
 800258e:	f7ff fb97 	bl	8001cc0 <ErrorHandler>
			if(AKxx_x_WriteMotor(deviceIndex, &MotorTxData))
 8002592:	e00a      	b.n	80025aa <ServiceMotor+0x11a>
		}
		else
			if(AKxx_x_EnterMotorCtrlMode(deviceIndex))
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fcf8 	bl	8002f8c <AKxx_x_EnterMotorCtrlMode>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <ServiceMotor+0x11a>
				ErrorHandler(AnkleMotorError);
 80025a2:	2002      	movs	r0, #2
 80025a4:	f7ff fb8c 	bl	8001cc0 <ErrorHandler>
	}
}
 80025a8:	e7ff      	b.n	80025aa <ServiceMotor+0x11a>
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000001 	.word	0x20000001
 80025b8:	20000100 	.word	0x20000100
 80025bc:	200000bc 	.word	0x200000bc
 80025c0:	43340000 	.word	0x43340000
 80025c4:	40490ff9 	.word	0x40490ff9
 80025c8:	200000fa 	.word	0x200000fa
 80025cc:	200000e4 	.word	0x200000e4

080025d0 <RunTestProgram>:

static void RunTestProgram(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	switch(testProgram)
 80025d4:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <RunTestProgram+0xb8>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d852      	bhi.n	8002682 <RunTestProgram+0xb2>
 80025dc:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <RunTestProgram+0x14>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	0800267d 	.word	0x0800267d
 80025e8:	0800267d 	.word	0x0800267d
 80025ec:	080025f5 	.word	0x080025f5
 80025f0:	0800267d 	.word	0x0800267d

	case ReadOnly:
		break;

	case ZeroMotorPosition:
		if(isFirst)
 80025f4:	4b25      	ldr	r3, [pc, #148]	; (800268c <RunTestProgram+0xbc>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d041      	beq.n	8002680 <RunTestProgram+0xb0>
		{
			if(HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80025fc:	2112      	movs	r1, #18
 80025fe:	4824      	ldr	r0, [pc, #144]	; (8002690 <RunTestProgram+0xc0>)
 8002600:	f004 fbf9 	bl	8006df6 <HAL_CAN_DeactivateNotification>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <RunTestProgram+0x40>
				ErrorHandler(CAN_Error);
 800260a:	2003      	movs	r0, #3
 800260c:	f7ff fb58 	bl	8001cc0 <ErrorHandler>

			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002610:	4b20      	ldr	r3, [pc, #128]	; (8002694 <RunTestProgram+0xc4>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <RunTestProgram+0x50>
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <RunTestProgram+0xc4>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d111      	bne.n	8002644 <RunTestProgram+0x74>
			{
				if(AKxx_x_ZeroMotorPosition(AnkleIndex))
 8002620:	2000      	movs	r0, #0
 8002622:	f000 fd1d 	bl	8003060 <AKxx_x_ZeroMotorPosition>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <RunTestProgram+0x62>
					ErrorHandler(AnkleMotorError);
 800262c:	2002      	movs	r0, #2
 800262e:	f7ff fb47 	bl	8001cc0 <ErrorHandler>
				if(AKxx_x_PollMotorReadWithTimeout(&MotorRxData[AnkleIndex]))
 8002632:	4819      	ldr	r0, [pc, #100]	; (8002698 <RunTestProgram+0xc8>)
 8002634:	f000 fd62 	bl	80030fc <AKxx_x_PollMotorReadWithTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <RunTestProgram+0x74>
					ErrorHandler(AnkleMotorError);
 800263e:	2002      	movs	r0, #2
 8002640:	f7ff fb3e 	bl	8001cc0 <ErrorHandler>
			}

			if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8002644:	2112      	movs	r1, #18
 8002646:	4812      	ldr	r0, [pc, #72]	; (8002690 <RunTestProgram+0xc0>)
 8002648:	f004 fbaf 	bl	8006daa <HAL_CAN_ActivateNotification>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <RunTestProgram+0x88>
				ErrorHandler(CAN_Error);
 8002652:	2003      	movs	r0, #3
 8002654:	f7ff fb34 	bl	8001cc0 <ErrorHandler>

			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002658:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <RunTestProgram+0xc4>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <RunTestProgram+0x98>
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <RunTestProgram+0xc4>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d10b      	bne.n	8002680 <RunTestProgram+0xb0>
				if(AKxx_x_EnterMotorCtrlMode(AnkleIndex))
 8002668:	2000      	movs	r0, #0
 800266a:	f000 fc8f 	bl	8002f8c <AKxx_x_EnterMotorCtrlMode>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <RunTestProgram+0xb0>
					ErrorHandler(AnkleMotorError);
 8002674:	2002      	movs	r0, #2
 8002676:	f7ff fb23 	bl	8001cc0 <ErrorHandler>
		}

		break;
 800267a:	e001      	b.n	8002680 <RunTestProgram+0xb0>
		break;
 800267c:	bf00      	nop
 800267e:	e000      	b.n	8002682 <RunTestProgram+0xb2>
		break;
 8002680:	bf00      	nop

	case ImpedanceControl:
		break;
	}
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200000fa 	.word	0x200000fa
 800268c:	20000000 	.word	0x20000000
 8002690:	20000090 	.word	0x20000090
 8002694:	200000f8 	.word	0x200000f8
 8002698:	200000bc 	.word	0x200000bc

0800269c <ActivateLED>:

static void ActivateLED(LED_Color_e color)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
	if(color == Blue)
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10c      	bne.n	80026c6 <ActivateLED+0x2a>
	{
		LL_GPIO_ResetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80026ac:	2101      	movs	r1, #1
 80026ae:	4816      	ldr	r0, [pc, #88]	; (8002708 <ActivateLED+0x6c>)
 80026b0:	f7ff fa05 	bl	8001abe <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80026b4:	2102      	movs	r1, #2
 80026b6:	4814      	ldr	r0, [pc, #80]	; (8002708 <ActivateLED+0x6c>)
 80026b8:	f7ff f9f3 	bl	8001aa2 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80026bc:	2104      	movs	r1, #4
 80026be:	4812      	ldr	r0, [pc, #72]	; (8002708 <ActivateLED+0x6c>)
 80026c0:	f7ff f9ef 	bl	8001aa2 <LL_GPIO_SetOutputPin>
	{
		LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
		LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
	}
}
 80026c4:	e01b      	b.n	80026fe <ActivateLED+0x62>
	else if(color == Green)
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d10c      	bne.n	80026e6 <ActivateLED+0x4a>
		LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80026cc:	2101      	movs	r1, #1
 80026ce:	480e      	ldr	r0, [pc, #56]	; (8002708 <ActivateLED+0x6c>)
 80026d0:	f7ff f9e7 	bl	8001aa2 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80026d4:	2102      	movs	r1, #2
 80026d6:	480c      	ldr	r0, [pc, #48]	; (8002708 <ActivateLED+0x6c>)
 80026d8:	f7ff f9f1 	bl	8001abe <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80026dc:	2104      	movs	r1, #4
 80026de:	480a      	ldr	r0, [pc, #40]	; (8002708 <ActivateLED+0x6c>)
 80026e0:	f7ff f9df 	bl	8001aa2 <LL_GPIO_SetOutputPin>
}
 80026e4:	e00b      	b.n	80026fe <ActivateLED+0x62>
		LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80026e6:	2101      	movs	r1, #1
 80026e8:	4807      	ldr	r0, [pc, #28]	; (8002708 <ActivateLED+0x6c>)
 80026ea:	f7ff f9da 	bl	8001aa2 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80026ee:	2102      	movs	r1, #2
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <ActivateLED+0x6c>)
 80026f2:	f7ff f9d6 	bl	8001aa2 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 80026f6:	2104      	movs	r1, #4
 80026f8:	4803      	ldr	r0, [pc, #12]	; (8002708 <ActivateLED+0x6c>)
 80026fa:	f7ff f9e0 	bl	8001abe <LL_GPIO_ResetOutputPin>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	48000400 	.word	0x48000400

0800270c <HAL_CAN_RxFifo0MsgPendingCallback>:
/*******************************************************************************
* CALLBACKS
*******************************************************************************/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800270c:	b5b0      	push	{r4, r5, r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	AKxx_x_ReadData_t temp;
	if(AKxx_x_ReadMotor(CAN_RX_FIFO0, &temp))
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	4619      	mov	r1, r3
 800271a:	2000      	movs	r0, #0
 800271c:	f000 fc0a 	bl	8002f34 <AKxx_x_ReadMotor>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		ErrorHandler(MotorReadError);
 8002726:	2006      	movs	r0, #6
 8002728:	f7ff faca 	bl	8001cc0 <ErrorHandler>

	if(temp.canId == AnkleMotorCAN_ID)
 800272c:	7b3b      	ldrb	r3, [r7, #12]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10c      	bne.n	800274c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
	{
		CM_AnkleJoint.motorDataReceived = 1;
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002734:	2201      	movs	r2, #1
 8002736:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		memcpy(&MotorRxData[AnkleIndex], &temp, sizeof(AKxx_x_ReadData_t));
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800273c:	461d      	mov	r5, r3
 800273e:	f107 040c 	add.w	r4, r7, #12
 8002742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	602b      	str	r3, [r5, #0]
	}
	else
		ErrorHandler(MotorReadError);
}
 800274a:	e002      	b.n	8002752 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		ErrorHandler(MotorReadError);
 800274c:	2006      	movs	r0, #6
 800274e:	f7ff fab7 	bl	8001cc0 <ErrorHandler>
}
 8002752:	bf00      	nop
 8002754:	3720      	adds	r7, #32
 8002756:	46bd      	mov	sp, r7
 8002758:	bdb0      	pop	{r4, r5, r7, pc}
 800275a:	bf00      	nop
 800275c:	20000100 	.word	0x20000100
 8002760:	200000bc 	.word	0x200000bc

08002764 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	AKxx_x_ReadData_t temp;
	if(AKxx_x_ReadMotor(CAN_RX_FIFO1, &temp))
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	4619      	mov	r1, r3
 8002772:	2001      	movs	r0, #1
 8002774:	f000 fbde 	bl	8002f34 <AKxx_x_ReadMotor>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		ErrorHandler(MotorReadError);
 800277e:	2006      	movs	r0, #6
 8002780:	f7ff fa9e 	bl	8001cc0 <ErrorHandler>

	if(temp.canId == KneeMotorCAN_ID)
 8002784:	7b3b      	ldrb	r3, [r7, #12]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d002      	beq.n	8002790 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
	{
//		CM_AnkleJoint.motorDataReceived = 1;
//		memcpy(&MotorRxData[AnkleIndex], &temp, sizeof(AKxx_x_ReadData_t));
	}
	else
		ErrorHandler(MotorReadError);
 800278a:	2006      	movs	r0, #6
 800278c:	f7ff fa98 	bl	8001cc0 <ErrorHandler>
}
 8002790:	bf00      	nop
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <MX_SPI1_Init+0x74>)
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <MX_SPI1_Init+0x78>)
 80027a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <MX_SPI1_Init+0x74>)
 80027a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <MX_SPI1_Init+0x74>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <MX_SPI1_Init+0x74>)
 80027b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027b8:	4b14      	ldr	r3, [pc, #80]	; (800280c <MX_SPI1_Init+0x74>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027be:	4b13      	ldr	r3, [pc, #76]	; (800280c <MX_SPI1_Init+0x74>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <MX_SPI1_Init+0x74>)
 80027c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <MX_SPI1_Init+0x74>)
 80027ce:	2220      	movs	r2, #32
 80027d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <MX_SPI1_Init+0x74>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <MX_SPI1_Init+0x74>)
 80027da:	2200      	movs	r2, #0
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <MX_SPI1_Init+0x74>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <MX_SPI1_Init+0x74>)
 80027e6:	2207      	movs	r2, #7
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <MX_SPI1_Init+0x74>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <MX_SPI1_Init+0x74>)
 80027f2:	2208      	movs	r2, #8
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <MX_SPI1_Init+0x74>)
 80027f8:	f005 f99c 	bl	8007b34 <HAL_SPI_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002802:	f7ff f915 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200001f4 	.word	0x200001f4
 8002810:	40013000 	.word	0x40013000

08002814 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_SPI_MspInit+0x8c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d130      	bne.n	8002898 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_SPI_MspInit+0x90>)
 8002838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283a:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <HAL_SPI_MspInit+0x90>)
 800283c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002840:	6613      	str	r3, [r2, #96]	; 0x60
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_SPI_MspInit+0x90>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_SPI_MspInit+0x90>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <HAL_SPI_MspInit+0x90>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_SPI_MspInit+0x90>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8002866:	23e0      	movs	r3, #224	; 0xe0
 8002868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002876:	2305      	movs	r3, #5
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4619      	mov	r1, r3
 8002880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002884:	f004 fe88 	bl	8007598 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	2023      	movs	r0, #35	; 0x23
 800288e:	f004 fdfe 	bl	800748e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002892:	2023      	movs	r0, #35	; 0x23
 8002894:	f004 fe17 	bl	80074c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	; 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40013000 	.word	0x40013000
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_SPI_MspDeInit+0x38>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10d      	bne.n	80028d6 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_SPI_MspDeInit+0x3c>)
 80028bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_SPI_MspDeInit+0x3c>)
 80028c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028c4:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, IMU_SCL_Pin|IMU_MISO_Pin|IMU_MOSI_Pin);
 80028c6:	21e0      	movs	r1, #224	; 0xe0
 80028c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028cc:	f005 f80e 	bl	80078ec <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80028d0:	2023      	movs	r0, #35	; 0x23
 80028d2:	f004 fe06 	bl	80074e2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40013000 	.word	0x40013000
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_MspInit+0x44>)
 80028f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f2:	4a0e      	ldr	r2, [pc, #56]	; (800292c <HAL_MspInit+0x44>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6613      	str	r3, [r2, #96]	; 0x60
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <HAL_MspInit+0x44>)
 80028fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_MspInit+0x44>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_MspInit+0x44>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002910:	6593      	str	r3, [r2, #88]	; 0x58
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_MspInit+0x44>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000

08002930 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f043 0202 	orr.w	r2, r3, #2
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	605a      	str	r2, [r3, #4]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b02      	cmp	r3, #2
 8002962:	d101      	bne.n	8002968 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800297a:	e7fe      	b.n	800297a <NMI_Handler+0x4>

0800297c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <HardFault_Handler+0x4>

08002982 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <MemManage_Handler+0x4>

08002988 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <BusFault_Handler+0x4>

0800298e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <UsageFault_Handler+0x4>

08002994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c2:	f003 fd9b 	bl	80064fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <CAN1_RX0_IRQHandler+0x10>)
 80029d2:	f004 fa37 	bl	8006e44 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000090 	.word	0x20000090

080029e0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <CAN1_RX1_IRQHandler+0x10>)
 80029e6:	f004 fa2d 	bl	8006e44 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000090 	.word	0x20000090

080029f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ANKLE_IMU_INT_Pin);
 80029f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029fc:	f005 f882 	bl	8007b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <TIM2_IRQHandler+0x10>)
 8002a0a:	f006 f8b1 	bl	8008b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000258 	.word	0x20000258

08002a18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <SPI1_IRQHandler+0x10>)
 8002a1e:	f005 fc17 	bl	8008250 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200001f4 	.word	0x200001f4

08002a2c <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0

/******************************************************************************
* USER ADDED LPTIM2_IRQHANDLER
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8002a30:	4806      	ldr	r0, [pc, #24]	; (8002a4c <LPTIM2_IRQHandler+0x20>)
 8002a32:	f7ff ff8d 	bl	8002950 <LL_LPTIM_IsActiveFlag_ARRM>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d105      	bne.n	8002a48 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <LPTIM2_IRQHandler+0x24>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 8002a42:	4802      	ldr	r0, [pc, #8]	; (8002a4c <LPTIM2_IRQHandler+0x20>)
 8002a44:	f7ff ff74 	bl	8002930 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40009400 	.word	0x40009400
 8002a50:	200000b8 	.word	0x200000b8

08002a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <SystemInit+0x20>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <SystemInit+0x20>)
 8002a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7e:	f107 0310 	add.w	r3, r7, #16
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <MX_TIM2_Init+0x98>)
 8002a98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <MX_TIM2_Init+0x98>)
 8002aa0:	224f      	movs	r2, #79	; 0x4f
 8002aa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <MX_TIM2_Init+0x98>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <MX_TIM2_Init+0x98>)
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <MX_TIM2_Init+0x98>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab8:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <MX_TIM2_Init+0x98>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002abe:	4814      	ldr	r0, [pc, #80]	; (8002b10 <MX_TIM2_Init+0x98>)
 8002ac0:	f005 ff96 	bl	80089f0 <HAL_TIM_Base_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002aca:	f7fe ffb1 	bl	8001a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	4619      	mov	r1, r3
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <MX_TIM2_Init+0x98>)
 8002adc:	f006 f967 	bl	8008dae <HAL_TIM_ConfigClockSource>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002ae6:	f7fe ffa3 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4806      	ldr	r0, [pc, #24]	; (8002b10 <MX_TIM2_Init+0x98>)
 8002af8:	f006 fb88 	bl	800920c <HAL_TIMEx_MasterConfigSynchronization>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002b02:	f7fe ff95 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000258 	.word	0x20000258

08002b14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d113      	bne.n	8002b4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_TIM_Base_MspInit+0x44>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_TIM_Base_MspInit+0x44>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6593      	str	r3, [r2, #88]	; 0x58
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_TIM_Base_MspInit+0x44>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2102      	movs	r1, #2
 8002b42:	201c      	movs	r0, #28
 8002b44:	f004 fca3 	bl	800748e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b48:	201c      	movs	r0, #28
 8002b4a:	f004 fcbc 	bl	80074c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	00000000 	.word	0x00000000

08002b60 <QuaternionsToYPR>:

	return globalAngle;
}

void QuaternionsToYPR(float r, float i, float j, float k, float *yaw, float *pitch, float *roll)
{
 8002b60:	b5b0      	push	{r4, r5, r7, lr}
 8002b62:	b08e      	sub	sp, #56	; 0x38
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	ed87 0a07 	vstr	s0, [r7, #28]
 8002b6a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002b6e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002b72:	edc7 1a04 	vstr	s3, [r7, #16]
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
	float siny_cosp = 2 * (r * k + i * j);
 8002b7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b88:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b9c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float cosy_cosp = 1 - 2 * (j * j + k * k);
 8002ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ba4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ba8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	*yaw = atan2(siny_cosp, cosy_cosp);
 8002bc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bc6:	f7fd fc63 	bl	8000490 <__aeabi_f2d>
 8002bca:	4604      	mov	r4, r0
 8002bcc:	460d      	mov	r5, r1
 8002bce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd0:	f7fd fc5e 	bl	8000490 <__aeabi_f2d>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	ec43 2b11 	vmov	d1, r2, r3
 8002bdc:	ec45 4b10 	vmov	d0, r4, r5
 8002be0:	f007 f84b 	bl	8009c7a <atan2>
 8002be4:	ec53 2b10 	vmov	r2, r3, d0
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7fd ff58 	bl	8000aa0 <__aeabi_d2f>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	601a      	str	r2, [r3, #0]

	float sinp = sqrt(1 + 2 * (r * j - i * k));
 8002bf6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c02:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c06:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c1e:	ee17 0a90 	vmov	r0, s15
 8002c22:	f7fd fc35 	bl	8000490 <__aeabi_f2d>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	ec43 2b10 	vmov	d0, r2, r3
 8002c2e:	f007 f826 	bl	8009c7e <sqrt>
 8002c32:	ec53 2b10 	vmov	r2, r3, d0
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7fd ff31 	bl	8000aa0 <__aeabi_d2f>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	float cosp = sqrt(1 - 2 * (r * j - i * k));
 8002c42:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6a:	ee17 0a90 	vmov	r0, s15
 8002c6e:	f7fd fc0f 	bl	8000490 <__aeabi_f2d>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	ec43 2b10 	vmov	d0, r2, r3
 8002c7a:	f007 f800 	bl	8009c7e <sqrt>
 8002c7e:	ec53 2b10 	vmov	r2, r3, d0
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f7fd ff0b 	bl	8000aa0 <__aeabi_d2f>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    *pitch = 2 * atan2(sinp, cosp) - M_PI / 2;
 8002c8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c90:	f7fd fbfe 	bl	8000490 <__aeabi_f2d>
 8002c94:	4604      	mov	r4, r0
 8002c96:	460d      	mov	r5, r1
 8002c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c9a:	f7fd fbf9 	bl	8000490 <__aeabi_f2d>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	ec43 2b11 	vmov	d1, r2, r3
 8002ca6:	ec45 4b10 	vmov	d0, r4, r5
 8002caa:	f006 ffe6 	bl	8009c7a <atan2>
 8002cae:	ec51 0b10 	vmov	r0, r1, d0
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	f7fd fa8d 	bl	80001d4 <__adddf3>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	a327      	add	r3, pc, #156	; (adr r3, 8002d60 <QuaternionsToYPR+0x200>)
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f7fd fa82 	bl	80001d0 <__aeabi_dsub>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f7fd fee4 	bl	8000aa0 <__aeabi_d2f>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	601a      	str	r2, [r3, #0]

    float sinr_cosp = 2 * (r * i + j * k);
 8002cde:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ce2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cea:	edd7 6a05 	vldr	s13, [r7, #20]
 8002cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cfe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosr_cosp = 1 - 2 * (i * i + j * j);
 8002d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d06:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002d0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d22:	edc7 7a08 	vstr	s15, [r7, #32]
    *roll = atan2(sinr_cosp, cosr_cosp);
 8002d26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d28:	f7fd fbb2 	bl	8000490 <__aeabi_f2d>
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	460d      	mov	r5, r1
 8002d30:	6a38      	ldr	r0, [r7, #32]
 8002d32:	f7fd fbad 	bl	8000490 <__aeabi_f2d>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	ec43 2b11 	vmov	d1, r2, r3
 8002d3e:	ec45 4b10 	vmov	d0, r4, r5
 8002d42:	f006 ff9a 	bl	8009c7a <atan2>
 8002d46:	ec53 2b10 	vmov	r2, r3, d0
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f7fd fea7 	bl	8000aa0 <__aeabi_d2f>
 8002d52:	4602      	mov	r2, r0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	601a      	str	r2, [r3, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	3738      	adds	r7, #56	; 0x38
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d60:	54442d18 	.word	0x54442d18
 8002d64:	3ff921fb 	.word	0x3ff921fb

08002d68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d6c:	f7ff fe72 	bl	8002a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d70:	480c      	ldr	r0, [pc, #48]	; (8002da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d72:	490d      	ldr	r1, [pc, #52]	; (8002da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <LoopForever+0xe>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d88:	4c0a      	ldr	r4, [pc, #40]	; (8002db4 <LoopForever+0x16>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d96:	f006 fd8d 	bl	80098b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d9a:	f7fe fd3b 	bl	8001814 <main>

08002d9e <LoopForever>:

LoopForever:
    b LoopForever
 8002d9e:	e7fe      	b.n	8002d9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002da0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002dac:	0800a530 	.word	0x0800a530
  ldr r2, =_sbss
 8002db0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002db4:	20001264 	.word	0x20001264

08002db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002db8:	e7fe      	b.n	8002db8 <ADC1_2_IRQHandler>
	...

08002dbc <AKxx_x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

AKxx_x_Error_e AKxx_x_Init(uint8_t deviceIndex, AKxx_x_Init_t *Device_Init)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
	if(Device[deviceIndex].isInit)	// Can only init a device once
 8002dc8:	79fa      	ldrb	r2, [r7, #7]
 8002dca:	4952      	ldr	r1, [pc, #328]	; (8002f14 <AKxx_x_Init+0x158>)
 8002dcc:	4613      	mov	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3314      	adds	r3, #20
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d000      	beq.n	8002de0 <AKxx_x_Init+0x24>
		while(1);
 8002dde:	e7fe      	b.n	8002dde <AKxx_x_Init+0x22>
	if(deviceIndex >= AKXX_X_NUMBER_OF_DEVICES)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d900      	bls.n	8002de8 <AKxx_x_Init+0x2c>
		while(1);
 8002de6:	e7fe      	b.n	8002de6 <AKxx_x_Init+0x2a>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(AKxx_x_Init_t));
 8002de8:	79fa      	ldrb	r2, [r7, #7]
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4a48      	ldr	r2, [pc, #288]	; (8002f14 <AKxx_x_Init+0x158>)
 8002df4:	4413      	add	r3, r2
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	601a      	str	r2, [r3, #0]

	if(HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING))	// Polling is used for initialization
 8002dfc:	2112      	movs	r1, #18
 8002dfe:	4846      	ldr	r0, [pc, #280]	; (8002f18 <AKxx_x_Init+0x15c>)
 8002e00:	f003 fff9 	bl	8006df6 <HAL_CAN_DeactivateNotification>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <AKxx_x_Init+0x52>
		return AKxx_x_InitError;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e07d      	b.n	8002f0a <AKxx_x_Init+0x14e>

	if(EnterMotorCtrlMode(deviceIndex))
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fa43 	bl	800329c <EnterMotorCtrlMode>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <AKxx_x_Init+0x64>
		return AKxx_x_InitError;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e074      	b.n	8002f0a <AKxx_x_Init+0x14e>

	AKxx_x_ReadData_t RxData_Float;
	if(AKxx_x_PollMotorReadWithTimeout(&RxData_Float))
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f969 	bl	80030fc <AKxx_x_PollMotorReadWithTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <AKxx_x_Init+0x78>
		return AKxx_x_InitError;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e06a      	b.n	8002f0a <AKxx_x_Init+0x14e>

	switch(Device[deviceIndex].InitVals.Motor)
 8002e34:	79fa      	ldrb	r2, [r7, #7]
 8002e36:	4937      	ldr	r1, [pc, #220]	; (8002f14 <AKxx_x_Init+0x158>)
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	440b      	add	r3, r1
 8002e42:	3302      	adds	r3, #2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <AKxx_x_Init+0x94>
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d029      	beq.n	8002ea2 <AKxx_x_Init+0xe6>
 8002e4e:	e051      	b.n	8002ef4 <AKxx_x_Init+0x138>
	{
	case AK70_10:
		Device[deviceIndex].speedMax = 50.0f;
 8002e50:	79fa      	ldrb	r2, [r7, #7]
 8002e52:	4930      	ldr	r1, [pc, #192]	; (8002f14 <AKxx_x_Init+0x158>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4a2e      	ldr	r2, [pc, #184]	; (8002f1c <AKxx_x_Init+0x160>)
 8002e62:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].speedMin = -50.0f;
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	492b      	ldr	r1, [pc, #172]	; (8002f14 <AKxx_x_Init+0x158>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	3308      	adds	r3, #8
 8002e74:	4a2a      	ldr	r2, [pc, #168]	; (8002f20 <AKxx_x_Init+0x164>)
 8002e76:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMax = 25.0f;
 8002e78:	79fa      	ldrb	r2, [r7, #7]
 8002e7a:	4926      	ldr	r1, [pc, #152]	; (8002f14 <AKxx_x_Init+0x158>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	330c      	adds	r3, #12
 8002e88:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <AKxx_x_Init+0x168>)
 8002e8a:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMin = -25.0f;
 8002e8c:	79fa      	ldrb	r2, [r7, #7]
 8002e8e:	4921      	ldr	r1, [pc, #132]	; (8002f14 <AKxx_x_Init+0x158>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	3310      	adds	r3, #16
 8002e9c:	4a22      	ldr	r2, [pc, #136]	; (8002f28 <AKxx_x_Init+0x16c>)
 8002e9e:	601a      	str	r2, [r3, #0]
		break;
 8002ea0:	e028      	b.n	8002ef4 <AKxx_x_Init+0x138>
	case AK80_9:
		Device[deviceIndex].speedMax = 50.0f;
 8002ea2:	79fa      	ldrb	r2, [r7, #7]
 8002ea4:	491b      	ldr	r1, [pc, #108]	; (8002f14 <AKxx_x_Init+0x158>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <AKxx_x_Init+0x160>)
 8002eb4:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].speedMin = -50.0f;
 8002eb6:	79fa      	ldrb	r2, [r7, #7]
 8002eb8:	4916      	ldr	r1, [pc, #88]	; (8002f14 <AKxx_x_Init+0x158>)
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <AKxx_x_Init+0x164>)
 8002ec8:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMax = 18.0f;
 8002eca:	79fa      	ldrb	r2, [r7, #7]
 8002ecc:	4911      	ldr	r1, [pc, #68]	; (8002f14 <AKxx_x_Init+0x158>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	330c      	adds	r3, #12
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <AKxx_x_Init+0x170>)
 8002edc:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMin = -18.0f;
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	490c      	ldr	r1, [pc, #48]	; (8002f14 <AKxx_x_Init+0x158>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	3310      	adds	r3, #16
 8002eee:	4a10      	ldr	r2, [pc, #64]	; (8002f30 <AKxx_x_Init+0x174>)
 8002ef0:	601a      	str	r2, [r3, #0]
		break;
 8002ef2:	bf00      	nop
	}

	Device[deviceIndex].isInit = 1;
 8002ef4:	79fa      	ldrb	r2, [r7, #7]
 8002ef6:	4907      	ldr	r1, [pc, #28]	; (8002f14 <AKxx_x_Init+0x158>)
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	440b      	add	r3, r1
 8002f02:	3314      	adds	r3, #20
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]

	return AKxx_x_NoError;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200002a4 	.word	0x200002a4
 8002f18:	20000090 	.word	0x20000090
 8002f1c:	42480000 	.word	0x42480000
 8002f20:	c2480000 	.word	0xc2480000
 8002f24:	41c80000 	.word	0x41c80000
 8002f28:	c1c80000 	.word	0xc1c80000
 8002f2c:	41900000 	.word	0x41900000
 8002f30:	c1900000 	.word	0xc1900000

08002f34 <AKxx_x_ReadMotor>:

AKxx_x_Error_e AKxx_x_ReadMotor(uint32_t rxFifo, AKxx_x_ReadData_t *RxData_Float)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
	return ReadData(rxFifo, RxData_Float);
 8002f3e:	6839      	ldr	r1, [r7, #0]
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f949 	bl	80031d8 <ReadData>
 8002f46:	4603      	mov	r3, r0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <AKxx_x_WriteMotor>:

AKxx_x_Error_e AKxx_x_WriteMotor(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8002f5c:	79fa      	ldrb	r2, [r7, #7]
 8002f5e:	490a      	ldr	r1, [pc, #40]	; (8002f88 <AKxx_x_WriteMotor+0x38>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	3314      	adds	r3, #20
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d100      	bne.n	8002f74 <AKxx_x_WriteMotor+0x24>
		while(1);
 8002f72:	e7fe      	b.n	8002f72 <AKxx_x_WriteMotor+0x22>

	return WriteData(deviceIndex, TxData_Float);
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	6839      	ldr	r1, [r7, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f94d 	bl	8003218 <WriteData>
 8002f7e:	4603      	mov	r3, r0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200002a4 	.word	0x200002a4

08002f8c <AKxx_x_EnterMotorCtrlMode>:

AKxx_x_Error_e AKxx_x_EnterMotorCtrlMode(uint8_t deviceIndex)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8002f96:	79fa      	ldrb	r2, [r7, #7]
 8002f98:	4909      	ldr	r1, [pc, #36]	; (8002fc0 <AKxx_x_EnterMotorCtrlMode+0x34>)
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3314      	adds	r3, #20
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d100      	bne.n	8002fae <AKxx_x_EnterMotorCtrlMode+0x22>
		while(1);
 8002fac:	e7fe      	b.n	8002fac <AKxx_x_EnterMotorCtrlMode+0x20>

	return EnterMotorCtrlMode(deviceIndex);
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f973 	bl	800329c <EnterMotorCtrlMode>
 8002fb6:	4603      	mov	r3, r0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	200002a4 	.word	0x200002a4

08002fc4 <AKxx_x_ExitMotorCtrlMode>:

AKxx_x_Error_e AKxx_x_ExitMotorCtrlMode(uint8_t deviceIndex)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08c      	sub	sp, #48	; 0x30
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8002fce:	79fa      	ldrb	r2, [r7, #7]
 8002fd0:	4920      	ldr	r1, [pc, #128]	; (8003054 <AKxx_x_ExitMotorCtrlMode+0x90>)
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	440b      	add	r3, r1
 8002fdc:	3314      	adds	r3, #20
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d100      	bne.n	8002fe6 <AKxx_x_ExitMotorCtrlMode+0x22>
		while(1);
 8002fe4:	e7fe      	b.n	8002fe4 <AKxx_x_ExitMotorCtrlMode+0x20>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 8002ff6:	79fa      	ldrb	r2, [r7, #7]
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <AKxx_x_ExitMotorCtrlMode+0x90>)
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFD};
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <AKxx_x_ExitMotorCtrlMode+0x94>)
 8003010:	f107 0310 	add.w	r3, r7, #16
 8003014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003018:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t txMailbox;
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, &txMailbox) != HAL_OK)
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	f107 0210 	add.w	r2, r7, #16
 8003024:	f107 0118 	add.w	r1, r7, #24
 8003028:	480c      	ldr	r0, [pc, #48]	; (800305c <AKxx_x_ExitMotorCtrlMode+0x98>)
 800302a:	f003 fc90 	bl	800694e <HAL_CAN_AddTxMessage>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <AKxx_x_ExitMotorCtrlMode+0x74>
		return AKxx_x_ExitMotorCtrlModeError;
 8003034:	2303      	movs	r3, #3
 8003036:	e009      	b.n	800304c <AKxx_x_ExitMotorCtrlMode+0x88>

	if(AKxx_x_PollTxMessagePendingWithTimeout(txMailbox)) //??
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f8a4 	bl	8003188 <AKxx_x_PollTxMessagePendingWithTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <AKxx_x_ExitMotorCtrlMode+0x86>
		return AKxx_x_ExitMotorCtrlModeError;
 8003046:	2303      	movs	r3, #3
 8003048:	e000      	b.n	800304c <AKxx_x_ExitMotorCtrlMode+0x88>

	return AKxx_x_NoError;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3730      	adds	r7, #48	; 0x30
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	200002a4 	.word	0x200002a4
 8003058:	08009fe8 	.word	0x08009fe8
 800305c:	20000090 	.word	0x20000090

08003060 <AKxx_x_ZeroMotorPosition>:

AKxx_x_Error_e AKxx_x_ZeroMotorPosition(uint8_t deviceIndex)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08c      	sub	sp, #48	; 0x30
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 800306a:	79fa      	ldrb	r2, [r7, #7]
 800306c:	4920      	ldr	r1, [pc, #128]	; (80030f0 <AKxx_x_ZeroMotorPosition+0x90>)
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3314      	adds	r3, #20
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d100      	bne.n	8003082 <AKxx_x_ZeroMotorPosition+0x22>
		while(1);
 8003080:	e7fe      	b.n	8003080 <AKxx_x_ZeroMotorPosition+0x20>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 8003082:	2308      	movs	r3, #8
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 8003092:	79fa      	ldrb	r2, [r7, #7]
 8003094:	4916      	ldr	r1, [pc, #88]	; (80030f0 <AKxx_x_ZeroMotorPosition+0x90>)
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFE};
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <AKxx_x_ZeroMotorPosition+0x94>)
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030b4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t txMailbox;
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, &txMailbox) != HAL_OK)
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	f107 0210 	add.w	r2, r7, #16
 80030c0:	f107 0118 	add.w	r1, r7, #24
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <AKxx_x_ZeroMotorPosition+0x98>)
 80030c6:	f003 fc42 	bl	800694e <HAL_CAN_AddTxMessage>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <AKxx_x_ZeroMotorPosition+0x74>
		return AKxx_x_ZeroMotorPositionError;
 80030d0:	2304      	movs	r3, #4
 80030d2:	e009      	b.n	80030e8 <AKxx_x_ZeroMotorPosition+0x88>

	if(AKxx_x_PollTxMessagePendingWithTimeout(txMailbox)) //??
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f856 	bl	8003188 <AKxx_x_PollTxMessagePendingWithTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <AKxx_x_ZeroMotorPosition+0x86>
		return AKxx_x_ZeroMotorPositionError;
 80030e2:	2304      	movs	r3, #4
 80030e4:	e000      	b.n	80030e8 <AKxx_x_ZeroMotorPosition+0x88>

	return AKxx_x_NoError;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3730      	adds	r7, #48	; 0x30
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	200002a4 	.word	0x200002a4
 80030f4:	08009ff0 	.word	0x08009ff0
 80030f8:	20000090 	.word	0x20000090

080030fc <AKxx_x_PollMotorReadWithTimeout>:

AKxx_x_Error_e AKxx_x_PollMotorReadWithTimeout(AKxx_x_ReadData_t *RxData_Float)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	uint8_t timeoutOccurred = 1;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
	uint32_t tickStart = HAL_GetTick();
 8003108:	f003 fa0c 	bl	8006524 <HAL_GetTick>
 800310c:	60b8      	str	r0, [r7, #8]
	while ((HAL_GetTick() - tickStart) < 10U)
 800310e:	e023      	b.n	8003158 <AKxx_x_PollMotorReadWithTimeout+0x5c>
	{
		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0))
 8003110:	2100      	movs	r1, #0
 8003112:	481c      	ldr	r0, [pc, #112]	; (8003184 <AKxx_x_PollMotorReadWithTimeout+0x88>)
 8003114:	f003 fe21 	bl	8006d5a <HAL_CAN_GetRxFifoFillLevel>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <AKxx_x_PollMotorReadWithTimeout+0x38>
		{
			timeoutOccurred = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
			if(ReadData(CAN_RX_FIFO0, RxData_Float))
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	2000      	movs	r0, #0
 8003126:	f000 f857 	bl	80031d8 <ReadData>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01b      	beq.n	8003168 <AKxx_x_PollMotorReadWithTimeout+0x6c>
				return AKxx_x_PollMotorReadWithTimeoutError;
 8003130:	2305      	movs	r3, #5
 8003132:	e022      	b.n	800317a <AKxx_x_PollMotorReadWithTimeout+0x7e>
			break;
		}
		else if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1))
 8003134:	2101      	movs	r1, #1
 8003136:	4813      	ldr	r0, [pc, #76]	; (8003184 <AKxx_x_PollMotorReadWithTimeout+0x88>)
 8003138:	f003 fe0f 	bl	8006d5a <HAL_CAN_GetRxFifoFillLevel>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <AKxx_x_PollMotorReadWithTimeout+0x5c>
		{
			timeoutOccurred = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]
			if(ReadData(CAN_RX_FIFO1, RxData_Float))
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	2001      	movs	r0, #1
 800314a:	f000 f845 	bl	80031d8 <ReadData>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <AKxx_x_PollMotorReadWithTimeout+0x70>
				return AKxx_x_PollMotorReadWithTimeoutError;
 8003154:	2305      	movs	r3, #5
 8003156:	e010      	b.n	800317a <AKxx_x_PollMotorReadWithTimeout+0x7e>
	while ((HAL_GetTick() - tickStart) < 10U)
 8003158:	f003 f9e4 	bl	8006524 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b09      	cmp	r3, #9
 8003164:	d9d4      	bls.n	8003110 <AKxx_x_PollMotorReadWithTimeout+0x14>
 8003166:	e002      	b.n	800316e <AKxx_x_PollMotorReadWithTimeout+0x72>
			break;
 8003168:	bf00      	nop
 800316a:	e000      	b.n	800316e <AKxx_x_PollMotorReadWithTimeout+0x72>
			break;
 800316c:	bf00      	nop
		}
	}

	if(timeoutOccurred)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <AKxx_x_PollMotorReadWithTimeout+0x7c>
		return AKxx_x_PollMotorReadWithTimeoutError;
 8003174:	2305      	movs	r3, #5
 8003176:	e000      	b.n	800317a <AKxx_x_PollMotorReadWithTimeout+0x7e>

	return AKxx_x_NoError;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000090 	.word	0x20000090

08003188 <AKxx_x_PollTxMessagePendingWithTimeout>:

AKxx_x_Error_e AKxx_x_PollTxMessagePendingWithTimeout(uint32_t txMailbox)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	uint8_t timeoutOccurred = 1;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
	uint32_t tickStart = HAL_GetTick();
 8003194:	f003 f9c6 	bl	8006524 <HAL_GetTick>
 8003198:	60b8      	str	r0, [r7, #8]
	while ((HAL_GetTick() - tickStart) < 10U)
 800319a:	e009      	b.n	80031b0 <AKxx_x_PollTxMessagePendingWithTimeout+0x28>
	{
		if(!HAL_CAN_IsTxMessagePending(&hcan1,txMailbox))
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	480d      	ldr	r0, [pc, #52]	; (80031d4 <AKxx_x_PollTxMessagePendingWithTimeout+0x4c>)
 80031a0:	f003 fca5 	bl	8006aee <HAL_CAN_IsTxMessagePending>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <AKxx_x_PollTxMessagePendingWithTimeout+0x28>
		{
			timeoutOccurred = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]
			break;
 80031ae:	e006      	b.n	80031be <AKxx_x_PollTxMessagePendingWithTimeout+0x36>
	while ((HAL_GetTick() - tickStart) < 10U)
 80031b0:	f003 f9b8 	bl	8006524 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	d9ee      	bls.n	800319c <AKxx_x_PollTxMessagePendingWithTimeout+0x14>
		}
	}

	if(timeoutOccurred)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <AKxx_x_PollTxMessagePendingWithTimeout+0x40>
		return AKxx_x_PollTxMessagePendingWithTimeoutError;
 80031c4:	2306      	movs	r3, #6
 80031c6:	e000      	b.n	80031ca <AKxx_x_PollTxMessagePendingWithTimeout+0x42>

	return AKxx_x_NoError;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000090 	.word	0x20000090

080031d8 <ReadData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static AKxx_x_Error_e ReadData(uint32_t rxFifo, AKxx_x_ReadData_t *RxData_Float)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08c      	sub	sp, #48	; 0x30
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rxData_uint[8];
	if(HAL_CAN_GetRxMessage(&hcan1, rxFifo, &RxHeader, rxData_uint) != HAL_OK)
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	f107 0214 	add.w	r2, r7, #20
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4809      	ldr	r0, [pc, #36]	; (8003214 <ReadData+0x3c>)
 80031ee:	f003 fca2 	bl	8006b36 <HAL_CAN_GetRxMessage>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <ReadData+0x24>
		return AKxx_x_ReadDataError;
 80031f8:	2307      	movs	r3, #7
 80031fa:	e006      	b.n	800320a <ReadData+0x32>

	UnpackData(rxData_uint, RxData_Float);
 80031fc:	f107 030c 	add.w	r3, r7, #12
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f948 	bl	8003498 <UnpackData>

	return AKxx_x_NoError;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3730      	adds	r7, #48	; 0x30
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000090 	.word	0x20000090

08003218 <WriteData>:

static AKxx_x_Error_e WriteData(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 8003224:	2308      	movs	r3, #8
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 800322c:	2300      	movs	r3, #0
 800322e:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8003230:	2300      	movs	r3, #0
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 8003234:	79fa      	ldrb	r2, [r7, #7]
 8003236:	4917      	ldr	r1, [pc, #92]	; (8003294 <WriteData+0x7c>)
 8003238:	4613      	mov	r3, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8003246:	2300      	movs	r3, #0
 8003248:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t txData_uint[8];
	PackData(deviceIndex, TxData_Float, txData_uint);
 800324c:	f107 0210 	add.w	r2, r7, #16
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	6839      	ldr	r1, [r7, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f863 	bl	8003320 <PackData>

	uint32_t txMailbox;
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, &txMailbox) != HAL_OK)
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	f107 0210 	add.w	r2, r7, #16
 8003262:	f107 0118 	add.w	r1, r7, #24
 8003266:	480c      	ldr	r0, [pc, #48]	; (8003298 <WriteData+0x80>)
 8003268:	f003 fb71 	bl	800694e <HAL_CAN_AddTxMessage>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <WriteData+0x5e>
		return AKxx_x_WriteDataError;
 8003272:	2308      	movs	r3, #8
 8003274:	e009      	b.n	800328a <WriteData+0x72>

	if(AKxx_x_PollTxMessagePendingWithTimeout(txMailbox)) //??
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff85 	bl	8003188 <AKxx_x_PollTxMessagePendingWithTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <WriteData+0x70>
		return AKxx_x_WriteDataError;
 8003284:	2308      	movs	r3, #8
 8003286:	e000      	b.n	800328a <WriteData+0x72>

	return AKxx_x_NoError;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3730      	adds	r7, #48	; 0x30
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	200002a4 	.word	0x200002a4
 8003298:	20000090 	.word	0x20000090

0800329c <EnterMotorCtrlMode>:

static AKxx_x_Error_e EnterMotorCtrlMode(uint8_t deviceIndex)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 80032a6:	2308      	movs	r3, #8
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 80032ae:	2300      	movs	r3, #0
 80032b0:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 80032b6:	79fa      	ldrb	r2, [r7, #7]
 80032b8:	4916      	ldr	r1, [pc, #88]	; (8003314 <EnterMotorCtrlMode+0x78>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFC};
 80032ce:	4a12      	ldr	r2, [pc, #72]	; (8003318 <EnterMotorCtrlMode+0x7c>)
 80032d0:	f107 0310 	add.w	r3, r7, #16
 80032d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032d8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t txMailbox;
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, &txMailbox) != HAL_OK)
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	f107 0210 	add.w	r2, r7, #16
 80032e4:	f107 0118 	add.w	r1, r7, #24
 80032e8:	480c      	ldr	r0, [pc, #48]	; (800331c <EnterMotorCtrlMode+0x80>)
 80032ea:	f003 fb30 	bl	800694e <HAL_CAN_AddTxMessage>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <EnterMotorCtrlMode+0x5c>
		return AKxx_x_EnterMotorCtrlModeError;
 80032f4:	2302      	movs	r3, #2
 80032f6:	e009      	b.n	800330c <EnterMotorCtrlMode+0x70>

	if(AKxx_x_PollTxMessagePendingWithTimeout(txMailbox)) //??
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff44 	bl	8003188 <AKxx_x_PollTxMessagePendingWithTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <EnterMotorCtrlMode+0x6e>
		return AKxx_x_EnterMotorCtrlModeError;
 8003306:	2302      	movs	r3, #2
 8003308:	e000      	b.n	800330c <EnterMotorCtrlMode+0x70>

	return AKxx_x_NoError;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3730      	adds	r7, #48	; 0x30
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200002a4 	.word	0x200002a4
 8003318:	08009ff8 	.word	0x08009ff8
 800331c:	20000090 	.word	0x20000090

08003320 <PackData>:

static void PackData(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float, uint8_t *txData_uint)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	73fb      	strb	r3, [r7, #15]
	uint16_t position = FloatToUint(TxData_Float->position, -12.5, 12.5, 16);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	edd3 7a02 	vldr	s15, [r3, #8]
 8003334:	2010      	movs	r0, #16
 8003336:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 800333a:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 800333e:	eeb0 0a67 	vmov.f32	s0, s15
 8003342:	f000 f9a1 	bl	8003688 <FloatToUint>
 8003346:	4603      	mov	r3, r0
 8003348:	83fb      	strh	r3, [r7, #30]
	uint16_t speed = FloatToUint(TxData_Float->speed, Device[deviceIndex].speedMin, Device[deviceIndex].speedMax, 12);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	494e      	ldr	r1, [pc, #312]	; (800348c <PackData+0x16c>)
 8003354:	4613      	mov	r3, r2
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	3308      	adds	r3, #8
 8003360:	ed93 7a00 	vldr	s14, [r3]
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	4949      	ldr	r1, [pc, #292]	; (800348c <PackData+0x16c>)
 8003368:	4613      	mov	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	3304      	adds	r3, #4
 8003374:	edd3 6a00 	vldr	s13, [r3]
 8003378:	200c      	movs	r0, #12
 800337a:	eeb0 1a66 	vmov.f32	s2, s13
 800337e:	eef0 0a47 	vmov.f32	s1, s14
 8003382:	eeb0 0a67 	vmov.f32	s0, s15
 8003386:	f000 f97f 	bl	8003688 <FloatToUint>
 800338a:	4603      	mov	r3, r0
 800338c:	83bb      	strh	r3, [r7, #28]
	uint16_t torque = FloatToUint(TxData_Float->torque, Device[deviceIndex].torqueMin, Device[deviceIndex].torqueMax, 12);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	edd3 7a04 	vldr	s15, [r3, #16]
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	493d      	ldr	r1, [pc, #244]	; (800348c <PackData+0x16c>)
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	3310      	adds	r3, #16
 80033a4:	ed93 7a00 	vldr	s14, [r3]
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	4938      	ldr	r1, [pc, #224]	; (800348c <PackData+0x16c>)
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	330c      	adds	r3, #12
 80033b8:	edd3 6a00 	vldr	s13, [r3]
 80033bc:	200c      	movs	r0, #12
 80033be:	eeb0 1a66 	vmov.f32	s2, s13
 80033c2:	eef0 0a47 	vmov.f32	s1, s14
 80033c6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ca:	f000 f95d 	bl	8003688 <FloatToUint>
 80033ce:	4603      	mov	r3, r0
 80033d0:	837b      	strh	r3, [r7, #26]
	uint16_t kd = FloatToUint(TxData_Float->kd, 0, 5, 12);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	200c      	movs	r0, #12
 80033da:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80033de:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8003490 <PackData+0x170>
 80033e2:	eeb0 0a67 	vmov.f32	s0, s15
 80033e6:	f000 f94f 	bl	8003688 <FloatToUint>
 80033ea:	4603      	mov	r3, r0
 80033ec:	833b      	strh	r3, [r7, #24]
	uint16_t kp = FloatToUint(TxData_Float->kp, 0, 500, 12);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f4:	200c      	movs	r0, #12
 80033f6:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8003494 <PackData+0x174>
 80033fa:	eddf 0a25 	vldr	s1, [pc, #148]	; 8003490 <PackData+0x170>
 80033fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003402:	f000 f941 	bl	8003688 <FloatToUint>
 8003406:	4603      	mov	r3, r0
 8003408:	82fb      	strh	r3, [r7, #22]

	txData_uint[0] = position >> 8;
 800340a:	8bfb      	ldrh	r3, [r7, #30]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	b29b      	uxth	r3, r3
 8003410:	b2da      	uxtb	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	701a      	strb	r2, [r3, #0]
	txData_uint[1] = position & 0xFF;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3301      	adds	r3, #1
 800341a:	8bfa      	ldrh	r2, [r7, #30]
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]
	txData_uint[2] = speed >> 4;
 8003420:	8bbb      	ldrh	r3, [r7, #28]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	b29a      	uxth	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3302      	adds	r3, #2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]
	txData_uint[3] = ((speed & 0x0F) << 4) | (kp >> 8);
 800342e:	8bbb      	ldrh	r3, [r7, #28]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	b25a      	sxtb	r2, r3
 8003434:	8afb      	ldrh	r3, [r7, #22]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	b29b      	uxth	r3, r3
 800343a:	b25b      	sxtb	r3, r3
 800343c:	4313      	orrs	r3, r2
 800343e:	b25a      	sxtb	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3303      	adds	r3, #3
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]
	txData_uint[4] = kp & 0xFF;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	8afa      	ldrh	r2, [r7, #22]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]
	txData_uint[5] = kd >> 4;
 8003452:	8b3b      	ldrh	r3, [r7, #24]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3305      	adds	r3, #5
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]
	txData_uint[6] = ((kd & 0x0F) << 4) | (torque >> 8);
 8003460:	8b3b      	ldrh	r3, [r7, #24]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	b25a      	sxtb	r2, r3
 8003466:	8b7b      	ldrh	r3, [r7, #26]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	b29b      	uxth	r3, r3
 800346c:	b25b      	sxtb	r3, r3
 800346e:	4313      	orrs	r3, r2
 8003470:	b25a      	sxtb	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3306      	adds	r3, #6
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]
	txData_uint[7] = torque & 0xFF;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3307      	adds	r3, #7
 800347e:	8b7a      	ldrh	r2, [r7, #26]
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	701a      	strb	r2, [r3, #0]
}
 8003484:	bf00      	nop
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	200002a4 	.word	0x200002a4
 8003490:	00000000 	.word	0x00000000
 8003494:	43fa0000 	.word	0x43fa0000

08003498 <UnpackData>:

static void UnpackData(uint8_t *rxData_uint, AKxx_x_ReadData_t *RxData_Float)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
	RxData_Float->canId = rxData_uint[0];
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	701a      	strb	r2, [r3, #0]

	uint16_t position = (rxData_uint[1] << 8) | rxData_uint[2];
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3301      	adds	r3, #1
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	b21a      	sxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3302      	adds	r3, #2
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	4313      	orrs	r3, r2
 80034be:	b21b      	sxth	r3, r3
 80034c0:	81bb      	strh	r3, [r7, #12]
	uint16_t speed = (rxData_uint[3] << 4) | (rxData_uint[4] >> 4);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3303      	adds	r3, #3
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	4313      	orrs	r3, r2
 80034da:	b21b      	sxth	r3, r3
 80034dc:	817b      	strh	r3, [r7, #10]
	uint16_t torque = ((rxData_uint[4] & 0x0F) << 8) | rxData_uint[5];
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3304      	adds	r3, #4
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034ec:	b21a      	sxth	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3305      	adds	r3, #5
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b21b      	sxth	r3, r3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	b21b      	sxth	r3, r3
 80034fa:	813b      	strh	r3, [r7, #8]

	RxData_Float->error = rxData_uint[7];
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	79da      	ldrb	r2, [r3, #7]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	741a      	strb	r2, [r3, #16]

	uint8_t i;
	for(i = 0; i < AKXX_X_NUMBER_OF_DEVICES; i++)
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e00f      	b.n	800352a <UnpackData+0x92>
		if(Device[i].InitVals.canId == RxData_Float->canId)
 800350a:	7bfa      	ldrb	r2, [r7, #15]
 800350c:	4934      	ldr	r1, [pc, #208]	; (80035e0 <UnpackData+0x148>)
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	881a      	ldrh	r2, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	429a      	cmp	r2, r3
 8003522:	d006      	beq.n	8003532 <UnpackData+0x9a>
	for(i = 0; i < AKXX_X_NUMBER_OF_DEVICES; i++)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	3301      	adds	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d9ec      	bls.n	800350a <UnpackData+0x72>
 8003530:	e000      	b.n	8003534 <UnpackData+0x9c>
			break;
 8003532:	bf00      	nop

	RxData_Float->position = UintToFloat(position, -12.5, 12.5, 16);
 8003534:	89bb      	ldrh	r3, [r7, #12]
 8003536:	2110      	movs	r1, #16
 8003538:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 800353c:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f84f 	bl	80035e4 <UintToFloat>
 8003546:	eef0 7a40 	vmov.f32	s15, s0
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	edc3 7a01 	vstr	s15, [r3, #4]
	RxData_Float->speed = UintToFloat(speed, Device[i].speedMin, Device[i].speedMax, 12);
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	4923      	ldr	r1, [pc, #140]	; (80035e0 <UnpackData+0x148>)
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	440b      	add	r3, r1
 800355e:	3308      	adds	r3, #8
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	491e      	ldr	r1, [pc, #120]	; (80035e0 <UnpackData+0x148>)
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	3304      	adds	r3, #4
 8003574:	ed93 7a00 	vldr	s14, [r3]
 8003578:	897b      	ldrh	r3, [r7, #10]
 800357a:	210c      	movs	r1, #12
 800357c:	eef0 0a47 	vmov.f32	s1, s14
 8003580:	eeb0 0a67 	vmov.f32	s0, s15
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f82d 	bl	80035e4 <UintToFloat>
 800358a:	eef0 7a40 	vmov.f32	s15, s0
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	edc3 7a02 	vstr	s15, [r3, #8]
	RxData_Float->torque = UintToFloat(torque, Device[i].torqueMin, Device[i].torqueMax, 12);
 8003594:	7bfa      	ldrb	r2, [r7, #15]
 8003596:	4912      	ldr	r1, [pc, #72]	; (80035e0 <UnpackData+0x148>)
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	3310      	adds	r3, #16
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	490d      	ldr	r1, [pc, #52]	; (80035e0 <UnpackData+0x148>)
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	440b      	add	r3, r1
 80035b6:	330c      	adds	r3, #12
 80035b8:	ed93 7a00 	vldr	s14, [r3]
 80035bc:	893b      	ldrh	r3, [r7, #8]
 80035be:	210c      	movs	r1, #12
 80035c0:	eef0 0a47 	vmov.f32	s1, s14
 80035c4:	eeb0 0a67 	vmov.f32	s0, s15
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f80b 	bl	80035e4 <UintToFloat>
 80035ce:	eef0 7a40 	vmov.f32	s15, s0
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	200002a4 	.word	0x200002a4

080035e4 <UintToFloat>:

static float UintToFloat(uint16_t x_uint, float xMin_float, float xMax_float, uint8_t nBits)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80035f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80035f4:	460a      	mov	r2, r1
 80035f6:	81fb      	strh	r3, [r7, #14]
 80035f8:	4613      	mov	r3, r2
 80035fa:	737b      	strb	r3, [r7, #13]
	float offset = xMin_float;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
	float span = xMax_float - xMin_float;
 8003600:	ed97 7a01 	vldr	s14, [r7, #4]
 8003604:	edd7 7a02 	vldr	s15, [r7, #8]
 8003608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800360c:	edc7 7a05 	vstr	s15, [r7, #20]
	float x_float;
	if(nBits == 12)
 8003610:	7b7b      	ldrb	r3, [r7, #13]
 8003612:	2b0c      	cmp	r3, #12
 8003614:	d113      	bne.n	800363e <UintToFloat+0x5a>
		x_float = (((float)x_uint) * span / 4095.0f) + offset;
 8003616:	89fb      	ldrh	r3, [r7, #14]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003620:	edd7 7a05 	vldr	s15, [r7, #20]
 8003624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003628:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003680 <UintToFloat+0x9c>
 800362c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003630:	ed97 7a06 	vldr	s14, [r7, #24]
 8003634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003638:	edc7 7a07 	vstr	s15, [r7, #28]
 800363c:	e015      	b.n	800366a <UintToFloat+0x86>
	else if(nBits == 16)
 800363e:	7b7b      	ldrb	r3, [r7, #13]
 8003640:	2b10      	cmp	r3, #16
 8003642:	d112      	bne.n	800366a <UintToFloat+0x86>
		x_float = (((float)x_uint) * span / 65535.0f) + offset;
 8003644:	89fb      	ldrh	r3, [r7, #14]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800364e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003656:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003684 <UintToFloat+0xa0>
 800365a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800365e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003666:	edc7 7a07 	vstr	s15, [r7, #28]

	return x_float;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	ee07 3a90 	vmov	s15, r3
}
 8003670:	eeb0 0a67 	vmov.f32	s0, s15
 8003674:	3724      	adds	r7, #36	; 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	457ff000 	.word	0x457ff000
 8003684:	477fff00 	.word	0x477fff00

08003688 <FloatToUint>:

static uint16_t FloatToUint(float x_float, float xMin_float, float xMax_float, uint8_t nBits)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	; 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003692:	edc7 0a02 	vstr	s1, [r7, #8]
 8003696:	ed87 1a01 	vstr	s2, [r7, #4]
 800369a:	4603      	mov	r3, r0
 800369c:	70fb      	strb	r3, [r7, #3]
	if(x_float < xMin_float)
 800369e:	ed97 7a03 	vldr	s14, [r7, #12]
 80036a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80036a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ae:	d501      	bpl.n	80036b4 <FloatToUint+0x2c>
		x_float = xMin_float;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	60fb      	str	r3, [r7, #12]
	if(x_float > xMax_float)
 80036b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80036b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80036bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c4:	dd01      	ble.n	80036ca <FloatToUint+0x42>
		x_float = xMax_float;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	60fb      	str	r3, [r7, #12]

	float offset = xMin_float;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	61bb      	str	r3, [r7, #24]
	float span = xMax_float - xMin_float;
 80036ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80036d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80036d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036da:	edc7 7a05 	vstr	s15, [r7, #20]
	uint16_t x_uint;
	if(nBits == 12)
 80036de:	78fb      	ldrb	r3, [r7, #3]
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	d113      	bne.n	800370c <FloatToUint+0x84>
		x_uint = (uint16_t)((x_float - offset) * 4095.0f / span);
 80036e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80036e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80036ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003748 <FloatToUint+0xc0>
 80036f4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80036f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80036fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003704:	ee17 3a90 	vmov	r3, s15
 8003708:	83fb      	strh	r3, [r7, #30]
 800370a:	e015      	b.n	8003738 <FloatToUint+0xb0>
	else if(nBits == 16)
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	2b10      	cmp	r3, #16
 8003710:	d112      	bne.n	8003738 <FloatToUint+0xb0>
		x_uint = (uint16_t)((x_float - offset) * 65535.0f / span);
 8003712:	ed97 7a03 	vldr	s14, [r7, #12]
 8003716:	edd7 7a06 	vldr	s15, [r7, #24]
 800371a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800374c <FloatToUint+0xc4>
 8003722:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003726:	ed97 7a05 	vldr	s14, [r7, #20]
 800372a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800372e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003732:	ee17 3a90 	vmov	r3, s15
 8003736:	83fb      	strh	r3, [r7, #30]

	return x_uint;
 8003738:	8bfb      	ldrh	r3, [r7, #30]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3724      	adds	r7, #36	; 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	457ff000 	.word	0x457ff000
 800374c:	477fff00 	.word	0x477fff00

08003750 <BNO08x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

BNO08x_Error_e BNO08x_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
	sh2_Hal_t *pSh2Hal = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
	pSh2Hal = sh2_hal_init();
 800375a:	f000 fba5 	bl	8003ea8 <sh2_hal_init>
 800375e:	6078      	str	r0, [r7, #4]
	int status = sh2_open(pSh2Hal, EventHandler, NULL);
 8003760:	2200      	movs	r2, #0
 8003762:	490e      	ldr	r1, [pc, #56]	; (800379c <BNO08x_Init+0x4c>)
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 ffa7 	bl	80046b8 <sh2_open>
 800376a:	6038      	str	r0, [r7, #0]
	if(status != SH2_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <BNO08x_Init+0x26>
		return BNO08x_InitError;
 8003772:	2301      	movs	r3, #1
 8003774:	e00e      	b.n	8003794 <BNO08x_Init+0x44>

	sh2_setSensorCallback(ReadEvent, NULL); // incompatible??
 8003776:	2100      	movs	r1, #0
 8003778:	4809      	ldr	r0, [pc, #36]	; (80037a0 <BNO08x_Init+0x50>)
 800377a:	f001 f84b 	bl	8004814 <sh2_setSensorCallback>

  	if(StartReports())
 800377e:	f000 f82f 	bl	80037e0 <StartReports>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <BNO08x_Init+0x3c>
  		return BNO08x_InitError;
 8003788:	2301      	movs	r3, #1
 800378a:	e003      	b.n	8003794 <BNO08x_Init+0x44>

  	isInit = 1;
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <BNO08x_Init+0x54>)
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]

	return BNO08x_NoError;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	08003841 	.word	0x08003841
 80037a0:	08003869 	.word	0x08003869
 80037a4:	200002fd 	.word	0x200002fd

080037a8 <BNO08x_StartReports>:

BNO08x_Error_e BNO08x_StartReports(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	if(!isInit)
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <BNO08x_StartReports+0x18>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d100      	bne.n	80037b6 <BNO08x_StartReports+0xe>
		while(1);
 80037b4:	e7fe      	b.n	80037b4 <BNO08x_StartReports+0xc>

	return StartReports();
 80037b6:	f000 f813 	bl	80037e0 <StartReports>
 80037ba:	4603      	mov	r3, r0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	200002fd 	.word	0x200002fd

080037c4 <BNO08x_ReadSensors>:


void BNO08x_ReadSensors(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
	if(!isInit)
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <BNO08x_ReadSensors+0x18>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d100      	bne.n	80037d2 <BNO08x_ReadSensors+0xe>
		while(1);
 80037d0:	e7fe      	b.n	80037d0 <BNO08x_ReadSensors+0xc>

	sh2_service();
 80037d2:	f001 f80b 	bl	80047ec <sh2_service>
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200002fd 	.word	0x200002fd

080037e0 <StartReports>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static BNO08x_Error_e StartReports(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
		{SH2_ACCELEROMETER, {.reportInterval_us = 2000}},			// m/s^2, max interval = 500 Hz = 2000 us
		{SH2_GYROSCOPE_CALIBRATED, {.reportInterval_us = 2500}},	// rad/s, max interval = 400 Hz = 2500 us
        {SH2_GAME_ROTATION_VECTOR, {.reportInterval_us = 2500}},	// quaternions, max interval = 400 Hz = 2500 us
    };

    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e01e      	b.n	800382a <StartReports+0x4a>
    {
        int sensorId = sensorConfig[n].sensorId;
 80037ec:	4913      	ldr	r1, [pc, #76]	; (800383c <StartReports+0x5c>)
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60bb      	str	r3, [r7, #8]

        int status = sh2_setSensorConfig(sensorId, &sensorConfig[n].config);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	b2d8      	uxtb	r0, r3
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4a0b      	ldr	r2, [pc, #44]	; (800383c <StartReports+0x5c>)
 800380e:	4413      	add	r3, r2
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	f001 f814 	bl	8004840 <sh2_setSensorConfig>
 8003818:	6078      	str	r0, [r7, #4]
        if (status != 0)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <StartReports+0x44>
        	return BNO08x_StartReportError;
 8003820:	2302      	movs	r3, #2
 8003822:	e006      	b.n	8003832 <StartReports+0x52>
    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3301      	adds	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d9dd      	bls.n	80037ec <StartReports+0xc>
    }

    return BNO08x_NoError;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	0800a000 	.word	0x0800a000

08003840 <EventHandler>:

static void EventHandler(void * cookie, sh2_AsyncEvent_t *pEvent)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
    if (pEvent->eventId == SH2_RESET)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <EventHandler+0x18>
        BNO08x_resetOccurred = 1;
 8003852:	4b04      	ldr	r3, [pc, #16]	; (8003864 <EventHandler+0x24>)
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	200002fc 	.word	0x200002fc

08003868 <ReadEvent>:

static void ReadEvent(void * cookie, sh2_SensorEvent_t * event, int16_t *data)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b09a      	sub	sp, #104	; 0x68
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
    int rc;
    sh2_SensorValue_t value;

    rc = sh2_decodeSensorEvent(&value, event);
 8003874:	f107 0310 	add.w	r3, r7, #16
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	4618      	mov	r0, r3
 800387c:	f001 f80a 	bl	8004894 <sh2_decodeSensorEvent>
 8003880:	6678      	str	r0, [r7, #100]	; 0x64
    if (rc != SH2_OK)
 8003882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003884:	2b00      	cmp	r3, #0
 8003886:	d12a      	bne.n	80038de <ReadEvent+0x76>
        return;

    switch(value.sensorId)
 8003888:	7c3b      	ldrb	r3, [r7, #16]
 800388a:	2b08      	cmp	r3, #8
 800388c:	d01a      	beq.n	80038c4 <ReadEvent+0x5c>
 800388e:	2b08      	cmp	r3, #8
 8003890:	dc26      	bgt.n	80038e0 <ReadEvent+0x78>
 8003892:	2b01      	cmp	r3, #1
 8003894:	d002      	beq.n	800389c <ReadEvent+0x34>
 8003896:	2b02      	cmp	r3, #2
 8003898:	d00a      	beq.n	80038b0 <ReadEvent+0x48>
 800389a:	e021      	b.n	80038e0 <ReadEvent+0x78>
    {
        case SH2_ACCELEROMETER:
        	BNO08x_IMU_Data[0] = value.un.accelerometer.x;
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <ReadEvent+0x80>)
 80038a0:	6013      	str	r3, [r2, #0]
        	BNO08x_IMU_Data[1] = value.un.accelerometer.y;
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <ReadEvent+0x80>)
 80038a6:	6053      	str	r3, [r2, #4]
        	BNO08x_IMU_Data[2] = value.un.accelerometer.z;
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038aa:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <ReadEvent+0x80>)
 80038ac:	6093      	str	r3, [r2, #8]
            break;
 80038ae:	e017      	b.n	80038e0 <ReadEvent+0x78>

        case SH2_GYROSCOPE_CALIBRATED:
        	BNO08x_IMU_Data[3] = value.un.gyroscope.x;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <ReadEvent+0x80>)
 80038b4:	60d3      	str	r3, [r2, #12]
        	BNO08x_IMU_Data[4] = value.un.gyroscope.y;
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <ReadEvent+0x80>)
 80038ba:	6113      	str	r3, [r2, #16]
        	BNO08x_IMU_Data[5] = value.un.gyroscope.z;
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <ReadEvent+0x80>)
 80038c0:	6153      	str	r3, [r2, #20]
            break;
 80038c2:	e00d      	b.n	80038e0 <ReadEvent+0x78>

        case SH2_GAME_ROTATION_VECTOR:
        	BNO08x_IMU_Data[6] = value.un.gameRotationVector.real;
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <ReadEvent+0x80>)
 80038c8:	6193      	str	r3, [r2, #24]
        	BNO08x_IMU_Data[7] = value.un.gameRotationVector.i;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	4a06      	ldr	r2, [pc, #24]	; (80038e8 <ReadEvent+0x80>)
 80038ce:	61d3      	str	r3, [r2, #28]
        	BNO08x_IMU_Data[8] = value.un.gameRotationVector.j;
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <ReadEvent+0x80>)
 80038d4:	6213      	str	r3, [r2, #32]
        	BNO08x_IMU_Data[9] = value.un.gameRotationVector.k;
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	4a03      	ldr	r2, [pc, #12]	; (80038e8 <ReadEvent+0x80>)
 80038da:	6253      	str	r3, [r2, #36]	; 0x24
            break;
 80038dc:	e000      	b.n	80038e0 <ReadEvent+0x78>
        return;
 80038de:	bf00      	nop
    }
}
 80038e0:	3768      	adds	r7, #104	; 0x68
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200002d4 	.word	0x200002d4

080038ec <bootn>:

// ------------------------------------------------------------------------
// Private methods

static void bootn(bool state)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_BT_GPIO_Port, ANKLE_IMU_BT_Pin,
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	461a      	mov	r2, r3
 80038fa:	2101      	movs	r1, #1
 80038fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003900:	f004 f8e8 	bl	8007ad4 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <rstn>:

static void rstn(bool state)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_RST_GPIO_Port, ANKLE_IMU_RST_Pin,
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	461a      	mov	r2, r3
 800391a:	2108      	movs	r1, #8
 800391c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003920:	f004 f8d8 	bl	8007ad4 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <ps0_waken>:

static void ps0_waken(bool state)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_P0_GPIO_Port, ANKLE_IMU_P0_Pin,
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	461a      	mov	r2, r3
 800393a:	2102      	movs	r1, #2
 800393c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003940:	f004 f8c8 	bl	8007ad4 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <ps1>:

static void ps1(bool state)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_P1_GPIO_Port, ANKLE_IMU_P1_Pin,
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	461a      	mov	r2, r3
 800395a:	2104      	movs	r1, #4
 800395c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003960:	f004 f8b8 	bl	8007ad4 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <csn>:

static void csn(bool state)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_CS_GPIO_Port, ANKLE_IMU_CS_Pin,
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	461a      	mov	r2, r3
 800397a:	2110      	movs	r1, #16
 800397c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003980:	f004 f8a8 	bl	8007ad4 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <timeNowUs>:

static uint32_t timeNowUs(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);
 8003990:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <timeNowUs+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	20000258 	.word	0x20000258

080039a4 <hal_init_timer>:

static void hal_init_timer(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0

    HAL_TIM_Base_Start(&htim2);
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <hal_init_timer+0x10>)
 80039aa:	f005 f879 	bl	8008aa0 <HAL_TIM_Base_Start>
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000258 	.word	0x20000258

080039b8 <spiDummyOp>:



static void spiDummyOp(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af02      	add	r7, sp, #8
 80039be:	23aa      	movs	r3, #170	; 0xaa
 80039c0:	713b      	strb	r3, [r7, #4]
    uint8_t dummyTx[1];
    uint8_t dummyRx[1];

    memset(dummyTx, 0xAA, sizeof(dummyTx));

    HAL_SPI_TransmitReceive(&hspi1, dummyTx, dummyRx, sizeof(dummyTx), 2);
 80039c2:	463a      	mov	r2, r7
 80039c4:	1d39      	adds	r1, r7, #4
 80039c6:	2302      	movs	r3, #2
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2301      	movs	r3, #1
 80039cc:	4803      	ldr	r0, [pc, #12]	; (80039dc <spiDummyOp+0x24>)
 80039ce:	f004 f97c 	bl	8007cca <HAL_SPI_TransmitReceive>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200001f4 	.word	0x200001f4

080039e0 <hal_init_hw>:



static void hal_init_hw(bool dfu)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
    hal_init_timer();
 80039ea:	f7ff ffdb 	bl	80039a4 <hal_init_timer>

}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <enableInts>:

static void enableInts(void)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	af00      	add	r7, sp, #0
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039fa:	2017      	movs	r0, #23
 80039fc:	f003 fd63 	bl	80074c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003a00:	2023      	movs	r0, #35	; 0x23
 8003a02:	f003 fd60 	bl	80074c6 <HAL_NVIC_EnableIRQ>
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <disableInts>:

static void disableInts()
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8003a0e:	2023      	movs	r0, #35	; 0x23
 8003a10:	f003 fd67 	bl	80074e2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8003a14:	2017      	movs	r0, #23
 8003a16:	f003 fd64 	bl	80074e2 <HAL_NVIC_DisableIRQ>
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <spiActivate>:
// Attempt to start a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// If SPI periph is not in use and there is data to send or receive,
// this will start a SPI operation.
static void spiActivate(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
    if ((spiState == SPI_IDLE) && (rxBufLen == 0))
 8003a24:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <spiActivate+0x68>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d12a      	bne.n	8003a82 <spiActivate+0x62>
 8003a2c:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <spiActivate+0x6c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d126      	bne.n	8003a82 <spiActivate+0x62>
    {
        if (rxReady)
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <spiActivate+0x70>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d021      	beq.n	8003a82 <spiActivate+0x62>
        {
            // reset flag that was set with INTN
            rxReady = false;
 8003a3e:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <spiActivate+0x70>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]

            // assert CSN
            csn(false);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7ff ff91 	bl	800396c <csn>

            if (txBufLen > 0)
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <spiActivate+0x74>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00e      	beq.n	8003a70 <spiActivate+0x50>
            {
                spiState = SPI_WRITE;
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <spiActivate+0x68>)
 8003a54:	2206      	movs	r2, #6
 8003a56:	701a      	strb	r2, [r3, #0]

                // Start operation to write (and, incidentally, read)
                HAL_SPI_TransmitReceive_IT(&hspi1, txBuf, rxBuf, txBufLen);
 8003a58:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <spiActivate+0x74>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	4a0e      	ldr	r2, [pc, #56]	; (8003a98 <spiActivate+0x78>)
 8003a60:	490e      	ldr	r1, [pc, #56]	; (8003a9c <spiActivate+0x7c>)
 8003a62:	480f      	ldr	r0, [pc, #60]	; (8003aa0 <spiActivate+0x80>)
 8003a64:	f004 fb44 	bl	80080f0 <HAL_SPI_TransmitReceive_IT>

                // Deassert Wake
                ps0_waken(true);
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f7ff ff5f 	bl	800392c <ps0_waken>
                // Start SPI operation to read header (writing zeros)
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
            }
        }
    }
}
 8003a6e:	e008      	b.n	8003a82 <spiActivate+0x62>
                spiState = SPI_RD_HDR;
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <spiActivate+0x68>)
 8003a72:	2204      	movs	r2, #4
 8003a74:	701a      	strb	r2, [r3, #0]
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
 8003a76:	2304      	movs	r3, #4
 8003a78:	4a07      	ldr	r2, [pc, #28]	; (8003a98 <spiActivate+0x78>)
 8003a7a:	490a      	ldr	r1, [pc, #40]	; (8003aa4 <spiActivate+0x84>)
 8003a7c:	4808      	ldr	r0, [pc, #32]	; (8003aa0 <spiActivate+0x80>)
 8003a7e:	f004 fb37 	bl	80080f0 <HAL_SPI_TransmitReceive_IT>
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	200002fe 	.word	0x200002fe
 8003a8c:	20000708 	.word	0x20000708
 8003a90:	20000305 	.word	0x20000305
 8003a94:	20000790 	.word	0x20000790
 8003a98:	20000308 	.word	0x20000308
 8003a9c:	20000710 	.word	0x20000710
 8003aa0:	200001f4 	.word	0x200001f4
 8003aa4:	0800a048 	.word	0x0800a048

08003aa8 <spiCompleted>:
// Handle the end of a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// Depending on spiState, it may start a follow-up operation or transition
// to idle.  In the latter case, it will call spiActivate
static void spiCompleted(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
    // Get length of payload available
    uint16_t rxLen = (rxBuf[0] + (rxBuf[1] << 8)) & ~0x8000;
 8003aae:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <spiCompleted+0xd4>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <spiCompleted+0xd4>)
 8003ab6:	785b      	ldrb	r3, [r3, #1]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ac6:	80fb      	strh	r3, [r7, #6]

    // Truncate that to max len we can read
    if (rxLen > sizeof(rxBuf))
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ace:	d902      	bls.n	8003ad6 <spiCompleted+0x2e>
    {
        rxLen = sizeof(rxBuf);
 8003ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad4:	80fb      	strh	r3, [r7, #6]
    }

    if (spiState == SPI_DUMMY)
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <spiCompleted+0xd8>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d103      	bne.n	8003ae6 <spiCompleted+0x3e>
    {
        // SPI Dummy operation completed, transition now to idle
        spiState = SPI_IDLE;
 8003ade:	4b28      	ldr	r3, [pc, #160]	; (8003b80 <spiCompleted+0xd8>)
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	701a      	strb	r2, [r3, #0]
        spiState = SPI_IDLE;

        // Activate the next operation, if any.
        spiActivate();
    }
}
 8003ae4:	e045      	b.n	8003b72 <spiCompleted+0xca>
    else if (spiState == SPI_RD_HDR)
 8003ae6:	4b26      	ldr	r3, [pc, #152]	; (8003b80 <spiCompleted+0xd8>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d11a      	bne.n	8003b24 <spiCompleted+0x7c>
        if (rxLen > READ_LEN) {
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d90b      	bls.n	8003b0c <spiCompleted+0x64>
            spiState = SPI_RD_BODY;
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <spiCompleted+0xd8>)
 8003af6:	2205      	movs	r2, #5
 8003af8:	701a      	strb	r2, [r3, #0]
            HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf+READ_LEN, rxLen-READ_LEN);
 8003afa:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <spiCompleted+0xdc>)
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	3b04      	subs	r3, #4
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	4921      	ldr	r1, [pc, #132]	; (8003b88 <spiCompleted+0xe0>)
 8003b04:	4821      	ldr	r0, [pc, #132]	; (8003b8c <spiCompleted+0xe4>)
 8003b06:	f004 faf3 	bl	80080f0 <HAL_SPI_TransmitReceive_IT>
}
 8003b0a:	e032      	b.n	8003b72 <spiCompleted+0xca>
            csn(true);            // deassert CSN
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f7ff ff2d 	bl	800396c <csn>
            rxBufLen = 0;         // no rx data available
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <spiCompleted+0xe8>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
            spiState = SPI_IDLE;  // back to idle state
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <spiCompleted+0xd8>)
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	701a      	strb	r2, [r3, #0]
            spiActivate();        // activate next operation, if any.
 8003b1e:	f7ff ff7f 	bl	8003a20 <spiActivate>
}
 8003b22:	e026      	b.n	8003b72 <spiCompleted+0xca>
    else if (spiState == SPI_RD_BODY)
 8003b24:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <spiCompleted+0xd8>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	d10b      	bne.n	8003b44 <spiCompleted+0x9c>
        csn(true);
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f7ff ff1d 	bl	800396c <csn>
        rxBufLen = rxLen;
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	4a16      	ldr	r2, [pc, #88]	; (8003b90 <spiCompleted+0xe8>)
 8003b36:	6013      	str	r3, [r2, #0]
        spiState = SPI_IDLE;
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <spiCompleted+0xd8>)
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	701a      	strb	r2, [r3, #0]
        spiActivate();
 8003b3e:	f7ff ff6f 	bl	8003a20 <spiActivate>
}
 8003b42:	e016      	b.n	8003b72 <spiCompleted+0xca>
    else if (spiState == SPI_WRITE)
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <spiCompleted+0xd8>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d112      	bne.n	8003b72 <spiCompleted+0xca>
        csn(true);
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f7ff ff0d 	bl	800396c <csn>
        rxBufLen = (txBufLen < rxLen) ? txBufLen : rxLen;
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <spiCompleted+0xec>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bf28      	it	cs
 8003b5c:	4613      	movcs	r3, r2
 8003b5e:	4a0c      	ldr	r2, [pc, #48]	; (8003b90 <spiCompleted+0xe8>)
 8003b60:	6013      	str	r3, [r2, #0]
        txBufLen = 0;
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <spiCompleted+0xec>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
        spiState = SPI_IDLE;
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <spiCompleted+0xd8>)
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	701a      	strb	r2, [r3, #0]
        spiActivate();
 8003b6e:	f7ff ff57 	bl	8003a20 <spiActivate>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000308 	.word	0x20000308
 8003b80:	200002fe 	.word	0x200002fe
 8003b84:	2000030c 	.word	0x2000030c
 8003b88:	0800a048 	.word	0x0800a048
 8003b8c:	200001f4 	.word	0x200001f4
 8003b90:	20000708 	.word	0x20000708
 8003b94:	20000790 	.word	0x20000790

08003b98 <HAL_GPIO_EXTI_Callback>:


// Interrupt handlers and SPI operation callbacks

void HAL_GPIO_EXTI_Callback(uint16_t n)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80fb      	strh	r3, [r7, #6]
    rxTimestamp_us = timeNowUs();
 8003ba2:	f7ff fef3 	bl	800398c <timeNowUs>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003baa:	6013      	str	r3, [r2, #0]

    inReset = false;
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_GPIO_EXTI_Callback+0x30>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
    rxReady = true;
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_GPIO_EXTI_Callback+0x34>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]

    // Start read, if possible
    spiActivate();
 8003bb8:	f7ff ff32 	bl	8003a20 <spiActivate>
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000300 	.word	0x20000300
 8003bc8:	20000304 	.word	0x20000304
 8003bcc:	20000305 	.word	0x20000305

08003bd0 <EXTI15_10_IRQHandler>:

// Handle INTN Interrupt through STM32 HAL
// (It, in turn, calls HAL_GPIO_EXTI_Callback, above)
void EXTI15_10_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003bd4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003bd8:	f003 ff94 	bl	8007b04 <HAL_GPIO_EXTI_IRQHandler>
}
 8003bdc:	bf00      	nop
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi1)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
    if (isOpen)
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <HAL_SPI_TxRxCpltCallback+0x1c>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_SPI_TxRxCpltCallback+0x14>
    {
        spiCompleted();
 8003bf0:	f7ff ff5a 	bl	8003aa8 <spiCompleted>
    }
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200007a8 	.word	0x200007a8

08003c00 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi1)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
    // Shouldn't happen
    while (1);
 8003c08:	e7fe      	b.n	8003c08 <HAL_SPI_ErrorCallback+0x8>

08003c0a <delayUs>:
//{
//    HAL_SPI_IRQHandler(&hspi1);
//}

void delayUs(uint32_t delay)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 8003c12:	f7ff febb 	bl	800398c <timeNowUs>
 8003c16:	4603      	mov	r3, r0
 8003c18:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	60fb      	str	r3, [r7, #12]
    while ((now - start) < delay) {
 8003c1e:	e003      	b.n	8003c28 <delayUs+0x1e>
        now = timeNowUs();
 8003c20:	f7ff feb4 	bl	800398c <timeNowUs>
 8003c24:	4603      	mov	r3, r0
 8003c26:	60bb      	str	r3, [r7, #8]
    while ((now - start) < delay) {
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d8f5      	bhi.n	8003c20 <delayUs+0x16>
    }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <resetDelayUs>:

void resetDelayUs(uint32_t delay)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 8003c48:	f7ff fea0 	bl	800398c <timeNowUs>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	60fb      	str	r3, [r7, #12]
    while (((now - start) < delay) && (inReset))
 8003c54:	e003      	b.n	8003c5e <resetDelayUs+0x1e>
    {
        now = timeNowUs();
 8003c56:	f7ff fe99 	bl	800398c <timeNowUs>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	60bb      	str	r3, [r7, #8]
    while (((now - start) < delay) && (inReset))
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d904      	bls.n	8003c74 <resetDelayUs+0x34>
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <resetDelayUs+0x3c>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f0      	bne.n	8003c56 <resetDelayUs+0x16>
    }
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000304 	.word	0x20000304

08003c80 <sh2_spi_hal_open>:

// ------------------------------------------------------------------------
// SH2 SPI Hal Methods

static int sh2_spi_hal_open(sh2_Hal_t *self)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
    int retval = SH2_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

    if (isOpen)
 8003c8c:	4b21      	ldr	r3, [pc, #132]	; (8003d14 <sh2_spi_hal_open+0x94>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <sh2_spi_hal_open+0x1a>
    {
        // Can't open if another instance is already open
        return SH2_ERR;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295
 8003c98:	e038      	b.n	8003d0c <sh2_spi_hal_open+0x8c>
    }

    isOpen = true;
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <sh2_spi_hal_open+0x94>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]

    // Init hardware (false -> non-DFU config)
    hal_init_hw(false);
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7ff fe9d 	bl	80039e0 <hal_init_hw>

    // Hold in reset
    rstn(false);
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f7ff fe30 	bl	800390c <rstn>

    // deassert CSN
    csn(true);
 8003cac:	2001      	movs	r0, #1
 8003cae:	f7ff fe5d 	bl	800396c <csn>

    // Clear rx, tx buffers
    rxBufLen = 0;
 8003cb2:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <sh2_spi_hal_open+0x98>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
    txBufLen = 0;
 8003cb8:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <sh2_spi_hal_open+0x9c>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
    rxDataReady = false;
 8003cbe:	4b18      	ldr	r3, [pc, #96]	; (8003d20 <sh2_spi_hal_open+0xa0>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
    rxReady = false;
 8003cc4:	4b17      	ldr	r3, [pc, #92]	; (8003d24 <sh2_spi_hal_open+0xa4>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]

    inReset = true;  // will change back to false when INTN serviced
 8003cca:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <sh2_spi_hal_open+0xa8>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]

    // Do dummy SPI operation
    // (First SPI op after reconfig has bad initial state of signals
    // so this is a throwaway operation.  Afterward, all is well.)
    spiState = SPI_DUMMY;
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <sh2_spi_hal_open+0xac>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
    spiDummyOp();
 8003cd6:	f7ff fe6f 	bl	80039b8 <spiDummyOp>
    spiState = SPI_IDLE;
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <sh2_spi_hal_open+0xac>)
 8003cdc:	2203      	movs	r2, #3
 8003cde:	701a      	strb	r2, [r3, #0]

    // Delay for RESET_DELAY_US to ensure reset takes effect
    delayUs(RESET_DELAY_US);
 8003ce0:	f242 7010 	movw	r0, #10000	; 0x2710
 8003ce4:	f7ff ff91 	bl	8003c0a <delayUs>

    // To boot in SHTP-SPI mode, must have PS1=1, PS0=1.
    // PS1 is set via jumper.
    // PS0 will be 1 PS1 jumper is 1 AND PS0_WAKEN sig is 1.
    // So we set PS0_WAKEN signal to 1
    ps0_waken(true);
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7ff fe1f 	bl	800392c <ps0_waken>
    ps1(true);
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f7ff fe2c 	bl	800394c <ps1>

    // Deassert reset, boot in non-DFU mode
    bootn(true);
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f7ff fdf9 	bl	80038ec <bootn>
    rstn(true);
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	f7ff fe06 	bl	800390c <rstn>

    // enable interrupts
    enableInts();
 8003d00:	f7ff fe79 	bl	80039f6 <enableInts>

    // Wait for INTN to be asserted
    resetDelayUs(START_DELAY_US);
 8003d04:	480a      	ldr	r0, [pc, #40]	; (8003d30 <sh2_spi_hal_open+0xb0>)
 8003d06:	f7ff ff9b 	bl	8003c40 <resetDelayUs>

    return retval;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	200007a8 	.word	0x200007a8
 8003d18:	20000708 	.word	0x20000708
 8003d1c:	20000790 	.word	0x20000790
 8003d20:	2000070c 	.word	0x2000070c
 8003d24:	20000305 	.word	0x20000305
 8003d28:	20000304 	.word	0x20000304
 8003d2c:	200002fe 	.word	0x200002fe
 8003d30:	001e8480 	.word	0x001e8480

08003d34 <sh2_spi_hal_close>:

static void sh2_spi_hal_close(sh2_Hal_t *self)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
    // Disable interrupts
    disableInts();
 8003d3c:	f7ff fe65 	bl	8003a0a <disableInts>

    // Set state machine to INIT state
    spiState = SPI_INIT;
 8003d40:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <sh2_spi_hal_close+0x64>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]

    // Hold sensor hub in reset
    rstn(false);
 8003d46:	2000      	movs	r0, #0
 8003d48:	f7ff fde0 	bl	800390c <rstn>

    // deassert CSN
    csn(true);
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f7ff fe0d 	bl	800396c <csn>

    // Deinit SPI peripheral
    HAL_SPI_DeInit(&hspi1);
 8003d52:	4812      	ldr	r0, [pc, #72]	; (8003d9c <sh2_spi_hal_close+0x68>)
 8003d54:	f003 ff91 	bl	8007c7a <HAL_SPI_DeInit>

    // Deinit timer
    __HAL_TIM_DISABLE(&htim2);
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <sh2_spi_hal_close+0x6c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6a1a      	ldr	r2, [r3, #32]
 8003d5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <sh2_spi_hal_close+0x54>
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <sh2_spi_hal_close+0x6c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	f240 4344 	movw	r3, #1092	; 0x444
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d107      	bne.n	8003d88 <sh2_spi_hal_close+0x54>
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <sh2_spi_hal_close+0x6c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <sh2_spi_hal_close+0x6c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

    // No longer open
    isOpen = false;
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <sh2_spi_hal_close+0x70>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	200002fe 	.word	0x200002fe
 8003d9c:	200001f4 	.word	0x200001f4
 8003da0:	20000258 	.word	0x20000258
 8003da4:	200007a8 	.word	0x200007a8

08003da8 <sh2_spi_hal_read>:

static int sh2_spi_hal_read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
    int retval = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]

    // If there is received data available...
    if (rxBufLen > 0)
 8003dba:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <sh2_spi_hal_read+0x6c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d022      	beq.n	8003e08 <sh2_spi_hal_read+0x60>
    {
        // And if the data will fit in this buffer...
        if (len >= rxBufLen)
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <sh2_spi_hal_read+0x6c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d311      	bcc.n	8003df0 <sh2_spi_hal_read+0x48>
        {
            // Copy data to the client buffer
            memcpy(pBuffer, rxBuf, rxBufLen);
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <sh2_spi_hal_read+0x6c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4911      	ldr	r1, [pc, #68]	; (8003e18 <sh2_spi_hal_read+0x70>)
 8003dd4:	68b8      	ldr	r0, [r7, #8]
 8003dd6:	f005 fd91 	bl	80098fc <memcpy>
            retval = rxBufLen;
 8003dda:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <sh2_spi_hal_read+0x6c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	617b      	str	r3, [r7, #20]

            // Set timestamp of that data
            *t = rxTimestamp_us;
 8003de0:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <sh2_spi_hal_read+0x74>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	601a      	str	r2, [r3, #0]

            // Clear rxBuf so we can receive again
            rxBufLen = 0;
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <sh2_spi_hal_read+0x6c>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	e005      	b.n	8003dfc <sh2_spi_hal_read+0x54>
        }
        else
        {
            // Discard what was read and return error because buffer was too small.
            retval = SH2_ERR_BAD_PARAM;
 8003df0:	f06f 0301 	mvn.w	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
            rxBufLen = 0;
 8003df6:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <sh2_spi_hal_read+0x6c>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
        }

        // Now that rxBuf is empty, activate SPI processing to send any
        // potential write that was blocked.
        disableInts();
 8003dfc:	f7ff fe05 	bl	8003a0a <disableInts>
        spiActivate();
 8003e00:	f7ff fe0e 	bl	8003a20 <spiActivate>
        enableInts();
 8003e04:	f7ff fdf7 	bl	80039f6 <enableInts>
    }

    return retval;
 8003e08:	697b      	ldr	r3, [r7, #20]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000708 	.word	0x20000708
 8003e18:	20000308 	.word	0x20000308
 8003e1c:	20000300 	.word	0x20000300

08003e20 <sh2_spi_hal_write>:

static int sh2_spi_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
    int retval = SH2_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]

    // Validate parameters
    if ((self == 0) || (len > sizeof(txBuf)) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <sh2_spi_hal_write+0x28>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b80      	cmp	r3, #128	; 0x80
 8003e3a:	d805      	bhi.n	8003e48 <sh2_spi_hal_write+0x28>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <sh2_spi_hal_write+0x2e>
        ((len > 0) && (pBuffer == 0)))
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <sh2_spi_hal_write+0x2e>
    {
        return SH2_ERR_BAD_PARAM;
 8003e48:	f06f 0301 	mvn.w	r3, #1
 8003e4c:	e017      	b.n	8003e7e <sh2_spi_hal_write+0x5e>
    }

    // If tx buffer is not empty, return 0
    if (txBufLen != 0)
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <sh2_spi_hal_write+0x68>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <sh2_spi_hal_write+0x3a>
    {
        return 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e011      	b.n	8003e7e <sh2_spi_hal_write+0x5e>
    }

    // Copy data to tx buffer
    memcpy(txBuf, pBuffer, len);
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	480b      	ldr	r0, [pc, #44]	; (8003e8c <sh2_spi_hal_write+0x6c>)
 8003e60:	f005 fd4c 	bl	80098fc <memcpy>
    txBufLen = len;
 8003e64:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <sh2_spi_hal_write+0x68>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6013      	str	r3, [r2, #0]
    retval = len;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	617b      	str	r3, [r7, #20]

    // disable SH2 interrupts for a moment
    disableInts();
 8003e6e:	f7ff fdcc 	bl	8003a0a <disableInts>

    // Assert Wake
    ps0_waken(false);
 8003e72:	2000      	movs	r0, #0
 8003e74:	f7ff fd5a 	bl	800392c <ps0_waken>

    // re-enable SH2 interrupts.
    enableInts();
 8003e78:	f7ff fdbd 	bl	80039f6 <enableInts>

    return retval;
 8003e7c:	697b      	ldr	r3, [r7, #20]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000790 	.word	0x20000790
 8003e8c:	20000710 	.word	0x20000710

08003e90 <sh2_spi_hal_getTimeUs>:

static uint32_t sh2_spi_hal_getTimeUs(sh2_Hal_t *self)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
    return timeNowUs();
 8003e98:	f7ff fd78 	bl	800398c <timeNowUs>
 8003e9c:	4603      	mov	r3, r0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <sh2_hal_init>:

// ------------------------------------------------------------------------
// Public methods

sh2_Hal_t *sh2_hal_init(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
    // Set up the HAL reference object for the client
    sh2Hal.open = sh2_spi_hal_open;
 8003eac:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <sh2_hal_init+0x30>)
 8003eae:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <sh2_hal_init+0x34>)
 8003eb0:	601a      	str	r2, [r3, #0]
    sh2Hal.close = sh2_spi_hal_close;
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <sh2_hal_init+0x30>)
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <sh2_hal_init+0x38>)
 8003eb6:	605a      	str	r2, [r3, #4]
    sh2Hal.read = sh2_spi_hal_read;
 8003eb8:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <sh2_hal_init+0x30>)
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <sh2_hal_init+0x3c>)
 8003ebc:	609a      	str	r2, [r3, #8]
    sh2Hal.write = sh2_spi_hal_write;
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <sh2_hal_init+0x30>)
 8003ec0:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <sh2_hal_init+0x40>)
 8003ec2:	60da      	str	r2, [r3, #12]
    sh2Hal.getTimeUs = sh2_spi_hal_getTimeUs;
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <sh2_hal_init+0x30>)
 8003ec6:	4a09      	ldr	r2, [pc, #36]	; (8003eec <sh2_hal_init+0x44>)
 8003ec8:	611a      	str	r2, [r3, #16]

    return &sh2Hal;
 8003eca:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <sh2_hal_init+0x30>)
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000794 	.word	0x20000794
 8003edc:	08003c81 	.word	0x08003c81
 8003ee0:	08003d35 	.word	0x08003d35
 8003ee4:	08003da9 	.word	0x08003da9
 8003ee8:	08003e21 	.word	0x08003e21
 8003eec:	08003e91 	.word	0x08003e91

08003ef0 <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <opStart+0x18>
 8003f02:	f06f 0302 	mvn.w	r3, #2
 8003f06:	e014      	b.n	8003f32 <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
 8003f1c:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	61da      	str	r2, [r3, #28]
    }

    return rc;
 8003f30:	68fb      	ldr	r3, [r7, #12]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	4613      	mov	r3, r2
 8003f46:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00b      	beq.n	8003f68 <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	88fa      	ldrh	r2, [r7, #6]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	4798      	blx	r3
    }
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00f      	beq.n	8003fc4 <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 8003fb8:	e004      	b.n	8003fc4 <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 8003fba:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ffd6 	bl	8003f70 <opCompleted>
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e00f      	b.n	8003ffc <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <getReportLen+0x44>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003fe4:	79fa      	ldrb	r2, [r7, #7]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d105      	bne.n	8003ff6 <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <getReportLen+0x44>)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	e006      	b.n	8004004 <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b2f      	cmp	r3, #47	; 0x2f
 8004000:	d9ec      	bls.n	8003fdc <getReportLen+0x10>
        }
    }

    return 0;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	0800a448 	.word	0x0800a448

08004014 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08a      	sub	sp, #40	; 0x28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 8094 	bne.w	8004164 <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        return;
 800404a:	e090      	b.n	800416e <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	3301      	adds	r3, #1
 8004050:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 8004052:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	4413      	add	r3, r2
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ffb4 	bl	8003fcc <getReportLen>
 8004064:	4603      	mov	r3, r0
 8004066:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 8004068:	7dbb      	ldrb	r3, [r7, #22]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d107      	bne.n	800407e <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
            return;
 800407c:	e077      	b.n	800416e <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	2bf1      	cmp	r3, #241	; 0xf1
 8004082:	d107      	bne.n	8004094 <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 8004084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	4413      	add	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	789b      	ldrb	r3, [r3, #2]
 8004090:	2b84      	cmp	r3, #132	; 0x84
 8004092:	e059      	b.n	8004148 <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2bfc      	cmp	r3, #252	; 0xfc
 8004098:	d156      	bne.n	8004148 <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d052      	beq.n	8004148 <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 80040a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	4413      	add	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 80040aa:	4b32      	ldr	r3, [pc, #200]	; (8004174 <sensorhubControlHdlr+0x160>)
 80040ac:	2202      	movs	r2, #2
 80040ae:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	785a      	ldrb	r2, [r3, #1]
 80040b4:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <sensorhubControlHdlr+0x160>)
 80040b6:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	789b      	ldrb	r3, [r3, #2]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf14      	ite	ne
 80040c4:	2301      	movne	r3, #1
 80040c6:	2300      	moveq	r3, #0
 80040c8:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <sensorhubControlHdlr+0x160>)
 80040cc:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	789b      	ldrb	r3, [r3, #2]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf14      	ite	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	2300      	moveq	r3, #0
 80040de:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 80040e0:	4b24      	ldr	r3, [pc, #144]	; (8004174 <sensorhubControlHdlr+0x160>)
 80040e2:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	789b      	ldrb	r3, [r3, #2]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 80040f6:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <sensorhubControlHdlr+0x160>)
 80040f8:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	789b      	ldrb	r3, [r3, #2]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf14      	ite	ne
 8004106:	2301      	movne	r3, #1
 8004108:	2300      	moveq	r3, #0
 800410a:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <sensorhubControlHdlr+0x160>)
 800410e:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004116:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 8004118:	4b16      	ldr	r3, [pc, #88]	; (8004174 <sensorhubControlHdlr+0x160>)
 800411a:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 8004122:	4a14      	ldr	r2, [pc, #80]	; (8004174 <sensorhubControlHdlr+0x160>)
 8004124:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 800412c:	4a11      	ldr	r2, [pc, #68]	; (8004174 <sensorhubControlHdlr+0x160>)
 800412e:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 8004136:	4a0f      	ldr	r2, [pc, #60]	; (8004174 <sensorhubControlHdlr+0x160>)
 8004138:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004142:	490c      	ldr	r1, [pc, #48]	; (8004174 <sensorhubControlHdlr+0x160>)
 8004144:	4610      	mov	r0, r2
 8004146:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 8004148:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	4413      	add	r3, r2
 800414e:	7dba      	ldrb	r2, [r7, #22]
 8004150:	b292      	uxth	r2, r2
 8004152:	4619      	mov	r1, r3
 8004154:	69f8      	ldr	r0, [r7, #28]
 8004156:	f7ff fef0 	bl	8003f3a <opRx>
            cursor += reportLen;
 800415a:	7dbb      	ldrb	r3, [r7, #22]
 800415c:	b29a      	uxth	r2, r3
 800415e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004160:	4413      	add	r3, r2
 8004162:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cursor < len) {
 8004164:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	429a      	cmp	r2, r3
 800416a:	f4ff af6f 	bcc.w	800404c <sensorhubControlHdlr+0x38>
        }
    }
}
 800416e:	3728      	adds	r7, #40	; 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	20000924 	.word	0x20000924

08004178 <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	4610      	mov	r0, r2
 8004196:	4798      	blx	r3
 8004198:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fea7 	bl	8003ef0 <opStart>
 80041a2:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <opProcess+0x36>
        return status;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	e034      	b.n	8004218 <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 80041b2:	e015      	b.n	80041e0 <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	621a      	str	r2, [r3, #32]
            break;
 80041c4:	e01b      	b.n	80041fe <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f002 f91b 	bl	8006406 <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	4610      	mov	r0, r2
 80041dc:	4798      	blx	r3
 80041de:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0e1      	beq.n	80041b4 <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad2      	subs	r2, r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d3da      	bcc.n	80041b4 <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d006      	beq.n	8004214 <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f06f 0205 	mvn.w	r2, #5
 8004212:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 8004220:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004224:	b087      	sub	sp, #28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	4613      	mov	r3, r2
 800422e:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <touSTimestamp+0x80>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	429a      	cmp	r2, r3
 8004238:	d204      	bcs.n	8004244 <touSTimestamp+0x24>
        rollovers++;
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <touSTimestamp+0x84>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <touSTimestamp+0x84>)
 8004242:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 8004244:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <touSTimestamp+0x80>)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <touSTimestamp+0x84>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	469a      	mov	sl, r3
 8004252:	4693      	mov	fp, r2
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	4653      	mov	r3, sl
 800425e:	2200      	movs	r2, #0
 8004260:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4413      	add	r3, r2
 800426a:	2264      	movs	r2, #100	; 0x64
 800426c:	fb02 f303 	mul.w	r3, r2, r3
 8004270:	461a      	mov	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	2200      	movs	r2, #0
 8004278:	461c      	mov	r4, r3
 800427a:	4615      	mov	r5, r2
 800427c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004280:	eb12 0804 	adds.w	r8, r2, r4
 8004284:	eb43 0905 	adc.w	r9, r3, r5
 8004288:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 800428c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000940 	.word	0x20000940
 80042a4:	20000944 	.word	0x20000944

080042a8 <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80042a8:	b5b0      	push	{r4, r5, r7, lr}
 80042aa:	b0a0      	sub	sp, #128	; 0x80
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    int32_t referenceDelta = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	67bb      	str	r3, [r7, #120]	; 0x78

    while (cursor < len) {
 80042c2:	e099      	b.n	80043f8 <sensorhubInputHdlr+0x150>
        // Get next report id
        uint8_t reportId = payload[cursor];
 80042c4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	4413      	add	r3, r2
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 80042d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fe78 	bl	8003fcc <getReportLen>
 80042dc:	4603      	mov	r3, r0
 80042de:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        if (reportLen == 0) {
 80042e2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d107      	bne.n	80042fa <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80042f8:	e084      	b.n	8004404 <sensorhubInputHdlr+0x15c>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 80042fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80042fe:	2bfb      	cmp	r3, #251	; 0xfb
 8004300:	d10a      	bne.n	8004318 <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 8004302:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	4413      	add	r3, r2
 800430a:	667b      	str	r3, [r7, #100]	; 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 800430c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800430e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004312:	425b      	negs	r3, r3
 8004314:	67bb      	str	r3, [r7, #120]	; 0x78
 8004316:	e067      	b.n	80043e8 <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 8004318:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800431c:	2bfa      	cmp	r3, #250	; 0xfa
 800431e:	d10b      	bne.n	8004338 <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 8004320:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4413      	add	r3, r2
 8004328:	66bb      	str	r3, [r7, #104]	; 0x68

                referenceDelta += rpt->timebase;
 800432a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800432c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004330:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004332:	4413      	add	r3, r2
 8004334:	67bb      	str	r3, [r7, #120]	; 0x78
 8004336:	e057      	b.n	80043e8 <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 8004338:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800433c:	2bef      	cmp	r3, #239	; 0xef
 800433e:	d10b      	bne.n	8004358 <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 8004340:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	4413      	add	r3, r2
 8004348:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800434c:	b292      	uxth	r2, r2
 800434e:	4619      	mov	r1, r3
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff fdf2 	bl	8003f3a <opRx>
 8004356:	e047      	b.n	80043e8 <sensorhubInputHdlr+0x140>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 8004358:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	4413      	add	r3, r2
 8004360:	673b      	str	r3, [r7, #112]	; 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 8004362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004364:	3302      	adds	r3, #2
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	b29b      	uxth	r3, r3
 800436c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004370:	b29a      	uxth	r2, r3
 8004372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004374:	3303      	adds	r3, #3
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	4413      	add	r3, r2
 800437c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 8004380:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004384:	461a      	mov	r2, r3
 8004386:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004388:	6838      	ldr	r0, [r7, #0]
 800438a:	f7ff ff49 	bl	8004220 <touSTimestamp>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 8004396:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800439a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800439c:	4413      	add	r3, r2
 800439e:	2264      	movs	r2, #100	; 0x64
 80043a0:	fb02 f303 	mul.w	r3, r2, r3
 80043a4:	17da      	asrs	r2, r3, #31
 80043a6:	461c      	mov	r4, r3
 80043a8:	4615      	mov	r5, r2
 80043aa:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 80043ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80043b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                memcpy(event.report, pReport, reportLen);
 80043b6:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80043ba:	f107 0310 	add.w	r3, r7, #16
 80043be:	3312      	adds	r3, #18
 80043c0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80043c2:	4618      	mov	r0, r3
 80043c4:	f005 fa9a 	bl	80098fc <memcpy>
                event.len = reportLen;
 80043c8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80043cc:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <sensorhubInputHdlr+0x140>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043e0:	f107 0110 	add.w	r1, r7, #16
 80043e4:	4610      	mov	r0, r2
 80043e6:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 80043e8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80043f2:	4413      	add	r3, r2
 80043f4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    while (cursor < len) {
 80043f8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80043fc:	88fb      	ldrh	r3, [r7, #6]
 80043fe:	429a      	cmp	r2, r3
 8004400:	f4ff af60 	bcc.w	80042c4 <sensorhubInputHdlr+0x1c>
        }
    }
}
 8004404:	3780      	adds	r7, #128	; 0x80
 8004406:	46bd      	mov	sp, r7
 8004408:	bdb0      	pop	{r4, r5, r7, pc}

0800440a <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	6978      	ldr	r0, [r7, #20]
 8004426:	f7ff ff3f 	bl	80042a8 <sensorhubInputHdlr>
}
 800442a:	bf00      	nop
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	6978      	ldr	r0, [r7, #20]
 800444e:	f7ff ff2b 	bl	80042a8 <sensorhubInputHdlr>
}
 8004452:	bf00      	nop
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 800445a:	b5b0      	push	{r4, r5, r7, lr}
 800445c:	b09c      	sub	sp, #112	; 0x70
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	66bb      	str	r3, [r7, #104]	; 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 8004474:	232a      	movs	r3, #42	; 0x2a
 8004476:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t reportLen = getReportLen(reportId);
 800447a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fda4 	bl	8003fcc <getReportLen>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    while (cursor < len) {
 800448a:	e02d      	b.n	80044e8 <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	461c      	mov	r4, r3
 8004492:	4615      	mov	r5, r2
 8004494:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 8004498:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800449c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        memcpy(event.report, payload+cursor, reportLen);
 80044a0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	18d1      	adds	r1, r2, r3
 80044a8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80044ac:	f107 0310 	add.w	r3, r7, #16
 80044b0:	3312      	adds	r3, #18
 80044b2:	4618      	mov	r0, r3
 80044b4:	f005 fa22 	bl	80098fc <memcpy>
        event.len = reportLen;
 80044b8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80044bc:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 80044c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 80044c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044d0:	f107 0110 	add.w	r1, r7, #16
 80044d4:	4610      	mov	r0, r2
 80044d6:	4798      	blx	r3
        }

        cursor += reportLen;
 80044d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80044dc:	b29a      	uxth	r2, r3
 80044de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80044e2:	4413      	add	r3, r2
 80044e4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    while (cursor < len) {
 80044e8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d3cc      	bcc.n	800448c <sensorhubInputGyroRvHdlr+0x32>
    }
}
 80044f2:	bf00      	nop
 80044f4:	bf00      	nop
 80044f6:	3770      	adds	r7, #112	; 0x70
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bdb0      	pop	{r4, r5, r7, pc}

080044fc <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d007      	beq.n	8004526 <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        return;
 8004524:	e021      	b.n	800456a <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d114      	bne.n	8004558 <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2201      	movs	r2, #1
 8004532:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 8004534:	6978      	ldr	r0, [r7, #20]
 8004536:	f7ff fd2d 	bl	8003f94 <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 800453a:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <executableDeviceHdlr+0x74>)
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00f      	beq.n	8004568 <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004550:	4907      	ldr	r1, [pc, #28]	; (8004570 <executableDeviceHdlr+0x74>)
 8004552:	4610      	mov	r0, r2
 8004554:	4798      	blx	r3
            }
            break;
 8004556:	e007      	b.n	8004568 <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
            break;
 8004566:	e000      	b.n	800456a <executableDeviceHdlr+0x6e>
            break;
 8004568:	bf00      	nop
    }
}
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000924 	.word	0x20000924

08004574 <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6858      	ldr	r0, [r3, #4]
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	2102      	movs	r1, #2
 800458c:	f001 ff0a 	bl	80063a4 <shtp_send>
 8004590:	4603      	mov	r3, r0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b08a      	sub	sp, #40	; 0x28
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <setSensorConfigStart+0x28>
 80045b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ba:	f043 0302 	orr.w	r3, r3, #2
 80045be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	785b      	ldrb	r3, [r3, #1]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <setSensorConfigStart+0x3c>
 80045ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	789b      	ldrb	r3, [r3, #2]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <setSensorConfigStart+0x50>
 80045de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045e2:	f043 0304 	orr.w	r3, r3, #4
 80045e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	78db      	ldrb	r3, [r3, #3]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <setSensorConfigStart+0x64>
 80045f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	791b      	ldrb	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <setSensorConfigStart+0x78>
 8004606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800460a:	f043 0310 	orr.w	r3, r3, #16
 800460e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    memset(&req, 0, sizeof(req));
 8004612:	f107 0308 	add.w	r3, r7, #8
 8004616:	2211      	movs	r2, #17
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f005 f97c 	bl	8009918 <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 8004620:	23fd      	movs	r3, #253	; 0xfd
 8004622:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800462a:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 800462c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004630:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	88db      	ldrh	r3, [r3, #6]
 8004636:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8004652:	f107 0308 	add.w	r3, r7, #8
 8004656:	2211      	movs	r2, #17
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff ff8a 	bl	8004574 <sendCtrl>
 8004660:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 8004662:	69f9      	ldr	r1, [r7, #28]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff fc83 	bl	8003f70 <opCompleted>

    return rc;
 800466a:	69fb      	ldr	r3, [r7, #28]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3728      	adds	r7, #40	; 0x28
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <shtpEventCallback+0x3c>)
 8004682:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8004684:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <shtpEventCallback+0x40>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <shtpEventCallback+0x40>)
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046a0:	4904      	ldr	r1, [pc, #16]	; (80046b4 <shtpEventCallback+0x40>)
 80046a2:	4610      	mov	r0, r2
 80046a4:	4798      	blx	r3
    }
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200007ac 	.word	0x200007ac
 80046b4:	20000924 	.word	0x20000924

080046b8 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 80046c4:	4b41      	ldr	r3, [pc, #260]	; (80047cc <sh2_open+0x114>)
 80046c6:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <sh2_open+0x1c>
 80046ce:	f06f 0301 	mvn.w	r3, #1
 80046d2:	e077      	b.n	80047c4 <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 80046d4:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80046d8:	2100      	movs	r1, #0
 80046da:	69b8      	ldr	r0, [r7, #24]
 80046dc:	f005 f91c 	bl	8009918 <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2200      	movs	r2, #0
 80046e4:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
    pSh2->eventCookie = eventCookie;
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	63da      	str	r2, [r3, #60]	; 0x3c
    pSh2->sensorCallback = 0;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2200      	movs	r2, #0
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = 0;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2200      	movs	r2, #0
 8004702:	645a      	str	r2, [r3, #68]	; 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f001 fdd3 	bl	80062b4 <shtp_open>
 800470e:	4602      	mov	r2, r0
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 800471c:	f04f 33ff 	mov.w	r3, #4294967295
 8004720:	e050      	b.n	80047c4 <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4929      	ldr	r1, [pc, #164]	; (80047d0 <sh2_open+0x118>)
 800472a:	4618      	mov	r0, r3
 800472c:	f001 fdf6 	bl	800631c <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	6858      	ldr	r0, [r3, #4]
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <sh2_open+0x11c>)
 8004738:	2102      	movs	r1, #2
 800473a:	f001 fe03 	bl	8006344 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	6858      	ldr	r0, [r3, #4]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	4a24      	ldr	r2, [pc, #144]	; (80047d8 <sh2_open+0x120>)
 8004746:	2103      	movs	r1, #3
 8004748:	f001 fdfc 	bl	8006344 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6858      	ldr	r0, [r3, #4]
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	4a22      	ldr	r2, [pc, #136]	; (80047dc <sh2_open+0x124>)
 8004754:	2104      	movs	r1, #4
 8004756:	f001 fdf5 	bl	8006344 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	6858      	ldr	r0, [r3, #4]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <sh2_open+0x128>)
 8004762:	2105      	movs	r1, #5
 8004764:	f001 fdee 	bl	8006344 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	6858      	ldr	r0, [r3, #4]
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <sh2_open+0x12c>)
 8004770:	2101      	movs	r1, #1
 8004772:	f001 fde7 	bl	8006344 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	4610      	mov	r0, r2
 8004782:	4798      	blx	r3
 8004784:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 800478a:	e00c      	b.n	80047a6 <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4618      	mov	r0, r3
 8004792:	f001 fe38 	bl	8006406 <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	4610      	mov	r0, r2
 80047a2:	4798      	blx	r3
 80047a4:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <sh2_open+0x130>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d807      	bhi.n	80047c2 <sh2_open+0x10a>
           (!pSh2->resetComplete))
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	7a1b      	ldrb	r3, [r3, #8]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f083 0301 	eor.w	r3, r3, #1
 80047bc:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e4      	bne.n	800478c <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	200007ac 	.word	0x200007ac
 80047d0:	08004675 	.word	0x08004675
 80047d4:	08004015 	.word	0x08004015
 80047d8:	0800440b 	.word	0x0800440b
 80047dc:	08004433 	.word	0x08004433
 80047e0:	0800445b 	.word	0x0800445b
 80047e4:	080044fd 	.word	0x080044fd
 80047e8:	00030d3f 	.word	0x00030d3f

080047ec <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 80047f2:	4b07      	ldr	r3, [pc, #28]	; (8004810 <sh2_service+0x24>)
 80047f4:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4618      	mov	r0, r3
 8004804:	f001 fdff 	bl	8006406 <shtp_service>
    }
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	200007ac 	.word	0x200007ac

08004814 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <sh2_setSensorCallback+0x28>)
 8004820:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = cookie;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	645a      	str	r2, [r3, #68]	; 0x44

    return SH2_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	200007ac 	.word	0x200007ac

08004840 <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	6039      	str	r1, [r7, #0]
 800484a:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <sh2_setSensorConfig+0x4c>)
 800484e:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 8004858:	f04f 33ff 	mov.w	r3, #4294967295
 800485c:	e012      	b.n	8004884 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3324      	adds	r3, #36	; 0x24
 8004862:	2210      	movs	r2, #16
 8004864:	2100      	movs	r1, #0
 8004866:	4618      	mov	r0, r3
 8004868:	f005 f856 	bl	8009918 <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	79fa      	ldrb	r2, [r7, #7]
 8004870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	625a      	str	r2, [r3, #36]	; 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 800487a:	4905      	ldr	r1, [pc, #20]	; (8004890 <sh2_setSensorConfig+0x50>)
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff fc7b 	bl	8004178 <opProcess>
 8004882:	4603      	mov	r3, r0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	200007ac 	.word	0x200007ac
 8004890:	0800a4a8 	.word	0x0800a4a8

08004894 <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	7c5a      	ldrb	r2, [r3, #17]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b2a      	cmp	r3, #42	; 0x2a
 80048bc:	d00b      	beq.n	80048d6 <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	7cda      	ldrb	r2, [r3, #19]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	7d1b      	ldrb	r3, [r3, #20]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	709a      	strb	r2, [r3, #2]
 80048d4:	e005      	b.n	80048e2 <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	2b2d      	cmp	r3, #45	; 0x2d
 80048ea:	f200 8155 	bhi.w	8004b98 <sh2_decodeSensorEvent+0x304>
 80048ee:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <sh2_decodeSensorEvent+0x60>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	080049b9 	.word	0x080049b9
 80048f8:	080049e9 	.word	0x080049e9
 80048fc:	08004a0d 	.word	0x08004a0d
 8004900:	080049c5 	.word	0x080049c5
 8004904:	08004a25 	.word	0x08004a25
 8004908:	080049d1 	.word	0x080049d1
 800490c:	080049f5 	.word	0x080049f5
 8004910:	08004a31 	.word	0x08004a31
 8004914:	08004a3d 	.word	0x08004a3d
 8004918:	08004a49 	.word	0x08004a49
 800491c:	08004a55 	.word	0x08004a55
 8004920:	08004a61 	.word	0x08004a61
 8004924:	08004a6d 	.word	0x08004a6d
 8004928:	08004a79 	.word	0x08004a79
 800492c:	08004a19 	.word	0x08004a19
 8004930:	08004a91 	.word	0x08004a91
 8004934:	08004aa9 	.word	0x08004aa9
 8004938:	08004ab5 	.word	0x08004ab5
 800493c:	08004ac1 	.word	0x08004ac1
 8004940:	080049ad 	.word	0x080049ad
 8004944:	080049dd 	.word	0x080049dd
 8004948:	08004a01 	.word	0x08004a01
 800494c:	08004a85 	.word	0x08004a85
 8004950:	08004a9d 	.word	0x08004a9d
 8004954:	08004acd 	.word	0x08004acd
 8004958:	08004ad9 	.word	0x08004ad9
 800495c:	08004ae5 	.word	0x08004ae5
 8004960:	08004af1 	.word	0x08004af1
 8004964:	08004b99 	.word	0x08004b99
 8004968:	08004afd 	.word	0x08004afd
 800496c:	08004b09 	.word	0x08004b09
 8004970:	08004b15 	.word	0x08004b15
 8004974:	08004b21 	.word	0x08004b21
 8004978:	08004b2d 	.word	0x08004b2d
 800497c:	08004b39 	.word	0x08004b39
 8004980:	08004b99 	.word	0x08004b99
 8004984:	08004b99 	.word	0x08004b99
 8004988:	08004b99 	.word	0x08004b99
 800498c:	08004b99 	.word	0x08004b99
 8004990:	08004b45 	.word	0x08004b45
 8004994:	08004b51 	.word	0x08004b51
 8004998:	08004b5d 	.word	0x08004b5d
 800499c:	08004b69 	.word	0x08004b69
 80049a0:	08004b75 	.word	0x08004b75
 80049a4:	08004b81 	.word	0x08004b81
 80049a8:	08004b8d 	.word	0x08004b8d
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 80049ac:	6839      	ldr	r1, [r7, #0]
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f8fc 	bl	8004bac <decodeRawAccelerometer>
 80049b4:	60f8      	str	r0, [r7, #12]
            break;
 80049b6:	e0f3      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f924 	bl	8004c08 <decodeAccelerometer>
 80049c0:	60f8      	str	r0, [r7, #12]
            break;
 80049c2:	e0ed      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 80049c4:	6839      	ldr	r1, [r7, #0]
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f95e 	bl	8004c88 <decodeLinearAcceleration>
 80049cc:	60f8      	str	r0, [r7, #12]
            break;
 80049ce:	e0e7      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f998 	bl	8004d08 <decodeGravity>
 80049d8:	60f8      	str	r0, [r7, #12]
            break;
 80049da:	e0e1      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 80049dc:	6839      	ldr	r1, [r7, #0]
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f9d2 	bl	8004d88 <decodeRawGyroscope>
 80049e4:	60f8      	str	r0, [r7, #12]
            break;
 80049e6:	e0db      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 80049e8:	6839      	ldr	r1, [r7, #0]
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa04 	bl	8004df8 <decodeGyroscopeCalibrated>
 80049f0:	60f8      	str	r0, [r7, #12]
            break;
 80049f2:	e0d5      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa3e 	bl	8004e78 <decodeGyroscopeUncal>
 80049fc:	60f8      	str	r0, [r7, #12]
            break;
 80049fe:	e0cf      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 faaa 	bl	8004f5c <decodeRawMagnetometer>
 8004a08:	60f8      	str	r0, [r7, #12]
            break;
 8004a0a:	e0c9      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 8004a0c:	6839      	ldr	r1, [r7, #0]
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fad2 	bl	8004fb8 <decodeMagneticFieldCalibrated>
 8004a14:	60f8      	str	r0, [r7, #12]
            break;
 8004a16:	e0c3      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 8004a18:	6839      	ldr	r1, [r7, #0]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fb0c 	bl	8005038 <decodeMagneticFieldUncal>
 8004a20:	60f8      	str	r0, [r7, #12]
            break;
 8004a22:	e0bd      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 8004a24:	6839      	ldr	r1, [r7, #0]
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fb78 	bl	800511c <decodeRotationVector>
 8004a2c:	60f8      	str	r0, [r7, #12]
            break;
 8004a2e:	e0b7      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fbd6 	bl	80051e4 <decodeGameRotationVector>
 8004a38:	60f8      	str	r0, [r7, #12]
            break;
 8004a3a:	e0b1      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fc20 	bl	8005284 <decodeGeomagneticRotationVector>
 8004a44:	60f8      	str	r0, [r7, #12]
            break;
 8004a46:	e0ab      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fc7e 	bl	800534c <decodePressure>
 8004a50:	60f8      	str	r0, [r7, #12]
            break;
 8004a52:	e0a5      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fc94 	bl	8005384 <decodeAmbientLight>
 8004a5c:	60f8      	str	r0, [r7, #12]
            break;
 8004a5e:	e09f      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fcaa 	bl	80053bc <decodeHumidity>
 8004a68:	60f8      	str	r0, [r7, #12]
            break;
 8004a6a:	e099      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fcc2 	bl	80053f8 <decodeProximity>
 8004a74:	60f8      	str	r0, [r7, #12]
            break;
 8004a76:	e093      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fcda 	bl	8005434 <decodeTemperature>
 8004a80:	60f8      	str	r0, [r7, #12]
            break;
 8004a82:	e08d      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fcf2 	bl	8005470 <decodeReserved>
 8004a8c:	60f8      	str	r0, [r7, #12]
            break;
 8004a8e:	e087      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 8004a90:	6839      	ldr	r1, [r7, #0]
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fd0a 	bl	80054ac <decodeTapDetector>
 8004a98:	60f8      	str	r0, [r7, #12]
            break;
 8004a9a:	e081      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fd14 	bl	80054cc <decodeStepDetector>
 8004aa4:	60f8      	str	r0, [r7, #12]
            break;
 8004aa6:	e07b      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 8004aa8:	6839      	ldr	r1, [r7, #0]
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fd20 	bl	80054f0 <decodeStepCounter>
 8004ab0:	60f8      	str	r0, [r7, #12]
            break;
 8004ab2:	e075      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8004ab4:	6839      	ldr	r1, [r7, #0]
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fd35 	bl	8005526 <decodeSignificantMotion>
 8004abc:	60f8      	str	r0, [r7, #12]
            break;
 8004abe:	e06f      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 8004ac0:	6839      	ldr	r1, [r7, #0]
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fd42 	bl	800554c <decodeStabilityClassifier>
 8004ac8:	60f8      	str	r0, [r7, #12]
            break;
 8004aca:	e069      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fd4c 	bl	800556c <decodeShakeDetector>
 8004ad4:	60f8      	str	r0, [r7, #12]
            break;
 8004ad6:	e063      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 8004ad8:	6839      	ldr	r1, [r7, #0]
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fd59 	bl	8005592 <decodeFlipDetector>
 8004ae0:	60f8      	str	r0, [r7, #12]
            break;
 8004ae2:	e05d      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8004ae4:	6839      	ldr	r1, [r7, #0]
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fd66 	bl	80055b8 <decodePickupDetector>
 8004aec:	60f8      	str	r0, [r7, #12]
            break;
 8004aee:	e057      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fd73 	bl	80055de <decodeStabilityDetector>
 8004af8:	60f8      	str	r0, [r7, #12]
            break;
 8004afa:	e051      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 8004afc:	6839      	ldr	r1, [r7, #0]
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fd80 	bl	8005604 <decodePersonalActivityClassifier>
 8004b04:	60f8      	str	r0, [r7, #12]
            break;
 8004b06:	e04b      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fdad 	bl	800566a <decodeSleepDetector>
 8004b10:	60f8      	str	r0, [r7, #12]
            break;
 8004b12:	e045      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fdb7 	bl	800568a <decodeTiltDetector>
 8004b1c:	60f8      	str	r0, [r7, #12]
            break;
 8004b1e:	e03f      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fdc4 	bl	80056b0 <decodePocketDetector>
 8004b28:	60f8      	str	r0, [r7, #12]
            break;
 8004b2a:	e039      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fdd1 	bl	80056d6 <decodeCircleDetector>
 8004b34:	60f8      	str	r0, [r7, #12]
            break;
 8004b36:	e033      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 8004b38:	6839      	ldr	r1, [r7, #0]
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fdde 	bl	80056fc <decodeHeartRateMonitor>
 8004b40:	60f8      	str	r0, [r7, #12]
            break;
 8004b42:	e02d      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 8004b44:	6839      	ldr	r1, [r7, #0]
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fdec 	bl	8005724 <decodeArvrStabilizedRV>
 8004b4c:	60f8      	str	r0, [r7, #12]
            break;
 8004b4e:	e027      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fe4a 	bl	80057ec <decodeArvrStabilizedGRV>
 8004b58:	60f8      	str	r0, [r7, #12]
            break;
 8004b5a:	e021      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fe94 	bl	800588c <decodeGyroIntegratedRV>
 8004b64:	60f8      	str	r0, [r7, #12]
            break;
 8004b66:	e01b      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 ff14 	bl	8005998 <decodeIZroRequest>
 8004b70:	60f8      	str	r0, [r7, #12]
            break;
 8004b72:	e015      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 8004b74:	6839      	ldr	r1, [r7, #0]
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 ff22 	bl	80059c0 <decodeRawOptFlow>
 8004b7c:	60f8      	str	r0, [r7, #12]
            break;
 8004b7e:	e00f      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 ff9a 	bl	8005abc <decodeDeadReckoningPose>
 8004b88:	60f8      	str	r0, [r7, #12]
            break;
 8004b8a:	e009      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 8004b8c:	6839      	ldr	r1, [r7, #0]
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f001 f87e 	bl	8005c90 <decodeWheelEncoder>
 8004b94:	60f8      	str	r0, [r7, #12]
            break;
 8004b96:	e003      	b.n	8004ba0 <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 8004b98:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9c:	60fb      	str	r3, [r7, #12]
            break;
 8004b9e:	bf00      	nop
    }

    return rc;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop

08004bac <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	3316      	adds	r3, #22
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 f8d9 	bl	8005d72 <read16>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	3318      	adds	r3, #24
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 f8d0 	bl	8005d72 <read16>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	331a      	adds	r3, #26
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 f8c7 	bl	8005d72 <read16>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	331e      	adds	r3, #30
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 f8d4 	bl	8005d9e <read32>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	3316      	adds	r3, #22
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 f8ab 	bl	8005d72 <read16>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c26:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004c84 <decodeAccelerometer+0x7c>
 8004c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	3318      	adds	r3, #24
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 f89a 	bl	8005d72 <read16>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	ee07 3a90 	vmov	s15, r3
 8004c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c48:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004c84 <decodeAccelerometer+0x7c>
 8004c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	331a      	adds	r3, #26
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f001 f889 	bl	8005d72 <read16>
 8004c60:	4603      	mov	r3, r0
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c6a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004c84 <decodeAccelerometer+0x7c>
 8004c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	3b800000 	.word	0x3b800000

08004c88 <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	3316      	adds	r3, #22
 8004c96:	4618      	mov	r0, r3
 8004c98:	f001 f86b 	bl	8005d72 <read16>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ca6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004d04 <decodeLinearAcceleration+0x7c>
 8004caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	3318      	adds	r3, #24
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 f85a 	bl	8005d72 <read16>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004d04 <decodeLinearAcceleration+0x7c>
 8004ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	331a      	adds	r3, #26
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 f849 	bl	8005d72 <read16>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004d04 <decodeLinearAcceleration+0x7c>
 8004cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	3b800000 	.word	0x3b800000

08004d08 <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	3316      	adds	r3, #22
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 f82b 	bl	8005d72 <read16>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d26:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004d84 <decodeGravity+0x7c>
 8004d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	3318      	adds	r3, #24
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f001 f81a 	bl	8005d72 <read16>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	ee07 3a90 	vmov	s15, r3
 8004d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d48:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004d84 <decodeGravity+0x7c>
 8004d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	331a      	adds	r3, #26
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 f809 	bl	8005d72 <read16>
 8004d60:	4603      	mov	r3, r0
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d6a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004d84 <decodeGravity+0x7c>
 8004d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	3b800000 	.word	0x3b800000

08004d88 <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	3316      	adds	r3, #22
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 ffeb 	bl	8005d72 <read16>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	3318      	adds	r3, #24
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 ffe2 	bl	8005d72 <read16>
 8004dae:	4603      	mov	r3, r0
 8004db0:	461a      	mov	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	331a      	adds	r3, #26
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 ffd9 	bl	8005d72 <read16>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	331c      	adds	r3, #28
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 ffd0 	bl	8005d72 <read16>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	331e      	adds	r3, #30
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 ffdd 	bl	8005d9e <read32>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	3316      	adds	r3, #22
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 ffb3 	bl	8005d72 <read16>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e16:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004e74 <decodeGyroscopeCalibrated+0x7c>
 8004e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	3318      	adds	r3, #24
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 ffa2 	bl	8005d72 <read16>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	ee07 3a90 	vmov	s15, r3
 8004e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e38:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004e74 <decodeGyroscopeCalibrated+0x7c>
 8004e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	331a      	adds	r3, #26
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 ff91 	bl	8005d72 <read16>
 8004e50:	4603      	mov	r3, r0
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e5a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004e74 <decodeGyroscopeCalibrated+0x7c>
 8004e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	3b000000 	.word	0x3b000000

08004e78 <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	3316      	adds	r3, #22
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 ff73 	bl	8005d72 <read16>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e96:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004f58 <decodeGyroscopeUncal+0xe0>
 8004e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	3318      	adds	r3, #24
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 ff62 	bl	8005d72 <read16>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004f58 <decodeGyroscopeUncal+0xe0>
 8004ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	331a      	adds	r3, #26
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 ff51 	bl	8005d72 <read16>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eda:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004f58 <decodeGyroscopeUncal+0xe0>
 8004ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	331c      	adds	r3, #28
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 ff40 	bl	8005d72 <read16>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004efc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004f58 <decodeGyroscopeUncal+0xe0>
 8004f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	331e      	adds	r3, #30
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 ff2f 	bl	8005d72 <read16>
 8004f14:	4603      	mov	r3, r0
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f1e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004f58 <decodeGyroscopeUncal+0xe0>
 8004f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	3320      	adds	r3, #32
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 ff1e 	bl	8005d72 <read16>
 8004f36:	4603      	mov	r3, r0
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f40:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004f58 <decodeGyroscopeUncal+0xe0>
 8004f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	3b000000 	.word	0x3b000000

08004f5c <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	3316      	adds	r3, #22
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 ff01 	bl	8005d72 <read16>
 8004f70:	4603      	mov	r3, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	3318      	adds	r3, #24
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fef8 	bl	8005d72 <read16>
 8004f82:	4603      	mov	r3, r0
 8004f84:	461a      	mov	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	331a      	adds	r3, #26
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 feef 	bl	8005d72 <read16>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	331e      	adds	r3, #30
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fefc 	bl	8005d9e <read32>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	461a      	mov	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	3316      	adds	r3, #22
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fed3 	bl	8005d72 <read16>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fd6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005034 <decodeMagneticFieldCalibrated+0x7c>
 8004fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	3318      	adds	r3, #24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fec2 	bl	8005d72 <read16>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ff8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005034 <decodeMagneticFieldCalibrated+0x7c>
 8004ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	331a      	adds	r3, #26
 800500a:	4618      	mov	r0, r3
 800500c:	f000 feb1 	bl	8005d72 <read16>
 8005010:	4603      	mov	r3, r0
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800501a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005034 <decodeMagneticFieldCalibrated+0x7c>
 800501e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	3d800000 	.word	0x3d800000

08005038 <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	3316      	adds	r3, #22
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fe93 	bl	8005d72 <read16>
 800504c:	4603      	mov	r3, r0
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005056:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005118 <decodeMagneticFieldUncal+0xe0>
 800505a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	3318      	adds	r3, #24
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fe82 	bl	8005d72 <read16>
 800506e:	4603      	mov	r3, r0
 8005070:	ee07 3a90 	vmov	s15, r3
 8005074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005078:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005118 <decodeMagneticFieldUncal+0xe0>
 800507c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	331a      	adds	r3, #26
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fe71 	bl	8005d72 <read16>
 8005090:	4603      	mov	r3, r0
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005118 <decodeMagneticFieldUncal+0xe0>
 800509e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	331c      	adds	r3, #28
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fe60 	bl	8005d72 <read16>
 80050b2:	4603      	mov	r3, r0
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050bc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005118 <decodeMagneticFieldUncal+0xe0>
 80050c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	331e      	adds	r3, #30
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fe4f 	bl	8005d72 <read16>
 80050d4:	4603      	mov	r3, r0
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050de:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005118 <decodeMagneticFieldUncal+0xe0>
 80050e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	3320      	adds	r3, #32
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fe3e 	bl	8005d72 <read16>
 80050f6:	4603      	mov	r3, r0
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005100:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005118 <decodeMagneticFieldUncal+0xe0>
 8005104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	3d800000 	.word	0x3d800000

0800511c <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	3316      	adds	r3, #22
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fe21 	bl	8005d72 <read16>
 8005130:	4603      	mov	r3, r0
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800513a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80051dc <decodeRotationVector+0xc0>
 800513e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	3318      	adds	r3, #24
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fe10 	bl	8005d72 <read16>
 8005152:	4603      	mov	r3, r0
 8005154:	ee07 3a90 	vmov	s15, r3
 8005158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800515c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80051dc <decodeRotationVector+0xc0>
 8005160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	331a      	adds	r3, #26
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fdff 	bl	8005d72 <read16>
 8005174:	4603      	mov	r3, r0
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800517e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80051dc <decodeRotationVector+0xc0>
 8005182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	331c      	adds	r3, #28
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fdee 	bl	8005d72 <read16>
 8005196:	4603      	mov	r3, r0
 8005198:	ee07 3a90 	vmov	s15, r3
 800519c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80051dc <decodeRotationVector+0xc0>
 80051a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	331e      	adds	r3, #30
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fddd 	bl	8005d72 <read16>
 80051b8:	4603      	mov	r3, r0
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80051e0 <decodeRotationVector+0xc4>
 80051c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	38800000 	.word	0x38800000
 80051e0:	39800000 	.word	0x39800000

080051e4 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	3316      	adds	r3, #22
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fdbd 	bl	8005d72 <read16>
 80051f8:	4603      	mov	r3, r0
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005202:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005280 <decodeGameRotationVector+0x9c>
 8005206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	3318      	adds	r3, #24
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fdac 	bl	8005d72 <read16>
 800521a:	4603      	mov	r3, r0
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005224:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005280 <decodeGameRotationVector+0x9c>
 8005228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	331a      	adds	r3, #26
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fd9b 	bl	8005d72 <read16>
 800523c:	4603      	mov	r3, r0
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005246:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005280 <decodeGameRotationVector+0x9c>
 800524a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	331c      	adds	r3, #28
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fd8a 	bl	8005d72 <read16>
 800525e:	4603      	mov	r3, r0
 8005260:	ee07 3a90 	vmov	s15, r3
 8005264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005268:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005280 <decodeGameRotationVector+0x9c>
 800526c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	38800000 	.word	0x38800000

08005284 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	3316      	adds	r3, #22
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fd6d 	bl	8005d72 <read16>
 8005298:	4603      	mov	r3, r0
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052a2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005344 <decodeGeomagneticRotationVector+0xc0>
 80052a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	3318      	adds	r3, #24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fd5c 	bl	8005d72 <read16>
 80052ba:	4603      	mov	r3, r0
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005344 <decodeGeomagneticRotationVector+0xc0>
 80052c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	331a      	adds	r3, #26
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fd4b 	bl	8005d72 <read16>
 80052dc:	4603      	mov	r3, r0
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005344 <decodeGeomagneticRotationVector+0xc0>
 80052ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	331c      	adds	r3, #28
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fd3a 	bl	8005d72 <read16>
 80052fe:	4603      	mov	r3, r0
 8005300:	ee07 3a90 	vmov	s15, r3
 8005304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005308:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005344 <decodeGeomagneticRotationVector+0xc0>
 800530c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	331e      	adds	r3, #30
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fd29 	bl	8005d72 <read16>
 8005320:	4603      	mov	r3, r0
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800532a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005348 <decodeGeomagneticRotationVector+0xc4>
 800532e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	38800000 	.word	0x38800000
 8005348:	39800000 	.word	0x39800000

0800534c <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	3316      	adds	r3, #22
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fd1f 	bl	8005d9e <read32>
 8005360:	ee07 0a90 	vmov	s15, r0
 8005364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005368:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005380 <decodePressure+0x34>
 800536c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	35800000 	.word	0x35800000

08005384 <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	3316      	adds	r3, #22
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fd03 	bl	8005d9e <read32>
 8005398:	ee07 0a90 	vmov	s15, r0
 800539c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053a0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80053b8 <decodeAmbientLight+0x34>
 80053a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	3b800000 	.word	0x3b800000

080053bc <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	3316      	adds	r3, #22
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fcd1 	bl	8005d72 <read16>
 80053d0:	4603      	mov	r3, r0
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053da:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80053f4 <decodeHumidity+0x38>
 80053de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	3b800000 	.word	0x3b800000

080053f8 <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	3316      	adds	r3, #22
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fcb3 	bl	8005d72 <read16>
 800540c:	4603      	mov	r3, r0
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005416:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005430 <decodeProximity+0x38>
 800541a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	3d800000 	.word	0x3d800000

08005434 <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	3316      	adds	r3, #22
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fc95 	bl	8005d72 <read16>
 8005448:	4603      	mov	r3, r0
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005452:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800546c <decodeTemperature+0x38>
 8005456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	3c000000 	.word	0x3c000000

08005470 <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	3316      	adds	r3, #22
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fc77 	bl	8005d72 <read16>
 8005484:	4603      	mov	r3, r0
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800548e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80054a8 <decodeReserved+0x38>
 8005492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	3c000000 	.word	0x3c000000

080054ac <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	7d9a      	ldrb	r2, [r3, #22]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	3316      	adds	r3, #22
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fc1c 	bl	8005d18 <readu32>
 80054e0:	4602      	mov	r2, r0
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	3316      	adds	r3, #22
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fc0a 	bl	8005d18 <readu32>
 8005504:	4602      	mov	r2, r0
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	331a      	adds	r3, #26
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fc02 	bl	8005d18 <readu32>
 8005514:	4603      	mov	r3, r0
 8005516:	b29a      	uxth	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	3316      	adds	r3, #22
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fbd9 	bl	8005cec <readu16>
 800553a:	4603      	mov	r3, r0
 800553c:	461a      	mov	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	7d9a      	ldrb	r2, [r3, #22]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	3316      	adds	r3, #22
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fbb6 	bl	8005cec <readu16>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	3316      	adds	r3, #22
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fba3 	bl	8005cec <readu16>
 80055a6:	4603      	mov	r3, r0
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	3316      	adds	r3, #22
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fb90 	bl	8005cec <readu16>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	3316      	adds	r3, #22
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fb7d 	bl	8005cec <readu16>
 80055f2:	4603      	mov	r3, r0
 80055f4:	461a      	mov	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	7d9b      	ldrb	r3, [r3, #22]
 8005612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005616:	b2da      	uxtb	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	7d9b      	ldrb	r3, [r3, #22]
 8005620:	b25b      	sxtb	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	09db      	lsrs	r3, r3, #7
 8005626:	b2da      	uxtb	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	7dda      	ldrb	r2, [r3, #23]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e00d      	b.n	8005656 <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3306      	adds	r3, #6
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	4413      	add	r3, r2
 8005642:	7c99      	ldrb	r1, [r3, #18]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	3317      	adds	r3, #23
 800564c:	460a      	mov	r2, r1
 800564e:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3301      	adds	r3, #1
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b09      	cmp	r3, #9
 800565a:	ddee      	ble.n	800563a <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	7d9a      	ldrb	r2, [r3, #22]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	3316      	adds	r3, #22
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fb27 	bl	8005cec <readu16>
 800569e:	4603      	mov	r3, r0
 80056a0:	461a      	mov	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	3316      	adds	r3, #22
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fb14 	bl	8005cec <readu16>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	3316      	adds	r3, #22
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fb01 	bl	8005cec <readu16>
 80056ea:	4603      	mov	r3, r0
 80056ec:	461a      	mov	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	3316      	adds	r3, #22
 800570a:	4618      	mov	r0, r3
 800570c:	f000 faee 	bl	8005cec <readu16>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	3316      	adds	r3, #22
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fb1d 	bl	8005d72 <read16>
 8005738:	4603      	mov	r3, r0
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005742:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80057e4 <decodeArvrStabilizedRV+0xc0>
 8005746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	3318      	adds	r3, #24
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fb0c 	bl	8005d72 <read16>
 800575a:	4603      	mov	r3, r0
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005764:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80057e4 <decodeArvrStabilizedRV+0xc0>
 8005768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	331a      	adds	r3, #26
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fafb 	bl	8005d72 <read16>
 800577c:	4603      	mov	r3, r0
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005786:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80057e4 <decodeArvrStabilizedRV+0xc0>
 800578a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	331c      	adds	r3, #28
 8005798:	4618      	mov	r0, r3
 800579a:	f000 faea 	bl	8005d72 <read16>
 800579e:	4603      	mov	r3, r0
 80057a0:	ee07 3a90 	vmov	s15, r3
 80057a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057a8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80057e4 <decodeArvrStabilizedRV+0xc0>
 80057ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	331e      	adds	r3, #30
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fad9 	bl	8005d72 <read16>
 80057c0:	4603      	mov	r3, r0
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057ca:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80057e8 <decodeArvrStabilizedRV+0xc4>
 80057ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	38800000 	.word	0x38800000
 80057e8:	39800000 	.word	0x39800000

080057ec <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	3316      	adds	r3, #22
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fab9 	bl	8005d72 <read16>
 8005800:	4603      	mov	r3, r0
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800580a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005888 <decodeArvrStabilizedGRV+0x9c>
 800580e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	3318      	adds	r3, #24
 800581c:	4618      	mov	r0, r3
 800581e:	f000 faa8 	bl	8005d72 <read16>
 8005822:	4603      	mov	r3, r0
 8005824:	ee07 3a90 	vmov	s15, r3
 8005828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800582c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005888 <decodeArvrStabilizedGRV+0x9c>
 8005830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	331a      	adds	r3, #26
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fa97 	bl	8005d72 <read16>
 8005844:	4603      	mov	r3, r0
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800584e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005888 <decodeArvrStabilizedGRV+0x9c>
 8005852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	331c      	adds	r3, #28
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fa86 	bl	8005d72 <read16>
 8005866:	4603      	mov	r3, r0
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005870:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005888 <decodeArvrStabilizedGRV+0x9c>
 8005874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	38800000 	.word	0x38800000

0800588c <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	3312      	adds	r3, #18
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fa69 	bl	8005d72 <read16>
 80058a0:	4603      	mov	r3, r0
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058aa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005990 <decodeGyroIntegratedRV+0x104>
 80058ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fa58 	bl	8005d72 <read16>
 80058c2:	4603      	mov	r3, r0
 80058c4:	ee07 3a90 	vmov	s15, r3
 80058c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058cc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005990 <decodeGyroIntegratedRV+0x104>
 80058d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	3316      	adds	r3, #22
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fa47 	bl	8005d72 <read16>
 80058e4:	4603      	mov	r3, r0
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058ee:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005990 <decodeGyroIntegratedRV+0x104>
 80058f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	3318      	adds	r3, #24
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fa36 	bl	8005d72 <read16>
 8005906:	4603      	mov	r3, r0
 8005908:	ee07 3a90 	vmov	s15, r3
 800590c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005910:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005990 <decodeGyroIntegratedRV+0x104>
 8005914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	331a      	adds	r3, #26
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fa25 	bl	8005d72 <read16>
 8005928:	4603      	mov	r3, r0
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005932:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005994 <decodeGyroIntegratedRV+0x108>
 8005936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	331c      	adds	r3, #28
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fa14 	bl	8005d72 <read16>
 800594a:	4603      	mov	r3, r0
 800594c:	ee07 3a90 	vmov	s15, r3
 8005950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005954:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005994 <decodeGyroIntegratedRV+0x108>
 8005958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	331e      	adds	r3, #30
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fa03 	bl	8005d72 <read16>
 800596c:	4603      	mov	r3, r0
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005976:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005994 <decodeGyroIntegratedRV+0x108>
 800597a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    return SH2_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	38800000 	.word	0x38800000
 8005994:	3a800000 	.word	0x3a800000

08005998 <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	7d9a      	ldrb	r2, [r3, #22]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	7dda      	ldrb	r2, [r3, #23]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	3316      	adds	r3, #22
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 f9cf 	bl	8005d72 <read16>
 80059d4:	4603      	mov	r3, r0
 80059d6:	461a      	mov	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	3318      	adds	r3, #24
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 f9c6 	bl	8005d72 <read16>
 80059e6:	4603      	mov	r3, r0
 80059e8:	461a      	mov	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	331a      	adds	r3, #26
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f9bd 	bl	8005d72 <read16>
 80059f8:	4603      	mov	r3, r0
 80059fa:	461a      	mov	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	331c      	adds	r3, #28
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 f9a5 	bl	8005d54 <read8>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	331d      	adds	r3, #29
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 f99b 	bl	8005d54 <read8>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	331e      	adds	r3, #30
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 f991 	bl	8005d54 <read8>
 8005a32:	4603      	mov	r3, r0
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	331f      	adds	r3, #31
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f987 	bl	8005d54 <read8>
 8005a46:	4603      	mov	r3, r0
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	3320      	adds	r3, #32
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 f97d 	bl	8005d54 <read8>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	3321      	adds	r3, #33	; 0x21
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f973 	bl	8005d54 <read8>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	3322      	adds	r3, #34	; 0x22
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 f969 	bl	8005d54 <read8>
 8005a82:	4603      	mov	r3, r0
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	3324      	adds	r3, #36	; 0x24
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f96e 	bl	8005d72 <read16>
 8005a96:	4603      	mov	r3, r0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	3326      	adds	r3, #38	; 0x26
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 f97b 	bl	8005d9e <read32>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	3316      	adds	r3, #22
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f967 	bl	8005d9e <read32>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	331a      	adds	r3, #26
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 f95e 	bl	8005d9e <read32>
 8005ae2:	ee07 0a90 	vmov	s15, r0
 8005ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aea:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8005c84 <decodeDeadReckoningPose+0x1c8>
 8005aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	331e      	adds	r3, #30
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 f94e 	bl	8005d9e <read32>
 8005b02:	ee07 0a90 	vmov	s15, r0
 8005b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b0a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005c84 <decodeDeadReckoningPose+0x1c8>
 8005b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	3322      	adds	r3, #34	; 0x22
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 f93e 	bl	8005d9e <read32>
 8005b22:	ee07 0a90 	vmov	s15, r0
 8005b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b2a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005c84 <decodeDeadReckoningPose+0x1c8>
 8005b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	3326      	adds	r3, #38	; 0x26
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 f92e 	bl	8005d9e <read32>
 8005b42:	ee07 0a90 	vmov	s15, r0
 8005b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b4a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005c88 <decodeDeadReckoningPose+0x1cc>
 8005b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	332a      	adds	r3, #42	; 0x2a
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 f91e 	bl	8005d9e <read32>
 8005b62:	ee07 0a90 	vmov	s15, r0
 8005b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b6a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005c88 <decodeDeadReckoningPose+0x1cc>
 8005b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	332e      	adds	r3, #46	; 0x2e
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 f90e 	bl	8005d9e <read32>
 8005b82:	ee07 0a90 	vmov	s15, r0
 8005b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b8a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005c88 <decodeDeadReckoningPose+0x1cc>
 8005b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	3332      	adds	r3, #50	; 0x32
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f8fe 	bl	8005d9e <read32>
 8005ba2:	ee07 0a90 	vmov	s15, r0
 8005ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005baa:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005c88 <decodeDeadReckoningPose+0x1cc>
 8005bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	3336      	adds	r3, #54	; 0x36
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 f8ee 	bl	8005d9e <read32>
 8005bc2:	ee07 0a90 	vmov	s15, r0
 8005bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bca:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005c8c <decodeDeadReckoningPose+0x1d0>
 8005bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	333a      	adds	r3, #58	; 0x3a
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 f8de 	bl	8005d9e <read32>
 8005be2:	ee07 0a90 	vmov	s15, r0
 8005be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bea:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005c8c <decodeDeadReckoningPose+0x1d0>
 8005bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	333e      	adds	r3, #62	; 0x3e
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f8ce 	bl	8005d9e <read32>
 8005c02:	ee07 0a90 	vmov	s15, r0
 8005c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c0a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005c8c <decodeDeadReckoningPose+0x1d0>
 8005c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	3342      	adds	r3, #66	; 0x42
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 f8be 	bl	8005d9e <read32>
 8005c22:	ee07 0a90 	vmov	s15, r0
 8005c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c2a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005c8c <decodeDeadReckoningPose+0x1d0>
 8005c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	3346      	adds	r3, #70	; 0x46
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 f8ae 	bl	8005d9e <read32>
 8005c42:	ee07 0a90 	vmov	s15, r0
 8005c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c4a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005c8c <decodeDeadReckoningPose+0x1d0>
 8005c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	334a      	adds	r3, #74	; 0x4a
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 f89e 	bl	8005d9e <read32>
 8005c62:	ee07 0a90 	vmov	s15, r0
 8005c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005c8c <decodeDeadReckoningPose+0x1d0>
 8005c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    return SH2_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	37000000 	.word	0x37000000
 8005c88:	30800000 	.word	0x30800000
 8005c8c:	33000000 	.word	0x33000000

08005c90 <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	3316      	adds	r3, #22
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f87d 	bl	8005d9e <read32>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	331a      	adds	r3, #26
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 f84f 	bl	8005d54 <read8>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	331b      	adds	r3, #27
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 f846 	bl	8005d54 <read8>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	331c      	adds	r3, #28
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 f84c 	bl	8005d72 <read16>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	b21a      	sxth	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	b21b      	sxth	r3, r3
 8005d04:	4313      	orrs	r3, r2
 8005d06:	b21b      	sxth	r3, r3
 8005d08:	81fb      	strh	r3, [r7, #14]
    return retval;
 8005d0a:	89fb      	ldrh	r3, [r7, #14]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3302      	adds	r3, #2
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	041b      	lsls	r3, r3, #16
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3303      	adds	r3, #3
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	061b      	lsls	r3, r3, #24
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
    return retval;
 8005d46:	68fb      	ldr	r3, [r7, #12]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	73fb      	strb	r3, [r7, #15]
    return retval;
 8005d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	b21a      	sxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3301      	adds	r3, #1
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	b21b      	sxth	r3, r3
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	81fb      	strh	r3, [r7, #14]
    return retval;
 8005d8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3301      	adds	r3, #1
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3302      	adds	r3, #2
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	041b      	lsls	r3, r3, #16
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3303      	adds	r3, #3
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	061b      	lsls	r3, r3, #24
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
    return retval;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8005de2:	2300      	movs	r3, #0
 8005de4:	607b      	str	r3, [r7, #4]
 8005de6:	e00b      	b.n	8005e00 <shtp_init+0x24>
        instances[n].pHal = 0;
 8005de8:	4a0b      	ldr	r2, [pc, #44]	; (8005e18 <shtp_init+0x3c>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f640 1114 	movw	r1, #2324	; 0x914
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	ddf0      	ble.n	8005de8 <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 8005e06:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <shtp_init+0x40>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	701a      	strb	r2, [r3, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	20000948 	.word	0x20000948
 8005e1c:	2000125c 	.word	0x2000125c

08005e20 <getInstance>:

static shtp_t *getInstance(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8005e26:	2300      	movs	r3, #0
 8005e28:	607b      	str	r3, [r7, #4]
 8005e2a:	e014      	b.n	8005e56 <getInstance+0x36>
        if (instances[n].pHal == 0) {
 8005e2c:	4a0f      	ldr	r2, [pc, #60]	; (8005e6c <getInstance+0x4c>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f640 1114 	movw	r1, #2324	; 0x914
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d107      	bne.n	8005e50 <getInstance+0x30>
            // This instance is free
            return &instances[n];
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f640 1214 	movw	r2, #2324	; 0x914
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <getInstance+0x4c>)
 8005e4c:	4413      	add	r3, r2
 8005e4e:	e006      	b.n	8005e5e <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3301      	adds	r3, #1
 8005e54:	607b      	str	r3, [r7, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dde7      	ble.n	8005e2c <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20000948 	.word	0x20000948

08005e70 <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	460a      	mov	r2, r1
 8005e7a:	80fb      	strh	r3, [r7, #6]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	88bb      	ldrh	r3, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d201      	bcs.n	8005e8c <min_u16+0x1c>
        return a;
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	e000      	b.n	8005e8e <min_u16+0x1e>
    }
    else {
        return b;
 8005e8c:	88bb      	ldrh	r3, [r7, #4]
    }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 8005e9a:	b590      	push	{r4, r7, lr}
 8005e9c:	b08b      	sub	sp, #44	; 0x2c
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
    
    bool continuation = false;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint16_t cursor = 0;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	843b      	strh	r3, [r7, #32]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	843b      	strh	r3, [r7, #32]
    remaining = len;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	83fb      	strh	r3, [r7, #30]
    while (remaining > 0) {
 8005ec0:	e090      	b.n	8005fe4 <txProcess+0x14a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 8005ec2:	8bfb      	ldrh	r3, [r7, #30]
 8005ec4:	217c      	movs	r1, #124	; 0x7c
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff ffd2 	bl	8005e70 <min_u16>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	837b      	strh	r3, [r7, #26]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 8005ed0:	8b7b      	ldrh	r3, [r7, #26]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	833b      	strh	r3, [r7, #24]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 8005ed6:	8b3b      	ldrh	r3, [r7, #24]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 8005ede:	8b3b      	ldrh	r3, [r7, #24]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 8005ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d006      	beq.n	8005f06 <txProcess+0x6c>
            pShtp->outTransfer[1] |= 0x80;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	7b5b      	ldrb	r3, [r3, #13]
 8005efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	7afa      	ldrb	r2, [r7, #11]
 8005f0a:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 8005f0c:	7afa      	ldrb	r2, [r7, #11]
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	4613      	mov	r3, r2
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005f1e:	7819      	ldrb	r1, [r3, #0]
 8005f20:	1c4b      	adds	r3, r1, #1
 8005f22:	b2dc      	uxtb	r4, r3
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	4613      	mov	r3, r2
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4403      	add	r3, r0
 8005f30:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005f34:	4622      	mov	r2, r4
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	460a      	mov	r2, r1
 8005f3c:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	330c      	adds	r3, #12
 8005f42:	1d18      	adds	r0, r3, #4
 8005f44:	8c3b      	ldrh	r3, [r7, #32]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	8b7a      	ldrh	r2, [r7, #26]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f003 fcd5 	bl	80098fc <memcpy>
        remaining -= transferLen;
 8005f52:	8bfa      	ldrh	r2, [r7, #30]
 8005f54:	8b7b      	ldrh	r3, [r7, #26]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	83fb      	strh	r3, [r7, #30]
        cursor += transferLen;
 8005f5a:	8c3a      	ldrh	r2, [r7, #32]
 8005f5c:	8b7b      	ldrh	r3, [r7, #26]
 8005f5e:	4413      	add	r3, r2
 8005f60:	843b      	strh	r3, [r7, #32]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	6810      	ldr	r0, [r2, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f102 010c 	add.w	r1, r2, #12
 8005f72:	8b3a      	ldrh	r2, [r7, #24]
 8005f74:	4798      	blx	r3
 8005f76:	6278      	str	r0, [r7, #36]	; 0x24

/*******************************************************************************
* USER ADDED CODE
*******************************************************************************/

        uint8_t timeoutOccurred = 1;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	777b      	strb	r3, [r7, #29]
        uint32_t tickStart = HAL_GetTick();
 8005f7c:	f000 fad2 	bl	8006524 <HAL_GetTick>
 8005f80:	6178      	str	r0, [r7, #20]
        while((HAL_GetTick() - tickStart) < 10U)
 8005f82:	e013      	b.n	8005fac <txProcess+0x112>
        {
			shtp_service(pShtp);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 fa3e 	bl	8006406 <shtp_service>
			status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	6810      	ldr	r0, [r2, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	f102 010c 	add.w	r1, r2, #12
 8005f9a:	8b3a      	ldrh	r2, [r7, #24]
 8005f9c:	4798      	blx	r3
 8005f9e:	6278      	str	r0, [r7, #36]	; 0x24
			if(status)
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <txProcess+0x112>
			{
				timeoutOccurred = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	777b      	strb	r3, [r7, #29]
				break;
 8005faa:	e006      	b.n	8005fba <txProcess+0x120>
        while((HAL_GetTick() - tickStart) < 10U)
 8005fac:	f000 faba 	bl	8006524 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b09      	cmp	r3, #9
 8005fb8:	d9e4      	bls.n	8005f84 <txProcess+0xea>
			}
        }

        if(timeoutOccurred)
 8005fba:	7f7b      	ldrb	r3, [r7, #29]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <txProcess+0x12c>
        	return SH2_ERR_TIMEOUT;
 8005fc0:	f06f 0305 	mvn.w	r3, #5
 8005fc4:	e013      	b.n	8005fee <txProcess+0x154>

/******************************************************************************/

        if (status < 0)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da08      	bge.n	8005fde <txProcess+0x144>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
            return status;
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	e007      	b.n	8005fee <txProcess+0x154>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (remaining > 0) {
 8005fe4:	8bfb      	ldrh	r3, [r7, #30]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f47f af6b 	bne.w	8005ec2 <txProcess+0x28>
    }

    return SH2_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	372c      	adds	r7, #44	; 0x2c
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd90      	pop	{r4, r7, pc}

08005ff6 <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 8005ff6:	b590      	push	{r4, r7, lr}
 8005ff8:	b087      	sub	sp, #28
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d813      	bhi.n	800603c <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 813a 	beq.w	80062a0 <rxAssemble+0x2aa>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	6892      	ldr	r2, [r2, #8]
 8006034:	2101      	movs	r1, #1
 8006036:	4610      	mov	r0, r2
 8006038:	4798      	blx	r3
        }
        return;
 800603a:	e131      	b.n	80062a0 <rxAssemble+0x2aa>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	b29a      	uxth	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	3301      	adds	r3, #1
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	021b      	lsls	r3, r3, #8
 800604c:	b29b      	uxth	r3, r3
 800604e:	4413      	add	r3, r2
 8006050:	b29b      	uxth	r3, r3
 8006052:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006056:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	3301      	adds	r3, #1
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	b25b      	sxtb	r3, r3
 8006060:	b2db      	uxtb	r3, r3
 8006062:	09db      	lsrs	r3, r3, #7
 8006064:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	789b      	ldrb	r3, [r3, #2]
 800606a:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	78db      	ldrb	r3, [r3, #3]
 8006070:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 8006072:	7dfa      	ldrb	r2, [r7, #23]
 8006074:	68f9      	ldr	r1, [r7, #12]
 8006076:	4613      	mov	r3, r2
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	7dba      	ldrb	r2, [r7, #22]
 8006088:	429a      	cmp	r2, r3
 800608a:	d00a      	beq.n	80060a2 <rxAssemble+0xac>
        if (pShtp->eventCallback) {
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d006      	beq.n	80060a2 <rxAssemble+0xac>
            pShtp->eventCallback(pShtp->eventCookie,
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	6892      	ldr	r2, [r2, #8]
 800609c:	2106      	movs	r1, #6
 800609e:	4610      	mov	r0, r2
 80060a0:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 80060a2:	8abb      	ldrh	r3, [r7, #20]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d813      	bhi.n	80060d0 <rxAssemble+0xda>
        pShtp->rxShortFragments++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80f2 	beq.w	80062a4 <rxAssemble+0x2ae>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	6892      	ldr	r2, [r2, #8]
 80060c8:	2101      	movs	r1, #1
 80060ca:	4610      	mov	r0, r2
 80060cc:	4798      	blx	r3
        }
        return;
 80060ce:	e0e9      	b.n	80062a4 <rxAssemble+0x2ae>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
 80060d2:	2b07      	cmp	r3, #7
 80060d4:	d913      	bls.n	80060fe <rxAssemble+0x108>
        // Invalid channel id.
        pShtp->rxBadChan++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

        if (pShtp->eventCallback) {
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80dd 	beq.w	80062a8 <rxAssemble+0x2b2>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	6892      	ldr	r2, [r2, #8]
 80060f6:	2103      	movs	r1, #3
 80060f8:	4610      	mov	r0, r2
 80060fa:	4798      	blx	r3
        }
        return;
 80060fc:	e0d4      	b.n	80062a8 <rxAssemble+0x2b2>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d040      	beq.n	800618a <rxAssemble+0x194>
        // Check this against previously received data.
        if (!continuation ||
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	f083 0301 	eor.w	r3, r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d119      	bne.n	8006148 <rxAssemble+0x152>
            (chan != pShtp->inChan) ||
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
        if (!continuation ||
 800611a:	7dfa      	ldrb	r2, [r7, #23]
 800611c:	429a      	cmp	r2, r3
 800611e:	d113      	bne.n	8006148 <rxAssemble+0x152>
            (seq != pShtp->chan[chan].nextInSeq) ||
 8006120:	7dfa      	ldrb	r2, [r7, #23]
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	4613      	mov	r3, r2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8006132:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8006134:	7dba      	ldrb	r2, [r7, #22]
 8006136:	429a      	cmp	r2, r3
 8006138:	d106      	bne.n	8006148 <rxAssemble+0x152>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 800613a:	8abb      	ldrh	r3, [r7, #20]
 800613c:	3b04      	subs	r3, #4
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f8b2 208c 	ldrh.w	r2, [r2, #140]	; 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 8006144:	4293      	cmp	r3, r2
 8006146:	d020      	beq.n	800618a <rxAssemble+0x194>
            
            if (pShtp->eventCallback) {
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <rxAssemble+0x168>
                pShtp->eventCallback(pShtp->eventCookie,
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	6892      	ldr	r2, [r2, #8]
 8006158:	2105      	movs	r1, #5
 800615a:	4610      	mov	r0, r2
 800615c:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

            pShtp->rxInterruptedPayloads++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            if (pShtp->eventCallback) {
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d006      	beq.n	800618a <rxAssemble+0x194>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	6892      	ldr	r2, [r2, #8]
 8006184:	2107      	movs	r1, #7
 8006186:	4610      	mov	r0, r2
 8006188:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 800618a:	7dfa      	ldrb	r2, [r7, #23]
 800618c:	7dbb      	ldrb	r3, [r7, #22]
 800618e:	3301      	adds	r3, #1
 8006190:	b2d8      	uxtb	r0, r3
 8006192:	68f9      	ldr	r1, [r7, #12]
 8006194:	4613      	mov	r3, r2
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	f603 0399 	addw	r3, r3, #2201	; 0x899
 80061a2:	4602      	mov	r2, r0
 80061a4:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d122      	bne.n	80061f6 <rxAssemble+0x200>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 80061b0:	8abb      	ldrh	r3, [r7, #20]
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b6:	d912      	bls.n	80061de <rxAssemble+0x1e8>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
            
            if (pShtp->eventCallback) {
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d06e      	beq.n	80062ac <rxAssemble+0x2b6>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	6892      	ldr	r2, [r2, #8]
 80061d6:	2102      	movs	r1, #2
 80061d8:	4610      	mov	r0, r2
 80061da:	4798      	blx	r3
            }

            return;
 80061dc:	e066      	b.n	80062ac <rxAssemble+0x2b6>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
        pShtp->inChan = chan;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	7dfa      	ldrb	r2, [r7, #23]
 80061f2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	8abb      	ldrh	r3, [r7, #20]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d901      	bls.n	8006202 <rxAssemble+0x20c>
        // Only use the valid portion of the transfer
        len = payloadLen;
 80061fe:	8abb      	ldrh	r3, [r7, #20]
 8006200:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	338f      	adds	r3, #143	; 0x8f
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	; 0x490
 800620c:	1898      	adds	r0, r3, r2
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	1d19      	adds	r1, r3, #4
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	3b04      	subs	r3, #4
 8006216:	461a      	mov	r2, r3
 8006218:	f003 fb70 	bl	80098fc <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	4413      	add	r3, r2
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b04      	subs	r3, #4
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
    pShtp->inRemaining = payloadLen - len;
 8006232:	8aba      	ldrh	r2, [r7, #20]
 8006234:	88fb      	ldrh	r3, [r7, #6]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d131      	bne.n	80062ae <rxAssemble+0x2b8>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 800624a:	7dfa      	ldrb	r2, [r7, #23]
 800624c:	68f9      	ldr	r1, [r7, #12]
 800624e:	4613      	mov	r3, r2
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	440b      	add	r3, r1
 8006258:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d025      	beq.n	80062ae <rxAssemble+0x2b8>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8006262:	7dfa      	ldrb	r2, [r7, #23]
 8006264:	68f9      	ldr	r1, [r7, #12]
 8006266:	4613      	mov	r3, r2
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	440b      	add	r3, r1
 8006270:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8006274:	681c      	ldr	r4, [r3, #0]
 8006276:	7dfa      	ldrb	r2, [r7, #23]
 8006278:	68f9      	ldr	r1, [r7, #12]
 800627a:	4613      	mov	r3, r2
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8006288:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f103 018f 	add.w	r1, r3, #143	; 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800629c:	47a0      	blx	r4
 800629e:	e006      	b.n	80062ae <rxAssemble+0x2b8>
        return;
 80062a0:	bf00      	nop
 80062a2:	e004      	b.n	80062ae <rxAssemble+0x2b8>
        return;
 80062a4:	bf00      	nop
 80062a6:	e002      	b.n	80062ae <rxAssemble+0x2b8>
        return;
 80062a8:	bf00      	nop
 80062aa:	e000      	b.n	80062ae <rxAssemble+0x2b8>
            return;
 80062ac:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd90      	pop	{r4, r7, pc}

080062b4 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 80062bc:	4b16      	ldr	r3, [pc, #88]	; (8006318 <shtp_open+0x64>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f083 0301 	eor.w	r3, r3, #1
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 80062ca:	f7ff fd87 	bl	8005ddc <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <shtp_open+0x24>
        // Error
        return 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e01b      	b.n	8006310 <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 80062d8:	f7ff fda2 	bl	8005e20 <getInstance>
 80062dc:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <shtp_open+0x34>
        // No instances available, return error
        return 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	e013      	b.n	8006310 <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 80062e8:	f640 1214 	movw	r2, #2324	; 0x914
 80062ec:	2100      	movs	r1, #0
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f003 fb12 	bl	8009918 <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
 80062fc:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <shtp_open+0x54>
        return 0;
 8006304:	2300      	movs	r3, #0
 8006306:	e003      	b.n	8006310 <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]

    return pShtp;
 800630e:	68fb      	ldr	r3, [r7, #12]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	2000125c 	.word	0x2000125c

0800631c <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	609a      	str	r2, [r3, #8]
}
 8006338:	bf00      	nop
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	607a      	str	r2, [r7, #4]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	460b      	mov	r3, r1
 8006352:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 8006358:	7afb      	ldrb	r3, [r7, #11]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <shtp_listenChan+0x20>
 800635e:	7afb      	ldrb	r3, [r7, #11]
 8006360:	2b07      	cmp	r3, #7
 8006362:	d902      	bls.n	800636a <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 8006364:	f06f 0301 	mvn.w	r3, #1
 8006368:	e016      	b.n	8006398 <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 800636a:	7afa      	ldrb	r2, [r7, #11]
 800636c:	6979      	ldr	r1, [r7, #20]
 800636e:	4613      	mov	r3, r2
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 8006380:	7afa      	ldrb	r2, [r7, #11]
 8006382:	6979      	ldr	r1, [r7, #20]
 8006384:	4613      	mov	r3, r2
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	607a      	str	r2, [r7, #4]
 80063ae:	461a      	mov	r2, r3
 80063b0:	460b      	mov	r3, r1
 80063b2:	72fb      	strb	r3, [r7, #11]
 80063b4:	4613      	mov	r3, r2
 80063b6:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 80063bc:	893b      	ldrh	r3, [r7, #8]
 80063be:	2b80      	cmp	r3, #128	; 0x80
 80063c0:	d909      	bls.n	80063d6 <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f8d3 3910 	ldr.w	r3, [r3, #2320]	; 0x910
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
        return SH2_ERR_BAD_PARAM;
 80063d0:	f06f 0301 	mvn.w	r3, #1
 80063d4:	e013      	b.n	80063fe <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 80063d6:	7afb      	ldrb	r3, [r7, #11]
 80063d8:	2b07      	cmp	r3, #7
 80063da:	d909      	bls.n	80063f0 <shtp_send+0x4c>
        pShtp->badTxChan++;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
        return SH2_ERR_BAD_PARAM;
 80063ea:	f06f 0301 	mvn.w	r3, #1
 80063ee:	e006      	b.n	80063fe <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 80063f0:	893b      	ldrh	r3, [r7, #8]
 80063f2:	7af9      	ldrb	r1, [r7, #11]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	f7ff fd4f 	bl	8005e9a <txProcess>
 80063fc:	4603      	mov	r3, r0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 8006406:	b590      	push	{r4, r7, lr}
 8006408:	b087      	sub	sp, #28
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689c      	ldr	r4, [r3, #8]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8006426:	f107 030c 	add.w	r3, r7, #12
 800642a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800642e:	47a0      	blx	r4
 8006430:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	dd08      	ble.n	800644a <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6978      	ldr	r0, [r7, #20]
 8006446:	f7ff fdd6 	bl	8005ff6 <rxAssemble>
    }
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd90      	pop	{r4, r7, pc}

08006452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b082      	sub	sp, #8
 8006456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800645c:	2003      	movs	r0, #3
 800645e:	f001 f80b 	bl	8007478 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006462:	200f      	movs	r0, #15
 8006464:	f000 f80e 	bl	8006484 <HAL_InitTick>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	71fb      	strb	r3, [r7, #7]
 8006472:	e001      	b.n	8006478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006474:	f7fc fa38 	bl	80028e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006478:	79fb      	ldrb	r3, [r7, #7]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006490:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <HAL_InitTick+0x6c>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d023      	beq.n	80064e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006498:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <HAL_InitTick+0x70>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <HAL_InitTick+0x6c>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	4619      	mov	r1, r3
 80064a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f825 	bl	80074fe <HAL_SYSTICK_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10f      	bne.n	80064da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b0f      	cmp	r3, #15
 80064be:	d809      	bhi.n	80064d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064c0:	2200      	movs	r2, #0
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	f04f 30ff 	mov.w	r0, #4294967295
 80064c8:	f000 ffe1 	bl	800748e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80064cc:	4a0a      	ldr	r2, [pc, #40]	; (80064f8 <HAL_InitTick+0x74>)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e007      	b.n	80064e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
 80064d8:	e004      	b.n	80064e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	73fb      	strb	r3, [r7, #15]
 80064de:	e001      	b.n	80064e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	2000000c 	.word	0x2000000c
 80064f4:	20000004 	.word	0x20000004
 80064f8:	20000008 	.word	0x20000008

080064fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <HAL_IncTick+0x20>)
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	4b06      	ldr	r3, [pc, #24]	; (8006520 <HAL_IncTick+0x24>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4413      	add	r3, r2
 800650c:	4a04      	ldr	r2, [pc, #16]	; (8006520 <HAL_IncTick+0x24>)
 800650e:	6013      	str	r3, [r2, #0]
}
 8006510:	bf00      	nop
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	2000000c 	.word	0x2000000c
 8006520:	20001260 	.word	0x20001260

08006524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  return uwTick;
 8006528:	4b03      	ldr	r3, [pc, #12]	; (8006538 <HAL_GetTick+0x14>)
 800652a:	681b      	ldr	r3, [r3, #0]
}
 800652c:	4618      	mov	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	20001260 	.word	0x20001260

0800653c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e0ed      	b.n	800672a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fa fd68 	bl	8001030 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006570:	f7ff ffd8 	bl	8006524 <HAL_GetTick>
 8006574:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006576:	e012      	b.n	800659e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006578:	f7ff ffd4 	bl	8006524 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b0a      	cmp	r3, #10
 8006584:	d90b      	bls.n	800659e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2205      	movs	r2, #5
 8006596:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e0c5      	b.n	800672a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0e5      	beq.n	8006578 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0202 	bic.w	r2, r2, #2
 80065ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065bc:	f7ff ffb2 	bl	8006524 <HAL_GetTick>
 80065c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80065c2:	e012      	b.n	80065ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80065c4:	f7ff ffae 	bl	8006524 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b0a      	cmp	r3, #10
 80065d0:	d90b      	bls.n	80065ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2205      	movs	r2, #5
 80065e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e09f      	b.n	800672a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e5      	bne.n	80065c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	7e1b      	ldrb	r3, [r3, #24]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d108      	bne.n	8006612 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	e007      	b.n	8006622 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006620:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	7e5b      	ldrb	r3, [r3, #25]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d108      	bne.n	800663c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	e007      	b.n	800664c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	7e9b      	ldrb	r3, [r3, #26]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d108      	bne.n	8006666 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0220 	orr.w	r2, r2, #32
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e007      	b.n	8006676 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0220 	bic.w	r2, r2, #32
 8006674:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	7edb      	ldrb	r3, [r3, #27]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d108      	bne.n	8006690 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0210 	bic.w	r2, r2, #16
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	e007      	b.n	80066a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0210 	orr.w	r2, r2, #16
 800669e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	7f1b      	ldrb	r3, [r3, #28]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d108      	bne.n	80066ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0208 	orr.w	r2, r2, #8
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	e007      	b.n	80066ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0208 	bic.w	r2, r2, #8
 80066c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	7f5b      	ldrb	r3, [r3, #29]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d108      	bne.n	80066e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0204 	orr.w	r2, r2, #4
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	e007      	b.n	80066f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0204 	bic.w	r2, r2, #4
 80066f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	ea42 0103 	orr.w	r1, r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	1e5a      	subs	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006732:	b480      	push	{r7}
 8006734:	b087      	sub	sp, #28
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006748:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800674a:	7cfb      	ldrb	r3, [r7, #19]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d003      	beq.n	8006758 <HAL_CAN_ConfigFilter+0x26>
 8006750:	7cfb      	ldrb	r3, [r7, #19]
 8006752:	2b02      	cmp	r3, #2
 8006754:	f040 80aa 	bne.w	80068ac <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800675e:	f043 0201 	orr.w	r2, r3, #1
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	2201      	movs	r2, #1
 8006772:	fa02 f303 	lsl.w	r3, r2, r3
 8006776:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	43db      	mvns	r3, r3
 8006782:	401a      	ands	r2, r3
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d123      	bne.n	80067da <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	43db      	mvns	r3, r3
 800679c:	401a      	ands	r2, r3
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80067b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	3248      	adds	r2, #72	; 0x48
 80067ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80067ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80067d0:	6979      	ldr	r1, [r7, #20]
 80067d2:	3348      	adds	r3, #72	; 0x48
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	440b      	add	r3, r1
 80067d8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d122      	bne.n	8006828 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006802:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3248      	adds	r2, #72	; 0x48
 8006808:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800681c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800681e:	6979      	ldr	r1, [r7, #20]
 8006820:	3348      	adds	r3, #72	; 0x48
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	440b      	add	r3, r1
 8006826:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	43db      	mvns	r3, r3
 800683a:	401a      	ands	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006842:	e007      	b.n	8006854 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	431a      	orrs	r2, r3
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	43db      	mvns	r3, r3
 8006866:	401a      	ands	r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800686e:	e007      	b.n	8006880 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	431a      	orrs	r2, r3
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d107      	bne.n	8006898 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	431a      	orrs	r2, r3
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800689e:	f023 0201 	bic.w	r2, r3, #1
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	e006      	b.n	80068ba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
  }
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d12e      	bne.n	8006938 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0201 	bic.w	r2, r2, #1
 80068f0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068f2:	f7ff fe17 	bl	8006524 <HAL_GetTick>
 80068f6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80068f8:	e012      	b.n	8006920 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80068fa:	f7ff fe13 	bl	8006524 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	2b0a      	cmp	r3, #10
 8006906:	d90b      	bls.n	8006920 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2205      	movs	r2, #5
 8006918:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e012      	b.n	8006946 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e5      	bne.n	80068fa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006934:	2300      	movs	r3, #0
 8006936:	e006      	b.n	8006946 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
  }
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800694e:	b480      	push	{r7}
 8006950:	b089      	sub	sp, #36	; 0x24
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006962:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800696c:	7ffb      	ldrb	r3, [r7, #31]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d003      	beq.n	800697a <HAL_CAN_AddTxMessage+0x2c>
 8006972:	7ffb      	ldrb	r3, [r7, #31]
 8006974:	2b02      	cmp	r3, #2
 8006976:	f040 80ad 	bne.w	8006ad4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8095 	beq.w	8006ac4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	0e1b      	lsrs	r3, r3, #24
 800699e:	f003 0303 	and.w	r3, r3, #3
 80069a2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80069a4:	2201      	movs	r2, #1
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	409a      	lsls	r2, r3
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10d      	bne.n	80069d2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80069c0:	68f9      	ldr	r1, [r7, #12]
 80069c2:	6809      	ldr	r1, [r1, #0]
 80069c4:	431a      	orrs	r2, r3
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	3318      	adds	r3, #24
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	440b      	add	r3, r1
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e00f      	b.n	80069f2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80069dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80069e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	3318      	adds	r3, #24
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	440b      	add	r3, r1
 80069f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6819      	ldr	r1, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	691a      	ldr	r2, [r3, #16]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	3318      	adds	r3, #24
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	440b      	add	r3, r1
 8006a02:	3304      	adds	r3, #4
 8006a04:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	7d1b      	ldrb	r3, [r3, #20]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d111      	bne.n	8006a32 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	3318      	adds	r3, #24
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	4413      	add	r3, r2
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	6811      	ldr	r1, [r2, #0]
 8006a22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	3318      	adds	r3, #24
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	440b      	add	r3, r1
 8006a2e:	3304      	adds	r3, #4
 8006a30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3307      	adds	r3, #7
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	061a      	lsls	r2, r3, #24
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3306      	adds	r3, #6
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	041b      	lsls	r3, r3, #16
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3305      	adds	r3, #5
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	3204      	adds	r2, #4
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	4610      	mov	r0, r2
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	6811      	ldr	r1, [r2, #0]
 8006a5a:	ea43 0200 	orr.w	r2, r3, r0
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	440b      	add	r3, r1
 8006a64:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006a68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3303      	adds	r3, #3
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	061a      	lsls	r2, r3, #24
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3302      	adds	r3, #2
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	041b      	lsls	r3, r3, #16
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	4313      	orrs	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	7812      	ldrb	r2, [r2, #0]
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	6811      	ldr	r1, [r2, #0]
 8006a90:	ea43 0200 	orr.w	r2, r3, r0
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	440b      	add	r3, r1
 8006a9a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006a9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	3318      	adds	r3, #24
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	4413      	add	r3, r2
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	6811      	ldr	r1, [r2, #0]
 8006ab2:	f043 0201 	orr.w	r2, r3, #1
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	3318      	adds	r3, #24
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	440b      	add	r3, r1
 8006abe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e00e      	b.n	8006ae2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e006      	b.n	8006ae2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3724      	adds	r7, #36	; 0x24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b02:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b04:	7afb      	ldrb	r3, [r7, #11]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d002      	beq.n	8006b10 <HAL_CAN_IsTxMessagePending+0x22>
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d10b      	bne.n	8006b28 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	069b      	lsls	r3, r3, #26
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	069b      	lsls	r3, r3, #26
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d001      	beq.n	8006b28 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8006b24:	2301      	movs	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8006b28:	68fb      	ldr	r3, [r7, #12]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006b36:	b480      	push	{r7}
 8006b38:	b087      	sub	sp, #28
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d003      	beq.n	8006b5a <HAL_CAN_GetRxMessage+0x24>
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	f040 80f3 	bne.w	8006d40 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10e      	bne.n	8006b7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f003 0303 	and.w	r3, r3, #3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d116      	bne.n	8006b9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e0e7      	b.n	8006d4e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d107      	bne.n	8006b9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0d8      	b.n	8006d4e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	331b      	adds	r3, #27
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	4413      	add	r3, r2
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0204 	and.w	r2, r3, #4
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	331b      	adds	r3, #27
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	4413      	add	r3, r2
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	0d5b      	lsrs	r3, r3, #21
 8006bca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e00b      	b.n	8006bec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	331b      	adds	r3, #27
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	4413      	add	r3, r2
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	08db      	lsrs	r3, r3, #3
 8006be4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	331b      	adds	r3, #27
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	4413      	add	r3, r2
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0202 	and.w	r2, r3, #2
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	331b      	adds	r3, #27
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3304      	adds	r3, #4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 020f 	and.w	r2, r3, #15
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	331b      	adds	r3, #27
 8006c22:	011b      	lsls	r3, r3, #4
 8006c24:	4413      	add	r3, r2
 8006c26:	3304      	adds	r3, #4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	0a1b      	lsrs	r3, r3, #8
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	331b      	adds	r3, #27
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	4413      	add	r3, r2
 8006c3e:	3304      	adds	r3, #4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	0c1b      	lsrs	r3, r3, #16
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	0a1a      	lsrs	r2, r3, #8
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	3301      	adds	r3, #1
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	0c1a      	lsrs	r2, r3, #16
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	3302      	adds	r3, #2
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	0e1a      	lsrs	r2, r3, #24
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	3303      	adds	r3, #3
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	0a1a      	lsrs	r2, r3, #8
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	3305      	adds	r3, #5
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	0c1a      	lsrs	r2, r3, #16
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	3306      	adds	r3, #6
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	0e1a      	lsrs	r2, r3, #24
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	3307      	adds	r3, #7
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d108      	bne.n	8006d2c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68da      	ldr	r2, [r3, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0220 	orr.w	r2, r2, #32
 8006d28:	60da      	str	r2, [r3, #12]
 8006d2a:	e007      	b.n	8006d3c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0220 	orr.w	r2, r2, #32
 8006d3a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e006      	b.n	8006d4e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
  }
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d6e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006d70:	7afb      	ldrb	r3, [r7, #11]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d002      	beq.n	8006d7c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8006d76:	7afb      	ldrb	r3, [r7, #11]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d10f      	bne.n	8006d9c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e005      	b.n	8006d9c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dba:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d002      	beq.n	8006dc8 <HAL_CAN_ActivateNotification+0x1e>
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d109      	bne.n	8006ddc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6959      	ldr	r1, [r3, #20]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e006      	b.n	8006dea <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
  }
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e06:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d002      	beq.n	8006e14 <HAL_CAN_DeactivateNotification+0x1e>
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d10a      	bne.n	8006e2a <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6959      	ldr	r1, [r3, #20]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	43da      	mvns	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	400a      	ands	r2, r1
 8006e24:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e006      	b.n	8006e38 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
  }
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08a      	sub	sp, #40	; 0x28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d07c      	beq.n	8006f84 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d023      	beq.n	8006edc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f983 	bl	80071b2 <HAL_CAN_TxMailbox0CompleteCallback>
 8006eac:	e016      	b.n	8006edc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d004      	beq.n	8006ec2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec0:	e00c      	b.n	8006edc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed4:	e002      	b.n	8006edc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f989 	bl	80071ee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d024      	beq.n	8006f30 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f963 	bl	80071c6 <HAL_CAN_TxMailbox1CompleteCallback>
 8006f00:	e016      	b.n	8006f30 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d004      	beq.n	8006f16 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
 8006f14:	e00c      	b.n	8006f30 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d004      	beq.n	8006f2a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
 8006f28:	e002      	b.n	8006f30 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f969 	bl	8007202 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d024      	beq.n	8006f84 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f943 	bl	80071da <HAL_CAN_TxMailbox2CompleteCallback>
 8006f54:	e016      	b.n	8006f84 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d004      	beq.n	8006f6a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
 8006f68:	e00c      	b.n	8006f84 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f7c:	e002      	b.n	8006f84 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f949 	bl	8007216 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	f003 0308 	and.w	r3, r3, #8
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00c      	beq.n	8006fa8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2210      	movs	r2, #16
 8006fa6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00b      	beq.n	8006fca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d006      	beq.n	8006fca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f930 	bl	800722a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d009      	beq.n	8006fe8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fb fb92 	bl	800270c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007002:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2210      	movs	r2, #16
 800700a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00b      	beq.n	800702e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b00      	cmp	r3, #0
 800701e:	d006      	beq.n	800702e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2208      	movs	r2, #8
 8007026:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f908 	bl	800723e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b00      	cmp	r3, #0
 8007036:	d009      	beq.n	800704c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7fb fb8c 	bl	8002764 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b00      	cmp	r3, #0
 800705e:	d006      	beq.n	800706e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2210      	movs	r2, #16
 8007066:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f8f2 	bl	8007252 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f003 0308 	and.w	r3, r3, #8
 800707e:	2b00      	cmp	r3, #0
 8007080:	d006      	beq.n	8007090 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2208      	movs	r2, #8
 8007088:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f8eb 	bl	8007266 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d07b      	beq.n	8007192 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d072      	beq.n	800718a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d008      	beq.n	80070c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	f043 0301 	orr.w	r3, r3, #1
 80070be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d008      	beq.n	80070dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	f043 0302 	orr.w	r3, r3, #2
 80070da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d008      	beq.n	80070f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	f043 0304 	orr.w	r3, r3, #4
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d043      	beq.n	800718a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007108:	2b00      	cmp	r3, #0
 800710a:	d03e      	beq.n	800718a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007112:	2b60      	cmp	r3, #96	; 0x60
 8007114:	d02b      	beq.n	800716e <HAL_CAN_IRQHandler+0x32a>
 8007116:	2b60      	cmp	r3, #96	; 0x60
 8007118:	d82e      	bhi.n	8007178 <HAL_CAN_IRQHandler+0x334>
 800711a:	2b50      	cmp	r3, #80	; 0x50
 800711c:	d022      	beq.n	8007164 <HAL_CAN_IRQHandler+0x320>
 800711e:	2b50      	cmp	r3, #80	; 0x50
 8007120:	d82a      	bhi.n	8007178 <HAL_CAN_IRQHandler+0x334>
 8007122:	2b40      	cmp	r3, #64	; 0x40
 8007124:	d019      	beq.n	800715a <HAL_CAN_IRQHandler+0x316>
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d826      	bhi.n	8007178 <HAL_CAN_IRQHandler+0x334>
 800712a:	2b30      	cmp	r3, #48	; 0x30
 800712c:	d010      	beq.n	8007150 <HAL_CAN_IRQHandler+0x30c>
 800712e:	2b30      	cmp	r3, #48	; 0x30
 8007130:	d822      	bhi.n	8007178 <HAL_CAN_IRQHandler+0x334>
 8007132:	2b10      	cmp	r3, #16
 8007134:	d002      	beq.n	800713c <HAL_CAN_IRQHandler+0x2f8>
 8007136:	2b20      	cmp	r3, #32
 8007138:	d005      	beq.n	8007146 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800713a:	e01d      	b.n	8007178 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	f043 0308 	orr.w	r3, r3, #8
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007144:	e019      	b.n	800717a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	f043 0310 	orr.w	r3, r3, #16
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800714e:	e014      	b.n	800717a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	f043 0320 	orr.w	r3, r3, #32
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007158:	e00f      	b.n	800717a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007160:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007162:	e00a      	b.n	800717a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800716c:	e005      	b.n	800717a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007176:	e000      	b.n	800717a <HAL_CAN_IRQHandler+0x336>
            break;
 8007178:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	699a      	ldr	r2, [r3, #24]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007188:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2204      	movs	r2, #4
 8007190:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f868 	bl	800727a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80071aa:	bf00      	nop
 80071ac:	3728      	adds	r7, #40	; 0x28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <__NVIC_SetPriorityGrouping>:
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <__NVIC_SetPriorityGrouping+0x44>)
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072ac:	4013      	ands	r3, r2
 80072ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80072bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072c2:	4a04      	ldr	r2, [pc, #16]	; (80072d4 <__NVIC_SetPriorityGrouping+0x44>)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	60d3      	str	r3, [r2, #12]
}
 80072c8:	bf00      	nop
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	e000ed00 	.word	0xe000ed00

080072d8 <__NVIC_GetPriorityGrouping>:
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072dc:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <__NVIC_GetPriorityGrouping+0x18>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	0a1b      	lsrs	r3, r3, #8
 80072e2:	f003 0307 	and.w	r3, r3, #7
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	e000ed00 	.word	0xe000ed00

080072f4 <__NVIC_EnableIRQ>:
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007302:	2b00      	cmp	r3, #0
 8007304:	db0b      	blt.n	800731e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007306:	79fb      	ldrb	r3, [r7, #7]
 8007308:	f003 021f 	and.w	r2, r3, #31
 800730c:	4907      	ldr	r1, [pc, #28]	; (800732c <__NVIC_EnableIRQ+0x38>)
 800730e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007312:	095b      	lsrs	r3, r3, #5
 8007314:	2001      	movs	r0, #1
 8007316:	fa00 f202 	lsl.w	r2, r0, r2
 800731a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	e000e100 	.word	0xe000e100

08007330 <__NVIC_DisableIRQ>:
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800733a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800733e:	2b00      	cmp	r3, #0
 8007340:	db12      	blt.n	8007368 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	f003 021f 	and.w	r2, r3, #31
 8007348:	490a      	ldr	r1, [pc, #40]	; (8007374 <__NVIC_DisableIRQ+0x44>)
 800734a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	2001      	movs	r0, #1
 8007352:	fa00 f202 	lsl.w	r2, r0, r2
 8007356:	3320      	adds	r3, #32
 8007358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800735c:	f3bf 8f4f 	dsb	sy
}
 8007360:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007362:	f3bf 8f6f 	isb	sy
}
 8007366:	bf00      	nop
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	e000e100 	.word	0xe000e100

08007378 <__NVIC_SetPriority>:
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	6039      	str	r1, [r7, #0]
 8007382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007388:	2b00      	cmp	r3, #0
 800738a:	db0a      	blt.n	80073a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	b2da      	uxtb	r2, r3
 8007390:	490c      	ldr	r1, [pc, #48]	; (80073c4 <__NVIC_SetPriority+0x4c>)
 8007392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007396:	0112      	lsls	r2, r2, #4
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	440b      	add	r3, r1
 800739c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80073a0:	e00a      	b.n	80073b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	4908      	ldr	r1, [pc, #32]	; (80073c8 <__NVIC_SetPriority+0x50>)
 80073a8:	79fb      	ldrb	r3, [r7, #7]
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	3b04      	subs	r3, #4
 80073b0:	0112      	lsls	r2, r2, #4
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	440b      	add	r3, r1
 80073b6:	761a      	strb	r2, [r3, #24]
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	e000e100 	.word	0xe000e100
 80073c8:	e000ed00 	.word	0xe000ed00

080073cc <NVIC_EncodePriority>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	b089      	sub	sp, #36	; 0x24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f1c3 0307 	rsb	r3, r3, #7
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	bf28      	it	cs
 80073ea:	2304      	movcs	r3, #4
 80073ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	3304      	adds	r3, #4
 80073f2:	2b06      	cmp	r3, #6
 80073f4:	d902      	bls.n	80073fc <NVIC_EncodePriority+0x30>
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	3b03      	subs	r3, #3
 80073fa:	e000      	b.n	80073fe <NVIC_EncodePriority+0x32>
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007400:	f04f 32ff 	mov.w	r2, #4294967295
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	43da      	mvns	r2, r3
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	401a      	ands	r2, r3
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007414:	f04f 31ff 	mov.w	r1, #4294967295
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	fa01 f303 	lsl.w	r3, r1, r3
 800741e:	43d9      	mvns	r1, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007424:	4313      	orrs	r3, r2
}
 8007426:	4618      	mov	r0, r3
 8007428:	3724      	adds	r7, #36	; 0x24
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3b01      	subs	r3, #1
 8007440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007444:	d301      	bcc.n	800744a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007446:	2301      	movs	r3, #1
 8007448:	e00f      	b.n	800746a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800744a:	4a0a      	ldr	r2, [pc, #40]	; (8007474 <SysTick_Config+0x40>)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3b01      	subs	r3, #1
 8007450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007452:	210f      	movs	r1, #15
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
 8007458:	f7ff ff8e 	bl	8007378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <SysTick_Config+0x40>)
 800745e:	2200      	movs	r2, #0
 8007460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007462:	4b04      	ldr	r3, [pc, #16]	; (8007474 <SysTick_Config+0x40>)
 8007464:	2207      	movs	r2, #7
 8007466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	e000e010 	.word	0xe000e010

08007478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff ff05 	bl	8007290 <__NVIC_SetPriorityGrouping>
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b086      	sub	sp, #24
 8007492:	af00      	add	r7, sp, #0
 8007494:	4603      	mov	r3, r0
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80074a0:	f7ff ff1a 	bl	80072d8 <__NVIC_GetPriorityGrouping>
 80074a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	6978      	ldr	r0, [r7, #20]
 80074ac:	f7ff ff8e 	bl	80073cc <NVIC_EncodePriority>
 80074b0:	4602      	mov	r2, r0
 80074b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074b6:	4611      	mov	r1, r2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff ff5d 	bl	8007378 <__NVIC_SetPriority>
}
 80074be:	bf00      	nop
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	4603      	mov	r3, r0
 80074ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff ff0d 	bl	80072f4 <__NVIC_EnableIRQ>
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	4603      	mov	r3, r0
 80074ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80074ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff ff1d 	bl	8007330 <__NVIC_DisableIRQ>
}
 80074f6:	bf00      	nop
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff ff94 	bl	8007434 <SysTick_Config>
 800750c:	4603      	mov	r3, r0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d005      	beq.n	800753a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2204      	movs	r2, #4
 8007532:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	73fb      	strb	r3, [r7, #15]
 8007538:	e029      	b.n	800758e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 020e 	bic.w	r2, r2, #14
 8007548:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755e:	f003 021c 	and.w	r2, r3, #28
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	2101      	movs	r1, #1
 8007568:	fa01 f202 	lsl.w	r2, r1, r2
 800756c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
    }
  }
  return status;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075a6:	e17f      	b.n	80078a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	2101      	movs	r1, #1
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	fa01 f303 	lsl.w	r3, r1, r3
 80075b4:	4013      	ands	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 8171 	beq.w	80078a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d005      	beq.n	80075d8 <HAL_GPIO_Init+0x40>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d130      	bne.n	800763a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	2203      	movs	r2, #3
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	43db      	mvns	r3, r3
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4013      	ands	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800760e:	2201      	movs	r2, #1
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	43db      	mvns	r3, r3
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	4013      	ands	r3, r2
 800761c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	091b      	lsrs	r3, r3, #4
 8007624:	f003 0201 	and.w	r2, r3, #1
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	fa02 f303 	lsl.w	r3, r2, r3
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	2b03      	cmp	r3, #3
 8007644:	d118      	bne.n	8007678 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800764c:	2201      	movs	r2, #1
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	fa02 f303 	lsl.w	r3, r2, r3
 8007654:	43db      	mvns	r3, r3
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4013      	ands	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	08db      	lsrs	r3, r3, #3
 8007662:	f003 0201 	and.w	r2, r3, #1
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	fa02 f303 	lsl.w	r3, r2, r3
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f003 0303 	and.w	r3, r3, #3
 8007680:	2b03      	cmp	r3, #3
 8007682:	d017      	beq.n	80076b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	2203      	movs	r2, #3
 8007690:	fa02 f303 	lsl.w	r3, r2, r3
 8007694:	43db      	mvns	r3, r3
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	4013      	ands	r3, r2
 800769a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	fa02 f303 	lsl.w	r3, r2, r3
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f003 0303 	and.w	r3, r3, #3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d123      	bne.n	8007708 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	08da      	lsrs	r2, r3, #3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3208      	adds	r2, #8
 80076c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f003 0307 	and.w	r3, r3, #7
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	220f      	movs	r2, #15
 80076d8:	fa02 f303 	lsl.w	r3, r2, r3
 80076dc:	43db      	mvns	r3, r3
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	4013      	ands	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	fa02 f303 	lsl.w	r3, r2, r3
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	08da      	lsrs	r2, r3, #3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3208      	adds	r2, #8
 8007702:	6939      	ldr	r1, [r7, #16]
 8007704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	2203      	movs	r2, #3
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	43db      	mvns	r3, r3
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4013      	ands	r3, r2
 800771e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f003 0203 	and.w	r2, r3, #3
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	005b      	lsls	r3, r3, #1
 800772c:	fa02 f303 	lsl.w	r3, r2, r3
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 80ac 	beq.w	80078a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800774a:	4b5f      	ldr	r3, [pc, #380]	; (80078c8 <HAL_GPIO_Init+0x330>)
 800774c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800774e:	4a5e      	ldr	r2, [pc, #376]	; (80078c8 <HAL_GPIO_Init+0x330>)
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	6613      	str	r3, [r2, #96]	; 0x60
 8007756:	4b5c      	ldr	r3, [pc, #368]	; (80078c8 <HAL_GPIO_Init+0x330>)
 8007758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	60bb      	str	r3, [r7, #8]
 8007760:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007762:	4a5a      	ldr	r2, [pc, #360]	; (80078cc <HAL_GPIO_Init+0x334>)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	089b      	lsrs	r3, r3, #2
 8007768:	3302      	adds	r3, #2
 800776a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800776e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	220f      	movs	r2, #15
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	4013      	ands	r3, r2
 8007784:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800778c:	d025      	beq.n	80077da <HAL_GPIO_Init+0x242>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a4f      	ldr	r2, [pc, #316]	; (80078d0 <HAL_GPIO_Init+0x338>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d01f      	beq.n	80077d6 <HAL_GPIO_Init+0x23e>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a4e      	ldr	r2, [pc, #312]	; (80078d4 <HAL_GPIO_Init+0x33c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d019      	beq.n	80077d2 <HAL_GPIO_Init+0x23a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a4d      	ldr	r2, [pc, #308]	; (80078d8 <HAL_GPIO_Init+0x340>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d013      	beq.n	80077ce <HAL_GPIO_Init+0x236>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a4c      	ldr	r2, [pc, #304]	; (80078dc <HAL_GPIO_Init+0x344>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d00d      	beq.n	80077ca <HAL_GPIO_Init+0x232>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a4b      	ldr	r2, [pc, #300]	; (80078e0 <HAL_GPIO_Init+0x348>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d007      	beq.n	80077c6 <HAL_GPIO_Init+0x22e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a4a      	ldr	r2, [pc, #296]	; (80078e4 <HAL_GPIO_Init+0x34c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d101      	bne.n	80077c2 <HAL_GPIO_Init+0x22a>
 80077be:	2306      	movs	r3, #6
 80077c0:	e00c      	b.n	80077dc <HAL_GPIO_Init+0x244>
 80077c2:	2307      	movs	r3, #7
 80077c4:	e00a      	b.n	80077dc <HAL_GPIO_Init+0x244>
 80077c6:	2305      	movs	r3, #5
 80077c8:	e008      	b.n	80077dc <HAL_GPIO_Init+0x244>
 80077ca:	2304      	movs	r3, #4
 80077cc:	e006      	b.n	80077dc <HAL_GPIO_Init+0x244>
 80077ce:	2303      	movs	r3, #3
 80077d0:	e004      	b.n	80077dc <HAL_GPIO_Init+0x244>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e002      	b.n	80077dc <HAL_GPIO_Init+0x244>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <HAL_GPIO_Init+0x244>
 80077da:	2300      	movs	r3, #0
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	f002 0203 	and.w	r2, r2, #3
 80077e2:	0092      	lsls	r2, r2, #2
 80077e4:	4093      	lsls	r3, r2
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80077ec:	4937      	ldr	r1, [pc, #220]	; (80078cc <HAL_GPIO_Init+0x334>)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	089b      	lsrs	r3, r3, #2
 80077f2:	3302      	adds	r3, #2
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80077fa:	4b3b      	ldr	r3, [pc, #236]	; (80078e8 <HAL_GPIO_Init+0x350>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	43db      	mvns	r3, r3
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4013      	ands	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800781e:	4a32      	ldr	r2, [pc, #200]	; (80078e8 <HAL_GPIO_Init+0x350>)
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007824:	4b30      	ldr	r3, [pc, #192]	; (80078e8 <HAL_GPIO_Init+0x350>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	43db      	mvns	r3, r3
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4013      	ands	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4313      	orrs	r3, r2
 8007846:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007848:	4a27      	ldr	r2, [pc, #156]	; (80078e8 <HAL_GPIO_Init+0x350>)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800784e:	4b26      	ldr	r3, [pc, #152]	; (80078e8 <HAL_GPIO_Init+0x350>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	43db      	mvns	r3, r3
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4013      	ands	r3, r2
 800785c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4313      	orrs	r3, r2
 8007870:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007872:	4a1d      	ldr	r2, [pc, #116]	; (80078e8 <HAL_GPIO_Init+0x350>)
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007878:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <HAL_GPIO_Init+0x350>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	43db      	mvns	r3, r3
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	4013      	ands	r3, r2
 8007886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800789c:	4a12      	ldr	r2, [pc, #72]	; (80078e8 <HAL_GPIO_Init+0x350>)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	3301      	adds	r3, #1
 80078a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	fa22 f303 	lsr.w	r3, r2, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f47f ae78 	bne.w	80075a8 <HAL_GPIO_Init+0x10>
  }
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	371c      	adds	r7, #28
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	40021000 	.word	0x40021000
 80078cc:	40010000 	.word	0x40010000
 80078d0:	48000400 	.word	0x48000400
 80078d4:	48000800 	.word	0x48000800
 80078d8:	48000c00 	.word	0x48000c00
 80078dc:	48001000 	.word	0x48001000
 80078e0:	48001400 	.word	0x48001400
 80078e4:	48001800 	.word	0x48001800
 80078e8:	40010400 	.word	0x40010400

080078ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80078fa:	e0cd      	b.n	8007a98 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80078fc:	2201      	movs	r2, #1
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	fa02 f303 	lsl.w	r3, r2, r3
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	4013      	ands	r3, r2
 8007908:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 80c0 	beq.w	8007a92 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007912:	4a68      	ldr	r2, [pc, #416]	; (8007ab4 <HAL_GPIO_DeInit+0x1c8>)
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	089b      	lsrs	r3, r3, #2
 8007918:	3302      	adds	r3, #2
 800791a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800791e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	220f      	movs	r2, #15
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4013      	ands	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800793a:	d025      	beq.n	8007988 <HAL_GPIO_DeInit+0x9c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a5e      	ldr	r2, [pc, #376]	; (8007ab8 <HAL_GPIO_DeInit+0x1cc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d01f      	beq.n	8007984 <HAL_GPIO_DeInit+0x98>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a5d      	ldr	r2, [pc, #372]	; (8007abc <HAL_GPIO_DeInit+0x1d0>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d019      	beq.n	8007980 <HAL_GPIO_DeInit+0x94>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a5c      	ldr	r2, [pc, #368]	; (8007ac0 <HAL_GPIO_DeInit+0x1d4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d013      	beq.n	800797c <HAL_GPIO_DeInit+0x90>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a5b      	ldr	r2, [pc, #364]	; (8007ac4 <HAL_GPIO_DeInit+0x1d8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00d      	beq.n	8007978 <HAL_GPIO_DeInit+0x8c>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a5a      	ldr	r2, [pc, #360]	; (8007ac8 <HAL_GPIO_DeInit+0x1dc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d007      	beq.n	8007974 <HAL_GPIO_DeInit+0x88>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a59      	ldr	r2, [pc, #356]	; (8007acc <HAL_GPIO_DeInit+0x1e0>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d101      	bne.n	8007970 <HAL_GPIO_DeInit+0x84>
 800796c:	2306      	movs	r3, #6
 800796e:	e00c      	b.n	800798a <HAL_GPIO_DeInit+0x9e>
 8007970:	2307      	movs	r3, #7
 8007972:	e00a      	b.n	800798a <HAL_GPIO_DeInit+0x9e>
 8007974:	2305      	movs	r3, #5
 8007976:	e008      	b.n	800798a <HAL_GPIO_DeInit+0x9e>
 8007978:	2304      	movs	r3, #4
 800797a:	e006      	b.n	800798a <HAL_GPIO_DeInit+0x9e>
 800797c:	2303      	movs	r3, #3
 800797e:	e004      	b.n	800798a <HAL_GPIO_DeInit+0x9e>
 8007980:	2302      	movs	r3, #2
 8007982:	e002      	b.n	800798a <HAL_GPIO_DeInit+0x9e>
 8007984:	2301      	movs	r3, #1
 8007986:	e000      	b.n	800798a <HAL_GPIO_DeInit+0x9e>
 8007988:	2300      	movs	r3, #0
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	f002 0203 	and.w	r2, r2, #3
 8007990:	0092      	lsls	r2, r2, #2
 8007992:	4093      	lsls	r3, r2
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	429a      	cmp	r2, r3
 8007998:	d132      	bne.n	8007a00 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800799a:	4b4d      	ldr	r3, [pc, #308]	; (8007ad0 <HAL_GPIO_DeInit+0x1e4>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	43db      	mvns	r3, r3
 80079a2:	494b      	ldr	r1, [pc, #300]	; (8007ad0 <HAL_GPIO_DeInit+0x1e4>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80079a8:	4b49      	ldr	r3, [pc, #292]	; (8007ad0 <HAL_GPIO_DeInit+0x1e4>)
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	43db      	mvns	r3, r3
 80079b0:	4947      	ldr	r1, [pc, #284]	; (8007ad0 <HAL_GPIO_DeInit+0x1e4>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80079b6:	4b46      	ldr	r3, [pc, #280]	; (8007ad0 <HAL_GPIO_DeInit+0x1e4>)
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	43db      	mvns	r3, r3
 80079be:	4944      	ldr	r1, [pc, #272]	; (8007ad0 <HAL_GPIO_DeInit+0x1e4>)
 80079c0:	4013      	ands	r3, r2
 80079c2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80079c4:	4b42      	ldr	r3, [pc, #264]	; (8007ad0 <HAL_GPIO_DeInit+0x1e4>)
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	43db      	mvns	r3, r3
 80079cc:	4940      	ldr	r1, [pc, #256]	; (8007ad0 <HAL_GPIO_DeInit+0x1e4>)
 80079ce:	4013      	ands	r3, r2
 80079d0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f003 0303 	and.w	r3, r3, #3
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	220f      	movs	r2, #15
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80079e2:	4a34      	ldr	r2, [pc, #208]	; (8007ab4 <HAL_GPIO_DeInit+0x1c8>)
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	089b      	lsrs	r3, r3, #2
 80079e8:	3302      	adds	r3, #2
 80079ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	43da      	mvns	r2, r3
 80079f2:	4830      	ldr	r0, [pc, #192]	; (8007ab4 <HAL_GPIO_DeInit+0x1c8>)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	089b      	lsrs	r3, r3, #2
 80079f8:	400a      	ands	r2, r1
 80079fa:	3302      	adds	r3, #2
 80079fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	2103      	movs	r1, #3
 8007a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	08da      	lsrs	r2, r3, #3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3208      	adds	r2, #8
 8007a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	220f      	movs	r2, #15
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	43db      	mvns	r3, r3
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	08d2      	lsrs	r2, r2, #3
 8007a34:	4019      	ands	r1, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3208      	adds	r2, #8
 8007a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	2103      	movs	r1, #3
 8007a48:	fa01 f303 	lsl.w	r3, r1, r3
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	401a      	ands	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	2101      	movs	r1, #1
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a60:	43db      	mvns	r3, r3
 8007a62:	401a      	ands	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	2103      	movs	r1, #3
 8007a72:	fa01 f303 	lsl.w	r3, r1, r3
 8007a76:	43db      	mvns	r3, r3
 8007a78:	401a      	ands	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a82:	2101      	movs	r1, #1
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8a:	43db      	mvns	r3, r3
 8007a8c:	401a      	ands	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	3301      	adds	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f47f af2b 	bne.w	80078fc <HAL_GPIO_DeInit+0x10>
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	40010000 	.word	0x40010000
 8007ab8:	48000400 	.word	0x48000400
 8007abc:	48000800 	.word	0x48000800
 8007ac0:	48000c00 	.word	0x48000c00
 8007ac4:	48001000 	.word	0x48001000
 8007ac8:	48001400 	.word	0x48001400
 8007acc:	48001800 	.word	0x48001800
 8007ad0:	40010400 	.word	0x40010400

08007ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	807b      	strh	r3, [r7, #2]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ae4:	787b      	ldrb	r3, [r7, #1]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007aea:	887a      	ldrh	r2, [r7, #2]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007af0:	e002      	b.n	8007af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007af2:	887a      	ldrh	r2, [r7, #2]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007b0e:	4b08      	ldr	r3, [pc, #32]	; (8007b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b10:	695a      	ldr	r2, [r3, #20]
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	4013      	ands	r3, r2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d006      	beq.n	8007b28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007b1a:	4a05      	ldr	r2, [pc, #20]	; (8007b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b1c:	88fb      	ldrh	r3, [r7, #6]
 8007b1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fc f838 	bl	8003b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40010400 	.word	0x40010400

08007b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e095      	b.n	8007c72 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d108      	bne.n	8007b60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b56:	d009      	beq.n	8007b6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	61da      	str	r2, [r3, #28]
 8007b5e:	e005      	b.n	8007b6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7fa fe44 	bl	8002814 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bac:	d902      	bls.n	8007bb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	e002      	b.n	8007bba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007bc2:	d007      	beq.n	8007bd4 <HAL_SPI_Init+0xa0>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bcc:	d002      	beq.n	8007bd4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007be4:	431a      	orrs	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c16:	ea42 0103 	orr.w	r1, r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	0c1b      	lsrs	r3, r3, #16
 8007c30:	f003 0204 	and.w	r2, r3, #4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	f003 0310 	and.w	r3, r3, #16
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c42:	f003 0308 	and.w	r3, r3, #8
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c50:	ea42 0103 	orr.w	r1, r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e01a      	b.n	8007cc2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7fa fdff 	bl	80028a8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b08a      	sub	sp, #40	; 0x28
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <HAL_SPI_TransmitReceive+0x26>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e1fb      	b.n	80080e8 <HAL_SPI_TransmitReceive+0x41e>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cf8:	f7fe fc14 	bl	8006524 <HAL_GetTick>
 8007cfc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d04:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007d0c:	887b      	ldrh	r3, [r7, #2]
 8007d0e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007d10:	887b      	ldrh	r3, [r7, #2]
 8007d12:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d14:	7efb      	ldrb	r3, [r7, #27]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d00e      	beq.n	8007d38 <HAL_SPI_TransmitReceive+0x6e>
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d20:	d106      	bne.n	8007d30 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d102      	bne.n	8007d30 <HAL_SPI_TransmitReceive+0x66>
 8007d2a:	7efb      	ldrb	r3, [r7, #27]
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d003      	beq.n	8007d38 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007d30:	2302      	movs	r3, #2
 8007d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d36:	e1cd      	b.n	80080d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d005      	beq.n	8007d4a <HAL_SPI_TransmitReceive+0x80>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <HAL_SPI_TransmitReceive+0x80>
 8007d44:	887b      	ldrh	r3, [r7, #2]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d103      	bne.n	8007d52 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d50:	e1c0      	b.n	80080d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d003      	beq.n	8007d66 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2205      	movs	r2, #5
 8007d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	887a      	ldrh	r2, [r7, #2]
 8007d76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	887a      	ldrh	r2, [r7, #2]
 8007d7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	887a      	ldrh	r2, [r7, #2]
 8007d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	887a      	ldrh	r2, [r7, #2]
 8007d92:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007da8:	d802      	bhi.n	8007db0 <HAL_SPI_TransmitReceive+0xe6>
 8007daa:	8a3b      	ldrh	r3, [r7, #16]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d908      	bls.n	8007dc2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dbe:	605a      	str	r2, [r3, #4]
 8007dc0:	e007      	b.n	8007dd2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dd0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ddc:	2b40      	cmp	r3, #64	; 0x40
 8007dde:	d007      	beq.n	8007df0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007df8:	d97c      	bls.n	8007ef4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <HAL_SPI_TransmitReceive+0x13e>
 8007e02:	8a7b      	ldrh	r3, [r7, #18]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d169      	bne.n	8007edc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	881a      	ldrh	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	1c9a      	adds	r2, r3, #2
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	3b01      	subs	r3, #1
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e2c:	e056      	b.n	8007edc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d11b      	bne.n	8007e74 <HAL_SPI_TransmitReceive+0x1aa>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d016      	beq.n	8007e74 <HAL_SPI_TransmitReceive+0x1aa>
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d113      	bne.n	8007e74 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	881a      	ldrh	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	1c9a      	adds	r2, r3, #2
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d11c      	bne.n	8007ebc <HAL_SPI_TransmitReceive+0x1f2>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d016      	beq.n	8007ebc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68da      	ldr	r2, [r3, #12]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	b292      	uxth	r2, r2
 8007e9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	1c9a      	adds	r2, r3, #2
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ebc:	f7fe fb32 	bl	8006524 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d807      	bhi.n	8007edc <HAL_SPI_TransmitReceive+0x212>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed2:	d003      	beq.n	8007edc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007eda:	e0fb      	b.n	80080d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1a3      	bne.n	8007e2e <HAL_SPI_TransmitReceive+0x164>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d19d      	bne.n	8007e2e <HAL_SPI_TransmitReceive+0x164>
 8007ef2:	e0df      	b.n	80080b4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_SPI_TransmitReceive+0x23a>
 8007efc:	8a7b      	ldrh	r3, [r7, #18]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	f040 80cb 	bne.w	800809a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d912      	bls.n	8007f34 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f12:	881a      	ldrh	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	1c9a      	adds	r2, r3, #2
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b02      	subs	r3, #2
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f32:	e0b2      	b.n	800809a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	330c      	adds	r3, #12
 8007f3e:	7812      	ldrb	r2, [r2, #0]
 8007f40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	3b01      	subs	r3, #1
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f5a:	e09e      	b.n	800809a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d134      	bne.n	8007fd4 <HAL_SPI_TransmitReceive+0x30a>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d02f      	beq.n	8007fd4 <HAL_SPI_TransmitReceive+0x30a>
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d12c      	bne.n	8007fd4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d912      	bls.n	8007faa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	881a      	ldrh	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	1c9a      	adds	r2, r3, #2
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	3b02      	subs	r3, #2
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fa8:	e012      	b.n	8007fd0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d148      	bne.n	8008074 <HAL_SPI_TransmitReceive+0x3aa>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d042      	beq.n	8008074 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d923      	bls.n	8008042 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	b292      	uxth	r2, r2
 8008006:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	1c9a      	adds	r2, r3, #2
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b02      	subs	r3, #2
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800802a:	b29b      	uxth	r3, r3
 800802c:	2b01      	cmp	r3, #1
 800802e:	d81f      	bhi.n	8008070 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800803e:	605a      	str	r2, [r3, #4]
 8008040:	e016      	b.n	8008070 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f103 020c 	add.w	r2, r3, #12
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	7812      	ldrb	r2, [r2, #0]
 8008050:	b2d2      	uxtb	r2, r2
 8008052:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008064:	b29b      	uxth	r3, r3
 8008066:	3b01      	subs	r3, #1
 8008068:	b29a      	uxth	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008070:	2301      	movs	r3, #1
 8008072:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008074:	f7fe fa56 	bl	8006524 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008080:	429a      	cmp	r2, r3
 8008082:	d803      	bhi.n	800808c <HAL_SPI_TransmitReceive+0x3c2>
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808a:	d102      	bne.n	8008092 <HAL_SPI_TransmitReceive+0x3c8>
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	2b00      	cmp	r3, #0
 8008090:	d103      	bne.n	800809a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008098:	e01c      	b.n	80080d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800809e:	b29b      	uxth	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f47f af5b 	bne.w	8007f5c <HAL_SPI_TransmitReceive+0x292>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f47f af54 	bne.w	8007f5c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080b4:	69fa      	ldr	r2, [r7, #28]
 80080b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fc11 	bl	80088e0 <SPI_EndRxTxTransaction>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2220      	movs	r2, #32
 80080ce:	661a      	str	r2, [r3, #96]	; 0x60
 80080d0:	e000      	b.n	80080d4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80080d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80080e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3728      	adds	r7, #40	; 0x28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_SPI_TransmitReceive_IT+0x20>
 800810c:	2302      	movs	r3, #2
 800810e:	e091      	b.n	8008234 <HAL_SPI_TransmitReceive_IT+0x144>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800811e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008126:	7dbb      	ldrb	r3, [r7, #22]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d00d      	beq.n	8008148 <HAL_SPI_TransmitReceive_IT+0x58>
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008132:	d106      	bne.n	8008142 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d102      	bne.n	8008142 <HAL_SPI_TransmitReceive_IT+0x52>
 800813c:	7dbb      	ldrb	r3, [r7, #22]
 800813e:	2b04      	cmp	r3, #4
 8008140:	d002      	beq.n	8008148 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8008142:	2302      	movs	r3, #2
 8008144:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008146:	e070      	b.n	800822a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <HAL_SPI_TransmitReceive_IT+0x6a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <HAL_SPI_TransmitReceive_IT+0x6a>
 8008154:	887b      	ldrh	r3, [r7, #2]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800815e:	e064      	b.n	800822a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b04      	cmp	r3, #4
 800816a:	d003      	beq.n	8008174 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2205      	movs	r2, #5
 8008170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	887a      	ldrh	r2, [r7, #2]
 8008184:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	887a      	ldrh	r2, [r7, #2]
 800818a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	887a      	ldrh	r2, [r7, #2]
 8008196:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	887a      	ldrh	r2, [r7, #2]
 800819e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081aa:	d906      	bls.n	80081ba <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4a24      	ldr	r2, [pc, #144]	; (8008240 <HAL_SPI_TransmitReceive_IT+0x150>)
 80081b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4a23      	ldr	r2, [pc, #140]	; (8008244 <HAL_SPI_TransmitReceive_IT+0x154>)
 80081b6:	651a      	str	r2, [r3, #80]	; 0x50
 80081b8:	e005      	b.n	80081c6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4a22      	ldr	r2, [pc, #136]	; (8008248 <HAL_SPI_TransmitReceive_IT+0x158>)
 80081be:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4a22      	ldr	r2, [pc, #136]	; (800824c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80081c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081ce:	d802      	bhi.n	80081d6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80081d0:	887b      	ldrh	r3, [r7, #2]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d908      	bls.n	80081e8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	e007      	b.n	80081f8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081f6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8008206:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b40      	cmp	r3, #64	; 0x40
 8008214:	d008      	beq.n	8008228 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	e000      	b.n	800822a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8008228:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008232:	7dfb      	ldrb	r3, [r7, #23]
}
 8008234:	4618      	mov	r0, r3
 8008236:	371c      	adds	r7, #28
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	080085df 	.word	0x080085df
 8008244:	08008645 	.word	0x08008645
 8008248:	0800848f 	.word	0x0800848f
 800824c:	0800854d 	.word	0x0800854d

08008250 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	099b      	lsrs	r3, r3, #6
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10f      	bne.n	8008294 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	099b      	lsrs	r3, r3, #6
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d004      	beq.n	8008294 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
    return;
 8008292:	e0d7      	b.n	8008444 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	085b      	lsrs	r3, r3, #1
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <HAL_SPI_IRQHandler+0x66>
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	09db      	lsrs	r3, r3, #7
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
    return;
 80082b4:	e0c6      	b.n	8008444 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10c      	bne.n	80082dc <HAL_SPI_IRQHandler+0x8c>
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	099b      	lsrs	r3, r3, #6
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	0a1b      	lsrs	r3, r3, #8
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 80b4 	beq.w	8008444 <HAL_SPI_IRQHandler+0x1f4>
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 80ad 	beq.w	8008444 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	099b      	lsrs	r3, r3, #6
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d023      	beq.n	800833e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d011      	beq.n	8008326 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008306:	f043 0204 	orr.w	r2, r3, #4
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	617b      	str	r3, [r7, #20]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	e00b      	b.n	800833e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008326:	2300      	movs	r3, #0
 8008328:	613b      	str	r3, [r7, #16]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	613b      	str	r3, [r7, #16]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	613b      	str	r3, [r7, #16]
 800833a:	693b      	ldr	r3, [r7, #16]
        return;
 800833c:	e082      	b.n	8008444 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d014      	beq.n	8008374 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834e:	f043 0201 	orr.w	r2, r3, #1
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	0a1b      	lsrs	r3, r3, #8
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00c      	beq.n	800839a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008384:	f043 0208 	orr.w	r2, r3, #8
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800838c:	2300      	movs	r3, #0
 800838e:	60bb      	str	r3, [r7, #8]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	60bb      	str	r3, [r7, #8]
 8008398:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d04f      	beq.n	8008442 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80083b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d104      	bne.n	80083ce <HAL_SPI_IRQHandler+0x17e>
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d034      	beq.n	8008438 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0203 	bic.w	r2, r2, #3
 80083dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d011      	beq.n	800840a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ea:	4a18      	ldr	r2, [pc, #96]	; (800844c <HAL_SPI_IRQHandler+0x1fc>)
 80083ec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff f88f 	bl	8007516 <HAL_DMA_Abort_IT>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008402:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840e:	2b00      	cmp	r3, #0
 8008410:	d016      	beq.n	8008440 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008416:	4a0d      	ldr	r2, [pc, #52]	; (800844c <HAL_SPI_IRQHandler+0x1fc>)
 8008418:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841e:	4618      	mov	r0, r3
 8008420:	f7ff f879 	bl	8007516 <HAL_DMA_Abort_IT>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008436:	e003      	b.n	8008440 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7fb fbe1 	bl	8003c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800843e:	e000      	b.n	8008442 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008440:	bf00      	nop
    return;
 8008442:	bf00      	nop
  }
}
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	08008465 	.word	0x08008465

08008450 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008470:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7fb fbbd 	bl	8003c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800849c:	b29b      	uxth	r3, r3
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d923      	bls.n	80084ea <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68da      	ldr	r2, [r3, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	b292      	uxth	r2, r2
 80084ae:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b4:	1c9a      	adds	r2, r3, #2
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b02      	subs	r3, #2
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d11f      	bne.n	8008518 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084e6:	605a      	str	r2, [r3, #4]
 80084e8:	e016      	b.n	8008518 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f103 020c 	add.w	r2, r3, #12
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	7812      	ldrb	r2, [r2, #0]
 80084f8:	b2d2      	uxtb	r2, r2
 80084fa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800850c:	b29b      	uxth	r3, r3
 800850e:	3b01      	subs	r3, #1
 8008510:	b29a      	uxth	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10f      	bne.n	8008544 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008532:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008538:	b29b      	uxth	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d102      	bne.n	8008544 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa14 	bl	800896c <SPI_CloseRxTx_ISR>
    }
  }
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008558:	b29b      	uxth	r3, r3
 800855a:	2b01      	cmp	r3, #1
 800855c:	d912      	bls.n	8008584 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	881a      	ldrh	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856e:	1c9a      	adds	r2, r3, #2
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008578:	b29b      	uxth	r3, r3
 800857a:	3b02      	subs	r3, #2
 800857c:	b29a      	uxth	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008582:	e012      	b.n	80085aa <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	330c      	adds	r3, #12
 800858e:	7812      	ldrb	r2, [r2, #0]
 8008590:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d110      	bne.n	80085d6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085c2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f9cb 	bl	800896c <SPI_CloseRxTx_ISR>
    }
  }
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	b292      	uxth	r2, r2
 80085f2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	1c9a      	adds	r2, r3, #2
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008604:	b29b      	uxth	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	b29a      	uxth	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008616:	b29b      	uxth	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10f      	bne.n	800863c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800862a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008630:	b29b      	uxth	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d102      	bne.n	800863c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f998 	bl	800896c <SPI_CloseRxTx_ISR>
    }
  }
}
 800863c:	bf00      	nop
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	881a      	ldrh	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	1c9a      	adds	r2, r3, #2
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008666:	b29b      	uxth	r3, r3
 8008668:	3b01      	subs	r3, #1
 800866a:	b29a      	uxth	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d110      	bne.n	800869c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008688:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d102      	bne.n	800869c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f968 	bl	800896c <SPI_CloseRxTx_ISR>
    }
  }
}
 800869c:	bf00      	nop
 800869e:	3708      	adds	r7, #8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	4613      	mov	r3, r2
 80086b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086b4:	f7fd ff36 	bl	8006524 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	4413      	add	r3, r2
 80086c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086c4:	f7fd ff2e 	bl	8006524 <HAL_GetTick>
 80086c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086ca:	4b39      	ldr	r3, [pc, #228]	; (80087b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	015b      	lsls	r3, r3, #5
 80086d0:	0d1b      	lsrs	r3, r3, #20
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	fb02 f303 	mul.w	r3, r2, r3
 80086d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086da:	e054      	b.n	8008786 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e2:	d050      	beq.n	8008786 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086e4:	f7fd ff1e 	bl	8006524 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d902      	bls.n	80086fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d13d      	bne.n	8008776 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008708:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008712:	d111      	bne.n	8008738 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800871c:	d004      	beq.n	8008728 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008726:	d107      	bne.n	8008738 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008736:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008740:	d10f      	bne.n	8008762 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e017      	b.n	80087a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	3b01      	subs	r3, #1
 8008784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4013      	ands	r3, r2
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	429a      	cmp	r2, r3
 8008794:	bf0c      	ite	eq
 8008796:	2301      	moveq	r3, #1
 8008798:	2300      	movne	r3, #0
 800879a:	b2db      	uxtb	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d19b      	bne.n	80086dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3720      	adds	r7, #32
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	20000004 	.word	0x20000004

080087b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	; 0x28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80087c6:	f7fd fead 	bl	8006524 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	1a9b      	subs	r3, r3, r2
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	4413      	add	r3, r2
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80087d6:	f7fd fea5 	bl	8006524 <HAL_GetTick>
 80087da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	330c      	adds	r3, #12
 80087e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80087e4:	4b3d      	ldr	r3, [pc, #244]	; (80088dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	00da      	lsls	r2, r3, #3
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	0d1b      	lsrs	r3, r3, #20
 80087f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f6:	fb02 f303 	mul.w	r3, r2, r3
 80087fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80087fc:	e060      	b.n	80088c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008804:	d107      	bne.n	8008816 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008814:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881c:	d050      	beq.n	80088c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800881e:	f7fd fe81 	bl	8006524 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882a:	429a      	cmp	r2, r3
 800882c:	d902      	bls.n	8008834 <SPI_WaitFifoStateUntilTimeout+0x80>
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	2b00      	cmp	r3, #0
 8008832:	d13d      	bne.n	80088b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008842:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800884c:	d111      	bne.n	8008872 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008856:	d004      	beq.n	8008862 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008860:	d107      	bne.n	8008872 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008870:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887a:	d10f      	bne.n	800889c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800889a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e010      	b.n	80088d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	3b01      	subs	r3, #1
 80088be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	4013      	ands	r3, r2
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d196      	bne.n	80087fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3728      	adds	r7, #40	; 0x28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	20000004 	.word	0x20000004

080088e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af02      	add	r7, sp, #8
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f7ff ff5b 	bl	80087b4 <SPI_WaitFifoStateUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d007      	beq.n	8008914 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008908:	f043 0220 	orr.w	r2, r3, #32
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e027      	b.n	8008964 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2200      	movs	r2, #0
 800891c:	2180      	movs	r1, #128	; 0x80
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7ff fec0 	bl	80086a4 <SPI_WaitFlagStateUntilTimeout>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d007      	beq.n	800893a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800892e:	f043 0220 	orr.w	r2, r3, #32
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e014      	b.n	8008964 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2200      	movs	r2, #0
 8008942:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7ff ff34 	bl	80087b4 <SPI_WaitFifoStateUntilTimeout>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d007      	beq.n	8008962 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008956:	f043 0220 	orr.w	r2, r3, #32
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e000      	b.n	8008964 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008974:	f7fd fdd6 	bl	8006524 <HAL_GetTick>
 8008978:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 0220 	bic.w	r2, r2, #32
 8008988:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	2164      	movs	r1, #100	; 0x64
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff ffa6 	bl	80088e0 <SPI_EndRxTxTransaction>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800899e:	f043 0220 	orr.w	r2, r3, #32
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d115      	bne.n	80089da <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	d107      	bne.n	80089ca <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff fd44 	bl	8008450 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80089c8:	e00e      	b.n	80089e8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7fb f904 	bl	8003be0 <HAL_SPI_TxRxCpltCallback>
}
 80089d8:	e006      	b.n	80089e8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7fb f90c 	bl	8003c00 <HAL_SPI_ErrorCallback>
}
 80089e8:	bf00      	nop
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e049      	b.n	8008a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d106      	bne.n	8008a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7fa f87c 	bl	8002b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f000 fab8 	bl	8008fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d001      	beq.n	8008ab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e047      	b.n	8008b48 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a23      	ldr	r2, [pc, #140]	; (8008b54 <HAL_TIM_Base_Start+0xb4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d01d      	beq.n	8008b06 <HAL_TIM_Base_Start+0x66>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad2:	d018      	beq.n	8008b06 <HAL_TIM_Base_Start+0x66>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a1f      	ldr	r2, [pc, #124]	; (8008b58 <HAL_TIM_Base_Start+0xb8>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d013      	beq.n	8008b06 <HAL_TIM_Base_Start+0x66>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a1e      	ldr	r2, [pc, #120]	; (8008b5c <HAL_TIM_Base_Start+0xbc>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d00e      	beq.n	8008b06 <HAL_TIM_Base_Start+0x66>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1c      	ldr	r2, [pc, #112]	; (8008b60 <HAL_TIM_Base_Start+0xc0>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d009      	beq.n	8008b06 <HAL_TIM_Base_Start+0x66>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1b      	ldr	r2, [pc, #108]	; (8008b64 <HAL_TIM_Base_Start+0xc4>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d004      	beq.n	8008b06 <HAL_TIM_Base_Start+0x66>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a19      	ldr	r2, [pc, #100]	; (8008b68 <HAL_TIM_Base_Start+0xc8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d115      	bne.n	8008b32 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	4b17      	ldr	r3, [pc, #92]	; (8008b6c <HAL_TIM_Base_Start+0xcc>)
 8008b0e:	4013      	ands	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b06      	cmp	r3, #6
 8008b16:	d015      	beq.n	8008b44 <HAL_TIM_Base_Start+0xa4>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b1e:	d011      	beq.n	8008b44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0201 	orr.w	r2, r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b30:	e008      	b.n	8008b44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f042 0201 	orr.w	r2, r2, #1
 8008b40:	601a      	str	r2, [r3, #0]
 8008b42:	e000      	b.n	8008b46 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	40012c00 	.word	0x40012c00
 8008b58:	40000400 	.word	0x40000400
 8008b5c:	40000800 	.word	0x40000800
 8008b60:	40000c00 	.word	0x40000c00
 8008b64:	40013400 	.word	0x40013400
 8008b68:	40014000 	.word	0x40014000
 8008b6c:	00010007 	.word	0x00010007

08008b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d122      	bne.n	8008bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d11b      	bne.n	8008bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f06f 0202 	mvn.w	r2, #2
 8008b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	f003 0303 	and.w	r3, r3, #3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d003      	beq.n	8008bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f9d8 	bl	8008f68 <HAL_TIM_IC_CaptureCallback>
 8008bb8:	e005      	b.n	8008bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f9ca 	bl	8008f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f9db 	bl	8008f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	f003 0304 	and.w	r3, r3, #4
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	d122      	bne.n	8008c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d11b      	bne.n	8008c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0204 	mvn.w	r2, #4
 8008bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f9ae 	bl	8008f68 <HAL_TIM_IC_CaptureCallback>
 8008c0c:	e005      	b.n	8008c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f9a0 	bl	8008f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f9b1 	bl	8008f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f003 0308 	and.w	r3, r3, #8
 8008c2a:	2b08      	cmp	r3, #8
 8008c2c:	d122      	bne.n	8008c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f003 0308 	and.w	r3, r3, #8
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d11b      	bne.n	8008c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f06f 0208 	mvn.w	r2, #8
 8008c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2204      	movs	r2, #4
 8008c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f984 	bl	8008f68 <HAL_TIM_IC_CaptureCallback>
 8008c60:	e005      	b.n	8008c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f976 	bl	8008f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f987 	bl	8008f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0310 	and.w	r3, r3, #16
 8008c7e:	2b10      	cmp	r3, #16
 8008c80:	d122      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f003 0310 	and.w	r3, r3, #16
 8008c8c:	2b10      	cmp	r3, #16
 8008c8e:	d11b      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f06f 0210 	mvn.w	r2, #16
 8008c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2208      	movs	r2, #8
 8008c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f95a 	bl	8008f68 <HAL_TIM_IC_CaptureCallback>
 8008cb4:	e005      	b.n	8008cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f94c 	bl	8008f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f95d 	bl	8008f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d10e      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d107      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0201 	mvn.w	r2, #1
 8008cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f926 	bl	8008f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfe:	2b80      	cmp	r3, #128	; 0x80
 8008d00:	d10e      	bne.n	8008d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0c:	2b80      	cmp	r3, #128	; 0x80
 8008d0e:	d107      	bne.n	8008d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fb08 	bl	8009330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d2e:	d10e      	bne.n	8008d4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3a:	2b80      	cmp	r3, #128	; 0x80
 8008d3c:	d107      	bne.n	8008d4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fafb 	bl	8009344 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d58:	2b40      	cmp	r3, #64	; 0x40
 8008d5a:	d10e      	bne.n	8008d7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d66:	2b40      	cmp	r3, #64	; 0x40
 8008d68:	d107      	bne.n	8008d7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f90b 	bl	8008f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	2b20      	cmp	r3, #32
 8008d86:	d10e      	bne.n	8008da6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f003 0320 	and.w	r3, r3, #32
 8008d92:	2b20      	cmp	r3, #32
 8008d94:	d107      	bne.n	8008da6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f06f 0220 	mvn.w	r2, #32
 8008d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fabb 	bl	800931c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d101      	bne.n	8008dca <HAL_TIM_ConfigClockSource+0x1c>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e0b6      	b.n	8008f38 <HAL_TIM_ConfigClockSource+0x18a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2202      	movs	r2, #2
 8008dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008de8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008dec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008df4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e06:	d03e      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0xd8>
 8008e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e0c:	f200 8087 	bhi.w	8008f1e <HAL_TIM_ConfigClockSource+0x170>
 8008e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e14:	f000 8086 	beq.w	8008f24 <HAL_TIM_ConfigClockSource+0x176>
 8008e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e1c:	d87f      	bhi.n	8008f1e <HAL_TIM_ConfigClockSource+0x170>
 8008e1e:	2b70      	cmp	r3, #112	; 0x70
 8008e20:	d01a      	beq.n	8008e58 <HAL_TIM_ConfigClockSource+0xaa>
 8008e22:	2b70      	cmp	r3, #112	; 0x70
 8008e24:	d87b      	bhi.n	8008f1e <HAL_TIM_ConfigClockSource+0x170>
 8008e26:	2b60      	cmp	r3, #96	; 0x60
 8008e28:	d050      	beq.n	8008ecc <HAL_TIM_ConfigClockSource+0x11e>
 8008e2a:	2b60      	cmp	r3, #96	; 0x60
 8008e2c:	d877      	bhi.n	8008f1e <HAL_TIM_ConfigClockSource+0x170>
 8008e2e:	2b50      	cmp	r3, #80	; 0x50
 8008e30:	d03c      	beq.n	8008eac <HAL_TIM_ConfigClockSource+0xfe>
 8008e32:	2b50      	cmp	r3, #80	; 0x50
 8008e34:	d873      	bhi.n	8008f1e <HAL_TIM_ConfigClockSource+0x170>
 8008e36:	2b40      	cmp	r3, #64	; 0x40
 8008e38:	d058      	beq.n	8008eec <HAL_TIM_ConfigClockSource+0x13e>
 8008e3a:	2b40      	cmp	r3, #64	; 0x40
 8008e3c:	d86f      	bhi.n	8008f1e <HAL_TIM_ConfigClockSource+0x170>
 8008e3e:	2b30      	cmp	r3, #48	; 0x30
 8008e40:	d064      	beq.n	8008f0c <HAL_TIM_ConfigClockSource+0x15e>
 8008e42:	2b30      	cmp	r3, #48	; 0x30
 8008e44:	d86b      	bhi.n	8008f1e <HAL_TIM_ConfigClockSource+0x170>
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d060      	beq.n	8008f0c <HAL_TIM_ConfigClockSource+0x15e>
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d867      	bhi.n	8008f1e <HAL_TIM_ConfigClockSource+0x170>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d05c      	beq.n	8008f0c <HAL_TIM_ConfigClockSource+0x15e>
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d05a      	beq.n	8008f0c <HAL_TIM_ConfigClockSource+0x15e>
 8008e56:	e062      	b.n	8008f1e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	6899      	ldr	r1, [r3, #8]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f000 f9b0 	bl	80091cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	609a      	str	r2, [r3, #8]
      break;
 8008e84:	e04f      	b.n	8008f26 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6899      	ldr	r1, [r3, #8]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f000 f999 	bl	80091cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ea8:	609a      	str	r2, [r3, #8]
      break;
 8008eaa:	e03c      	b.n	8008f26 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6818      	ldr	r0, [r3, #0]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	6859      	ldr	r1, [r3, #4]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f000 f90d 	bl	80090d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2150      	movs	r1, #80	; 0x50
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 f966 	bl	8009196 <TIM_ITRx_SetConfig>
      break;
 8008eca:	e02c      	b.n	8008f26 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	6859      	ldr	r1, [r3, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	f000 f92c 	bl	8009136 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2160      	movs	r1, #96	; 0x60
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f956 	bl	8009196 <TIM_ITRx_SetConfig>
      break;
 8008eea:	e01c      	b.n	8008f26 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6818      	ldr	r0, [r3, #0]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	6859      	ldr	r1, [r3, #4]
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f000 f8ed 	bl	80090d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2140      	movs	r1, #64	; 0x40
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 f946 	bl	8009196 <TIM_ITRx_SetConfig>
      break;
 8008f0a:	e00c      	b.n	8008f26 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f000 f93d 	bl	8009196 <TIM_ITRx_SetConfig>
      break;
 8008f1c:	e003      	b.n	8008f26 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
      break;
 8008f22:	e000      	b.n	8008f26 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008f24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a40      	ldr	r2, [pc, #256]	; (80090b8 <TIM_Base_SetConfig+0x114>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d013      	beq.n	8008fe4 <TIM_Base_SetConfig+0x40>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc2:	d00f      	beq.n	8008fe4 <TIM_Base_SetConfig+0x40>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a3d      	ldr	r2, [pc, #244]	; (80090bc <TIM_Base_SetConfig+0x118>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d00b      	beq.n	8008fe4 <TIM_Base_SetConfig+0x40>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a3c      	ldr	r2, [pc, #240]	; (80090c0 <TIM_Base_SetConfig+0x11c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d007      	beq.n	8008fe4 <TIM_Base_SetConfig+0x40>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a3b      	ldr	r2, [pc, #236]	; (80090c4 <TIM_Base_SetConfig+0x120>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d003      	beq.n	8008fe4 <TIM_Base_SetConfig+0x40>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a3a      	ldr	r2, [pc, #232]	; (80090c8 <TIM_Base_SetConfig+0x124>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d108      	bne.n	8008ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a2f      	ldr	r2, [pc, #188]	; (80090b8 <TIM_Base_SetConfig+0x114>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d01f      	beq.n	800903e <TIM_Base_SetConfig+0x9a>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009004:	d01b      	beq.n	800903e <TIM_Base_SetConfig+0x9a>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a2c      	ldr	r2, [pc, #176]	; (80090bc <TIM_Base_SetConfig+0x118>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d017      	beq.n	800903e <TIM_Base_SetConfig+0x9a>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a2b      	ldr	r2, [pc, #172]	; (80090c0 <TIM_Base_SetConfig+0x11c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d013      	beq.n	800903e <TIM_Base_SetConfig+0x9a>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a2a      	ldr	r2, [pc, #168]	; (80090c4 <TIM_Base_SetConfig+0x120>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d00f      	beq.n	800903e <TIM_Base_SetConfig+0x9a>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a29      	ldr	r2, [pc, #164]	; (80090c8 <TIM_Base_SetConfig+0x124>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d00b      	beq.n	800903e <TIM_Base_SetConfig+0x9a>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a28      	ldr	r2, [pc, #160]	; (80090cc <TIM_Base_SetConfig+0x128>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d007      	beq.n	800903e <TIM_Base_SetConfig+0x9a>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a27      	ldr	r2, [pc, #156]	; (80090d0 <TIM_Base_SetConfig+0x12c>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d003      	beq.n	800903e <TIM_Base_SetConfig+0x9a>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a26      	ldr	r2, [pc, #152]	; (80090d4 <TIM_Base_SetConfig+0x130>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d108      	bne.n	8009050 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	4313      	orrs	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a10      	ldr	r2, [pc, #64]	; (80090b8 <TIM_Base_SetConfig+0x114>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00f      	beq.n	800909c <TIM_Base_SetConfig+0xf8>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a12      	ldr	r2, [pc, #72]	; (80090c8 <TIM_Base_SetConfig+0x124>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d00b      	beq.n	800909c <TIM_Base_SetConfig+0xf8>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a11      	ldr	r2, [pc, #68]	; (80090cc <TIM_Base_SetConfig+0x128>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d007      	beq.n	800909c <TIM_Base_SetConfig+0xf8>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a10      	ldr	r2, [pc, #64]	; (80090d0 <TIM_Base_SetConfig+0x12c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d003      	beq.n	800909c <TIM_Base_SetConfig+0xf8>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a0f      	ldr	r2, [pc, #60]	; (80090d4 <TIM_Base_SetConfig+0x130>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d103      	bne.n	80090a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	615a      	str	r2, [r3, #20]
}
 80090aa:	bf00      	nop
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40012c00 	.word	0x40012c00
 80090bc:	40000400 	.word	0x40000400
 80090c0:	40000800 	.word	0x40000800
 80090c4:	40000c00 	.word	0x40000c00
 80090c8:	40013400 	.word	0x40013400
 80090cc:	40014000 	.word	0x40014000
 80090d0:	40014400 	.word	0x40014400
 80090d4:	40014800 	.word	0x40014800

080090d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	f023 0201 	bic.w	r2, r3, #1
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f023 030a 	bic.w	r3, r3, #10
 8009114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	4313      	orrs	r3, r2
 800911c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	621a      	str	r2, [r3, #32]
}
 800912a:	bf00      	nop
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009136:	b480      	push	{r7}
 8009138:	b087      	sub	sp, #28
 800913a:	af00      	add	r7, sp, #0
 800913c:	60f8      	str	r0, [r7, #12]
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	f023 0210 	bic.w	r2, r3, #16
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	031b      	lsls	r3, r3, #12
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	4313      	orrs	r3, r2
 800916a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009172:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	011b      	lsls	r3, r3, #4
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	4313      	orrs	r3, r2
 800917c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	621a      	str	r2, [r3, #32]
}
 800918a:	bf00      	nop
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009196:	b480      	push	{r7}
 8009198:	b085      	sub	sp, #20
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	f043 0307 	orr.w	r3, r3, #7
 80091b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	609a      	str	r2, [r3, #8]
}
 80091c0:	bf00      	nop
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	021a      	lsls	r2, r3, #8
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	431a      	orrs	r2, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	609a      	str	r2, [r3, #8]
}
 8009200:	bf00      	nop
 8009202:	371c      	adds	r7, #28
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800921c:	2b01      	cmp	r3, #1
 800921e:	d101      	bne.n	8009224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009220:	2302      	movs	r3, #2
 8009222:	e068      	b.n	80092f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2202      	movs	r2, #2
 8009230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a2e      	ldr	r2, [pc, #184]	; (8009304 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d004      	beq.n	8009258 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a2d      	ldr	r2, [pc, #180]	; (8009308 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d108      	bne.n	800926a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800925e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	4313      	orrs	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009270:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a1e      	ldr	r2, [pc, #120]	; (8009304 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d01d      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009296:	d018      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a1b      	ldr	r2, [pc, #108]	; (800930c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d013      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a1a      	ldr	r2, [pc, #104]	; (8009310 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d00e      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a18      	ldr	r2, [pc, #96]	; (8009314 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d009      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a13      	ldr	r2, [pc, #76]	; (8009308 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d004      	beq.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a14      	ldr	r2, [pc, #80]	; (8009318 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d10c      	bne.n	80092e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	4313      	orrs	r3, r2
 80092da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	40012c00 	.word	0x40012c00
 8009308:	40013400 	.word	0x40013400
 800930c:	40000400 	.word	0x40000400
 8009310:	40000800 	.word	0x40000800
 8009314:	40000c00 	.word	0x40000c00
 8009318:	40014000 	.word	0x40014000

0800931c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <LL_ADC_REG_SetSequencerLength>:
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009366:	f023 020f 	bic.w	r2, r3, #15
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	431a      	orrs	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <LL_ADC_IsEnabled>:
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <LL_ADC_IsEnabled+0x18>
 8009392:	2301      	movs	r3, #1
 8009394:	e000      	b.n	8009398 <LL_ADC_IsEnabled+0x1a>
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80093a4:	b590      	push	{r4, r7, lr}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80093b2:	481c      	ldr	r0, [pc, #112]	; (8009424 <LL_ADC_CommonInit+0x80>)
 80093b4:	f7ff ffe3 	bl	800937e <LL_ADC_IsEnabled>
 80093b8:	4604      	mov	r4, r0
 80093ba:	481b      	ldr	r0, [pc, #108]	; (8009428 <LL_ADC_CommonInit+0x84>)
 80093bc:	f7ff ffdf 	bl	800937e <LL_ADC_IsEnabled>
 80093c0:	4603      	mov	r3, r0
 80093c2:	431c      	orrs	r4, r3
 80093c4:	4819      	ldr	r0, [pc, #100]	; (800942c <LL_ADC_CommonInit+0x88>)
 80093c6:	f7ff ffda 	bl	800937e <LL_ADC_IsEnabled>
 80093ca:	4603      	mov	r3, r0
 80093cc:	4323      	orrs	r3, r4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d120      	bne.n	8009414 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d012      	beq.n	8009400 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	4b14      	ldr	r3, [pc, #80]	; (8009430 <LL_ADC_CommonInit+0x8c>)
 80093e0:	4013      	ands	r3, r2
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	6811      	ldr	r1, [r2, #0]
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	6852      	ldr	r2, [r2, #4]
 80093ea:	4311      	orrs	r1, r2
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	6892      	ldr	r2, [r2, #8]
 80093f0:	4311      	orrs	r1, r2
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	68d2      	ldr	r2, [r2, #12]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	609a      	str	r2, [r3, #8]
 80093fe:	e00b      	b.n	8009418 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	4b0a      	ldr	r3, [pc, #40]	; (8009430 <LL_ADC_CommonInit+0x8c>)
 8009406:	4013      	ands	r3, r2
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	431a      	orrs	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	609a      	str	r2, [r3, #8]
 8009412:	e001      	b.n	8009418 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009418:	7bfb      	ldrb	r3, [r7, #15]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	bd90      	pop	{r4, r7, pc}
 8009422:	bf00      	nop
 8009424:	50040000 	.word	0x50040000
 8009428:	50040100 	.word	0x50040100
 800942c:	50040200 	.word	0x50040200
 8009430:	ffc030e0 	.word	0xffc030e0

08009434 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800943e:	2300      	movs	r3, #0
 8009440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7ff ff9b 	bl	800937e <LL_ADC_IsEnabled>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d111      	bne.n	8009472 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009456:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	6811      	ldr	r1, [r2, #0]
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	6852      	ldr	r2, [r2, #4]
 8009462:	4311      	orrs	r1, r2
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	6892      	ldr	r2, [r2, #8]
 8009468:	430a      	orrs	r2, r1
 800946a:	431a      	orrs	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	60da      	str	r2, [r3, #12]
 8009470:	e001      	b.n	8009476 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009476:	7bfb      	ldrb	r3, [r7, #15]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7ff ff75 	bl	800937e <LL_ADC_IsEnabled>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d132      	bne.n	8009500 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d015      	beq.n	80094ce <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68da      	ldr	r2, [r3, #12]
 80094a6:	4b1a      	ldr	r3, [pc, #104]	; (8009510 <LL_ADC_REG_Init+0x90>)
 80094a8:	4013      	ands	r3, r2
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	6811      	ldr	r1, [r2, #0]
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	6892      	ldr	r2, [r2, #8]
 80094b2:	4311      	orrs	r1, r2
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	68d2      	ldr	r2, [r2, #12]
 80094b8:	4311      	orrs	r1, r2
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	6912      	ldr	r2, [r2, #16]
 80094be:	4311      	orrs	r1, r2
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	6952      	ldr	r2, [r2, #20]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	431a      	orrs	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	60da      	str	r2, [r3, #12]
 80094cc:	e011      	b.n	80094f2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68da      	ldr	r2, [r3, #12]
 80094d2:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <LL_ADC_REG_Init+0x90>)
 80094d4:	4013      	ands	r3, r2
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	6811      	ldr	r1, [r2, #0]
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	68d2      	ldr	r2, [r2, #12]
 80094de:	4311      	orrs	r1, r2
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	6912      	ldr	r2, [r2, #16]
 80094e4:	4311      	orrs	r1, r2
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	6952      	ldr	r2, [r2, #20]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	431a      	orrs	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7ff ff2d 	bl	8009358 <LL_ADC_REG_SetSequencerLength>
 80094fe:	e001      	b.n	8009504 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8009504:	7bfb      	ldrb	r3, [r7, #15]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	fff0c03c 	.word	0xfff0c03c

08009514 <LL_GPIO_SetPinMode>:
{
 8009514:	b480      	push	{r7}
 8009516:	b08b      	sub	sp, #44	; 0x2c
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	fa93 f3a3 	rbit	r3, r3
 800952e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800953a:	2320      	movs	r3, #32
 800953c:	e003      	b.n	8009546 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	fab3 f383 	clz	r3, r3
 8009544:	b2db      	uxtb	r3, r3
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	2103      	movs	r1, #3
 800954a:	fa01 f303 	lsl.w	r3, r1, r3
 800954e:	43db      	mvns	r3, r3
 8009550:	401a      	ands	r2, r3
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	fa93 f3a3 	rbit	r3, r3
 800955c:	61fb      	str	r3, [r7, #28]
  return result;
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009568:	2320      	movs	r3, #32
 800956a:	e003      	b.n	8009574 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	fab3 f383 	clz	r3, r3
 8009572:	b2db      	uxtb	r3, r3
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	fa01 f303 	lsl.w	r3, r1, r3
 800957c:	431a      	orrs	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	601a      	str	r2, [r3, #0]
}
 8009582:	bf00      	nop
 8009584:	372c      	adds	r7, #44	; 0x2c
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <LL_GPIO_SetPinOutputType>:
{
 800958e:	b480      	push	{r7}
 8009590:	b085      	sub	sp, #20
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	43db      	mvns	r3, r3
 80095a2:	401a      	ands	r2, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	fb01 f303 	mul.w	r3, r1, r3
 80095ac:	431a      	orrs	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	605a      	str	r2, [r3, #4]
}
 80095b2:	bf00      	nop
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <LL_GPIO_SetPinSpeed>:
{
 80095be:	b480      	push	{r7}
 80095c0:	b08b      	sub	sp, #44	; 0x2c
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	60b9      	str	r1, [r7, #8]
 80095c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	689a      	ldr	r2, [r3, #8]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	fa93 f3a3 	rbit	r3, r3
 80095d8:	613b      	str	r3, [r7, #16]
  return result;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80095e4:	2320      	movs	r3, #32
 80095e6:	e003      	b.n	80095f0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	fab3 f383 	clz	r3, r3
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	2103      	movs	r1, #3
 80095f4:	fa01 f303 	lsl.w	r3, r1, r3
 80095f8:	43db      	mvns	r3, r3
 80095fa:	401a      	ands	r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	fa93 f3a3 	rbit	r3, r3
 8009606:	61fb      	str	r3, [r7, #28]
  return result;
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009612:	2320      	movs	r3, #32
 8009614:	e003      	b.n	800961e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	fab3 f383 	clz	r3, r3
 800961c:	b2db      	uxtb	r3, r3
 800961e:	005b      	lsls	r3, r3, #1
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	fa01 f303 	lsl.w	r3, r1, r3
 8009626:	431a      	orrs	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	609a      	str	r2, [r3, #8]
}
 800962c:	bf00      	nop
 800962e:	372c      	adds	r7, #44	; 0x2c
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <LL_GPIO_SetPinPull>:
{
 8009638:	b480      	push	{r7}
 800963a:	b08b      	sub	sp, #44	; 0x2c
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	fa93 f3a3 	rbit	r3, r3
 8009652:	613b      	str	r3, [r7, #16]
  return result;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800965e:	2320      	movs	r3, #32
 8009660:	e003      	b.n	800966a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	fab3 f383 	clz	r3, r3
 8009668:	b2db      	uxtb	r3, r3
 800966a:	005b      	lsls	r3, r3, #1
 800966c:	2103      	movs	r1, #3
 800966e:	fa01 f303 	lsl.w	r3, r1, r3
 8009672:	43db      	mvns	r3, r3
 8009674:	401a      	ands	r2, r3
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	fa93 f3a3 	rbit	r3, r3
 8009680:	61fb      	str	r3, [r7, #28]
  return result;
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800968c:	2320      	movs	r3, #32
 800968e:	e003      	b.n	8009698 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	fab3 f383 	clz	r3, r3
 8009696:	b2db      	uxtb	r3, r3
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	fa01 f303 	lsl.w	r3, r1, r3
 80096a0:	431a      	orrs	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	60da      	str	r2, [r3, #12]
}
 80096a6:	bf00      	nop
 80096a8:	372c      	adds	r7, #44	; 0x2c
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <LL_GPIO_SetAFPin_0_7>:
{
 80096b2:	b480      	push	{r7}
 80096b4:	b08b      	sub	sp, #44	; 0x2c
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a1a      	ldr	r2, [r3, #32]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	fa93 f3a3 	rbit	r3, r3
 80096cc:	613b      	str	r3, [r7, #16]
  return result;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80096d8:	2320      	movs	r3, #32
 80096da:	e003      	b.n	80096e4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	fab3 f383 	clz	r3, r3
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	210f      	movs	r1, #15
 80096e8:	fa01 f303 	lsl.w	r3, r1, r3
 80096ec:	43db      	mvns	r3, r3
 80096ee:	401a      	ands	r2, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	fa93 f3a3 	rbit	r3, r3
 80096fa:	61fb      	str	r3, [r7, #28]
  return result;
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009706:	2320      	movs	r3, #32
 8009708:	e003      	b.n	8009712 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	fab3 f383 	clz	r3, r3
 8009710:	b2db      	uxtb	r3, r3
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	fa01 f303 	lsl.w	r3, r1, r3
 800971a:	431a      	orrs	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	621a      	str	r2, [r3, #32]
}
 8009720:	bf00      	nop
 8009722:	372c      	adds	r7, #44	; 0x2c
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <LL_GPIO_SetAFPin_8_15>:
{
 800972c:	b480      	push	{r7}
 800972e:	b08b      	sub	sp, #44	; 0x2c
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	0a1b      	lsrs	r3, r3, #8
 8009740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	fa93 f3a3 	rbit	r3, r3
 8009748:	613b      	str	r3, [r7, #16]
  return result;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009754:	2320      	movs	r3, #32
 8009756:	e003      	b.n	8009760 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	fab3 f383 	clz	r3, r3
 800975e:	b2db      	uxtb	r3, r3
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	210f      	movs	r1, #15
 8009764:	fa01 f303 	lsl.w	r3, r1, r3
 8009768:	43db      	mvns	r3, r3
 800976a:	401a      	ands	r2, r3
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	0a1b      	lsrs	r3, r3, #8
 8009770:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	fa93 f3a3 	rbit	r3, r3
 8009778:	61fb      	str	r3, [r7, #28]
  return result;
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009784:	2320      	movs	r3, #32
 8009786:	e003      	b.n	8009790 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978a:	fab3 f383 	clz	r3, r3
 800978e:	b2db      	uxtb	r3, r3
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	fa01 f303 	lsl.w	r3, r1, r3
 8009798:	431a      	orrs	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800979e:	bf00      	nop
 80097a0:	372c      	adds	r7, #44	; 0x2c
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b088      	sub	sp, #32
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	fa93 f3a3 	rbit	r3, r3
 80097c0:	60fb      	str	r3, [r7, #12]
  return result;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <LL_GPIO_Init+0x26>
    return 32U;
 80097cc:	2320      	movs	r3, #32
 80097ce:	e003      	b.n	80097d8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	fab3 f383 	clz	r3, r3
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80097da:	e048      	b.n	800986e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	2101      	movs	r1, #1
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	fa01 f303 	lsl.w	r3, r1, r3
 80097e8:	4013      	ands	r3, r2
 80097ea:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d03a      	beq.n	8009868 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d003      	beq.n	8009802 <LL_GPIO_Init+0x58>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d10e      	bne.n	8009820 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	461a      	mov	r2, r3
 8009808:	69b9      	ldr	r1, [r7, #24]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff fed7 	bl	80095be <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	6819      	ldr	r1, [r3, #0]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	461a      	mov	r2, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff feb7 	bl	800958e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	461a      	mov	r2, r3
 8009826:	69b9      	ldr	r1, [r7, #24]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff ff05 	bl	8009638 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	2b02      	cmp	r3, #2
 8009834:	d111      	bne.n	800985a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2bff      	cmp	r3, #255	; 0xff
 800983a:	d807      	bhi.n	800984c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	695b      	ldr	r3, [r3, #20]
 8009840:	461a      	mov	r2, r3
 8009842:	69b9      	ldr	r1, [r7, #24]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff ff34 	bl	80096b2 <LL_GPIO_SetAFPin_0_7>
 800984a:	e006      	b.n	800985a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	461a      	mov	r2, r3
 8009852:	69b9      	ldr	r1, [r7, #24]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7ff ff69 	bl	800972c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	461a      	mov	r2, r3
 8009860:	69b9      	ldr	r1, [r7, #24]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff fe56 	bl	8009514 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	3301      	adds	r3, #1
 800986c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	fa22 f303 	lsr.w	r3, r2, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1af      	bne.n	80097dc <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3720      	adds	r7, #32
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8009890:	4a04      	ldr	r2, [pc, #16]	; (80098a4 <LL_SetSystemCoreClock+0x1c>)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6013      	str	r3, [r2, #0]
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000004 	.word	0x20000004

080098a8 <__errno>:
 80098a8:	4b01      	ldr	r3, [pc, #4]	; (80098b0 <__errno+0x8>)
 80098aa:	6818      	ldr	r0, [r3, #0]
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	20000010 	.word	0x20000010

080098b4 <__libc_init_array>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	4d0d      	ldr	r5, [pc, #52]	; (80098ec <__libc_init_array+0x38>)
 80098b8:	4c0d      	ldr	r4, [pc, #52]	; (80098f0 <__libc_init_array+0x3c>)
 80098ba:	1b64      	subs	r4, r4, r5
 80098bc:	10a4      	asrs	r4, r4, #2
 80098be:	2600      	movs	r6, #0
 80098c0:	42a6      	cmp	r6, r4
 80098c2:	d109      	bne.n	80098d8 <__libc_init_array+0x24>
 80098c4:	4d0b      	ldr	r5, [pc, #44]	; (80098f4 <__libc_init_array+0x40>)
 80098c6:	4c0c      	ldr	r4, [pc, #48]	; (80098f8 <__libc_init_array+0x44>)
 80098c8:	f000 fb82 	bl	8009fd0 <_init>
 80098cc:	1b64      	subs	r4, r4, r5
 80098ce:	10a4      	asrs	r4, r4, #2
 80098d0:	2600      	movs	r6, #0
 80098d2:	42a6      	cmp	r6, r4
 80098d4:	d105      	bne.n	80098e2 <__libc_init_array+0x2e>
 80098d6:	bd70      	pop	{r4, r5, r6, pc}
 80098d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098dc:	4798      	blx	r3
 80098de:	3601      	adds	r6, #1
 80098e0:	e7ee      	b.n	80098c0 <__libc_init_array+0xc>
 80098e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098e6:	4798      	blx	r3
 80098e8:	3601      	adds	r6, #1
 80098ea:	e7f2      	b.n	80098d2 <__libc_init_array+0x1e>
 80098ec:	0800a528 	.word	0x0800a528
 80098f0:	0800a528 	.word	0x0800a528
 80098f4:	0800a528 	.word	0x0800a528
 80098f8:	0800a52c 	.word	0x0800a52c

080098fc <memcpy>:
 80098fc:	440a      	add	r2, r1
 80098fe:	4291      	cmp	r1, r2
 8009900:	f100 33ff 	add.w	r3, r0, #4294967295
 8009904:	d100      	bne.n	8009908 <memcpy+0xc>
 8009906:	4770      	bx	lr
 8009908:	b510      	push	{r4, lr}
 800990a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800990e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009912:	4291      	cmp	r1, r2
 8009914:	d1f9      	bne.n	800990a <memcpy+0xe>
 8009916:	bd10      	pop	{r4, pc}

08009918 <memset>:
 8009918:	4402      	add	r2, r0
 800991a:	4603      	mov	r3, r0
 800991c:	4293      	cmp	r3, r2
 800991e:	d100      	bne.n	8009922 <memset+0xa>
 8009920:	4770      	bx	lr
 8009922:	f803 1b01 	strb.w	r1, [r3], #1
 8009926:	e7f9      	b.n	800991c <memset+0x4>

08009928 <atan>:
 8009928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	ec55 4b10 	vmov	r4, r5, d0
 8009930:	4bc3      	ldr	r3, [pc, #780]	; (8009c40 <atan+0x318>)
 8009932:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009936:	429e      	cmp	r6, r3
 8009938:	46ab      	mov	fp, r5
 800993a:	dd18      	ble.n	800996e <atan+0x46>
 800993c:	4bc1      	ldr	r3, [pc, #772]	; (8009c44 <atan+0x31c>)
 800993e:	429e      	cmp	r6, r3
 8009940:	dc01      	bgt.n	8009946 <atan+0x1e>
 8009942:	d109      	bne.n	8009958 <atan+0x30>
 8009944:	b144      	cbz	r4, 8009958 <atan+0x30>
 8009946:	4622      	mov	r2, r4
 8009948:	462b      	mov	r3, r5
 800994a:	4620      	mov	r0, r4
 800994c:	4629      	mov	r1, r5
 800994e:	f7f6 fc41 	bl	80001d4 <__adddf3>
 8009952:	4604      	mov	r4, r0
 8009954:	460d      	mov	r5, r1
 8009956:	e006      	b.n	8009966 <atan+0x3e>
 8009958:	f1bb 0f00 	cmp.w	fp, #0
 800995c:	f300 8131 	bgt.w	8009bc2 <atan+0x29a>
 8009960:	a59b      	add	r5, pc, #620	; (adr r5, 8009bd0 <atan+0x2a8>)
 8009962:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009966:	ec45 4b10 	vmov	d0, r4, r5
 800996a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996e:	4bb6      	ldr	r3, [pc, #728]	; (8009c48 <atan+0x320>)
 8009970:	429e      	cmp	r6, r3
 8009972:	dc14      	bgt.n	800999e <atan+0x76>
 8009974:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009978:	429e      	cmp	r6, r3
 800997a:	dc0d      	bgt.n	8009998 <atan+0x70>
 800997c:	a396      	add	r3, pc, #600	; (adr r3, 8009bd8 <atan+0x2b0>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	ee10 0a10 	vmov	r0, s0
 8009986:	4629      	mov	r1, r5
 8009988:	f7f6 fc24 	bl	80001d4 <__adddf3>
 800998c:	4baf      	ldr	r3, [pc, #700]	; (8009c4c <atan+0x324>)
 800998e:	2200      	movs	r2, #0
 8009990:	f7f7 f866 	bl	8000a60 <__aeabi_dcmpgt>
 8009994:	2800      	cmp	r0, #0
 8009996:	d1e6      	bne.n	8009966 <atan+0x3e>
 8009998:	f04f 3aff 	mov.w	sl, #4294967295
 800999c:	e02b      	b.n	80099f6 <atan+0xce>
 800999e:	f000 f963 	bl	8009c68 <fabs>
 80099a2:	4bab      	ldr	r3, [pc, #684]	; (8009c50 <atan+0x328>)
 80099a4:	429e      	cmp	r6, r3
 80099a6:	ec55 4b10 	vmov	r4, r5, d0
 80099aa:	f300 80bf 	bgt.w	8009b2c <atan+0x204>
 80099ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80099b2:	429e      	cmp	r6, r3
 80099b4:	f300 80a0 	bgt.w	8009af8 <atan+0x1d0>
 80099b8:	ee10 2a10 	vmov	r2, s0
 80099bc:	ee10 0a10 	vmov	r0, s0
 80099c0:	462b      	mov	r3, r5
 80099c2:	4629      	mov	r1, r5
 80099c4:	f7f6 fc06 	bl	80001d4 <__adddf3>
 80099c8:	4ba0      	ldr	r3, [pc, #640]	; (8009c4c <atan+0x324>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	f7f6 fc00 	bl	80001d0 <__aeabi_dsub>
 80099d0:	2200      	movs	r2, #0
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099da:	4620      	mov	r0, r4
 80099dc:	4629      	mov	r1, r5
 80099de:	f7f6 fbf9 	bl	80001d4 <__adddf3>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4630      	mov	r0, r6
 80099e8:	4639      	mov	r1, r7
 80099ea:	f7f6 fed3 	bl	8000794 <__aeabi_ddiv>
 80099ee:	f04f 0a00 	mov.w	sl, #0
 80099f2:	4604      	mov	r4, r0
 80099f4:	460d      	mov	r5, r1
 80099f6:	4622      	mov	r2, r4
 80099f8:	462b      	mov	r3, r5
 80099fa:	4620      	mov	r0, r4
 80099fc:	4629      	mov	r1, r5
 80099fe:	f7f6 fd9f 	bl	8000540 <__aeabi_dmul>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4680      	mov	r8, r0
 8009a08:	4689      	mov	r9, r1
 8009a0a:	f7f6 fd99 	bl	8000540 <__aeabi_dmul>
 8009a0e:	a374      	add	r3, pc, #464	; (adr r3, 8009be0 <atan+0x2b8>)
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	4606      	mov	r6, r0
 8009a16:	460f      	mov	r7, r1
 8009a18:	f7f6 fd92 	bl	8000540 <__aeabi_dmul>
 8009a1c:	a372      	add	r3, pc, #456	; (adr r3, 8009be8 <atan+0x2c0>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fbd7 	bl	80001d4 <__adddf3>
 8009a26:	4632      	mov	r2, r6
 8009a28:	463b      	mov	r3, r7
 8009a2a:	f7f6 fd89 	bl	8000540 <__aeabi_dmul>
 8009a2e:	a370      	add	r3, pc, #448	; (adr r3, 8009bf0 <atan+0x2c8>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7f6 fbce 	bl	80001d4 <__adddf3>
 8009a38:	4632      	mov	r2, r6
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	f7f6 fd80 	bl	8000540 <__aeabi_dmul>
 8009a40:	a36d      	add	r3, pc, #436	; (adr r3, 8009bf8 <atan+0x2d0>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fbc5 	bl	80001d4 <__adddf3>
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	f7f6 fd77 	bl	8000540 <__aeabi_dmul>
 8009a52:	a36b      	add	r3, pc, #428	; (adr r3, 8009c00 <atan+0x2d8>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f7f6 fbbc 	bl	80001d4 <__adddf3>
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	463b      	mov	r3, r7
 8009a60:	f7f6 fd6e 	bl	8000540 <__aeabi_dmul>
 8009a64:	a368      	add	r3, pc, #416	; (adr r3, 8009c08 <atan+0x2e0>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7f6 fbb3 	bl	80001d4 <__adddf3>
 8009a6e:	4642      	mov	r2, r8
 8009a70:	464b      	mov	r3, r9
 8009a72:	f7f6 fd65 	bl	8000540 <__aeabi_dmul>
 8009a76:	a366      	add	r3, pc, #408	; (adr r3, 8009c10 <atan+0x2e8>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	4689      	mov	r9, r1
 8009a80:	4630      	mov	r0, r6
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7f6 fd5c 	bl	8000540 <__aeabi_dmul>
 8009a88:	a363      	add	r3, pc, #396	; (adr r3, 8009c18 <atan+0x2f0>)
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	f7f6 fb9f 	bl	80001d0 <__aeabi_dsub>
 8009a92:	4632      	mov	r2, r6
 8009a94:	463b      	mov	r3, r7
 8009a96:	f7f6 fd53 	bl	8000540 <__aeabi_dmul>
 8009a9a:	a361      	add	r3, pc, #388	; (adr r3, 8009c20 <atan+0x2f8>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f7f6 fb96 	bl	80001d0 <__aeabi_dsub>
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	f7f6 fd4a 	bl	8000540 <__aeabi_dmul>
 8009aac:	a35e      	add	r3, pc, #376	; (adr r3, 8009c28 <atan+0x300>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f7f6 fb8d 	bl	80001d0 <__aeabi_dsub>
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	463b      	mov	r3, r7
 8009aba:	f7f6 fd41 	bl	8000540 <__aeabi_dmul>
 8009abe:	a35c      	add	r3, pc, #368	; (adr r3, 8009c30 <atan+0x308>)
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	f7f6 fb84 	bl	80001d0 <__aeabi_dsub>
 8009ac8:	4632      	mov	r2, r6
 8009aca:	463b      	mov	r3, r7
 8009acc:	f7f6 fd38 	bl	8000540 <__aeabi_dmul>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	f7f6 fb7c 	bl	80001d4 <__adddf3>
 8009adc:	4622      	mov	r2, r4
 8009ade:	462b      	mov	r3, r5
 8009ae0:	f7f6 fd2e 	bl	8000540 <__aeabi_dmul>
 8009ae4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	d14b      	bne.n	8009b86 <atan+0x25e>
 8009aee:	4620      	mov	r0, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7f6 fb6d 	bl	80001d0 <__aeabi_dsub>
 8009af6:	e72c      	b.n	8009952 <atan+0x2a>
 8009af8:	ee10 0a10 	vmov	r0, s0
 8009afc:	4b53      	ldr	r3, [pc, #332]	; (8009c4c <atan+0x324>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f6 fb65 	bl	80001d0 <__aeabi_dsub>
 8009b06:	4b51      	ldr	r3, [pc, #324]	; (8009c4c <atan+0x324>)
 8009b08:	4606      	mov	r6, r0
 8009b0a:	460f      	mov	r7, r1
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	f7f6 fb5f 	bl	80001d4 <__adddf3>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	4639      	mov	r1, r7
 8009b1e:	f7f6 fe39 	bl	8000794 <__aeabi_ddiv>
 8009b22:	f04f 0a01 	mov.w	sl, #1
 8009b26:	4604      	mov	r4, r0
 8009b28:	460d      	mov	r5, r1
 8009b2a:	e764      	b.n	80099f6 <atan+0xce>
 8009b2c:	4b49      	ldr	r3, [pc, #292]	; (8009c54 <atan+0x32c>)
 8009b2e:	429e      	cmp	r6, r3
 8009b30:	da1d      	bge.n	8009b6e <atan+0x246>
 8009b32:	ee10 0a10 	vmov	r0, s0
 8009b36:	4b48      	ldr	r3, [pc, #288]	; (8009c58 <atan+0x330>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	f7f6 fb48 	bl	80001d0 <__aeabi_dsub>
 8009b40:	4b45      	ldr	r3, [pc, #276]	; (8009c58 <atan+0x330>)
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	2200      	movs	r2, #0
 8009b48:	4620      	mov	r0, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7f6 fcf8 	bl	8000540 <__aeabi_dmul>
 8009b50:	4b3e      	ldr	r3, [pc, #248]	; (8009c4c <atan+0x324>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	f7f6 fb3e 	bl	80001d4 <__adddf3>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	4639      	mov	r1, r7
 8009b60:	f7f6 fe18 	bl	8000794 <__aeabi_ddiv>
 8009b64:	f04f 0a02 	mov.w	sl, #2
 8009b68:	4604      	mov	r4, r0
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	e743      	b.n	80099f6 <atan+0xce>
 8009b6e:	462b      	mov	r3, r5
 8009b70:	ee10 2a10 	vmov	r2, s0
 8009b74:	4939      	ldr	r1, [pc, #228]	; (8009c5c <atan+0x334>)
 8009b76:	2000      	movs	r0, #0
 8009b78:	f7f6 fe0c 	bl	8000794 <__aeabi_ddiv>
 8009b7c:	f04f 0a03 	mov.w	sl, #3
 8009b80:	4604      	mov	r4, r0
 8009b82:	460d      	mov	r5, r1
 8009b84:	e737      	b.n	80099f6 <atan+0xce>
 8009b86:	4b36      	ldr	r3, [pc, #216]	; (8009c60 <atan+0x338>)
 8009b88:	4e36      	ldr	r6, [pc, #216]	; (8009c64 <atan+0x33c>)
 8009b8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009b8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009b92:	e9da 2300 	ldrd	r2, r3, [sl]
 8009b96:	f7f6 fb1b 	bl	80001d0 <__aeabi_dsub>
 8009b9a:	4622      	mov	r2, r4
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	f7f6 fb17 	bl	80001d0 <__aeabi_dsub>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009baa:	f7f6 fb11 	bl	80001d0 <__aeabi_dsub>
 8009bae:	f1bb 0f00 	cmp.w	fp, #0
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	460d      	mov	r5, r1
 8009bb6:	f6bf aed6 	bge.w	8009966 <atan+0x3e>
 8009bba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bbe:	461d      	mov	r5, r3
 8009bc0:	e6d1      	b.n	8009966 <atan+0x3e>
 8009bc2:	a51d      	add	r5, pc, #116	; (adr r5, 8009c38 <atan+0x310>)
 8009bc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bc8:	e6cd      	b.n	8009966 <atan+0x3e>
 8009bca:	bf00      	nop
 8009bcc:	f3af 8000 	nop.w
 8009bd0:	54442d18 	.word	0x54442d18
 8009bd4:	bff921fb 	.word	0xbff921fb
 8009bd8:	8800759c 	.word	0x8800759c
 8009bdc:	7e37e43c 	.word	0x7e37e43c
 8009be0:	e322da11 	.word	0xe322da11
 8009be4:	3f90ad3a 	.word	0x3f90ad3a
 8009be8:	24760deb 	.word	0x24760deb
 8009bec:	3fa97b4b 	.word	0x3fa97b4b
 8009bf0:	a0d03d51 	.word	0xa0d03d51
 8009bf4:	3fb10d66 	.word	0x3fb10d66
 8009bf8:	c54c206e 	.word	0xc54c206e
 8009bfc:	3fb745cd 	.word	0x3fb745cd
 8009c00:	920083ff 	.word	0x920083ff
 8009c04:	3fc24924 	.word	0x3fc24924
 8009c08:	5555550d 	.word	0x5555550d
 8009c0c:	3fd55555 	.word	0x3fd55555
 8009c10:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c14:	bfa2b444 	.word	0xbfa2b444
 8009c18:	52defd9a 	.word	0x52defd9a
 8009c1c:	3fadde2d 	.word	0x3fadde2d
 8009c20:	af749a6d 	.word	0xaf749a6d
 8009c24:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c28:	fe231671 	.word	0xfe231671
 8009c2c:	3fbc71c6 	.word	0x3fbc71c6
 8009c30:	9998ebc4 	.word	0x9998ebc4
 8009c34:	3fc99999 	.word	0x3fc99999
 8009c38:	54442d18 	.word	0x54442d18
 8009c3c:	3ff921fb 	.word	0x3ff921fb
 8009c40:	440fffff 	.word	0x440fffff
 8009c44:	7ff00000 	.word	0x7ff00000
 8009c48:	3fdbffff 	.word	0x3fdbffff
 8009c4c:	3ff00000 	.word	0x3ff00000
 8009c50:	3ff2ffff 	.word	0x3ff2ffff
 8009c54:	40038000 	.word	0x40038000
 8009c58:	3ff80000 	.word	0x3ff80000
 8009c5c:	bff00000 	.word	0xbff00000
 8009c60:	0800a4d8 	.word	0x0800a4d8
 8009c64:	0800a4b8 	.word	0x0800a4b8

08009c68 <fabs>:
 8009c68:	ec51 0b10 	vmov	r0, r1, d0
 8009c6c:	ee10 2a10 	vmov	r2, s0
 8009c70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c74:	ec43 2b10 	vmov	d0, r2, r3
 8009c78:	4770      	bx	lr

08009c7a <atan2>:
 8009c7a:	f000 b82d 	b.w	8009cd8 <__ieee754_atan2>

08009c7e <sqrt>:
 8009c7e:	b538      	push	{r3, r4, r5, lr}
 8009c80:	ed2d 8b02 	vpush	{d8}
 8009c84:	ec55 4b10 	vmov	r4, r5, d0
 8009c88:	f000 f8f0 	bl	8009e6c <__ieee754_sqrt>
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	462b      	mov	r3, r5
 8009c90:	4620      	mov	r0, r4
 8009c92:	4629      	mov	r1, r5
 8009c94:	eeb0 8a40 	vmov.f32	s16, s0
 8009c98:	eef0 8a60 	vmov.f32	s17, s1
 8009c9c:	f7f6 feea 	bl	8000a74 <__aeabi_dcmpun>
 8009ca0:	b990      	cbnz	r0, 8009cc8 <sqrt+0x4a>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	4629      	mov	r1, r5
 8009caa:	f7f6 febb 	bl	8000a24 <__aeabi_dcmplt>
 8009cae:	b158      	cbz	r0, 8009cc8 <sqrt+0x4a>
 8009cb0:	f7ff fdfa 	bl	80098a8 <__errno>
 8009cb4:	2321      	movs	r3, #33	; 0x21
 8009cb6:	6003      	str	r3, [r0, #0]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2300      	movs	r3, #0
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	f7f6 fd68 	bl	8000794 <__aeabi_ddiv>
 8009cc4:	ec41 0b18 	vmov	d8, r0, r1
 8009cc8:	eeb0 0a48 	vmov.f32	s0, s16
 8009ccc:	eef0 0a68 	vmov.f32	s1, s17
 8009cd0:	ecbd 8b02 	vpop	{d8}
 8009cd4:	bd38      	pop	{r3, r4, r5, pc}
	...

08009cd8 <__ieee754_atan2>:
 8009cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cdc:	ec57 6b11 	vmov	r6, r7, d1
 8009ce0:	4273      	negs	r3, r6
 8009ce2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009e68 <__ieee754_atan2+0x190>
 8009ce6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009cea:	4333      	orrs	r3, r6
 8009cec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009cf0:	4573      	cmp	r3, lr
 8009cf2:	ec51 0b10 	vmov	r0, r1, d0
 8009cf6:	ee11 8a10 	vmov	r8, s2
 8009cfa:	d80a      	bhi.n	8009d12 <__ieee754_atan2+0x3a>
 8009cfc:	4244      	negs	r4, r0
 8009cfe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d02:	4304      	orrs	r4, r0
 8009d04:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009d08:	4574      	cmp	r4, lr
 8009d0a:	ee10 9a10 	vmov	r9, s0
 8009d0e:	468c      	mov	ip, r1
 8009d10:	d907      	bls.n	8009d22 <__ieee754_atan2+0x4a>
 8009d12:	4632      	mov	r2, r6
 8009d14:	463b      	mov	r3, r7
 8009d16:	f7f6 fa5d 	bl	80001d4 <__adddf3>
 8009d1a:	ec41 0b10 	vmov	d0, r0, r1
 8009d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d22:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009d26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009d2a:	4334      	orrs	r4, r6
 8009d2c:	d103      	bne.n	8009d36 <__ieee754_atan2+0x5e>
 8009d2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d32:	f7ff bdf9 	b.w	8009928 <atan>
 8009d36:	17bc      	asrs	r4, r7, #30
 8009d38:	f004 0402 	and.w	r4, r4, #2
 8009d3c:	ea53 0909 	orrs.w	r9, r3, r9
 8009d40:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009d44:	d107      	bne.n	8009d56 <__ieee754_atan2+0x7e>
 8009d46:	2c02      	cmp	r4, #2
 8009d48:	d060      	beq.n	8009e0c <__ieee754_atan2+0x134>
 8009d4a:	2c03      	cmp	r4, #3
 8009d4c:	d1e5      	bne.n	8009d1a <__ieee754_atan2+0x42>
 8009d4e:	a142      	add	r1, pc, #264	; (adr r1, 8009e58 <__ieee754_atan2+0x180>)
 8009d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d54:	e7e1      	b.n	8009d1a <__ieee754_atan2+0x42>
 8009d56:	ea52 0808 	orrs.w	r8, r2, r8
 8009d5a:	d106      	bne.n	8009d6a <__ieee754_atan2+0x92>
 8009d5c:	f1bc 0f00 	cmp.w	ip, #0
 8009d60:	da5f      	bge.n	8009e22 <__ieee754_atan2+0x14a>
 8009d62:	a13f      	add	r1, pc, #252	; (adr r1, 8009e60 <__ieee754_atan2+0x188>)
 8009d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d68:	e7d7      	b.n	8009d1a <__ieee754_atan2+0x42>
 8009d6a:	4572      	cmp	r2, lr
 8009d6c:	d10f      	bne.n	8009d8e <__ieee754_atan2+0xb6>
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d74:	d107      	bne.n	8009d86 <__ieee754_atan2+0xae>
 8009d76:	2c02      	cmp	r4, #2
 8009d78:	d84c      	bhi.n	8009e14 <__ieee754_atan2+0x13c>
 8009d7a:	4b35      	ldr	r3, [pc, #212]	; (8009e50 <__ieee754_atan2+0x178>)
 8009d7c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009d80:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009d84:	e7c9      	b.n	8009d1a <__ieee754_atan2+0x42>
 8009d86:	2c02      	cmp	r4, #2
 8009d88:	d848      	bhi.n	8009e1c <__ieee754_atan2+0x144>
 8009d8a:	4b32      	ldr	r3, [pc, #200]	; (8009e54 <__ieee754_atan2+0x17c>)
 8009d8c:	e7f6      	b.n	8009d7c <__ieee754_atan2+0xa4>
 8009d8e:	4573      	cmp	r3, lr
 8009d90:	d0e4      	beq.n	8009d5c <__ieee754_atan2+0x84>
 8009d92:	1a9b      	subs	r3, r3, r2
 8009d94:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009d98:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d9c:	da1e      	bge.n	8009ddc <__ieee754_atan2+0x104>
 8009d9e:	2f00      	cmp	r7, #0
 8009da0:	da01      	bge.n	8009da6 <__ieee754_atan2+0xce>
 8009da2:	323c      	adds	r2, #60	; 0x3c
 8009da4:	db1e      	blt.n	8009de4 <__ieee754_atan2+0x10c>
 8009da6:	4632      	mov	r2, r6
 8009da8:	463b      	mov	r3, r7
 8009daa:	f7f6 fcf3 	bl	8000794 <__aeabi_ddiv>
 8009dae:	ec41 0b10 	vmov	d0, r0, r1
 8009db2:	f7ff ff59 	bl	8009c68 <fabs>
 8009db6:	f7ff fdb7 	bl	8009928 <atan>
 8009dba:	ec51 0b10 	vmov	r0, r1, d0
 8009dbe:	2c01      	cmp	r4, #1
 8009dc0:	d013      	beq.n	8009dea <__ieee754_atan2+0x112>
 8009dc2:	2c02      	cmp	r4, #2
 8009dc4:	d015      	beq.n	8009df2 <__ieee754_atan2+0x11a>
 8009dc6:	2c00      	cmp	r4, #0
 8009dc8:	d0a7      	beq.n	8009d1a <__ieee754_atan2+0x42>
 8009dca:	a319      	add	r3, pc, #100	; (adr r3, 8009e30 <__ieee754_atan2+0x158>)
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	f7f6 f9fe 	bl	80001d0 <__aeabi_dsub>
 8009dd4:	a318      	add	r3, pc, #96	; (adr r3, 8009e38 <__ieee754_atan2+0x160>)
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	e014      	b.n	8009e06 <__ieee754_atan2+0x12e>
 8009ddc:	a118      	add	r1, pc, #96	; (adr r1, 8009e40 <__ieee754_atan2+0x168>)
 8009dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de2:	e7ec      	b.n	8009dbe <__ieee754_atan2+0xe6>
 8009de4:	2000      	movs	r0, #0
 8009de6:	2100      	movs	r1, #0
 8009de8:	e7e9      	b.n	8009dbe <__ieee754_atan2+0xe6>
 8009dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dee:	4619      	mov	r1, r3
 8009df0:	e793      	b.n	8009d1a <__ieee754_atan2+0x42>
 8009df2:	a30f      	add	r3, pc, #60	; (adr r3, 8009e30 <__ieee754_atan2+0x158>)
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	f7f6 f9ea 	bl	80001d0 <__aeabi_dsub>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	a10d      	add	r1, pc, #52	; (adr r1, 8009e38 <__ieee754_atan2+0x160>)
 8009e02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e06:	f7f6 f9e3 	bl	80001d0 <__aeabi_dsub>
 8009e0a:	e786      	b.n	8009d1a <__ieee754_atan2+0x42>
 8009e0c:	a10a      	add	r1, pc, #40	; (adr r1, 8009e38 <__ieee754_atan2+0x160>)
 8009e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e12:	e782      	b.n	8009d1a <__ieee754_atan2+0x42>
 8009e14:	a10c      	add	r1, pc, #48	; (adr r1, 8009e48 <__ieee754_atan2+0x170>)
 8009e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e1a:	e77e      	b.n	8009d1a <__ieee754_atan2+0x42>
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	2100      	movs	r1, #0
 8009e20:	e77b      	b.n	8009d1a <__ieee754_atan2+0x42>
 8009e22:	a107      	add	r1, pc, #28	; (adr r1, 8009e40 <__ieee754_atan2+0x168>)
 8009e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e28:	e777      	b.n	8009d1a <__ieee754_atan2+0x42>
 8009e2a:	bf00      	nop
 8009e2c:	f3af 8000 	nop.w
 8009e30:	33145c07 	.word	0x33145c07
 8009e34:	3ca1a626 	.word	0x3ca1a626
 8009e38:	54442d18 	.word	0x54442d18
 8009e3c:	400921fb 	.word	0x400921fb
 8009e40:	54442d18 	.word	0x54442d18
 8009e44:	3ff921fb 	.word	0x3ff921fb
 8009e48:	54442d18 	.word	0x54442d18
 8009e4c:	3fe921fb 	.word	0x3fe921fb
 8009e50:	0800a4f8 	.word	0x0800a4f8
 8009e54:	0800a510 	.word	0x0800a510
 8009e58:	54442d18 	.word	0x54442d18
 8009e5c:	c00921fb 	.word	0xc00921fb
 8009e60:	54442d18 	.word	0x54442d18
 8009e64:	bff921fb 	.word	0xbff921fb
 8009e68:	7ff00000 	.word	0x7ff00000

08009e6c <__ieee754_sqrt>:
 8009e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e70:	ec55 4b10 	vmov	r4, r5, d0
 8009e74:	4e55      	ldr	r6, [pc, #340]	; (8009fcc <__ieee754_sqrt+0x160>)
 8009e76:	43ae      	bics	r6, r5
 8009e78:	ee10 0a10 	vmov	r0, s0
 8009e7c:	ee10 3a10 	vmov	r3, s0
 8009e80:	462a      	mov	r2, r5
 8009e82:	4629      	mov	r1, r5
 8009e84:	d110      	bne.n	8009ea8 <__ieee754_sqrt+0x3c>
 8009e86:	ee10 2a10 	vmov	r2, s0
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	f7f6 fb58 	bl	8000540 <__aeabi_dmul>
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4620      	mov	r0, r4
 8009e96:	4629      	mov	r1, r5
 8009e98:	f7f6 f99c 	bl	80001d4 <__adddf3>
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	460d      	mov	r5, r1
 8009ea0:	ec45 4b10 	vmov	d0, r4, r5
 8009ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea8:	2d00      	cmp	r5, #0
 8009eaa:	dc10      	bgt.n	8009ece <__ieee754_sqrt+0x62>
 8009eac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009eb0:	4330      	orrs	r0, r6
 8009eb2:	d0f5      	beq.n	8009ea0 <__ieee754_sqrt+0x34>
 8009eb4:	b15d      	cbz	r5, 8009ece <__ieee754_sqrt+0x62>
 8009eb6:	ee10 2a10 	vmov	r2, s0
 8009eba:	462b      	mov	r3, r5
 8009ebc:	ee10 0a10 	vmov	r0, s0
 8009ec0:	f7f6 f986 	bl	80001d0 <__aeabi_dsub>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	f7f6 fc64 	bl	8000794 <__aeabi_ddiv>
 8009ecc:	e7e6      	b.n	8009e9c <__ieee754_sqrt+0x30>
 8009ece:	1512      	asrs	r2, r2, #20
 8009ed0:	d074      	beq.n	8009fbc <__ieee754_sqrt+0x150>
 8009ed2:	07d4      	lsls	r4, r2, #31
 8009ed4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009ed8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009edc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009ee0:	bf5e      	ittt	pl
 8009ee2:	0fda      	lsrpl	r2, r3, #31
 8009ee4:	005b      	lslpl	r3, r3, #1
 8009ee6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009eea:	2400      	movs	r4, #0
 8009eec:	0fda      	lsrs	r2, r3, #31
 8009eee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009ef2:	107f      	asrs	r7, r7, #1
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	2516      	movs	r5, #22
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009efe:	1886      	adds	r6, r0, r2
 8009f00:	428e      	cmp	r6, r1
 8009f02:	bfde      	ittt	le
 8009f04:	1b89      	suble	r1, r1, r6
 8009f06:	18b0      	addle	r0, r6, r2
 8009f08:	18a4      	addle	r4, r4, r2
 8009f0a:	0049      	lsls	r1, r1, #1
 8009f0c:	3d01      	subs	r5, #1
 8009f0e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009f12:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009f16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f1a:	d1f0      	bne.n	8009efe <__ieee754_sqrt+0x92>
 8009f1c:	462a      	mov	r2, r5
 8009f1e:	f04f 0e20 	mov.w	lr, #32
 8009f22:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009f26:	4281      	cmp	r1, r0
 8009f28:	eb06 0c05 	add.w	ip, r6, r5
 8009f2c:	dc02      	bgt.n	8009f34 <__ieee754_sqrt+0xc8>
 8009f2e:	d113      	bne.n	8009f58 <__ieee754_sqrt+0xec>
 8009f30:	459c      	cmp	ip, r3
 8009f32:	d811      	bhi.n	8009f58 <__ieee754_sqrt+0xec>
 8009f34:	f1bc 0f00 	cmp.w	ip, #0
 8009f38:	eb0c 0506 	add.w	r5, ip, r6
 8009f3c:	da43      	bge.n	8009fc6 <__ieee754_sqrt+0x15a>
 8009f3e:	2d00      	cmp	r5, #0
 8009f40:	db41      	blt.n	8009fc6 <__ieee754_sqrt+0x15a>
 8009f42:	f100 0801 	add.w	r8, r0, #1
 8009f46:	1a09      	subs	r1, r1, r0
 8009f48:	459c      	cmp	ip, r3
 8009f4a:	bf88      	it	hi
 8009f4c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009f50:	eba3 030c 	sub.w	r3, r3, ip
 8009f54:	4432      	add	r2, r6
 8009f56:	4640      	mov	r0, r8
 8009f58:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009f5c:	f1be 0e01 	subs.w	lr, lr, #1
 8009f60:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009f64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009f6c:	d1db      	bne.n	8009f26 <__ieee754_sqrt+0xba>
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	d006      	beq.n	8009f80 <__ieee754_sqrt+0x114>
 8009f72:	1c50      	adds	r0, r2, #1
 8009f74:	bf13      	iteet	ne
 8009f76:	3201      	addne	r2, #1
 8009f78:	3401      	addeq	r4, #1
 8009f7a:	4672      	moveq	r2, lr
 8009f7c:	f022 0201 	bicne.w	r2, r2, #1
 8009f80:	1063      	asrs	r3, r4, #1
 8009f82:	0852      	lsrs	r2, r2, #1
 8009f84:	07e1      	lsls	r1, r4, #31
 8009f86:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009f8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009f8e:	bf48      	it	mi
 8009f90:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009f94:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009f98:	4614      	mov	r4, r2
 8009f9a:	e781      	b.n	8009ea0 <__ieee754_sqrt+0x34>
 8009f9c:	0ad9      	lsrs	r1, r3, #11
 8009f9e:	3815      	subs	r0, #21
 8009fa0:	055b      	lsls	r3, r3, #21
 8009fa2:	2900      	cmp	r1, #0
 8009fa4:	d0fa      	beq.n	8009f9c <__ieee754_sqrt+0x130>
 8009fa6:	02cd      	lsls	r5, r1, #11
 8009fa8:	d50a      	bpl.n	8009fc0 <__ieee754_sqrt+0x154>
 8009faa:	f1c2 0420 	rsb	r4, r2, #32
 8009fae:	fa23 f404 	lsr.w	r4, r3, r4
 8009fb2:	1e55      	subs	r5, r2, #1
 8009fb4:	4093      	lsls	r3, r2
 8009fb6:	4321      	orrs	r1, r4
 8009fb8:	1b42      	subs	r2, r0, r5
 8009fba:	e78a      	b.n	8009ed2 <__ieee754_sqrt+0x66>
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	e7f0      	b.n	8009fa2 <__ieee754_sqrt+0x136>
 8009fc0:	0049      	lsls	r1, r1, #1
 8009fc2:	3201      	adds	r2, #1
 8009fc4:	e7ef      	b.n	8009fa6 <__ieee754_sqrt+0x13a>
 8009fc6:	4680      	mov	r8, r0
 8009fc8:	e7bd      	b.n	8009f46 <__ieee754_sqrt+0xda>
 8009fca:	bf00      	nop
 8009fcc:	7ff00000 	.word	0x7ff00000

08009fd0 <_init>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr

08009fdc <_fini>:
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fde:	bf00      	nop
 8009fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe2:	bc08      	pop	{r3}
 8009fe4:	469e      	mov	lr, r3
 8009fe6:	4770      	bx	lr
