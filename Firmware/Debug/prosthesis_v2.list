
prosthesis_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ed0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001058  08001058  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001058  08001058  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001058  08001058  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001058  08001058  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001058  08001058  00011058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800105c  0800105c  0001105c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001064  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001064  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004177  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ce9  00000000  00000000  000241ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  00024e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  000252d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e6c9  00000000  00000000  00025688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000039dc  00000000  00000000  00043d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab43b  00000000  00000000  0004772d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2b68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f94  00000000  00000000  000f2bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001040 	.word	0x08001040

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001040 	.word	0x08001040

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	463b      	mov	r3, r7
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800022a:	2004      	movs	r0, #4
 800022c:	f7ff ffcc 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000230:	2080      	movs	r0, #128	; 0x80
 8000232:	f7ff ffc9 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000236:	2001      	movs	r0, #1
 8000238:	f7ff ffc6 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(OSCOPE_GPIO_Port, OSCOPE_Pin);
 800023c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000240:	480b      	ldr	r0, [pc, #44]	; (8000270 <MX_GPIO_Init+0x5c>)
 8000242:	f7ff ffd9 	bl	80001f8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin;
 8000246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800024a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800024c:	2301      	movs	r3, #1
 800024e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000250:	2300      	movs	r3, #0
 8000252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000258:	2300      	movs	r3, #0
 800025a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OSCOPE_GPIO_Port, &GPIO_InitStruct);
 800025c:	463b      	mov	r3, r7
 800025e:	4619      	mov	r1, r3
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <MX_GPIO_Init+0x5c>)
 8000262:	f000 fe23 	bl	8000eac <LL_GPIO_Init>

}
 8000266:	bf00      	nop
 8000268:	3718      	adds	r7, #24
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	48000800 	.word	0x48000800

08000274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <__NVIC_GetPriorityGrouping+0x18>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	0a1b      	lsrs	r3, r3, #8
 800027e:	f003 0307 	and.w	r3, r3, #7
}
 8000282:	4618      	mov	r0, r3
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	; (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	db0a      	blt.n	80002f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	490c      	ldr	r1, [pc, #48]	; (8000318 <__NVIC_SetPriority+0x4c>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	0112      	lsls	r2, r2, #4
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	440b      	add	r3, r1
 80002f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f4:	e00a      	b.n	800030c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4908      	ldr	r1, [pc, #32]	; (800031c <__NVIC_SetPriority+0x50>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3b04      	subs	r3, #4
 8000304:	0112      	lsls	r2, r2, #4
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	440b      	add	r3, r1
 800030a:	761a      	strb	r2, [r3, #24]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000320:	b480      	push	{r7}
 8000322:	b089      	sub	sp, #36	; 0x24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000334:	69fb      	ldr	r3, [r7, #28]
 8000336:	f1c3 0307 	rsb	r3, r3, #7
 800033a:	2b04      	cmp	r3, #4
 800033c:	bf28      	it	cs
 800033e:	2304      	movcs	r3, #4
 8000340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000342:	69fb      	ldr	r3, [r7, #28]
 8000344:	3304      	adds	r3, #4
 8000346:	2b06      	cmp	r3, #6
 8000348:	d902      	bls.n	8000350 <NVIC_EncodePriority+0x30>
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	3b03      	subs	r3, #3
 800034e:	e000      	b.n	8000352 <NVIC_EncodePriority+0x32>
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000354:	f04f 32ff 	mov.w	r2, #4294967295
 8000358:	69bb      	ldr	r3, [r7, #24]
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	43da      	mvns	r2, r3
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	401a      	ands	r2, r3
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000368:	f04f 31ff 	mov.w	r1, #4294967295
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	fa01 f303 	lsl.w	r3, r1, r3
 8000372:	43d9      	mvns	r1, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	4313      	orrs	r3, r2
         );
}
 800037a:	4618      	mov	r0, r3
 800037c:	3724      	adds	r7, #36	; 0x24
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr

08000386 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
 800038e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	431a      	orrs	r2, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	60da      	str	r2, [r3, #12]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	431a      	orrs	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	60da      	str	r2, [r3, #12]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	431a      	orrs	r2, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	60da      	str	r2, [r3, #12]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	431a      	orrs	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	60da      	str	r2, [r3, #12]
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr

0800041e <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6a1b      	ldr	r3, [r3, #32]
 800042c:	f023 0203 	bic.w	r2, r3, #3
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	431a      	orrs	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	621a      	str	r2, [r3, #32]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	60da      	str	r2, [r3, #12]
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	f023 0201 	bic.w	r2, r3, #1
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	431a      	orrs	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	60da      	str	r2, [r3, #12]
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
	...

0800048c <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <LL_RCC_SetLPTIMClockSource+0x30>)
 8000496:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	0c1b      	lsrs	r3, r3, #16
 800049e:	041b      	lsls	r3, r3, #16
 80004a0:	43db      	mvns	r3, r3
 80004a2:	401a      	ands	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	041b      	lsls	r3, r3, #16
 80004a8:	4904      	ldr	r1, [pc, #16]	; (80004bc <LL_RCC_SetLPTIMClockSource+0x30>)
 80004aa:	4313      	orrs	r3, r2
 80004ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000

080004c0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <LL_APB1_GRP2_EnableClock+0x2c>)
 80004ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80004cc:	4907      	ldr	r1, [pc, #28]	; (80004ec <LL_APB1_GRP2_EnableClock+0x2c>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <LL_APB1_GRP2_EnableClock+0x2c>)
 80004d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000

080004f0 <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSI);
 80004f4:	4819      	ldr	r0, [pc, #100]	; (800055c <MX_LPTIM2_Init+0x6c>)
 80004f6:	f7ff ffc9 	bl	800048c <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 80004fa:	2020      	movs	r0, #32
 80004fc:	f7ff ffe0 	bl	80004c0 <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000500:	f7ff feb8 	bl	8000274 <__NVIC_GetPriorityGrouping>
 8000504:	4603      	mov	r3, r0
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff08 	bl	8000320 <NVIC_EncodePriority>
 8000510:	4603      	mov	r3, r0
 8000512:	4619      	mov	r1, r3
 8000514:	2042      	movs	r0, #66	; 0x42
 8000516:	f7ff fed9 	bl	80002cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 800051a:	2042      	movs	r0, #66	; 0x42
 800051c:	f7ff feb8 	bl	8000290 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8000520:	2100      	movs	r1, #0
 8000522:	480f      	ldr	r0, [pc, #60]	; (8000560 <MX_LPTIM2_Init+0x70>)
 8000524:	f7ff ff9e 	bl	8000464 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8000528:	2100      	movs	r1, #0
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <MX_LPTIM2_Init+0x70>)
 800052c:	f7ff ff64 	bl	80003f8 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8000530:	2100      	movs	r1, #0
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <MX_LPTIM2_Init+0x70>)
 8000534:	f7ff ff4d 	bl	80003d2 <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8000538:	2100      	movs	r1, #0
 800053a:	4809      	ldr	r0, [pc, #36]	; (8000560 <MX_LPTIM2_Init+0x70>)
 800053c:	f7ff ff23 	bl	8000386 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8000540:	2100      	movs	r1, #0
 8000542:	4807      	ldr	r0, [pc, #28]	; (8000560 <MX_LPTIM2_Init+0x70>)
 8000544:	f7ff ff32 	bl	80003ac <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_LPTIM2_Init+0x70>)
 800054a:	f7ff ff7b 	bl	8000444 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 800054e:	2100      	movs	r1, #0
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <MX_LPTIM2_Init+0x70>)
 8000552:	f7ff ff64 	bl	800041e <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	00300010 	.word	0x00300010
 8000560:	40009400 	.word	0x40009400

08000564 <__NVIC_SetPriorityGrouping>:
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <__NVIC_GetPriorityGrouping>:
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_SetPriority>:
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	; (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EncodePriority>:
{
 800061c:	b480      	push	{r7}
 800061e:	b089      	sub	sp, #36	; 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f1c3 0307 	rsb	r3, r3, #7
 8000636:	2b04      	cmp	r3, #4
 8000638:	bf28      	it	cs
 800063a:	2304      	movcs	r3, #4
 800063c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3304      	adds	r3, #4
 8000642:	2b06      	cmp	r3, #6
 8000644:	d902      	bls.n	800064c <NVIC_EncodePriority+0x30>
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3b03      	subs	r3, #3
 800064a:	e000      	b.n	800064e <NVIC_EncodePriority+0x32>
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f04f 32ff 	mov.w	r2, #4294967295
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43da      	mvns	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000664:	f04f 31ff 	mov.w	r1, #4294967295
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43d9      	mvns	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	4313      	orrs	r3, r2
}
 8000676:	4618      	mov	r0, r3
 8000678:	3724      	adds	r7, #36	; 0x24
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <LL_LPTIM_Enable>:
{
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	691b      	ldr	r3, [r3, #16]
 800068e:	f043 0201 	orr.w	r2, r3, #1
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	611a      	str	r2, [r3, #16]
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <LL_LPTIM_StartCounter>:
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	f023 0206 	bic.w	r2, r3, #6
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	431a      	orrs	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	611a      	str	r2, [r3, #16]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <LL_LPTIM_SetAutoReload>:
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	0c1b      	lsrs	r3, r3, #16
 80006d8:	041b      	lsls	r3, r3, #16
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	431a      	orrs	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	619a      	str	r2, [r3, #24]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	f043 0202 	orr.w	r2, r3, #2
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	609a      	str	r2, [r3, #8]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <LL_RCC_LSI_Enable>:
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <LL_RCC_LSI_Enable+0x20>)
 8000716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <LL_RCC_LSI_Enable+0x20>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <LL_RCC_LSI_IsReady>:
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <LL_RCC_LSI_IsReady+0x24>)
 800073a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	2b02      	cmp	r3, #2
 8000744:	d101      	bne.n	800074a <LL_RCC_LSI_IsReady+0x16>
 8000746:	2301      	movs	r3, #1
 8000748:	e000      	b.n	800074c <LL_RCC_LSI_IsReady+0x18>
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <LL_RCC_MSI_Enable>:
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <LL_RCC_MSI_Enable+0x1c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <LL_RCC_MSI_Enable+0x1c>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <LL_RCC_MSI_IsReady>:
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <LL_RCC_MSI_IsReady+0x20>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	2b02      	cmp	r3, #2
 800078a:	d101      	bne.n	8000790 <LL_RCC_MSI_IsReady+0x14>
 800078c:	2301      	movs	r3, #1
 800078e:	e000      	b.n	8000792 <LL_RCC_MSI_IsReady+0x16>
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40021000 	.word	0x40021000

080007a0 <LL_RCC_MSI_EnableRangeSelection>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <LL_RCC_MSI_SetRange>:
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <LL_RCC_MSI_SetRange+0x24>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80007d0:	4904      	ldr	r1, [pc, #16]	; (80007e4 <LL_RCC_MSI_SetRange+0x24>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	600b      	str	r3, [r1, #0]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40021000 	.word	0x40021000

080007e8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	4904      	ldr	r1, [pc, #16]	; (8000810 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80007fe:	4313      	orrs	r3, r2
 8000800:	604b      	str	r3, [r1, #4]
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <LL_RCC_SetSysClkSource>:
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <LL_RCC_SetSysClkSource+0x24>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	f023 0203 	bic.w	r2, r3, #3
 8000824:	4904      	ldr	r1, [pc, #16]	; (8000838 <LL_RCC_SetSysClkSource+0x24>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4313      	orrs	r3, r2
 800082a:	608b      	str	r3, [r1, #8]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	40021000 	.word	0x40021000

0800083c <LL_RCC_GetSysClkSource>:
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <LL_RCC_GetSysClkSource+0x18>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f003 030c 	and.w	r3, r3, #12
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <LL_RCC_SetAHBPrescaler>:
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <LL_RCC_SetAHBPrescaler+0x24>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000868:	4904      	ldr	r1, [pc, #16]	; (800087c <LL_RCC_SetAHBPrescaler+0x24>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4313      	orrs	r3, r2
 800086e:	608b      	str	r3, [r1, #8]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	40021000 	.word	0x40021000

08000880 <LL_RCC_SetAPB1Prescaler>:
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000890:	4904      	ldr	r1, [pc, #16]	; (80008a4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	608b      	str	r3, [r1, #8]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	40021000 	.word	0x40021000

080008a8 <LL_RCC_SetAPB2Prescaler>:
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80008b8:	4904      	ldr	r1, [pc, #16]	; (80008cc <LL_RCC_SetAPB2Prescaler+0x24>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4313      	orrs	r3, r2
 80008be:	608b      	str	r3, [r1, #8]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	40021000 	.word	0x40021000

080008d0 <LL_APB1_GRP1_EnableClock>:
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80008da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008dc:	4907      	ldr	r1, [pc, #28]	; (80008fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80008e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4013      	ands	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000

08000900 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <LL_APB2_GRP1_EnableClock+0x2c>)
 800090a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800090c:	4907      	ldr	r1, [pc, #28]	; (800092c <LL_APB2_GRP1_EnableClock+0x2c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4313      	orrs	r3, r2
 8000912:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000916:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4013      	ands	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000

08000930 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <LL_FLASH_SetLatency+0x24>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f023 0207 	bic.w	r2, r3, #7
 8000940:	4904      	ldr	r1, [pc, #16]	; (8000954 <LL_FLASH_SetLatency+0x24>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4313      	orrs	r3, r2
 8000946:	600b      	str	r3, [r1, #0]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40022000 	.word	0x40022000

08000958 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <LL_FLASH_GetLatency+0x18>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f003 0307 	and.w	r3, r3, #7
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000984:	4904      	ldr	r1, [pc, #16]	; (8000998 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4313      	orrs	r3, r2
 800098a:	600b      	str	r3, [r1, #0]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40007000 	.word	0x40007000

0800099c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	4013      	ands	r3, r2
 80009b2:	041a      	lsls	r2, r3, #16
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	43d9      	mvns	r1, r3
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	400b      	ands	r3, r1
 80009bc:	431a      	orrs	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	619a      	str	r2, [r3, #24]
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ff93 	bl	8000900 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009de:	f7ff ff77 	bl	80008d0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e2:	2003      	movs	r0, #3
 80009e4:	f7ff fdbe 	bl	8000564 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80009e8:	f7ff fde0 	bl	80005ac <__NVIC_GetPriorityGrouping>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2200      	movs	r2, #0
 80009f0:	210f      	movs	r1, #15
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe12 	bl	800061c <NVIC_EncodePriority>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f7ff fde2 	bl	80005c8 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a04:	f000 f826 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a08:	f7ff fc04 	bl	8000214 <MX_GPIO_Init>
  MX_LPTIM2_Init();
 8000a0c:	f7ff fd70 	bl	80004f0 <MX_LPTIM2_Init>
* USER ADDED INITIALIZATIONS
*******************************************************************************/

//	LL_SYSTICK_EnableIT(); do i actually need this?

	LL_LPTIM_Enable(LPTIM2);
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <main+0x78>)
 8000a12:	f7ff fe36 	bl	8000682 <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <main+0x78>)
 8000a18:	f7ff fe69 	bl	80006ee <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 8000a1c:	213f      	movs	r1, #63	; 0x3f
 8000a1e:	480a      	ldr	r0, [pc, #40]	; (8000a48 <main+0x78>)
 8000a20:	f7ff fe52 	bl	80006c8 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 8000a24:	2104      	movs	r1, #4
 8000a26:	4808      	ldr	r0, [pc, #32]	; (8000a48 <main+0x78>)
 8000a28:	f7ff fe3b 	bl	80006a2 <LL_LPTIM_StartCounter>
* USER ADDED MAIN LOOP
*******************************************************************************/

  while (1)
  {
	  if(isProsthesisControlRequired)
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <main+0x7c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0fb      	beq.n	8000a2c <main+0x5c>
	  {
		  LL_GPIO_TogglePin(OSCOPE_GPIO_Port, OSCOPE_Pin);
 8000a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <main+0x80>)
 8000a3a:	f7ff ffaf 	bl	800099c <LL_GPIO_TogglePin>
		  isProsthesisControlRequired = 0;
 8000a3e:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <main+0x7c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 8000a44:	e7f2      	b.n	8000a2c <main+0x5c>
 8000a46:	bf00      	nop
 8000a48:	40009400 	.word	0x40009400
 8000a4c:	20000020 	.word	0x20000020
 8000a50:	48000800 	.word	0x48000800

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff ff69 	bl	8000930 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000a5e:	bf00      	nop
 8000a60:	f7ff ff7a 	bl	8000958 <LL_FLASH_GetLatency>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1fa      	bne.n	8000a60 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a6e:	f7ff ff81 	bl	8000974 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_LSI_Enable();
 8000a72:	f7ff fe4d 	bl	8000710 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8000a76:	bf00      	nop
 8000a78:	f7ff fe5c 	bl	8000734 <LL_RCC_LSI_IsReady>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d1fa      	bne.n	8000a78 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_MSI_Enable();
 8000a82:	f7ff fe6b 	bl	800075c <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000a86:	bf00      	nop
 8000a88:	f7ff fe78 	bl	800077c <LL_RCC_MSI_IsReady>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d1fa      	bne.n	8000a88 <SystemClock_Config+0x34>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8000a92:	f7ff fe85 	bl	80007a0 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000a96:	2060      	movs	r0, #96	; 0x60
 8000a98:	f7ff fe92 	bl	80007c0 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fea3 	bl	80007e8 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff feb6 	bl	8000814 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8000aa8:	bf00      	nop
 8000aaa:	f7ff fec7 	bl	800083c <LL_RCC_GetSysClkSource>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1fa      	bne.n	8000aaa <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fecf 	bl	8000858 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff fee0 	bl	8000880 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fef1 	bl	80008a8 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <SystemClock_Config+0x84>)
 8000ac8:	f000 fa78 	bl	8000fbc <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <SystemClock_Config+0x84>)
 8000ace:	f000 fa83 	bl	8000fd8 <LL_SetSystemCoreClock>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	003d0900 	.word	0x003d0900

08000adc <LL_LPTIM_ClearFLAG_ARRM>:
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f043 0202 	orr.w	r2, r3, #2
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	605a      	str	r2, [r3, #4]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d101      	bne.n	8000b14 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <NMI_Handler+0x4>

08000b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <HardFault_Handler+0x4>

08000b2e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <UsageFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

/******************************************************************************
* USER ADDED LPTIM2_IRQHANDLER
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <LPTIM2_IRQHandler+0x20>)
 8000b7e:	f7ff ffbd 	bl	8000afc <LL_LPTIM_IsActiveFlag_ARRM>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d105      	bne.n	8000b94 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <LPTIM2_IRQHandler+0x24>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 8000b8e:	4802      	ldr	r0, [pc, #8]	; (8000b98 <LPTIM2_IRQHandler+0x20>)
 8000b90:	f7ff ffa4 	bl	8000adc <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40009400 	.word	0x40009400
 8000b9c:	20000020 	.word	0x20000020

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc8:	f7ff ffea 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	; (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f000 fa01 	bl	8000ff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff feeb 	bl	80009d0 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bfc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000c08:	08001060 	.word	0x08001060
  ldr r2, =_sbss
 8000c0c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000c10:	20000024 	.word	0x20000024

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>

08000c16 <LL_GPIO_SetPinMode>:
{
 8000c16:	b480      	push	{r7}
 8000c18:	b08b      	sub	sp, #44	; 0x2c
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	fa93 f3a3 	rbit	r3, r3
 8000c30:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	e003      	b.n	8000c48 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fab3 f383 	clz	r3, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	401a      	ands	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c58:	6a3b      	ldr	r3, [r7, #32]
 8000c5a:	fa93 f3a3 	rbit	r3, r3
 8000c5e:	61fb      	str	r3, [r7, #28]
  return result;
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000c6a:	2320      	movs	r3, #32
 8000c6c:	e003      	b.n	8000c76 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	fab3 f383 	clz	r3, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	bf00      	nop
 8000c86:	372c      	adds	r7, #44	; 0x2c
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_GPIO_SetPinOutputType>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	fb01 f303 	mul.w	r3, r1, r3
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	605a      	str	r2, [r3, #4]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_GPIO_SetPinSpeed>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa93 f3a3 	rbit	r3, r3
 8000cda:	613b      	str	r3, [r7, #16]
  return result;
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	e003      	b.n	8000cf2 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	fab3 f383 	clz	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	fa93 f3a3 	rbit	r3, r3
 8000d08:	61fb      	str	r3, [r7, #28]
  return result;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000d14:	2320      	movs	r3, #32
 8000d16:	e003      	b.n	8000d20 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	fab3 f383 	clz	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	609a      	str	r2, [r3, #8]
}
 8000d2e:	bf00      	nop
 8000d30:	372c      	adds	r7, #44	; 0x2c
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <LL_GPIO_SetPinPull>:
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b08b      	sub	sp, #44	; 0x2c
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa93 f3a3 	rbit	r3, r3
 8000d54:	613b      	str	r3, [r7, #16]
  return result;
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000d60:	2320      	movs	r3, #32
 8000d62:	e003      	b.n	8000d6c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fab3 f383 	clz	r3, r3
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2103      	movs	r1, #3
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	401a      	ands	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	fa93 f3a3 	rbit	r3, r3
 8000d82:	61fb      	str	r3, [r7, #28]
  return result;
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000d8e:	2320      	movs	r3, #32
 8000d90:	e003      	b.n	8000d9a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	431a      	orrs	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	60da      	str	r2, [r3, #12]
}
 8000da8:	bf00      	nop
 8000daa:	372c      	adds	r7, #44	; 0x2c
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <LL_GPIO_SetAFPin_0_7>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b08b      	sub	sp, #44	; 0x2c
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6a1a      	ldr	r2, [r3, #32]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa93 f3a3 	rbit	r3, r3
 8000dce:	613b      	str	r3, [r7, #16]
  return result;
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000dda:	2320      	movs	r3, #32
 8000ddc:	e003      	b.n	8000de6 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	210f      	movs	r1, #15
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	401a      	ands	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	61fb      	str	r3, [r7, #28]
  return result;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000e08:	2320      	movs	r3, #32
 8000e0a:	e003      	b.n	8000e14 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	fab3 f383 	clz	r3, r3
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	621a      	str	r2, [r3, #32]
}
 8000e22:	bf00      	nop
 8000e24:	372c      	adds	r7, #44	; 0x2c
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LL_GPIO_SetAFPin_8_15>:
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b08b      	sub	sp, #44	; 0x2c
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa93 f3a3 	rbit	r3, r3
 8000e4a:	613b      	str	r3, [r7, #16]
  return result;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000e56:	2320      	movs	r3, #32
 8000e58:	e003      	b.n	8000e62 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	fab3 f383 	clz	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	210f      	movs	r1, #15
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e74:	6a3b      	ldr	r3, [r7, #32]
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	61fb      	str	r3, [r7, #28]
  return result;
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000e86:	2320      	movs	r3, #32
 8000e88:	e003      	b.n	8000e92 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	fab3 f383 	clz	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ea0:	bf00      	nop
 8000ea2:	372c      	adds	r7, #44	; 0x2c
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	fa93 f3a3 	rbit	r3, r3
 8000ec2:	60fb      	str	r3, [r7, #12]
  return result;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <LL_GPIO_Init+0x26>
    return 32U;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	e003      	b.n	8000eda <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000edc:	e048      	b.n	8000f70 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d03a      	beq.n	8000f6a <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d003      	beq.n	8000f04 <LL_GPIO_Init+0x58>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d10e      	bne.n	8000f22 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	69b9      	ldr	r1, [r7, #24]
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff fed7 	bl	8000cc0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6819      	ldr	r1, [r3, #0]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff feb7 	bl	8000c90 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	461a      	mov	r2, r3
 8000f28:	69b9      	ldr	r1, [r7, #24]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff05 	bl	8000d3a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d111      	bne.n	8000f5c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	2bff      	cmp	r3, #255	; 0xff
 8000f3c:	d807      	bhi.n	8000f4e <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	461a      	mov	r2, r3
 8000f44:	69b9      	ldr	r1, [r7, #24]
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ff34 	bl	8000db4 <LL_GPIO_SetAFPin_0_7>
 8000f4c:	e006      	b.n	8000f5c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	461a      	mov	r2, r3
 8000f54:	69b9      	ldr	r1, [r7, #24]
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff69 	bl	8000e2e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	461a      	mov	r2, r3
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fe56 	bl	8000c16 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1af      	bne.n	8000ede <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8000f7e:	2300      	movs	r3, #0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <LL_InitTick+0x30>)
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <LL_InitTick+0x30>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <LL_InitTick+0x30>)
 8000fa8:	2205      	movs	r2, #5
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000fc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ffdd 	bl	8000f88 <LL_InitTick>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <LL_SetSystemCoreClock+0x1c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000000 	.word	0x20000000

08000ff8 <__libc_init_array>:
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	4d0d      	ldr	r5, [pc, #52]	; (8001030 <__libc_init_array+0x38>)
 8000ffc:	4c0d      	ldr	r4, [pc, #52]	; (8001034 <__libc_init_array+0x3c>)
 8000ffe:	1b64      	subs	r4, r4, r5
 8001000:	10a4      	asrs	r4, r4, #2
 8001002:	2600      	movs	r6, #0
 8001004:	42a6      	cmp	r6, r4
 8001006:	d109      	bne.n	800101c <__libc_init_array+0x24>
 8001008:	4d0b      	ldr	r5, [pc, #44]	; (8001038 <__libc_init_array+0x40>)
 800100a:	4c0c      	ldr	r4, [pc, #48]	; (800103c <__libc_init_array+0x44>)
 800100c:	f000 f818 	bl	8001040 <_init>
 8001010:	1b64      	subs	r4, r4, r5
 8001012:	10a4      	asrs	r4, r4, #2
 8001014:	2600      	movs	r6, #0
 8001016:	42a6      	cmp	r6, r4
 8001018:	d105      	bne.n	8001026 <__libc_init_array+0x2e>
 800101a:	bd70      	pop	{r4, r5, r6, pc}
 800101c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001020:	4798      	blx	r3
 8001022:	3601      	adds	r6, #1
 8001024:	e7ee      	b.n	8001004 <__libc_init_array+0xc>
 8001026:	f855 3b04 	ldr.w	r3, [r5], #4
 800102a:	4798      	blx	r3
 800102c:	3601      	adds	r6, #1
 800102e:	e7f2      	b.n	8001016 <__libc_init_array+0x1e>
 8001030:	08001058 	.word	0x08001058
 8001034:	08001058 	.word	0x08001058
 8001038:	08001058 	.word	0x08001058
 800103c:	0800105c 	.word	0x0800105c

08001040 <_init>:
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001042:	bf00      	nop
 8001044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001046:	bc08      	pop	{r3}
 8001048:	469e      	mov	lr, r3
 800104a:	4770      	bx	lr

0800104c <_fini>:
 800104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104e:	bf00      	nop
 8001050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001052:	bc08      	pop	{r3}
 8001054:	469e      	mov	lr, r3
 8001056:	4770      	bx	lr
