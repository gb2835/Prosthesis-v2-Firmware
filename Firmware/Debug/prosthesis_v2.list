
prosthesis_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b680  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800b808  0800b808  0001b808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd48  0800bd48  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd48  0800bd48  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd48  0800bd48  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd48  0800bd48  0001bd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd4c  0800bd4c  0001bd4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800bd50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001340  20000088  0800bdd4  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200013c8  0800bdd4  000213c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f801  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042fc  00000000  00000000  0003f8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  00043bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a8  00000000  00000000  00045658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dc34  00000000  00000000  00046f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c38c  00000000  00000000  00074b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001119df  00000000  00000000  00090ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a289f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072bc  00000000  00000000  001a28f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b7f0 	.word	0x0800b7f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	0800b7f0 	.word	0x0800b7f0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	4413      	add	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	211f      	movs	r1, #31
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0e9b      	lsrs	r3, r3, #26
 8000b9e:	f003 011f 	and.w	r1, r3, #31
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3314      	adds	r3, #20
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	0e5b      	lsrs	r3, r3, #25
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0d1b      	lsrs	r3, r3, #20
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	2107      	movs	r1, #7
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	0d1b      	lsrs	r3, r3, #20
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0318 	and.w	r3, r3, #24
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c38:	40d9      	lsrs	r1, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c42:	431a      	orrs	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	0007ffff 	.word	0x0007ffff

08000c5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6093      	str	r3, [r2, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000cba:	4905      	ldr	r1, [pc, #20]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000

08000d04 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000d6a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000d6e:	f7ff ff9b 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000d72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d76:	f7ff ffad 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	f7ff ffaa 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000d80:	2301      	movs	r3, #1
 8000d82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d84:	2303      	movs	r3, #3
 8000d86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4832      	ldr	r0, [pc, #200]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000d92:	f00a f8f2 	bl	800af7a <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_0);
 8000d96:	2101      	movs	r1, #1
 8000d98:	4830      	ldr	r0, [pc, #192]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000d9a:	f7ff ffb3 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4619      	mov	r1, r3
 8000db0:	482b      	ldr	r0, [pc, #172]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000db2:	f009 ff27 	bl	800ac04 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4822      	ldr	r0, [pc, #136]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dd6:	f009 ff3b 	bl	800ac50 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 8000dda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000dde:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4619      	mov	r1, r3
 8000dea:	481e      	ldr	r0, [pc, #120]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000dec:	f009 fec2 	bl	800ab74 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000df0:	2100      	movs	r1, #0
 8000df2:	481c      	ldr	r0, [pc, #112]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000df4:	f7ff fea4 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000df8:	4819      	ldr	r0, [pc, #100]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dfa:	f7ff ff2f 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e00:	f7ff ff3e 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_ADC1_Init+0x140>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	099b      	lsrs	r3, r3, #6
 8000e0a:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <MX_ADC1_Init+0x144>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	099a      	lsrs	r2, r3, #6
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e26:	e002      	b.n	8000e2e <MX_ADC1_Init+0x106>
  {
    wait_loop_index--;
 8000e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f9      	bne.n	8000e28 <MX_ADC1_Init+0x100>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <MX_ADC1_Init+0x14c>)
 8000e36:	2106      	movs	r1, #6
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e3a:	f7ff fe94 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <MX_ADC1_Init+0x14c>)
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e44:	f7ff febb 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000e48:	227f      	movs	r2, #127	; 0x7f
 8000e4a:	490a      	ldr	r1, [pc, #40]	; (8000e74 <MX_ADC1_Init+0x14c>)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e4e:	f7ff fee1 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3750      	adds	r7, #80	; 0x50
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	48000800 	.word	0x48000800
 8000e60:	50040000 	.word	0x50040000
 8000e64:	50040300 	.word	0x50040300
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	053e2d63 	.word	0x053e2d63
 8000e70:	cccccccd 	.word	0xcccccccd
 8000e74:	04300002 	.word	0x04300002

08000e78 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	; 0x50
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000e7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000eba:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000ebe:	f7ff fef3 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000ec2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec6:	f7ff ff05 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f7ff ff02 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4831      	ldr	r0, [pc, #196]	; (8000fa8 <MX_ADC2_Init+0x130>)
 8000ee2:	f00a f84a 	bl	800af7a <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_1);
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	482f      	ldr	r0, [pc, #188]	; (8000fa8 <MX_ADC2_Init+0x130>)
 8000eea:	f7ff ff0b 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efe:	4619      	mov	r1, r3
 8000f00:	482a      	ldr	r0, [pc, #168]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f02:	f009 fe7f 	bl	800ac04 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4821      	ldr	r0, [pc, #132]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f26:	f009 fe93 	bl	800ac50 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 8000f2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f2e:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4619      	mov	r1, r3
 8000f36:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <MX_ADC2_Init+0x138>)
 8000f38:	f009 fe1c 	bl	800ab74 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <MX_ADC2_Init+0x138>)
 8000f40:	f7ff fdfe 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000f44:	4819      	ldr	r0, [pc, #100]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f46:	f7ff fe89 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000f4a:	4818      	ldr	r0, [pc, #96]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f4c:	f7ff fe98 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_ADC2_Init+0x13c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	099b      	lsrs	r3, r3, #6
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <MX_ADC2_Init+0x140>)
 8000f58:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5c:	099a      	lsrs	r2, r3, #6
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_ADC2_Init+0x144>)
 8000f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f72:	e002      	b.n	8000f7a <MX_ADC2_Init+0x102>
  {
    wait_loop_index--;
 8000f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f76:	3b01      	subs	r3, #1
 8000f78:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f9      	bne.n	8000f74 <MX_ADC2_Init+0xfc>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <MX_ADC2_Init+0x148>)
 8000f82:	2106      	movs	r1, #6
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f86:	f7ff fdee 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <MX_ADC2_Init+0x148>)
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f90:	f7ff fe15 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000f94:	227f      	movs	r2, #127	; 0x7f
 8000f96:	490a      	ldr	r1, [pc, #40]	; (8000fc0 <MX_ADC2_Init+0x148>)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f9a:	f7ff fe3b 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	; 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	50040100 	.word	0x50040100
 8000fb0:	50040300 	.word	0x50040300
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	053e2d63 	.word	0x053e2d63
 8000fbc:	cccccccd 	.word	0xcccccccd
 8000fc0:	08600004 	.word	0x08600004

08000fc4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <MX_CAN1_Init+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fe2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000fe6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <MX_CAN1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_CAN1_Init+0x64>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_CAN1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_CAN1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_CAN1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_CAN1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_CAN1_Init+0x64>)
 8001016:	f006 f94d 	bl	80072b4 <HAL_CAN_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001020:	f000 fda0 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200000a4 	.word	0x200000a4
 800102c:	40006400 	.word	0x40006400

08001030 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <HAL_CAN_MspInit+0x9c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d138      	bne.n	80010c4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105c:	6593      	str	r3, [r2, #88]	; 0x58
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001082:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001094:	2309      	movs	r3, #9
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <HAL_CAN_MspInit+0xa4>)
 80010a0:	f007 f936 	bl	8008310 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2101      	movs	r1, #1
 80010a8:	2014      	movs	r0, #20
 80010aa:	f007 f8ac 	bl	8008206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010ae:	2014      	movs	r0, #20
 80010b0:	f007 f8c5 	bl	800823e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2101      	movs	r1, #1
 80010b8:	2015      	movs	r0, #21
 80010ba:	f007 f8a4 	bl	8008206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010be:	2015      	movs	r0, #21
 80010c0:	f007 f8bd 	bl	800823e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40006400 	.word	0x40006400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000400 	.word	0x48000400

080010d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <MX_GPIO_Init+0x14c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <MX_GPIO_Init+0x14c>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <MX_GPIO_Init+0x14c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <MX_GPIO_Init+0x14c>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a46      	ldr	r2, [pc, #280]	; (8001224 <MX_GPIO_Init+0x14c>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b44      	ldr	r3, [pc, #272]	; (8001224 <MX_GPIO_Init+0x14c>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b41      	ldr	r3, [pc, #260]	; (8001224 <MX_GPIO_Init+0x14c>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a40      	ldr	r2, [pc, #256]	; (8001224 <MX_GPIO_Init+0x14c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <MX_GPIO_Init+0x14c>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <MX_GPIO_Init+0x14c>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a3a      	ldr	r2, [pc, #232]	; (8001224 <MX_GPIO_Init+0x14c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <MX_GPIO_Init+0x14c>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSCOPE_GPIO_Port, OSCOPE_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4834      	ldr	r0, [pc, #208]	; (8001228 <MX_GPIO_Init+0x150>)
 8001156:	f007 fb79 	bl	800884c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANKLE_IMU_CS_GPIO_Port, ANKLE_IMU_CS_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2110      	movs	r1, #16
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f007 fb73 	bl	800884c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2107      	movs	r1, #7
 800116a:	4830      	ldr	r0, [pc, #192]	; (800122c <MX_GPIO_Init+0x154>)
 800116c:	f007 fb6e 	bl	800884c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KNEE_IMU_BT_Pin|KNEE_IMU_P0_Pin|KNEE_IMU_P1_Pin|KNEE_IMU_RST_Pin
 8001170:	2200      	movs	r2, #0
 8001172:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001176:	482d      	ldr	r0, [pc, #180]	; (800122c <MX_GPIO_Init+0x154>)
 8001178:	f007 fb68 	bl	800884c <HAL_GPIO_WritePin>
                          |KNEE_IMU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OSCOPE_Pin;
 800117c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OSCOPE_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4824      	ldr	r0, [pc, #144]	; (8001228 <MX_GPIO_Init+0x150>)
 8001196:	f007 f8bb 	bl	8008310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANKLE_IMU_CS_Pin;
 800119a:	2310      	movs	r3, #16
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ANKLE_IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b4:	f007 f8ac 	bl	8008310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin;
 80011b8:	2307      	movs	r3, #7
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011bc:	2311      	movs	r3, #17
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4817      	ldr	r0, [pc, #92]	; (800122c <MX_GPIO_Init+0x154>)
 80011d0:	f007 f89e 	bl	8008310 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = KNEE_IMU_BT_Pin|KNEE_IMU_P0_Pin|KNEE_IMU_P1_Pin|KNEE_IMU_RST_Pin
 80011d4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011d8:	617b      	str	r3, [r7, #20]
                          |KNEE_IMU_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	480f      	ldr	r0, [pc, #60]	; (800122c <MX_GPIO_Init+0x154>)
 80011ee:	f007 f88f 	bl	8008310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KNEE_IMU_INT_Pin;
 80011f2:	2320      	movs	r3, #32
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KNEE_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <MX_GPIO_Init+0x154>)
 8001208:	f007 f882 	bl	8008310 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2102      	movs	r1, #2
 8001210:	2017      	movs	r0, #23
 8001212:	f006 fff8 	bl	8008206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001216:	2017      	movs	r0, #23
 8001218:	f007 f811 	bl	800823e <HAL_NVIC_EnableIRQ>

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000
 8001228:	48000800 	.word	0x48000800
 800122c:	48000400 	.word	0x48000400

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	60da      	str	r2, [r3, #12]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60da      	str	r2, [r3, #12]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60da      	str	r2, [r3, #12]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60da      	str	r2, [r3, #12]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	f023 0203 	bic.w	r2, r3, #3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	621a      	str	r2, [r3, #32]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	f023 0201 	bic.w	r2, r3, #1
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60da      	str	r2, [r3, #12]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <LL_RCC_SetLPTIMClockSource>:
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <LL_RCC_SetLPTIMClockSource+0x30>)
 8001452:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	43db      	mvns	r3, r3
 800145e:	401a      	ands	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	041b      	lsls	r3, r3, #16
 8001464:	4904      	ldr	r1, [pc, #16]	; (8001478 <LL_RCC_SetLPTIMClockSource+0x30>)
 8001466:	4313      	orrs	r3, r2
 8001468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000

0800147c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001488:	4907      	ldr	r1, [pc, #28]	; (80014a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4313      	orrs	r3, r2
 800148e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001492:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4013      	ands	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40021000 	.word	0x40021000

080014ac <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSI);
 80014b0:	4819      	ldr	r0, [pc, #100]	; (8001518 <MX_LPTIM2_Init+0x6c>)
 80014b2:	f7ff ffc9 	bl	8001448 <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 80014b6:	2020      	movs	r0, #32
 80014b8:	f7ff ffe0 	bl	800147c <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014bc:	f7ff feb8 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff08 	bl	80012dc <NVIC_EncodePriority>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4619      	mov	r1, r3
 80014d0:	2042      	movs	r0, #66	; 0x42
 80014d2:	f7ff fed9 	bl	8001288 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 80014d6:	2042      	movs	r0, #66	; 0x42
 80014d8:	f7ff feb8 	bl	800124c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 80014dc:	2100      	movs	r1, #0
 80014de:	480f      	ldr	r0, [pc, #60]	; (800151c <MX_LPTIM2_Init+0x70>)
 80014e0:	f7ff ff9e 	bl	8001420 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 80014e4:	2100      	movs	r1, #0
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_LPTIM2_Init+0x70>)
 80014e8:	f7ff ff64 	bl	80013b4 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 80014ec:	2100      	movs	r1, #0
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <MX_LPTIM2_Init+0x70>)
 80014f0:	f7ff ff4d 	bl	800138e <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 80014f4:	2100      	movs	r1, #0
 80014f6:	4809      	ldr	r0, [pc, #36]	; (800151c <MX_LPTIM2_Init+0x70>)
 80014f8:	f7ff ff23 	bl	8001342 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 80014fc:	2100      	movs	r1, #0
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <MX_LPTIM2_Init+0x70>)
 8001500:	f7ff ff32 	bl	8001368 <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_LPTIM2_Init+0x70>)
 8001506:	f7ff ff7b 	bl	8001400 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 800150a:	2100      	movs	r1, #0
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <MX_LPTIM2_Init+0x70>)
 800150e:	f7ff ff64 	bl	80013da <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	00300010 	.word	0x00300010
 800151c:	40009400 	.word	0x40009400

08001520 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_LPTIM_Enable>:
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_LPTIM_StartCounter>:
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	f023 0206 	bic.w	r2, r3, #6
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	611a      	str	r2, [r3, #16]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_LPTIM_SetAutoReload>:
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	0c1b      	lsrs	r3, r3, #16
 800159e:	041b      	lsls	r3, r3, #16
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f043 0202 	orr.w	r2, r3, #2
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	609a      	str	r2, [r3, #8]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_RCC_HSE_Enable>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <LL_RCC_HSE_Enable+0x1c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <LL_RCC_HSE_Enable+0x1c>)
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000

080015f4 <LL_RCC_HSE_IsReady>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <LL_RCC_HSE_IsReady+0x24>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001604:	d101      	bne.n	800160a <LL_RCC_HSE_IsReady+0x16>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <LL_RCC_HSE_IsReady+0x18>
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <LL_RCC_LSI_Enable>:
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <LL_RCC_LSI_Enable+0x20>)
 8001622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <LL_RCC_LSI_Enable+0x20>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <LL_RCC_LSI_IsReady>:
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <LL_RCC_LSI_IsReady+0x24>)
 8001646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b02      	cmp	r3, #2
 8001650:	d101      	bne.n	8001656 <LL_RCC_LSI_IsReady+0x16>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <LL_RCC_LSI_IsReady+0x18>
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000

08001668 <LL_RCC_SetSysClkSource>:
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <LL_RCC_SetSysClkSource+0x24>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 0203 	bic.w	r2, r3, #3
 8001678:	4904      	ldr	r1, [pc, #16]	; (800168c <LL_RCC_SetSysClkSource+0x24>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4313      	orrs	r3, r2
 800167e:	608b      	str	r3, [r1, #8]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40021000 	.word	0x40021000

08001690 <LL_RCC_GetSysClkSource>:
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <LL_RCC_GetSysClkSource+0x18>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 030c 	and.w	r3, r3, #12
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000

080016ac <LL_RCC_SetAHBPrescaler>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <LL_RCC_SetAHBPrescaler+0x24>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <LL_RCC_SetAHBPrescaler+0x24>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000

080016d4 <LL_RCC_SetAPB1Prescaler>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e4:	4904      	ldr	r1, [pc, #16]	; (80016f8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000

080016fc <LL_RCC_SetAPB2Prescaler>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800170c:	4904      	ldr	r1, [pc, #16]	; (8001720 <LL_RCC_SetAPB2Prescaler+0x24>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000

08001724 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <LL_RCC_PLL_Enable+0x1c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <LL_RCC_PLL_Enable+0x1c>)
 800172e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000

08001744 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <LL_RCC_PLL_IsReady+0x24>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001754:	d101      	bne.n	800175a <LL_RCC_PLL_IsReady+0x16>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <LL_RCC_PLL_IsReady+0x18>
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001780:	4013      	ands	r3, r2
 8001782:	68f9      	ldr	r1, [r7, #12]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	4311      	orrs	r1, r2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	0212      	lsls	r2, r2, #8
 800178c:	4311      	orrs	r1, r2
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	4904      	ldr	r1, [pc, #16]	; (80017a4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000
 80017a8:	f9ff808c 	.word	0xf9ff808c

080017ac <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80017b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000

080017cc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <LL_FLASH_SetLatency+0x24>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 0207 	bic.w	r2, r3, #7
 80017dc:	4904      	ldr	r1, [pc, #16]	; (80017f0 <LL_FLASH_SetLatency+0x24>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	40022000 	.word	0x40022000

080017f4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <LL_FLASH_GetLatency+0x18>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000

08001810 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001820:	4904      	ldr	r1, [pc, #16]	; (8001834 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40007000 	.word	0x40007000

08001838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b0a6      	sub	sp, #152	; 0x98
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800183e:	f005 fcc5 	bl	80071cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001842:	f000 f93f 	bl	8001ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001846:	f7ff fc47 	bl	80010d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800184a:	f001 fae5 	bl	8002e18 <MX_SPI1_Init>
  MX_TIM2_Init();
 800184e:	f001 fc53 	bl	80030f8 <MX_TIM2_Init>
  MX_LPTIM2_Init();
 8001852:	f7ff fe2b 	bl	80014ac <MX_LPTIM2_Init>
  MX_ADC1_Init();
 8001856:	f7ff fa67 	bl	8000d28 <MX_ADC1_Init>
  MX_ADC2_Init();
 800185a:	f7ff fb0d 	bl	8000e78 <MX_ADC2_Init>
  MX_CAN1_Init();
 800185e:	f7ff fbb1 	bl	8000fc4 <MX_CAN1_Init>
/*******************************************************************************
* USER ADDED DEFINITIONS
*******************************************************************************/

  	AKxx_x_Init_t Motor_Init[AKXX_X_NUMBER_OF_DEVICES];
  	Motor_Init[AnkleIndex].canId = AnkleMotorCAN_ID;
 8001862:	2301      	movs	r3, #1
 8001864:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
  	Motor_Init[AnkleIndex].Motor = AK80_9;
 8001868:	2301      	movs	r3, #1
 800186a:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92

  	Motor_Init[KneeIndex].canId = KneeMotorCAN_ID;
 800186e:	2302      	movs	r3, #2
 8001870:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  	Motor_Init[KneeIndex].Motor = AK70_10;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

	CAN_FilterTypeDef CAN1_FilterInit[AKXX_X_NUMBER_OF_DEVICES];
	CAN1_FilterInit[AnkleIndex].FilterActivation = ENABLE;
 800187a:	2301      	movs	r3, #1
 800187c:	663b      	str	r3, [r7, #96]	; 0x60
	CAN1_FilterInit[AnkleIndex].FilterBank = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	657b      	str	r3, [r7, #84]	; 0x54
	CAN1_FilterInit[AnkleIndex].FilterFIFOAssignment = CAN_RX_FIFO0;
 8001882:	2300      	movs	r3, #0
 8001884:	653b      	str	r3, [r7, #80]	; 0x50
	CAN1_FilterInit[AnkleIndex].FilterIdHigh = AnkleMotorCAN_ID << 5;
 8001886:	2320      	movs	r3, #32
 8001888:	643b      	str	r3, [r7, #64]	; 0x40
	CAN1_FilterInit[AnkleIndex].FilterIdLow = AnkleMotorCAN_ID << 5;
 800188a:	2320      	movs	r3, #32
 800188c:	647b      	str	r3, [r7, #68]	; 0x44
	CAN1_FilterInit[AnkleIndex].FilterMaskIdHigh = AnkleMotorCAN_ID << 5;
 800188e:	2320      	movs	r3, #32
 8001890:	64bb      	str	r3, [r7, #72]	; 0x48
	CAN1_FilterInit[AnkleIndex].FilterMaskIdLow = AnkleMotorCAN_ID << 5;
 8001892:	2320      	movs	r3, #32
 8001894:	64fb      	str	r3, [r7, #76]	; 0x4c
	CAN1_FilterInit[AnkleIndex].FilterMode = CAN_FILTERMODE_IDLIST;
 8001896:	2301      	movs	r3, #1
 8001898:	65bb      	str	r3, [r7, #88]	; 0x58
	CAN1_FilterInit[AnkleIndex].FilterScale = CAN_FILTERSCALE_16BIT;
 800189a:	2300      	movs	r3, #0
 800189c:	65fb      	str	r3, [r7, #92]	; 0x5c

	memcpy(&CAN1_FilterInit[KneeIndex], &CAN1_FilterInit[AnkleIndex], sizeof(CAN_FilterTypeDef));
 800189e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80018a2:	f107 0540 	add.w	r5, r7, #64	; 0x40
 80018a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018b2:	e884 0003 	stmia.w	r4, {r0, r1}
	CAN1_FilterInit[KneeIndex].FilterBank = 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	67fb      	str	r3, [r7, #124]	; 0x7c
	CAN1_FilterInit[KneeIndex].FilterFIFOAssignment = CAN_RX_FIFO1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	67bb      	str	r3, [r7, #120]	; 0x78
	CAN1_FilterInit[KneeIndex].FilterIdHigh = KneeMotorCAN_ID << 5;
 80018be:	2340      	movs	r3, #64	; 0x40
 80018c0:	66bb      	str	r3, [r7, #104]	; 0x68
	CAN1_FilterInit[KneeIndex].FilterIdLow = KneeMotorCAN_ID << 5;
 80018c2:	2340      	movs	r3, #64	; 0x40
 80018c4:	66fb      	str	r3, [r7, #108]	; 0x6c
	CAN1_FilterInit[KneeIndex].FilterMaskIdHigh = KneeMotorCAN_ID << 5;
 80018c6:	2340      	movs	r3, #64	; 0x40
 80018c8:	673b      	str	r3, [r7, #112]	; 0x70
	CAN1_FilterInit[KneeIndex].FilterMaskIdLow = KneeMotorCAN_ID << 5;
 80018ca:	2340      	movs	r3, #64	; 0x40
 80018cc:	677b      	str	r3, [r7, #116]	; 0x74

  	MPU925x_Init_t AnkleIMU_Init;
  	AnkleIMU_Init.SPI_Handle = &hspi1;
 80018ce:	4b77      	ldr	r3, [pc, #476]	; (8001aac <main+0x274>)
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  	AnkleIMU_Init.CS_GPIOx = ANKLE_IMU_CS_GPIO_Port;
 80018d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  	AnkleIMU_Init.csPin = ANKLE_IMU_CS_Pin;
 80018d8:	2310      	movs	r3, #16
 80018da:	87bb      	strh	r3, [r7, #60]	; 0x3c

	Prosthesis_Init_t Prosthesis_Init;
	Prosthesis_Init.Joint = Ankle;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	Prosthesis_Init.Side = Right;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

/*******************************************************************************
* USER ADDED INITIALIZATIONS
*******************************************************************************/

	LL_LPTIM_Enable(LPTIM2);
 80018e8:	4871      	ldr	r0, [pc, #452]	; (8001ab0 <main+0x278>)
 80018ea:	f7ff fe2d 	bl	8001548 <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 80018ee:	4870      	ldr	r0, [pc, #448]	; (8001ab0 <main+0x278>)
 80018f0:	f7ff fe60 	bl	80015b4 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 80018f4:	213f      	movs	r1, #63	; 0x3f
 80018f6:	486e      	ldr	r0, [pc, #440]	; (8001ab0 <main+0x278>)
 80018f8:	f7ff fe49 	bl	800158e <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 80018fc:	2104      	movs	r1, #4
 80018fe:	486c      	ldr	r0, [pc, #432]	; (8001ab0 <main+0x278>)
 8001900:	f7ff fe32 	bl	8001568 <LL_LPTIM_StartCounter>

	LL_ADC_Enable(ADC1);
 8001904:	486b      	ldr	r0, [pc, #428]	; (8001ab4 <main+0x27c>)
 8001906:	f7ff fe0b 	bl	8001520 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 800190a:	486b      	ldr	r0, [pc, #428]	; (8001ab8 <main+0x280>)
 800190c:	f7ff fe08 	bl	8001520 <LL_ADC_Enable>

	if(HAL_CAN_ConfigFilter(&hcan1, &CAN1_FilterInit[AnkleIndex]))
 8001910:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001914:	4619      	mov	r1, r3
 8001916:	4869      	ldr	r0, [pc, #420]	; (8001abc <main+0x284>)
 8001918:	f005 fdc7 	bl	80074aa <HAL_CAN_ConfigFilter>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <main+0xf0>
		ErrorHandler(CAN_Error);
 8001922:	2003      	movs	r0, #3
 8001924:	f000 fb06 	bl	8001f34 <ErrorHandler>
	if(HAL_CAN_ConfigFilter(&hcan1, &CAN1_FilterInit[KneeIndex]))
 8001928:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800192c:	3328      	adds	r3, #40	; 0x28
 800192e:	4619      	mov	r1, r3
 8001930:	4862      	ldr	r0, [pc, #392]	; (8001abc <main+0x284>)
 8001932:	f005 fdba 	bl	80074aa <HAL_CAN_ConfigFilter>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <main+0x10a>
		ErrorHandler(CAN_Error);
 800193c:	2003      	movs	r0, #3
 800193e:	f000 faf9 	bl	8001f34 <ErrorHandler>
	if(HAL_CAN_Start(&hcan1))
 8001942:	485e      	ldr	r0, [pc, #376]	; (8001abc <main+0x284>)
 8001944:	f005 fe7b 	bl	800763e <HAL_CAN_Start>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <main+0x11c>
		ErrorHandler(CAN_Error);
 800194e:	2003      	movs	r0, #3
 8001950:	f000 faf0 	bl	8001f34 <ErrorHandler>

	if((Prosthesis_Init.Joint == Ankle) || (Prosthesis_Init.Joint == Combined))
 8001954:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <main+0x12c>
 800195c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001960:	2b01      	cmp	r3, #1
 8001962:	d146      	bne.n	80019f2 <main+0x1ba>
	{
		LL_mDelay(10);
 8001964:	200a      	movs	r0, #10
 8001966:	f009 fb77 	bl	800b058 <LL_mDelay>
	  	if(MPU925x_Init(0, &AnkleIMU_Init))
 800196a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800196e:	4619      	mov	r1, r3
 8001970:	2000      	movs	r0, #0
 8001972:	f005 f8bd 	bl	8006af0 <MPU925x_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <main+0x14a>
	  		ErrorHandler(AnkleIMU_Error);
 800197c:	2001      	movs	r0, #1
 800197e:	f000 fad9 	bl	8001f34 <ErrorHandler>
		MPU925x_SetAccelSensitivity(0, MPU925x_AccelSensitivity_8g);
 8001982:	2102      	movs	r1, #2
 8001984:	2000      	movs	r0, #0
 8001986:	f005 f8e7 	bl	8006b58 <MPU925x_SetAccelSensitivity>
		MPU925x_SetGyroSensitivity(0, MPU925x_GyroSensitivity_1000dps);
 800198a:	2102      	movs	r1, #2
 800198c:	2000      	movs	r0, #0
 800198e:	f005 f987 	bl	8006ca0 <MPU925x_SetGyroSensitivity>

		uint32_t txMailbox;
		AKxx_x_ReadData_t RxData_Float;
		while(AKxx_x_Init(AnkleIndex, &Motor_Init[AnkleIndex]))
 8001992:	e00b      	b.n	80019ac <main+0x174>
		{
			ActivateLED(Blue);
 8001994:	2001      	movs	r0, #1
 8001996:	f000 fa83 	bl	8001ea0 <ActivateLED>
			LL_mDelay(50);
 800199a:	2032      	movs	r0, #50	; 0x32
 800199c:	f009 fb5c 	bl	800b058 <LL_mDelay>
			ActivateLED(NoColor);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 fa7d 	bl	8001ea0 <ActivateLED>
			LL_mDelay(50);
 80019a6:	2032      	movs	r0, #50	; 0x32
 80019a8:	f009 fb56 	bl	800b058 <LL_mDelay>
		while(AKxx_x_Init(AnkleIndex, &Motor_Init[AnkleIndex]))
 80019ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80019b0:	4619      	mov	r1, r3
 80019b2:	2000      	movs	r0, #0
 80019b4:	f001 fd42 	bl	800343c <AKxx_x_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1ea      	bne.n	8001994 <main+0x15c>
		}
		ActivateLED(NoColor);
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 fa6e 	bl	8001ea0 <ActivateLED>

		if(AKxx_x_ZeroMotorPosition(AnkleIndex, &txMailbox))
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	4619      	mov	r1, r3
 80019ca:	2000      	movs	r0, #0
 80019cc:	f001 fe84 	bl	80036d8 <AKxx_x_ZeroMotorPosition>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <main+0x1a4>
			ErrorHandler(AnkleMotorError);
 80019d6:	2002      	movs	r0, #2
 80019d8:	f000 faac 	bl	8001f34 <ErrorHandler>
		if(AKxx_x_PollMotorReadWith10msTimeout(&RxData_Float))
 80019dc:	f107 0318 	add.w	r3, r7, #24
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fee7 	bl	80037b4 <AKxx_x_PollMotorReadWith10msTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <main+0x1ba>
			ErrorHandler(AnkleMotorError);
 80019ec:	2002      	movs	r0, #2
 80019ee:	f000 faa1 	bl	8001f34 <ErrorHandler>
	}
	if((Prosthesis_Init.Joint == Knee) || (Prosthesis_Init.Joint == Combined))
 80019f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d003      	beq.n	8001a02 <main+0x1ca>
 80019fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d137      	bne.n	8001a72 <main+0x23a>
	{
	  	if(BNO08x_Init())
 8001a02:	f004 fc79 	bl	80062f8 <BNO08x_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00f      	beq.n	8001a2c <main+0x1f4>
	  		ErrorHandler(KneeIMU_Error);
 8001a0c:	2004      	movs	r0, #4
 8001a0e:	f000 fa91 	bl	8001f34 <ErrorHandler>

		uint32_t txMailbox;
		AKxx_x_ReadData_t RxData_Float;
		while(AKxx_x_Init(KneeIndex, &Motor_Init[KneeIndex]))
 8001a12:	e00b      	b.n	8001a2c <main+0x1f4>
		{
			ActivateLED(Blue);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f000 fa43 	bl	8001ea0 <ActivateLED>
			LL_mDelay(50);
 8001a1a:	2032      	movs	r0, #50	; 0x32
 8001a1c:	f009 fb1c 	bl	800b058 <LL_mDelay>
			ActivateLED(NoColor);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f000 fa3d 	bl	8001ea0 <ActivateLED>
			LL_mDelay(50);
 8001a26:	2032      	movs	r0, #50	; 0x32
 8001a28:	f009 fb16 	bl	800b058 <LL_mDelay>
		while(AKxx_x_Init(KneeIndex, &Motor_Init[KneeIndex]))
 8001a2c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a30:	3304      	adds	r3, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	2001      	movs	r0, #1
 8001a36:	f001 fd01 	bl	800343c <AKxx_x_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e9      	bne.n	8001a14 <main+0x1dc>
		}
		ActivateLED(NoColor);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 fa2d 	bl	8001ea0 <ActivateLED>

		if(AKxx_x_ZeroMotorPosition(KneeIndex, &txMailbox))
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f001 fe43 	bl	80036d8 <AKxx_x_ZeroMotorPosition>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <main+0x226>
			ErrorHandler(KneeMotorError);
 8001a58:	2005      	movs	r0, #5
 8001a5a:	f000 fa6b 	bl	8001f34 <ErrorHandler>
		if(AKxx_x_PollMotorReadWith10msTimeout(&RxData_Float))
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fea7 	bl	80037b4 <AKxx_x_PollMotorReadWith10msTimeout>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <main+0x23a>
			ErrorHandler(KneeMotorError);
 8001a6c:	2005      	movs	r0, #5
 8001a6e:	f000 fa61 	bl	8001f34 <ErrorHandler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001a72:	2112      	movs	r1, #18
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <main+0x284>)
 8001a76:	f006 f854 	bl	8007b22 <HAL_CAN_ActivateNotification>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <main+0x24e>
		ErrorHandler(CAN_Error);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 fa57 	bl	8001f34 <ErrorHandler>

	InitProsthesisControl(&Prosthesis_Init);
 8001a86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f8d8 	bl	8001c40 <InitProsthesisControl>

/*******************************************************************************
* USER ADDED TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(ImpedanceControl);
 8001a90:	2002      	movs	r0, #2
 8001a92:	f000 f9c9 	bl	8001e28 <RequireTestProgram>
* USER ADDED MAIN LOOP
*******************************************************************************/

	while(1)
	{
		if(isProsthesisControlRequired)
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <main+0x288>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0fb      	beq.n	8001a96 <main+0x25e>
		{
			RunProsthesisControl();
 8001a9e:	f000 f9dd 	bl	8001e5c <RunProsthesisControl>
			isProsthesisControlRequired = 0;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <main+0x288>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
		if(isProsthesisControlRequired)
 8001aa8:	e7f5      	b.n	8001a96 <main+0x25e>
 8001aaa:	bf00      	nop
 8001aac:	20000348 	.word	0x20000348
 8001ab0:	40009400 	.word	0x40009400
 8001ab4:	50040000 	.word	0x50040000
 8001ab8:	50040100 	.word	0x50040100
 8001abc:	200000a4 	.word	0x200000a4
 8001ac0:	200000cc 	.word	0x200000cc

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001ac8:	2004      	movs	r0, #4
 8001aca:	f7ff fe7f 	bl	80017cc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001ace:	bf00      	nop
 8001ad0:	f7ff fe90 	bl	80017f4 <LL_FLASH_GetLatency>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d1fa      	bne.n	8001ad0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001ada:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ade:	f7ff fe97 	bl	8001810 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8001ae2:	f7ff fd77 	bl	80015d4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001ae6:	bf00      	nop
 8001ae8:	f7ff fd84 	bl	80015f4 <LL_RCC_HSE_IsReady>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d1fa      	bne.n	8001ae8 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_LSI_Enable();
 8001af2:	f7ff fd93 	bl	800161c <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8001af6:	bf00      	nop
 8001af8:	f7ff fda2 	bl	8001640 <LL_RCC_LSI_IsReady>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d1fa      	bne.n	8001af8 <SystemClock_Config+0x34>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_3, 10, LL_RCC_PLLR_DIV_2);
 8001b02:	2300      	movs	r3, #0
 8001b04:	220a      	movs	r2, #10
 8001b06:	2120      	movs	r1, #32
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f7ff fe2f 	bl	800176c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001b0e:	f7ff fe4d 	bl	80017ac <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b12:	f7ff fe07 	bl	8001724 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b16:	bf00      	nop
 8001b18:	f7ff fe14 	bl	8001744 <LL_RCC_PLL_IsReady>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d1fa      	bne.n	8001b18 <SystemClock_Config+0x54>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001b22:	2003      	movs	r0, #3
 8001b24:	f7ff fda0 	bl	8001668 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b28:	bf00      	nop
 8001b2a:	f7ff fdb1 	bl	8001690 <LL_RCC_GetSysClkSource>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d1fa      	bne.n	8001b2a <SystemClock_Config+0x66>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff fdb9 	bl	80016ac <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fdca 	bl	80016d4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff fddb 	bl	80016fc <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 8001b46:	4806      	ldr	r0, [pc, #24]	; (8001b60 <SystemClock_Config+0x9c>)
 8001b48:	f009 faae 	bl	800b0a8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001b4c:	200f      	movs	r0, #15
 8001b4e:	f005 fb55 	bl	80071fc <HAL_InitTick>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b58:	f000 f804 	bl	8001b64 <Error_Handler>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	04c4b400 	.word	0x04c4b400

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>

08001b6e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b82:	f043 0204 	orr.w	r2, r3, #4
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	b29b      	uxth	r3, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d101      	bne.n	8001bc8 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4013      	ands	r3, r2
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43d9      	mvns	r1, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	400b      	ands	r3, r1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	619a      	str	r2, [r3, #24]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <InitProsthesisControl>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void InitProsthesisControl(Prosthesis_Init_t *Device_Init)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29a      	uxth	r2, r3
	memcpy(&Device, Device_Init, sizeof(Device));
 8001c4e:	4b6f      	ldr	r3, [pc, #444]	; (8001e0c <InitProsthesisControl+0x1cc>)
 8001c50:	801a      	strh	r2, [r3, #0]

	memset(&CM_AnkleJoint, 0, sizeof(CM_AnkleJoint));
 8001c52:	22d8      	movs	r2, #216	; 0xd8
 8001c54:	2100      	movs	r1, #0
 8001c56:	486e      	ldr	r0, [pc, #440]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001c58:	f009 fa6e 	bl	800b138 <memset>
	memset(&CM_KneeJoint, 0, sizeof(CM_KneeJoint));
 8001c5c:	22c8      	movs	r2, #200	; 0xc8
 8001c5e:	2100      	movs	r1, #0
 8001c60:	486c      	ldr	r0, [pc, #432]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001c62:	f009 fa69 	bl	800b138 <memset>

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001c66:	4b69      	ldr	r3, [pc, #420]	; (8001e0c <InitProsthesisControl+0x1cc>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <InitProsthesisControl+0x36>
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <InitProsthesisControl+0x1cc>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d142      	bne.n	8001cfc <InitProsthesisControl+0xbc>
	{
		float startPosition = 0.0f;
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
		float startKd = 0.0f;
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
		float startKp = 0.0f;
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]

		CM_AnkleJoint.EarlyStanceCtrl.position = startPosition;
 8001c88:	4a61      	ldr	r2, [pc, #388]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
		CM_AnkleJoint.EarlyStanceCtrl.kd = startKd;
 8001c8e:	4a60      	ldr	r2, [pc, #384]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	6293      	str	r3, [r2, #40]	; 0x28
		CM_AnkleJoint.EarlyStanceCtrl.kp = startKp;
 8001c94:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	62d3      	str	r3, [r2, #44]	; 0x2c

		CM_AnkleJoint.MidStanceCtrl.position = startPosition;
 8001c9a:	4a5d      	ldr	r2, [pc, #372]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	6453      	str	r3, [r2, #68]	; 0x44
		CM_AnkleJoint.MidStanceCtrl.kd = startKd;
 8001ca0:	4a5b      	ldr	r2, [pc, #364]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	63d3      	str	r3, [r2, #60]	; 0x3c
		CM_AnkleJoint.MidStanceCtrl.kp = startKp;
 8001ca6:	4a5a      	ldr	r2, [pc, #360]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	6413      	str	r3, [r2, #64]	; 0x40

		CM_AnkleJoint.LateStanceCtrl.position = startPosition;
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	6593      	str	r3, [r2, #88]	; 0x58
		CM_AnkleJoint.LateStanceCtrl.kd = startKd;
 8001cb2:	4a57      	ldr	r2, [pc, #348]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	6513      	str	r3, [r2, #80]	; 0x50
		CM_AnkleJoint.LateStanceCtrl.kp = startKp;
 8001cb8:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	6553      	str	r3, [r2, #84]	; 0x54

		CM_AnkleJoint.SwingFlexCtrl.position = startPosition;
 8001cbe:	4a54      	ldr	r2, [pc, #336]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	66d3      	str	r3, [r2, #108]	; 0x6c
		CM_AnkleJoint.SwingFlexCtrl.kd = startKd;
 8001cc4:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	6653      	str	r3, [r2, #100]	; 0x64
		CM_AnkleJoint.SwingFlexCtrl.kp = startKp;
 8001cca:	4a51      	ldr	r2, [pc, #324]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	6693      	str	r3, [r2, #104]	; 0x68

		CM_AnkleJoint.SwingExtCtrl.position = startPosition;
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		CM_AnkleJoint.SwingExtCtrl.kd = startKd;
 8001cd8:	4a4d      	ldr	r2, [pc, #308]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	6793      	str	r3, [r2, #120]	; 0x78
		CM_AnkleJoint.SwingExtCtrl.kp = startKp;
 8001cde:	4a4c      	ldr	r2, [pc, #304]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	67d3      	str	r3, [r2, #124]	; 0x7c

		CM_AnkleJoint.SwingDescCtrl.position = startPosition;
 8001ce4:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		CM_AnkleJoint.SwingDescCtrl.kd = startKd;
 8001cec:	4a48      	ldr	r2, [pc, #288]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		CM_AnkleJoint.SwingDescCtrl.kp = startKp;
 8001cf4:	4a46      	ldr	r2, [pc, #280]	; (8001e10 <InitProsthesisControl+0x1d0>)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	}
	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8001cfc:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <InitProsthesisControl+0x1cc>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d003      	beq.n	8001d0c <InitProsthesisControl+0xcc>
 8001d04:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <InitProsthesisControl+0x1cc>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d142      	bne.n	8001d92 <InitProsthesisControl+0x152>
	{
		float startPosition = 0.0f;
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
		float startKd = 0.0f;
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
		float startKp = 0.0f;
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]

		CM_KneeJoint.EarlyStanceCtrl.position = startPosition;
 8001d1e:	4a3d      	ldr	r2, [pc, #244]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6313      	str	r3, [r2, #48]	; 0x30
		CM_KneeJoint.EarlyStanceCtrl.kd = startKd;
 8001d24:	4a3b      	ldr	r2, [pc, #236]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	6293      	str	r3, [r2, #40]	; 0x28
		CM_KneeJoint.EarlyStanceCtrl.kp = startKp;
 8001d2a:	4a3a      	ldr	r2, [pc, #232]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

		CM_KneeJoint.MidStanceCtrl.position = startPosition;
 8001d30:	4a38      	ldr	r2, [pc, #224]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
		CM_KneeJoint.MidStanceCtrl.kd = startKd;
 8001d36:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	63d3      	str	r3, [r2, #60]	; 0x3c
		CM_KneeJoint.MidStanceCtrl.kp = startKp;
 8001d3c:	4a35      	ldr	r2, [pc, #212]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40

		CM_KneeJoint.LateStanceCtrl.position = startPosition;
 8001d42:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6593      	str	r3, [r2, #88]	; 0x58
		CM_KneeJoint.LateStanceCtrl.kd = startKd;
 8001d48:	4a32      	ldr	r2, [pc, #200]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	6513      	str	r3, [r2, #80]	; 0x50
		CM_KneeJoint.LateStanceCtrl.kp = startKp;
 8001d4e:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	6553      	str	r3, [r2, #84]	; 0x54

		CM_KneeJoint.SwingFlexCtrl.position = startPosition;
 8001d54:	4a2f      	ldr	r2, [pc, #188]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	66d3      	str	r3, [r2, #108]	; 0x6c
		CM_KneeJoint.SwingFlexCtrl.kd = startKd;
 8001d5a:	4a2e      	ldr	r2, [pc, #184]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	6653      	str	r3, [r2, #100]	; 0x64
		CM_KneeJoint.SwingFlexCtrl.kp = startKp;
 8001d60:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6693      	str	r3, [r2, #104]	; 0x68

		CM_KneeJoint.SwingExtCtrl.position = startPosition;
 8001d66:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		CM_KneeJoint.SwingExtCtrl.kd = startKd;
 8001d6e:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	6793      	str	r3, [r2, #120]	; 0x78
		CM_KneeJoint.SwingExtCtrl.kp = startKp;
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	67d3      	str	r3, [r2, #124]	; 0x7c

		CM_KneeJoint.SwingDescCtrl.position = startPosition;
 8001d7a:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		CM_KneeJoint.SwingDescCtrl.kd = startKd;
 8001d82:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		CM_KneeJoint.SwingDescCtrl.kp = startKp;
 8001d8a:	4a22      	ldr	r2, [pc, #136]	; (8001e14 <InitProsthesisControl+0x1d4>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	}

	CM_LoadCell.intoStanceThreshold = 1300; //??
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <InitProsthesisControl+0x1d8>)
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <InitProsthesisControl+0x1dc>)
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34
	CM_LoadCell.outOfStanceThreshold = 1300 + 50; //??
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <InitProsthesisControl+0x1d8>)
 8001d9a:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <InitProsthesisControl+0x1e0>)
 8001d9c:	631a      	str	r2, [r3, #48]	; 0x30

	CM_footSpeedThreshold = 0.0f;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <InitProsthesisControl+0x1e4>)
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

	uint32_t txMailbox;
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <InitProsthesisControl+0x1cc>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <InitProsthesisControl+0x176>
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <InitProsthesisControl+0x1cc>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d111      	bne.n	8001dda <InitProsthesisControl+0x19a>
	{
		MPU925x_SetChipSelect(0);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f005 f922 	bl	8007000 <MPU925x_SetChipSelect>
		MPU925x_StartReadIMU_IT(0);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f005 f81b 	bl	8006df8 <MPU925x_StartReadIMU_IT>

		if(AKxx_x_EnterMotorCtrlMode(AnkleIndex, &txMailbox))
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f001 fc21 	bl	8003610 <AKxx_x_EnterMotorCtrlMode>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <InitProsthesisControl+0x19a>
			ErrorHandler(AnkleMotorError);
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f000 f8ad 	bl	8001f34 <ErrorHandler>
	}

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <InitProsthesisControl+0x1cc>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d003      	beq.n	8001dea <InitProsthesisControl+0x1aa>
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <InitProsthesisControl+0x1cc>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10b      	bne.n	8001e02 <InitProsthesisControl+0x1c2>
		if(AKxx_x_EnterMotorCtrlMode(KneeIndex, &txMailbox))
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	4619      	mov	r1, r3
 8001df0:	2001      	movs	r0, #1
 8001df2:	f001 fc0d 	bl	8003610 <AKxx_x_EnterMotorCtrlMode>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <InitProsthesisControl+0x1c2>
			ErrorHandler(KneeMotorError);
 8001dfc:	2005      	movs	r0, #5
 8001dfe:	f000 f899 	bl	8001f34 <ErrorHandler>
}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000140 	.word	0x20000140
 8001e10:	20000148 	.word	0x20000148
 8001e14:	20000228 	.word	0x20000228
 8001e18:	200002f0 	.word	0x200002f0
 8001e1c:	44a28000 	.word	0x44a28000
 8001e20:	44a8c000 	.word	0x44a8c000
 8001e24:	20000220 	.word	0x20000220

08001e28 <RequireTestProgram>:

void RequireTestProgram(TestProgram_e option)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <RequireTestProgram+0x2c>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	7013      	strb	r3, [r2, #0]
	if(testProgram != None)
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <RequireTestProgram+0x2c>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <RequireTestProgram+0x30>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000142 	.word	0x20000142
 8001e58:	20000146 	.word	0x20000146

08001e5c <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	GetInputs();
 8001e60:	f000 f89a 	bl	8001f98 <GetInputs>
	ProcessInputs();
 8001e64:	f000 f974 	bl	8002150 <ProcessInputs>

	RunStateMachine();
 8001e68:	f000 fbca 	bl	8002600 <RunStateMachine>
	CheckMotorCalls();
 8001e6c:	f000 fdca 	bl	8002a04 <CheckMotorCalls>

	// Check for first and second executions, needed for load cell filter
	if(isFirst)
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <RunProsthesisControl+0x3c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <RunProsthesisControl+0x2a>
	{
		isFirst = 0;
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <RunProsthesisControl+0x3c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <RunProsthesisControl+0x40>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 8001e84:	e006      	b.n	8001e94 <RunProsthesisControl+0x38>
	else if(isSecond)
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <RunProsthesisControl+0x40>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <RunProsthesisControl+0x38>
		isSecond = 0;
 8001e8e:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <RunProsthesisControl+0x40>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000145 	.word	0x20000145

08001ea0 <ActivateLED>:

void ActivateLED(LED_Color_e color)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
	if(color == NoColor)
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <ActivateLED+0x28>
	{
		LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	481f      	ldr	r0, [pc, #124]	; (8001f30 <ActivateLED+0x90>)
 8001eb4:	f7ff fe8f 	bl	8001bd6 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001eb8:	2102      	movs	r1, #2
 8001eba:	481d      	ldr	r0, [pc, #116]	; (8001f30 <ActivateLED+0x90>)
 8001ebc:	f7ff fe8b 	bl	8001bd6 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	481b      	ldr	r0, [pc, #108]	; (8001f30 <ActivateLED+0x90>)
 8001ec4:	f7ff fe87 	bl	8001bd6 <LL_GPIO_SetOutputPin>
	}
	if(color == Blue)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10c      	bne.n	8001ee8 <ActivateLED+0x48>
	{
		LL_GPIO_ResetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4817      	ldr	r0, [pc, #92]	; (8001f30 <ActivateLED+0x90>)
 8001ed2:	f7ff fe8e 	bl	8001bf2 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	4815      	ldr	r0, [pc, #84]	; (8001f30 <ActivateLED+0x90>)
 8001eda:	f7ff fe7c 	bl	8001bd6 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001ede:	2104      	movs	r1, #4
 8001ee0:	4813      	ldr	r0, [pc, #76]	; (8001f30 <ActivateLED+0x90>)
 8001ee2:	f7ff fe78 	bl	8001bd6 <LL_GPIO_SetOutputPin>
	{
		LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
		LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
	}
}
 8001ee6:	e01e      	b.n	8001f26 <ActivateLED+0x86>
	else if(color == Green)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d10c      	bne.n	8001f08 <ActivateLED+0x68>
		LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001eee:	2101      	movs	r1, #1
 8001ef0:	480f      	ldr	r0, [pc, #60]	; (8001f30 <ActivateLED+0x90>)
 8001ef2:	f7ff fe70 	bl	8001bd6 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <ActivateLED+0x90>)
 8001efa:	f7ff fe7a 	bl	8001bf2 <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001efe:	2104      	movs	r1, #4
 8001f00:	480b      	ldr	r0, [pc, #44]	; (8001f30 <ActivateLED+0x90>)
 8001f02:	f7ff fe68 	bl	8001bd6 <LL_GPIO_SetOutputPin>
}
 8001f06:	e00e      	b.n	8001f26 <ActivateLED+0x86>
	else if(color == Red)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d10b      	bne.n	8001f26 <ActivateLED+0x86>
		LL_GPIO_SetOutputPin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4807      	ldr	r0, [pc, #28]	; (8001f30 <ActivateLED+0x90>)
 8001f12:	f7ff fe60 	bl	8001bd6 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001f16:	2102      	movs	r1, #2
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <ActivateLED+0x90>)
 8001f1a:	f7ff fe5c 	bl	8001bd6 <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001f1e:	2104      	movs	r1, #4
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <ActivateLED+0x90>)
 8001f22:	f7ff fe66 	bl	8001bf2 <LL_GPIO_ResetOutputPin>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	48000400 	.word	0x48000400

08001f34 <ErrorHandler>:

void ErrorHandler(Error_e error)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
	ActivateLED(Red);
 8001f3e:	2003      	movs	r0, #3
 8001f40:	f7ff ffae 	bl	8001ea0 <ActivateLED>

	HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);
 8001f44:	2112      	movs	r1, #18
 8001f46:	4811      	ldr	r0, [pc, #68]	; (8001f8c <ErrorHandler+0x58>)
 8001f48:	f005 fe11 	bl	8007b6e <HAL_CAN_DeactivateNotification>

	CM_ledCode = error;
 8001f4c:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <ErrorHandler+0x5c>)
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	7013      	strb	r3, [r2, #0]

	uint32_t txMailbox;
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <ErrorHandler+0x60>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <ErrorHandler+0x2e>
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <ErrorHandler+0x60>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d105      	bne.n	8001f6e <ErrorHandler+0x3a>
		AKxx_x_ExitMotorCtrlMode(AnkleIndex, &txMailbox);
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	4619      	mov	r1, r3
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f001 fb6f 	bl	800364c <AKxx_x_ExitMotorCtrlMode>
	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <ErrorHandler+0x60>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d003      	beq.n	8001f7e <ErrorHandler+0x4a>
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <ErrorHandler+0x60>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d105      	bne.n	8001f8a <ErrorHandler+0x56>
		AKxx_x_ExitMotorCtrlMode(KneeIndex, &txMailbox);
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	4619      	mov	r1, r3
 8001f84:	2001      	movs	r0, #1
 8001f86:	f001 fb61 	bl	800364c <AKxx_x_ExitMotorCtrlMode>

	while(1);
 8001f8a:	e7fe      	b.n	8001f8a <ErrorHandler+0x56>
 8001f8c:	200000a4 	.word	0x200000a4
 8001f90:	2000032a 	.word	0x2000032a
 8001f94:	20000140 	.word	0x20000140

08001f98 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
	CM_LoadCell.Raw.bot[0] = ReadLoadCell(ADC1);
 8001f9e:	4856      	ldr	r0, [pc, #344]	; (80020f8 <GetInputs+0x160>)
 8001fa0:	f000 f8be 	bl	8002120 <ReadLoadCell>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fae:	4b53      	ldr	r3, [pc, #332]	; (80020fc <GetInputs+0x164>)
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell.Raw.top[0] = ReadLoadCell(ADC2);
 8001fb4:	4852      	ldr	r0, [pc, #328]	; (8002100 <GetInputs+0x168>)
 8001fb6:	f000 f8b3 	bl	8002120 <ReadLoadCell>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc4:	4b4d      	ldr	r3, [pc, #308]	; (80020fc <GetInputs+0x164>)
 8001fc6:	edc3 7a03 	vstr	s15, [r3, #12]

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001fca:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <GetInputs+0x16c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <GetInputs+0x42>
 8001fd2:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <GetInputs+0x16c>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d162      	bne.n	80020a0 <GetInputs+0x108>
	{
		static uint8_t tempImuData[14];
		if(imuReadStarted)
 8001fda:	4b4b      	ldr	r3, [pc, #300]	; (8002108 <GetInputs+0x170>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <GetInputs+0x58>
		{
			imuReadStarted = 0;
 8001fe2:	4b49      	ldr	r3, [pc, #292]	; (8002108 <GetInputs+0x170>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
			MPU925x_ReadIMU_IT(0, tempImuData);
 8001fe8:	4948      	ldr	r1, [pc, #288]	; (800210c <GetInputs+0x174>)
 8001fea:	2000      	movs	r0, #0
 8001fec:	f004 ff22 	bl	8006e34 <MPU925x_ReadIMU_IT>
		}

		static uint8_t missedAnkleImuCalls = 0;
		if(imuDataReceived)
 8001ff0:	4b47      	ldr	r3, [pc, #284]	; (8002110 <GetInputs+0x178>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d046      	beq.n	8002086 <GetInputs+0xee>
		{
			missedAnkleImuCalls = 0;
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <GetInputs+0x17c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
			imuDataReceived = 0;
 8001ffe:	4b44      	ldr	r3, [pc, #272]	; (8002110 <GetInputs+0x178>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
			MPU925x_ClearChipSelect(0);
 8002004:	2000      	movs	r0, #0
 8002006:	f004 ffe3 	bl	8006fd0 <MPU925x_ClearChipSelect>

			MPU925x_SetChipSelect(0);
 800200a:	2000      	movs	r0, #0
 800200c:	f004 fff8 	bl	8007000 <MPU925x_SetChipSelect>
			MPU925x_StartReadIMU_IT(0);
 8002010:	2000      	movs	r0, #0
 8002012:	f004 fef1 	bl	8006df8 <MPU925x_StartReadIMU_IT>

			IMU_Data = MPU925x_ConvertIMU_Data(tempImuData);
 8002016:	4c40      	ldr	r4, [pc, #256]	; (8002118 <GetInputs+0x180>)
 8002018:	463b      	mov	r3, r7
 800201a:	493c      	ldr	r1, [pc, #240]	; (800210c <GetInputs+0x174>)
 800201c:	4618      	mov	r0, r3
 800201e:	f004 ff25 	bl	8006e6c <MPU925x_ConvertIMU_Data>
 8002022:	4625      	mov	r5, r4
 8002024:	463c      	mov	r4, r7
 8002026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002032:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

			// Gyro offsets previously found
			IMU_Data.Struct.gx -= 3.1266768292682952;
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <GetInputs+0x180>)
 8002038:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800203c:	a328      	add	r3, pc, #160	; (adr r3, 80020e0 <GetInputs+0x148>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe f8c5 	bl	80001d0 <__aeabi_dsub>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4933      	ldr	r1, [pc, #204]	; (8002118 <GetInputs+0x180>)
 800204c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			IMU_Data.Struct.gy -= 0.59624999999999995;
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <GetInputs+0x180>)
 8002052:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002056:	a324      	add	r3, pc, #144	; (adr r3, 80020e8 <GetInputs+0x150>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe f8b8 	bl	80001d0 <__aeabi_dsub>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	492c      	ldr	r1, [pc, #176]	; (8002118 <GetInputs+0x180>)
 8002066:	e9c1 2308 	strd	r2, r3, [r1, #32]
			IMU_Data.Struct.gz -= -1.578993902439024;
 800206a:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <GetInputs+0x180>)
 800206c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002070:	a31f      	add	r3, pc, #124	; (adr r3, 80020f0 <GetInputs+0x158>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	f7fe f8ad 	bl	80001d4 <__adddf3>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4926      	ldr	r1, [pc, #152]	; (8002118 <GetInputs+0x180>)
 8002080:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8002084:	e005      	b.n	8002092 <GetInputs+0xfa>
		}
		else
			missedAnkleImuCalls++;
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <GetInputs+0x17c>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <GetInputs+0x17c>)
 8002090:	701a      	strb	r2, [r3, #0]

		if(missedAnkleImuCalls >= 5)
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <GetInputs+0x17c>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b04      	cmp	r3, #4
 8002098:	d902      	bls.n	80020a0 <GetInputs+0x108>
			ErrorHandler(AnkleIMU_Error);
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff ff4a 	bl	8001f34 <ErrorHandler>
	}
	if((Device.Joint == Knee) || (Device.Joint == Combined))
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <GetInputs+0x16c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d003      	beq.n	80020b0 <GetInputs+0x118>
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <GetInputs+0x16c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d110      	bne.n	80020d2 <GetInputs+0x13a>
	{
		if(BNO08x_resetOccurred)
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <GetInputs+0x184>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <GetInputs+0x136>
		{
			BNO08x_resetOccurred = 0;
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <GetInputs+0x184>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
			if(BNO08x_StartReports())
 80020be:	f004 f947 	bl	8006350 <BNO08x_StartReports>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <GetInputs+0x136>
				ErrorHandler(KneeIMU_Error);
 80020c8:	2004      	movs	r0, #4
 80020ca:	f7ff ff33 	bl	8001f34 <ErrorHandler>
		}

		BNO08x_ReadSensors();
 80020ce:	f004 f94d 	bl	800636c <BNO08x_ReadSensors>
	}
}
 80020d2:	bf00      	nop
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdb0      	pop	{r4, r5, r7, pc}
 80020da:	bf00      	nop
 80020dc:	f3af 8000 	nop.w
 80020e0:	2436f249 	.word	0x2436f249
 80020e4:	4009036f 	.word	0x4009036f
 80020e8:	e147ae14 	.word	0xe147ae14
 80020ec:	3fe3147a 	.word	0x3fe3147a
 80020f0:	1c38f1c2 	.word	0x1c38f1c2
 80020f4:	3ff9438f 	.word	0x3ff9438f
 80020f8:	50040000 	.word	0x50040000
 80020fc:	200002f0 	.word	0x200002f0
 8002100:	50040100 	.word	0x50040100
 8002104:	20000140 	.word	0x20000140
 8002108:	20000143 	.word	0x20000143
 800210c:	20000334 	.word	0x20000334
 8002110:	20000144 	.word	0x20000144
 8002114:	20000342 	.word	0x20000342
 8002118:	20000110 	.word	0x20000110
 800211c:	20000f04 	.word	0x20000f04

08002120 <ReadLoadCell>:

static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fd20 	bl	8001b6e <LL_ADC_REG_StartConversion>
	while (!LL_ADC_IsActiveFlag_EOC(ADCx));
 800212e:	bf00      	nop
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fd3d 	bl	8001bb0 <LL_ADC_IsActiveFlag_EOC>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f9      	beq.n	8002130 <ReadLoadCell+0x10>
	return LL_ADC_REG_ReadConversionData12(ADCx);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fd2a 	bl	8001b96 <LL_ADC_REG_ReadConversionData12>
 8002142:	4603      	mov	r3, r0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	0000      	movs	r0, r0
	...

08002150 <ProcessInputs>:

static void ProcessInputs(void)
{
 8002150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002154:	b088      	sub	sp, #32
 8002156:	af00      	add	r7, sp, #0
	// Filter load cells
	if(isFirst)
 8002158:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <ProcessInputs+0x7c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d018      	beq.n	8002192 <ProcessInputs+0x42>
	{
		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[0];
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <ProcessInputs+0x80>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1a      	ldr	r2, [pc, #104]	; (80021d0 <ProcessInputs+0x80>)
 8002166:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[0];
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <ProcessInputs+0x80>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <ProcessInputs+0x80>)
 800216e:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <ProcessInputs+0x80>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <ProcessInputs+0x80>)
 8002176:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <ProcessInputs+0x80>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <ProcessInputs+0x80>)
 800217e:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[0];
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <ProcessInputs+0x80>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <ProcessInputs+0x80>)
 8002186:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[0];
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <ProcessInputs+0x80>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <ProcessInputs+0x80>)
 800218e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002190:	e108      	b.n	80023a4 <ProcessInputs+0x254>
	}
	else if(isSecond)
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <ProcessInputs+0x84>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01e      	beq.n	80021d8 <ProcessInputs+0x88>
	{
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <ProcessInputs+0x80>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <ProcessInputs+0x80>)
 80021a0:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <ProcessInputs+0x80>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <ProcessInputs+0x80>)
 80021a8:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <ProcessInputs+0x80>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <ProcessInputs+0x80>)
 80021b0:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <ProcessInputs+0x80>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <ProcessInputs+0x80>)
 80021b8:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <ProcessInputs+0x80>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <ProcessInputs+0x80>)
 80021c0:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 80021c2:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <ProcessInputs+0x80>)
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	4a02      	ldr	r2, [pc, #8]	; (80021d0 <ProcessInputs+0x80>)
 80021c8:	6293      	str	r3, [r2, #40]	; 0x28
 80021ca:	e0eb      	b.n	80023a4 <ProcessInputs+0x254>
 80021cc:	20000000 	.word	0x20000000
 80021d0:	200002f0 	.word	0x200002f0
 80021d4:	20000145 	.word	0x20000145
	}
	else
	{
		// 2nd order low-pass Butterworth (fc = 20 Hz, fs = 500 Hz)
		CM_LoadCell.Filtered.bot[0] =   1.6475 * CM_LoadCell.Filtered.bot[1] - 0.7009 * CM_LoadCell.Filtered.bot[2]
 80021d8:	4b9d      	ldr	r3, [pc, #628]	; (8002450 <ProcessInputs+0x300>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f957 	bl	8000490 <__aeabi_f2d>
 80021e2:	a393      	add	r3, pc, #588	; (adr r3, 8002430 <ProcessInputs+0x2e0>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe f9aa 	bl	8000540 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	4b96      	ldr	r3, [pc, #600]	; (8002450 <ProcessInputs+0x300>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f949 	bl	8000490 <__aeabi_f2d>
 80021fe:	a38e      	add	r3, pc, #568	; (adr r3, 8002438 <ProcessInputs+0x2e8>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	f7fe f99c 	bl	8000540 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fd ffde 	bl	80001d0 <__aeabi_dsub>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4614      	mov	r4, r2
 800221a:	461d      	mov	r5, r3
									  + 0.0134 * CM_LoadCell.Raw.bot[0] + 0.0267 * CM_LoadCell.Raw.bot[1] + 0.0134 * CM_LoadCell.Raw.bot[2];
 800221c:	4b8c      	ldr	r3, [pc, #560]	; (8002450 <ProcessInputs+0x300>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f935 	bl	8000490 <__aeabi_f2d>
 8002226:	a386      	add	r3, pc, #536	; (adr r3, 8002440 <ProcessInputs+0x2f0>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe f988 	bl	8000540 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	f7fd ffcc 	bl	80001d4 <__adddf3>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4614      	mov	r4, r2
 8002242:	461d      	mov	r5, r3
 8002244:	4b82      	ldr	r3, [pc, #520]	; (8002450 <ProcessInputs+0x300>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f921 	bl	8000490 <__aeabi_f2d>
 800224e:	a37e      	add	r3, pc, #504	; (adr r3, 8002448 <ProcessInputs+0x2f8>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe f974 	bl	8000540 <__aeabi_dmul>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4620      	mov	r0, r4
 800225e:	4629      	mov	r1, r5
 8002260:	f7fd ffb8 	bl	80001d4 <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4614      	mov	r4, r2
 800226a:	461d      	mov	r5, r3
 800226c:	4b78      	ldr	r3, [pc, #480]	; (8002450 <ProcessInputs+0x300>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f90d 	bl	8000490 <__aeabi_f2d>
 8002276:	a372      	add	r3, pc, #456	; (adr r3, 8002440 <ProcessInputs+0x2f0>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fe f960 	bl	8000540 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4620      	mov	r0, r4
 8002286:	4629      	mov	r1, r5
 8002288:	f7fd ffa4 	bl	80001d4 <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fc04 	bl	8000aa0 <__aeabi_d2f>
 8002298:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.bot[0] =   1.6475 * CM_LoadCell.Filtered.bot[1] - 0.7009 * CM_LoadCell.Filtered.bot[2]
 800229a:	4a6d      	ldr	r2, [pc, #436]	; (8002450 <ProcessInputs+0x300>)
 800229c:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] =   1.6475 * CM_LoadCell.Filtered.top[1] - 0.7009 * CM_LoadCell.Filtered.top[2]
 800229e:	4b6c      	ldr	r3, [pc, #432]	; (8002450 <ProcessInputs+0x300>)
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f8f4 	bl	8000490 <__aeabi_f2d>
 80022a8:	a361      	add	r3, pc, #388	; (adr r3, 8002430 <ProcessInputs+0x2e0>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f7fe f947 	bl	8000540 <__aeabi_dmul>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4614      	mov	r4, r2
 80022b8:	461d      	mov	r5, r3
 80022ba:	4b65      	ldr	r3, [pc, #404]	; (8002450 <ProcessInputs+0x300>)
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe f8e6 	bl	8000490 <__aeabi_f2d>
 80022c4:	a35c      	add	r3, pc, #368	; (adr r3, 8002438 <ProcessInputs+0x2e8>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	f7fe f939 	bl	8000540 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4620      	mov	r0, r4
 80022d4:	4629      	mov	r1, r5
 80022d6:	f7fd ff7b 	bl	80001d0 <__aeabi_dsub>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4614      	mov	r4, r2
 80022e0:	461d      	mov	r5, r3
									  + 0.0134 * CM_LoadCell.Raw.top[0] + 0.0267 * CM_LoadCell.Raw.top[1] + 0.0134 * CM_LoadCell.Raw.top[2];
 80022e2:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <ProcessInputs+0x300>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f8d2 	bl	8000490 <__aeabi_f2d>
 80022ec:	a354      	add	r3, pc, #336	; (adr r3, 8002440 <ProcessInputs+0x2f0>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f925 	bl	8000540 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fd ff69 	bl	80001d4 <__adddf3>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4614      	mov	r4, r2
 8002308:	461d      	mov	r5, r3
 800230a:	4b51      	ldr	r3, [pc, #324]	; (8002450 <ProcessInputs+0x300>)
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f8be 	bl	8000490 <__aeabi_f2d>
 8002314:	a34c      	add	r3, pc, #304	; (adr r3, 8002448 <ProcessInputs+0x2f8>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fe f911 	bl	8000540 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4620      	mov	r0, r4
 8002324:	4629      	mov	r1, r5
 8002326:	f7fd ff55 	bl	80001d4 <__adddf3>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4614      	mov	r4, r2
 8002330:	461d      	mov	r5, r3
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <ProcessInputs+0x300>)
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f8aa 	bl	8000490 <__aeabi_f2d>
 800233c:	a340      	add	r3, pc, #256	; (adr r3, 8002440 <ProcessInputs+0x2f0>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fe f8fd 	bl	8000540 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4620      	mov	r0, r4
 800234c:	4629      	mov	r1, r5
 800234e:	f7fd ff41 	bl	80001d4 <__adddf3>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fba1 	bl	8000aa0 <__aeabi_d2f>
 800235e:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.top[0] =   1.6475 * CM_LoadCell.Filtered.top[1] - 0.7009 * CM_LoadCell.Filtered.top[2]
 8002360:	4a3b      	ldr	r2, [pc, #236]	; (8002450 <ProcessInputs+0x300>)
 8002362:	6253      	str	r3, [r2, #36]	; 0x24

		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[1];
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <ProcessInputs+0x300>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a39      	ldr	r2, [pc, #228]	; (8002450 <ProcessInputs+0x300>)
 800236a:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 800236c:	4b38      	ldr	r3, [pc, #224]	; (8002450 <ProcessInputs+0x300>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a37      	ldr	r2, [pc, #220]	; (8002450 <ProcessInputs+0x300>)
 8002372:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[1];
 8002374:	4b36      	ldr	r3, [pc, #216]	; (8002450 <ProcessInputs+0x300>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	4a35      	ldr	r2, [pc, #212]	; (8002450 <ProcessInputs+0x300>)
 800237a:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 800237c:	4b34      	ldr	r3, [pc, #208]	; (8002450 <ProcessInputs+0x300>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a33      	ldr	r2, [pc, #204]	; (8002450 <ProcessInputs+0x300>)
 8002382:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[1];
 8002384:	4b32      	ldr	r3, [pc, #200]	; (8002450 <ProcessInputs+0x300>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	4a31      	ldr	r2, [pc, #196]	; (8002450 <ProcessInputs+0x300>)
 800238a:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 800238c:	4b30      	ldr	r3, [pc, #192]	; (8002450 <ProcessInputs+0x300>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a2f      	ldr	r2, [pc, #188]	; (8002450 <ProcessInputs+0x300>)
 8002392:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[1];
 8002394:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <ProcessInputs+0x300>)
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	4a2d      	ldr	r2, [pc, #180]	; (8002450 <ProcessInputs+0x300>)
 800239a:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 800239c:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <ProcessInputs+0x300>)
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	4a2b      	ldr	r2, [pc, #172]	; (8002450 <ProcessInputs+0x300>)
 80023a2:	6293      	str	r3, [r2, #40]	; 0x28
	}

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80023a4:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <ProcessInputs+0x304>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <ProcessInputs+0x264>
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <ProcessInputs+0x304>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d179      	bne.n	80024a8 <ProcessInputs+0x358>
	{
		if(Device.Side == Left)
 80023b4:	4b27      	ldr	r3, [pc, #156]	; (8002454 <ProcessInputs+0x304>)
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d151      	bne.n	8002460 <ProcessInputs+0x310>
		{
			CM_AnkleJoint.IMU_Data.Struct.ax = -IMU_Data.Struct.ax;
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <ProcessInputs+0x308>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	60ba      	str	r2, [r7, #8]
 80023c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <ProcessInputs+0x30c>)
 80023cc:	ed97 7b02 	vldr	d7, [r7, #8]
 80023d0:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
			CM_AnkleJoint.IMU_Data.Struct.ay = IMU_Data.Struct.ay;
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <ProcessInputs+0x308>)
 80023d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023da:	4920      	ldr	r1, [pc, #128]	; (800245c <ProcessInputs+0x30c>)
 80023dc:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
			CM_AnkleJoint.IMU_Data.Struct.az = -IMU_Data.Struct.az;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <ProcessInputs+0x308>)
 80023e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e6:	603a      	str	r2, [r7, #0]
 80023e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <ProcessInputs+0x30c>)
 80023f0:	ed97 7b00 	vldr	d7, [r7]
 80023f4:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
			CM_AnkleJoint.IMU_Data.Struct.gx = -IMU_Data.Struct.gx;
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <ProcessInputs+0x308>)
 80023fa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023fe:	4692      	mov	sl, r2
 8002400:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <ProcessInputs+0x30c>)
 8002406:	e9c3 ab2e 	strd	sl, fp, [r3, #184]	; 0xb8
			CM_AnkleJoint.IMU_Data.Struct.gy = IMU_Data.Struct.gy;
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <ProcessInputs+0x308>)
 800240c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002410:	4912      	ldr	r1, [pc, #72]	; (800245c <ProcessInputs+0x30c>)
 8002412:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
			CM_AnkleJoint.IMU_Data.Struct.gz = -IMU_Data.Struct.gz;
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <ProcessInputs+0x308>)
 8002418:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800241c:	4690      	mov	r8, r2
 800241e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <ProcessInputs+0x30c>)
 8002424:	e9c3 8932 	strd	r8, r9, [r3, #200]	; 0xc8
 8002428:	e02b      	b.n	8002482 <ProcessInputs+0x332>
 800242a:	bf00      	nop
 800242c:	f3af 8000 	nop.w
 8002430:	f5c28f5c 	.word	0xf5c28f5c
 8002434:	3ffa5c28 	.word	0x3ffa5c28
 8002438:	d6388659 	.word	0xd6388659
 800243c:	3fe66dc5 	.word	0x3fe66dc5
 8002440:	8e219653 	.word	0x8e219653
 8002444:	3f8b7175 	.word	0x3f8b7175
 8002448:	ab367a10 	.word	0xab367a10
 800244c:	3f9b573e 	.word	0x3f9b573e
 8002450:	200002f0 	.word	0x200002f0
 8002454:	20000140 	.word	0x20000140
 8002458:	20000110 	.word	0x20000110
 800245c:	20000148 	.word	0x20000148
		}
		else if(Device.Side == Right)
 8002460:	4b5f      	ldr	r3, [pc, #380]	; (80025e0 <ProcessInputs+0x490>)
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10c      	bne.n	8002482 <ProcessInputs+0x332>
			memcpy(&CM_AnkleJoint.IMU_Data, &IMU_Data, sizeof(MPU925x_IMU_Data_t));
 8002468:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <ProcessInputs+0x494>)
 800246a:	4a5f      	ldr	r2, [pc, #380]	; (80025e8 <ProcessInputs+0x498>)
 800246c:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8002470:	4615      	mov	r5, r2
 8002472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800247e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		CM_footSpeed = CM_AnkleJoint.MotorReadData.speed + CM_AnkleJoint.IMU_Data.Struct.gz;
 8002482:	4b58      	ldr	r3, [pc, #352]	; (80025e4 <ProcessInputs+0x494>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f802 	bl	8000490 <__aeabi_f2d>
 800248c:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <ProcessInputs+0x494>)
 800248e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8002492:	f7fd fe9f 	bl	80001d4 <__adddf3>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	f7fe faff 	bl	8000aa0 <__aeabi_d2f>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a51      	ldr	r2, [pc, #324]	; (80025ec <ProcessInputs+0x49c>)
 80024a6:	6013      	str	r3, [r2, #0]
	}

	if((Device.Joint == Knee) || (Device.Joint == Combined))
 80024a8:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <ProcessInputs+0x490>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d004      	beq.n	80024ba <ProcessInputs+0x36a>
 80024b0:	4b4b      	ldr	r3, [pc, #300]	; (80025e0 <ProcessInputs+0x490>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	f040 808e 	bne.w	80025d6 <ProcessInputs+0x486>
	{
		if(Device.Side == Left)
 80024ba:	4b49      	ldr	r3, [pc, #292]	; (80025e0 <ProcessInputs+0x490>)
 80024bc:	785b      	ldrb	r3, [r3, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d137      	bne.n	8002532 <ProcessInputs+0x3e2>
		{
			CM_KneeJoint.IMU_Data.ax = -BNO08x_IMU_Data[0];
 80024c2:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <ProcessInputs+0x4a0>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eef1 7a67 	vneg.f32	s15, s15
 80024cc:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <ProcessInputs+0x4a4>)
 80024ce:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
			CM_KneeJoint.IMU_Data.ay = BNO08x_IMU_Data[1];
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <ProcessInputs+0x4a0>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a47      	ldr	r2, [pc, #284]	; (80025f4 <ProcessInputs+0x4a4>)
 80024d8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
			CM_KneeJoint.IMU_Data.az = -BNO08x_IMU_Data[2];
 80024dc:	4b44      	ldr	r3, [pc, #272]	; (80025f0 <ProcessInputs+0x4a0>)
 80024de:	edd3 7a02 	vldr	s15, [r3, #8]
 80024e2:	eef1 7a67 	vneg.f32	s15, s15
 80024e6:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <ProcessInputs+0x4a4>)
 80024e8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
			CM_KneeJoint.IMU_Data.gx = -BNO08x_IMU_Data[3] * RAD_TO_DEG;
 80024ec:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <ProcessInputs+0x4a0>)
 80024ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80024f2:	eef1 7a67 	vneg.f32	s15, s15
 80024f6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80025f8 <ProcessInputs+0x4a8>
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <ProcessInputs+0x4a4>)
 8002500:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
			CM_KneeJoint.IMU_Data.gy = BNO08x_IMU_Data[4] * RAD_TO_DEG;
 8002504:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <ProcessInputs+0x4a0>)
 8002506:	edd3 7a04 	vldr	s15, [r3, #16]
 800250a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80025f8 <ProcessInputs+0x4a8>
 800250e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <ProcessInputs+0x4a4>)
 8002514:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
			CM_KneeJoint.IMU_Data.gz = -BNO08x_IMU_Data[5] * RAD_TO_DEG;
 8002518:	4b35      	ldr	r3, [pc, #212]	; (80025f0 <ProcessInputs+0x4a0>)
 800251a:	edd3 7a05 	vldr	s15, [r3, #20]
 800251e:	eef1 7a67 	vneg.f32	s15, s15
 8002522:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80025f8 <ProcessInputs+0x4a8>
 8002526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800252a:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <ProcessInputs+0x4a4>)
 800252c:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
 8002530:	e00e      	b.n	8002550 <ProcessInputs+0x400>
		}
		else if(Device.Side == Right)
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <ProcessInputs+0x490>)
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10a      	bne.n	8002550 <ProcessInputs+0x400>
			memcpy(&CM_KneeJoint.IMU_Data, &BNO08x_IMU_Data, sizeof(KneeIMU_Data_t));
 800253a:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <ProcessInputs+0x4a4>)
 800253c:	4a2c      	ldr	r2, [pc, #176]	; (80025f0 <ProcessInputs+0x4a0>)
 800253e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8002542:	4615      	mov	r5, r2
 8002544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	6023      	str	r3, [r4, #0]

		float yaw, pitch, roll;
		QuaternionsToYPR(BNO08x_IMU_Data[6], BNO08x_IMU_Data[7], BNO08x_IMU_Data[8], BNO08x_IMU_Data[9], &yaw, &pitch, &roll);
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <ProcessInputs+0x4a0>)
 8002552:	edd3 7a06 	vldr	s15, [r3, #24]
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <ProcessInputs+0x4a0>)
 8002558:	ed93 7a07 	vldr	s14, [r3, #28]
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <ProcessInputs+0x4a0>)
 800255e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002562:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <ProcessInputs+0x4a0>)
 8002564:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8002568:	f107 0214 	add.w	r2, r7, #20
 800256c:	f107 0118 	add.w	r1, r7, #24
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4618      	mov	r0, r3
 8002576:	eef0 1a46 	vmov.f32	s3, s12
 800257a:	eeb0 1a66 	vmov.f32	s2, s13
 800257e:	eef0 0a47 	vmov.f32	s1, s14
 8002582:	eeb0 0a67 	vmov.f32	s0, s15
 8002586:	f000 fe2b 	bl	80031e0 <QuaternionsToYPR>
		CM_KneeJoint.IMU_Data.yaw = yaw * RAD_TO_DEG;
 800258a:	edd7 7a07 	vldr	s15, [r7, #28]
 800258e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025f8 <ProcessInputs+0x4a8>
 8002592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <ProcessInputs+0x4a4>)
 8002598:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		CM_KneeJoint.IMU_Data.pitch = pitch * RAD_TO_DEG;
 800259c:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80025f8 <ProcessInputs+0x4a8>
 80025a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a8:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <ProcessInputs+0x4a4>)
 80025aa:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
		CM_KneeJoint.IMU_Data.roll = roll * RAD_TO_DEG;
 80025ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80025f8 <ProcessInputs+0x4a8>
 80025b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <ProcessInputs+0x4a4>)
 80025bc:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0

		CM_hipAngle = CM_KneeJoint.MotorReadData.speed - CM_KneeJoint.IMU_Data.pitch;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <ProcessInputs+0x4a4>)
 80025c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <ProcessInputs+0x4a4>)
 80025c8:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 80025cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <ProcessInputs+0x4ac>)
 80025d2:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80025d6:	bf00      	nop
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e0:	20000140 	.word	0x20000140
 80025e4:	20000148 	.word	0x20000148
 80025e8:	20000110 	.word	0x20000110
 80025ec:	2000032c 	.word	0x2000032c
 80025f0:	20000edc 	.word	0x20000edc
 80025f4:	20000228 	.word	0x20000228
 80025f8:	42652ebe 	.word	0x42652ebe
 80025fc:	20000330 	.word	0x20000330

08002600 <RunStateMachine>:

static void RunStateMachine(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
	static StateMachine_e state = EarlyStance;
	switch(state)
 8002604:	4b77      	ldr	r3, [pc, #476]	; (80027e4 <RunStateMachine+0x1e4>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b05      	cmp	r3, #5
 800260a:	f200 81e0 	bhi.w	80029ce <RunStateMachine+0x3ce>
 800260e:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <RunStateMachine+0x14>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	0800262d 	.word	0x0800262d
 8002618:	080026c1 	.word	0x080026c1
 800261c:	0800274f 	.word	0x0800274f
 8002620:	08002815 	.word	0x08002815
 8002624:	080028a1 	.word	0x080028a1
 8002628:	08002931 	.word	0x08002931
	{
	case EarlyStance:
		CM_state_angles = -10;
 800262c:	4b6e      	ldr	r3, [pc, #440]	; (80027e8 <RunStateMachine+0x1e8>)
 800262e:	22f6      	movs	r2, #246	; 0xf6
 8002630:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1100; //??
 8002632:	4b6e      	ldr	r3, [pc, #440]	; (80027ec <RunStateMachine+0x1ec>)
 8002634:	f240 424c 	movw	r2, #1100	; 0x44c
 8002638:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -30;
 800263a:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <RunStateMachine+0x1f0>)
 800263c:	22e2      	movs	r2, #226	; 0xe2
 800263e:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -200;
 8002640:	4b6c      	ldr	r3, [pc, #432]	; (80027f4 <RunStateMachine+0x1f4>)
 8002642:	f64f 7238 	movw	r2, #65336	; 0xff38
 8002646:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 8002648:	4b6b      	ldr	r3, [pc, #428]	; (80027f8 <RunStateMachine+0x1f8>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d027      	beq.n	80026a0 <RunStateMachine+0xa0>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002650:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <RunStateMachine+0x1fc>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <RunStateMachine+0x60>
 8002658:	4b68      	ldr	r3, [pc, #416]	; (80027fc <RunStateMachine+0x1fc>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d10b      	bne.n	8002678 <RunStateMachine+0x78>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.EarlyStanceCtrl.position;
 8002660:	4b67      	ldr	r3, [pc, #412]	; (8002800 <RunStateMachine+0x200>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a66      	ldr	r2, [pc, #408]	; (8002800 <RunStateMachine+0x200>)
 8002666:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.EarlyStanceCtrl.kd;
 8002668:	4b65      	ldr	r3, [pc, #404]	; (8002800 <RunStateMachine+0x200>)
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	4a64      	ldr	r2, [pc, #400]	; (8002800 <RunStateMachine+0x200>)
 800266e:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.EarlyStanceCtrl.kp;
 8002670:	4b63      	ldr	r3, [pc, #396]	; (8002800 <RunStateMachine+0x200>)
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	4a62      	ldr	r2, [pc, #392]	; (8002800 <RunStateMachine+0x200>)
 8002676:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002678:	4b60      	ldr	r3, [pc, #384]	; (80027fc <RunStateMachine+0x1fc>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d003      	beq.n	8002688 <RunStateMachine+0x88>
 8002680:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <RunStateMachine+0x1fc>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d10b      	bne.n	80026a0 <RunStateMachine+0xa0>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.EarlyStanceCtrl.position;
 8002688:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <RunStateMachine+0x204>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a5d      	ldr	r2, [pc, #372]	; (8002804 <RunStateMachine+0x204>)
 800268e:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.EarlyStanceCtrl.kd;
 8002690:	4b5c      	ldr	r3, [pc, #368]	; (8002804 <RunStateMachine+0x204>)
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	4a5b      	ldr	r2, [pc, #364]	; (8002804 <RunStateMachine+0x204>)
 8002696:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.EarlyStanceCtrl.kp;
 8002698:	4b5a      	ldr	r3, [pc, #360]	; (8002804 <RunStateMachine+0x204>)
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	4a59      	ldr	r2, [pc, #356]	; (8002804 <RunStateMachine+0x204>)
 800269e:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_footSpeed > CM_footSpeedThreshold)
 80026a0:	4b59      	ldr	r3, [pc, #356]	; (8002808 <RunStateMachine+0x208>)
 80026a2:	ed93 7a00 	vldr	s14, [r3]
 80026a6:	4b59      	ldr	r3, [pc, #356]	; (800280c <RunStateMachine+0x20c>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b4:	dc00      	bgt.n	80026b8 <RunStateMachine+0xb8>
			state = MidStance;

		break;
 80026b6:	e18a      	b.n	80029ce <RunStateMachine+0x3ce>
			state = MidStance;
 80026b8:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <RunStateMachine+0x1e4>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
		break;
 80026be:	e186      	b.n	80029ce <RunStateMachine+0x3ce>

	case MidStance:
		CM_state_angles = 5;
 80026c0:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <RunStateMachine+0x1e8>)
 80026c2:	2205      	movs	r2, #5
 80026c4:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1200;
 80026c6:	4b49      	ldr	r3, [pc, #292]	; (80027ec <RunStateMachine+0x1ec>)
 80026c8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80026cc:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -20;
 80026ce:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <RunStateMachine+0x1f0>)
 80026d0:	22ec      	movs	r2, #236	; 0xec
 80026d2:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -120;
 80026d4:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <RunStateMachine+0x1f4>)
 80026d6:	f64f 7288 	movw	r2, #65416	; 0xff88
 80026da:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 80026dc:	4b46      	ldr	r3, [pc, #280]	; (80027f8 <RunStateMachine+0x1f8>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d027      	beq.n	8002734 <RunStateMachine+0x134>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80026e4:	4b45      	ldr	r3, [pc, #276]	; (80027fc <RunStateMachine+0x1fc>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <RunStateMachine+0xf4>
 80026ec:	4b43      	ldr	r3, [pc, #268]	; (80027fc <RunStateMachine+0x1fc>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10b      	bne.n	800270c <RunStateMachine+0x10c>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.MidStanceCtrl.position;
 80026f4:	4b42      	ldr	r3, [pc, #264]	; (8002800 <RunStateMachine+0x200>)
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	4a41      	ldr	r2, [pc, #260]	; (8002800 <RunStateMachine+0x200>)
 80026fa:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.MidStanceCtrl.kd;
 80026fc:	4b40      	ldr	r3, [pc, #256]	; (8002800 <RunStateMachine+0x200>)
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	4a3f      	ldr	r2, [pc, #252]	; (8002800 <RunStateMachine+0x200>)
 8002702:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.MidStanceCtrl.kp;
 8002704:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <RunStateMachine+0x200>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	4a3d      	ldr	r2, [pc, #244]	; (8002800 <RunStateMachine+0x200>)
 800270a:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <RunStateMachine+0x1fc>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d003      	beq.n	800271c <RunStateMachine+0x11c>
 8002714:	4b39      	ldr	r3, [pc, #228]	; (80027fc <RunStateMachine+0x1fc>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10b      	bne.n	8002734 <RunStateMachine+0x134>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.MidStanceCtrl.position;
 800271c:	4b39      	ldr	r3, [pc, #228]	; (8002804 <RunStateMachine+0x204>)
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	4a38      	ldr	r2, [pc, #224]	; (8002804 <RunStateMachine+0x204>)
 8002722:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.MidStanceCtrl.kd;
 8002724:	4b37      	ldr	r3, [pc, #220]	; (8002804 <RunStateMachine+0x204>)
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	4a36      	ldr	r2, [pc, #216]	; (8002804 <RunStateMachine+0x204>)
 800272a:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.MidStanceCtrl.kp;
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <RunStateMachine+0x204>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	4a34      	ldr	r2, [pc, #208]	; (8002804 <RunStateMachine+0x204>)
 8002732:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_AnkleJoint.MotorReadData.speed < 0)
 8002734:	4b32      	ldr	r3, [pc, #200]	; (8002800 <RunStateMachine+0x200>)
 8002736:	edd3 7a02 	vldr	s15, [r3, #8]
 800273a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002742:	d400      	bmi.n	8002746 <RunStateMachine+0x146>
			state = LateStance;

		break;
 8002744:	e143      	b.n	80029ce <RunStateMachine+0x3ce>
			state = LateStance;
 8002746:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <RunStateMachine+0x1e4>)
 8002748:	2202      	movs	r2, #2
 800274a:	701a      	strb	r2, [r3, #0]
		break;
 800274c:	e13f      	b.n	80029ce <RunStateMachine+0x3ce>

	case LateStance:
		CM_state_angles = 20;
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <RunStateMachine+0x1e8>)
 8002750:	2214      	movs	r2, #20
 8002752:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1300;
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <RunStateMachine+0x1ec>)
 8002756:	f240 5214 	movw	r2, #1300	; 0x514
 800275a:	801a      	strh	r2, [r3, #0]
		CM_state_torques = -10;
 800275c:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <RunStateMachine+0x1f0>)
 800275e:	22f6      	movs	r2, #246	; 0xf6
 8002760:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = -40;
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <RunStateMachine+0x1f4>)
 8002764:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8002768:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 800276a:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <RunStateMachine+0x1f8>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d027      	beq.n	80027c2 <RunStateMachine+0x1c2>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <RunStateMachine+0x1fc>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <RunStateMachine+0x182>
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <RunStateMachine+0x1fc>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10b      	bne.n	800279a <RunStateMachine+0x19a>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.LateStanceCtrl.position;
 8002782:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <RunStateMachine+0x200>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <RunStateMachine+0x200>)
 8002788:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.LateStanceCtrl.kd;
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <RunStateMachine+0x200>)
 800278c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278e:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <RunStateMachine+0x200>)
 8002790:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.LateStanceCtrl.kp;
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <RunStateMachine+0x200>)
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <RunStateMachine+0x200>)
 8002798:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <RunStateMachine+0x1fc>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d003      	beq.n	80027aa <RunStateMachine+0x1aa>
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <RunStateMachine+0x1fc>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d10b      	bne.n	80027c2 <RunStateMachine+0x1c2>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.LateStanceCtrl.position;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <RunStateMachine+0x204>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	4a15      	ldr	r2, [pc, #84]	; (8002804 <RunStateMachine+0x204>)
 80027b0:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.LateStanceCtrl.kd;
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <RunStateMachine+0x204>)
 80027b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b6:	4a13      	ldr	r2, [pc, #76]	; (8002804 <RunStateMachine+0x204>)
 80027b8:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.LateStanceCtrl.kp;
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <RunStateMachine+0x204>)
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	4a11      	ldr	r2, [pc, #68]	; (8002804 <RunStateMachine+0x204>)
 80027c0:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_LoadCell.Filtered.bot[0] > CM_LoadCell.outOfStanceThreshold)
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <RunStateMachine+0x210>)
 80027c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <RunStateMachine+0x210>)
 80027ca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80027ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	dc00      	bgt.n	80027da <RunStateMachine+0x1da>
			state = SwingFlexion;

		break;
 80027d8:	e0f9      	b.n	80029ce <RunStateMachine+0x3ce>
			state = SwingFlexion;
 80027da:	4b02      	ldr	r3, [pc, #8]	; (80027e4 <RunStateMachine+0x1e4>)
 80027dc:	2203      	movs	r2, #3
 80027de:	701a      	strb	r2, [r3, #0]
		break;
 80027e0:	e0f5      	b.n	80029ce <RunStateMachine+0x3ce>
 80027e2:	bf00      	nop
 80027e4:	20000343 	.word	0x20000343
 80027e8:	20000224 	.word	0x20000224
 80027ec:	20000328 	.word	0x20000328
 80027f0:	20000225 	.word	0x20000225
 80027f4:	20000226 	.word	0x20000226
 80027f8:	20000142 	.word	0x20000142
 80027fc:	20000140 	.word	0x20000140
 8002800:	20000148 	.word	0x20000148
 8002804:	20000228 	.word	0x20000228
 8002808:	2000032c 	.word	0x2000032c
 800280c:	20000220 	.word	0x20000220
 8002810:	200002f0 	.word	0x200002f0

	case SwingFlexion:
		CM_state_angles = 35;
 8002814:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <RunStateMachine+0x3d8>)
 8002816:	2223      	movs	r2, #35	; 0x23
 8002818:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1400;
 800281a:	4b70      	ldr	r3, [pc, #448]	; (80029dc <RunStateMachine+0x3dc>)
 800281c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8002820:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 0;
 8002822:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <RunStateMachine+0x3e0>)
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 40;
 8002828:	4b6e      	ldr	r3, [pc, #440]	; (80029e4 <RunStateMachine+0x3e4>)
 800282a:	2228      	movs	r2, #40	; 0x28
 800282c:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 800282e:	4b6e      	ldr	r3, [pc, #440]	; (80029e8 <RunStateMachine+0x3e8>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d027      	beq.n	8002886 <RunStateMachine+0x286>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002836:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <RunStateMachine+0x3ec>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <RunStateMachine+0x246>
 800283e:	4b6b      	ldr	r3, [pc, #428]	; (80029ec <RunStateMachine+0x3ec>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10b      	bne.n	800285e <RunStateMachine+0x25e>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.SwingFlexCtrl.position;
 8002846:	4b6a      	ldr	r3, [pc, #424]	; (80029f0 <RunStateMachine+0x3f0>)
 8002848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284a:	4a69      	ldr	r2, [pc, #420]	; (80029f0 <RunStateMachine+0x3f0>)
 800284c:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.SwingFlexCtrl.kd;
 800284e:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <RunStateMachine+0x3f0>)
 8002850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002852:	4a67      	ldr	r2, [pc, #412]	; (80029f0 <RunStateMachine+0x3f0>)
 8002854:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.SwingFlexCtrl.kp;
 8002856:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <RunStateMachine+0x3f0>)
 8002858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800285a:	4a65      	ldr	r2, [pc, #404]	; (80029f0 <RunStateMachine+0x3f0>)
 800285c:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 800285e:	4b63      	ldr	r3, [pc, #396]	; (80029ec <RunStateMachine+0x3ec>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d003      	beq.n	800286e <RunStateMachine+0x26e>
 8002866:	4b61      	ldr	r3, [pc, #388]	; (80029ec <RunStateMachine+0x3ec>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10b      	bne.n	8002886 <RunStateMachine+0x286>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.SwingFlexCtrl.position;
 800286e:	4b61      	ldr	r3, [pc, #388]	; (80029f4 <RunStateMachine+0x3f4>)
 8002870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002872:	4a60      	ldr	r2, [pc, #384]	; (80029f4 <RunStateMachine+0x3f4>)
 8002874:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.SwingFlexCtrl.kd;
 8002876:	4b5f      	ldr	r3, [pc, #380]	; (80029f4 <RunStateMachine+0x3f4>)
 8002878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287a:	4a5e      	ldr	r2, [pc, #376]	; (80029f4 <RunStateMachine+0x3f4>)
 800287c:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.SwingFlexCtrl.kp;
 800287e:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <RunStateMachine+0x3f4>)
 8002880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002882:	4a5c      	ldr	r2, [pc, #368]	; (80029f4 <RunStateMachine+0x3f4>)
 8002884:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_KneeJoint.MotorReadData.speed < 0)
 8002886:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <RunStateMachine+0x3f4>)
 8002888:	edd3 7a02 	vldr	s15, [r3, #8]
 800288c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002894:	d400      	bmi.n	8002898 <RunStateMachine+0x298>
			state = SwingExtension;

		break;
 8002896:	e09a      	b.n	80029ce <RunStateMachine+0x3ce>
			state = SwingExtension;
 8002898:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <RunStateMachine+0x3f8>)
 800289a:	2204      	movs	r2, #4
 800289c:	701a      	strb	r2, [r3, #0]
		break;
 800289e:	e096      	b.n	80029ce <RunStateMachine+0x3ce>

	case SwingExtension:
		CM_state_angles = 50;
 80028a0:	4b4d      	ldr	r3, [pc, #308]	; (80029d8 <RunStateMachine+0x3d8>)
 80028a2:	2232      	movs	r2, #50	; 0x32
 80028a4:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1500;
 80028a6:	4b4d      	ldr	r3, [pc, #308]	; (80029dc <RunStateMachine+0x3dc>)
 80028a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80028ac:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 10;
 80028ae:	4b4c      	ldr	r3, [pc, #304]	; (80029e0 <RunStateMachine+0x3e0>)
 80028b0:	220a      	movs	r2, #10
 80028b2:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 120;
 80028b4:	4b4b      	ldr	r3, [pc, #300]	; (80029e4 <RunStateMachine+0x3e4>)
 80028b6:	2278      	movs	r2, #120	; 0x78
 80028b8:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 80028ba:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <RunStateMachine+0x3e8>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d029      	beq.n	8002916 <RunStateMachine+0x316>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80028c2:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <RunStateMachine+0x3ec>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <RunStateMachine+0x2d2>
 80028ca:	4b48      	ldr	r3, [pc, #288]	; (80029ec <RunStateMachine+0x3ec>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10c      	bne.n	80028ec <RunStateMachine+0x2ec>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.SwingExtCtrl.position;
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <RunStateMachine+0x3f0>)
 80028d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d8:	4a45      	ldr	r2, [pc, #276]	; (80029f0 <RunStateMachine+0x3f0>)
 80028da:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.SwingExtCtrl.kd;
 80028dc:	4b44      	ldr	r3, [pc, #272]	; (80029f0 <RunStateMachine+0x3f0>)
 80028de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e0:	4a43      	ldr	r2, [pc, #268]	; (80029f0 <RunStateMachine+0x3f0>)
 80028e2:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.SwingExtCtrl.kp;
 80028e4:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <RunStateMachine+0x3f0>)
 80028e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e8:	4a41      	ldr	r2, [pc, #260]	; (80029f0 <RunStateMachine+0x3f0>)
 80028ea:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 80028ec:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <RunStateMachine+0x3ec>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d003      	beq.n	80028fc <RunStateMachine+0x2fc>
 80028f4:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <RunStateMachine+0x3ec>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d10c      	bne.n	8002916 <RunStateMachine+0x316>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.SwingExtCtrl.position;
 80028fc:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <RunStateMachine+0x3f4>)
 80028fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002902:	4a3c      	ldr	r2, [pc, #240]	; (80029f4 <RunStateMachine+0x3f4>)
 8002904:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.SwingExtCtrl.kd;
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <RunStateMachine+0x3f4>)
 8002908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800290a:	4a3a      	ldr	r2, [pc, #232]	; (80029f4 <RunStateMachine+0x3f4>)
 800290c:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.SwingExtCtrl.kp;
 800290e:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <RunStateMachine+0x3f4>)
 8002910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002912:	4a38      	ldr	r2, [pc, #224]	; (80029f4 <RunStateMachine+0x3f4>)
 8002914:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_footSpeed < 0)
 8002916:	4b39      	ldr	r3, [pc, #228]	; (80029fc <RunStateMachine+0x3fc>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002924:	d400      	bmi.n	8002928 <RunStateMachine+0x328>
			state = SwingDescension;

		break;
 8002926:	e052      	b.n	80029ce <RunStateMachine+0x3ce>
			state = SwingDescension;
 8002928:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <RunStateMachine+0x3f8>)
 800292a:	2205      	movs	r2, #5
 800292c:	701a      	strb	r2, [r3, #0]
		break;
 800292e:	e04e      	b.n	80029ce <RunStateMachine+0x3ce>

	case SwingDescension:
		CM_state_angles = 65;
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <RunStateMachine+0x3d8>)
 8002932:	2241      	movs	r2, #65	; 0x41
 8002934:	701a      	strb	r2, [r3, #0]
		CM_state_loadCells = 1600;
 8002936:	4b29      	ldr	r3, [pc, #164]	; (80029dc <RunStateMachine+0x3dc>)
 8002938:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800293c:	801a      	strh	r2, [r3, #0]
		CM_state_torques = 20;
 800293e:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <RunStateMachine+0x3e0>)
 8002940:	2214      	movs	r2, #20
 8002942:	701a      	strb	r2, [r3, #0]
		CM_state_speeds = 200;
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <RunStateMachine+0x3e4>)
 8002946:	22c8      	movs	r2, #200	; 0xc8
 8002948:	801a      	strh	r2, [r3, #0]

		if(testProgram != ImpedanceControl)
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <RunStateMachine+0x3e8>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d02d      	beq.n	80029ae <RunStateMachine+0x3ae>
		{
			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <RunStateMachine+0x3ec>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <RunStateMachine+0x362>
 800295a:	4b24      	ldr	r3, [pc, #144]	; (80029ec <RunStateMachine+0x3ec>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10e      	bne.n	8002980 <RunStateMachine+0x380>
			{
				CM_AnkleJoint.ProsCtrl.position = CM_AnkleJoint.SwingDescCtrl.position;
 8002962:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <RunStateMachine+0x3f0>)
 8002964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002968:	4a21      	ldr	r2, [pc, #132]	; (80029f0 <RunStateMachine+0x3f0>)
 800296a:	61d3      	str	r3, [r2, #28]
				CM_AnkleJoint.ProsCtrl.kd = CM_AnkleJoint.SwingDescCtrl.kd;
 800296c:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <RunStateMachine+0x3f0>)
 800296e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002972:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <RunStateMachine+0x3f0>)
 8002974:	6153      	str	r3, [r2, #20]
				CM_AnkleJoint.ProsCtrl.kp = CM_AnkleJoint.SwingDescCtrl.kp;
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <RunStateMachine+0x3f0>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	4a1c      	ldr	r2, [pc, #112]	; (80029f0 <RunStateMachine+0x3f0>)
 800297e:	6193      	str	r3, [r2, #24]
			}
			if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <RunStateMachine+0x3ec>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d003      	beq.n	8002990 <RunStateMachine+0x390>
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <RunStateMachine+0x3ec>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d10e      	bne.n	80029ae <RunStateMachine+0x3ae>
			{
				CM_KneeJoint.ProsCtrl.position = CM_KneeJoint.SwingDescCtrl.position;
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <RunStateMachine+0x3f4>)
 8002992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002996:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <RunStateMachine+0x3f4>)
 8002998:	61d3      	str	r3, [r2, #28]
				CM_KneeJoint.ProsCtrl.kd = CM_KneeJoint.SwingDescCtrl.kd;
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <RunStateMachine+0x3f4>)
 800299c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <RunStateMachine+0x3f4>)
 80029a2:	6153      	str	r3, [r2, #20]
				CM_KneeJoint.ProsCtrl.kp = CM_KneeJoint.SwingDescCtrl.kp;
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <RunStateMachine+0x3f4>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <RunStateMachine+0x3f4>)
 80029ac:	6193      	str	r3, [r2, #24]
			}
		}

		if(CM_LoadCell.Filtered.bot[0] < CM_LoadCell.intoStanceThreshold)
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <RunStateMachine+0x400>)
 80029b0:	ed93 7a06 	vldr	s14, [r3, #24]
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <RunStateMachine+0x400>)
 80029b6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80029ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	d400      	bmi.n	80029c6 <RunStateMachine+0x3c6>
			state = EarlyStance;

		break;
 80029c4:	e002      	b.n	80029cc <RunStateMachine+0x3cc>
			state = EarlyStance;
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <RunStateMachine+0x3f8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
		break;
 80029cc:	bf00      	nop
	}
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	20000224 	.word	0x20000224
 80029dc:	20000328 	.word	0x20000328
 80029e0:	20000225 	.word	0x20000225
 80029e4:	20000226 	.word	0x20000226
 80029e8:	20000142 	.word	0x20000142
 80029ec:	20000140 	.word	0x20000140
 80029f0:	20000148 	.word	0x20000148
 80029f4:	20000228 	.word	0x20000228
 80029f8:	20000343 	.word	0x20000343
 80029fc:	2000032c 	.word	0x2000032c
 8002a00:	200002f0 	.word	0x200002f0

08002a04 <CheckMotorCalls>:

static void CheckMotorCalls(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002a08:	4b28      	ldr	r3, [pc, #160]	; (8002aac <CheckMotorCalls+0xa8>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <CheckMotorCalls+0x14>
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <CheckMotorCalls+0xa8>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d121      	bne.n	8002a5c <CheckMotorCalls+0x58>
	{
		static uint8_t missedAnkleMotorCalls = 0;
		if(CM_AnkleJoint.motorDataReceived)
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <CheckMotorCalls+0xac>)
 8002a1a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00f      	beq.n	8002a42 <CheckMotorCalls+0x3e>
		{
			LL_GPIO_TogglePin(OSCOPE_GPIO_Port, OSCOPE_Pin);
 8002a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a26:	4823      	ldr	r0, [pc, #140]	; (8002ab4 <CheckMotorCalls+0xb0>)
 8002a28:	f7ff f8f1 	bl	8001c0e <LL_GPIO_TogglePin>
			missedAnkleMotorCalls = 0;
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <CheckMotorCalls+0xb4>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
			CM_AnkleJoint.motorDataReceived = 0;
 8002a32:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <CheckMotorCalls+0xac>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
			ServiceMotor(AnkleIndex);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f000 f842 	bl	8002ac4 <ServiceMotor>
 8002a40:	e005      	b.n	8002a4e <CheckMotorCalls+0x4a>
		}
		else
			missedAnkleMotorCalls++;
 8002a42:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <CheckMotorCalls+0xb4>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <CheckMotorCalls+0xb4>)
 8002a4c:	701a      	strb	r2, [r3, #0]

		if(missedAnkleMotorCalls >= 5)
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <CheckMotorCalls+0xb4>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d902      	bls.n	8002a5c <CheckMotorCalls+0x58>
			ErrorHandler(AnkleMotorError);
 8002a56:	2002      	movs	r0, #2
 8002a58:	f7ff fa6c 	bl	8001f34 <ErrorHandler>
	}
	if((Device.Joint == Knee) || (Device.Joint == Combined))
 8002a5c:	4b13      	ldr	r3, [pc, #76]	; (8002aac <CheckMotorCalls+0xa8>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d003      	beq.n	8002a6c <CheckMotorCalls+0x68>
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <CheckMotorCalls+0xa8>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d11c      	bne.n	8002aa6 <CheckMotorCalls+0xa2>
	{
		static uint8_t missedKneeMotorCalls = 0;
		if(CM_KneeJoint.motorDataReceived)
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <CheckMotorCalls+0xb8>)
 8002a6e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <CheckMotorCalls+0x88>
		{
			missedKneeMotorCalls = 0;
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <CheckMotorCalls+0xbc>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
			CM_KneeJoint.motorDataReceived = 0;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <CheckMotorCalls+0xb8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			ServiceMotor(KneeIndex);
 8002a84:	2001      	movs	r0, #1
 8002a86:	f000 f81d 	bl	8002ac4 <ServiceMotor>
 8002a8a:	e005      	b.n	8002a98 <CheckMotorCalls+0x94>
		}
		else
			missedKneeMotorCalls++;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <CheckMotorCalls+0xbc>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <CheckMotorCalls+0xbc>)
 8002a96:	701a      	strb	r2, [r3, #0]

		if(missedKneeMotorCalls >= 5)
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <CheckMotorCalls+0xbc>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d902      	bls.n	8002aa6 <CheckMotorCalls+0xa2>
			ErrorHandler(KneeMotorError);
 8002aa0:	2005      	movs	r0, #5
 8002aa2:	f7ff fa47 	bl	8001f34 <ErrorHandler>
	}
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000140 	.word	0x20000140
 8002ab0:	20000148 	.word	0x20000148
 8002ab4:	48000800 	.word	0x48000800
 8002ab8:	20000344 	.word	0x20000344
 8002abc:	20000228 	.word	0x20000228
 8002ac0:	20000345 	.word	0x20000345

08002ac4 <ServiceMotor>:

static void ServiceMotor(DeviceIndex_e deviceIndex)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
	static uint8_t firstCall = 1;
	if(firstCall)
 8002ace:	4b94      	ldr	r3, [pc, #592]	; (8002d20 <ServiceMotor+0x25c>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <ServiceMotor+0x1e>
	{
		firstCall = 0;
 8002ad6:	4b92      	ldr	r3, [pc, #584]	; (8002d20 <ServiceMotor+0x25c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
		ActivateLED(Green);
 8002adc:	2002      	movs	r0, #2
 8002ade:	f7ff f9df 	bl	8001ea0 <ActivateLED>
	}

	if(deviceIndex == AnkleIndex)
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 808e 	bne.w	8002c06 <ServiceMotor+0x142>
	{
		if(CM_AnkleJoint.MotorReadData.error)
 8002aea:	4b8e      	ldr	r3, [pc, #568]	; (8002d24 <ServiceMotor+0x260>)
 8002aec:	7c1b      	ldrb	r3, [r3, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <ServiceMotor+0x34>
			ErrorHandler(AnkleMotorError);
 8002af2:	2002      	movs	r0, #2
 8002af4:	f7ff fa1e 	bl	8001f34 <ErrorHandler>

		CM_AnkleJoint.MotorReadData.position = -MotorRxData[deviceIndex].position / ANKLE_GEAR_RATIO * RAD_TO_DEG - ANKLE_POSITION_OFFSET_FROM_PLANARFLEXION_BUMPER;
 8002af8:	79fa      	ldrb	r2, [r7, #7]
 8002afa:	498b      	ldr	r1, [pc, #556]	; (8002d28 <ServiceMotor+0x264>)
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3304      	adds	r3, #4
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	eeb1 7a67 	vneg.f32	s14, s15
 8002b10:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b18:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002d2c <ServiceMotor+0x268>
 8002b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b20:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b28:	4b7e      	ldr	r3, [pc, #504]	; (8002d24 <ServiceMotor+0x260>)
 8002b2a:	edc3 7a01 	vstr	s15, [r3, #4]
		CM_AnkleJoint.MotorReadData.speed = -MotorRxData[deviceIndex].speed / ANKLE_GEAR_RATIO * RAD_TO_DEG;
 8002b2e:	79fa      	ldrb	r2, [r7, #7]
 8002b30:	497d      	ldr	r1, [pc, #500]	; (8002d28 <ServiceMotor+0x264>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	edd3 7a00 	vldr	s15, [r3]
 8002b42:	eeb1 7a67 	vneg.f32	s14, s15
 8002b46:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b4e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002d2c <ServiceMotor+0x268>
 8002b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b56:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <ServiceMotor+0x260>)
 8002b58:	edc3 7a02 	vstr	s15, [r3, #8]
		CM_AnkleJoint.MotorReadData.torque = -MotorRxData[deviceIndex].torque * ANKLE_GEAR_RATIO ;
 8002b5c:	79fa      	ldrb	r2, [r7, #7]
 8002b5e:	4972      	ldr	r1, [pc, #456]	; (8002d28 <ServiceMotor+0x264>)
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	330c      	adds	r3, #12
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	eef1 7a67 	vneg.f32	s15, s15
 8002b74:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7c:	4b69      	ldr	r3, [pc, #420]	; (8002d24 <ServiceMotor+0x260>)
 8002b7e:	edc3 7a03 	vstr	s15, [r3, #12]

		uint32_t txMailbox;
		if((testProgram == None) || (testProgram == ImpedanceControl))
 8002b82:	4b6b      	ldr	r3, [pc, #428]	; (8002d30 <ServiceMotor+0x26c>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <ServiceMotor+0xce>
 8002b8a:	4b69      	ldr	r3, [pc, #420]	; (8002d30 <ServiceMotor+0x26c>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d12a      	bne.n	8002be8 <ServiceMotor+0x124>
		{
			MotorTxData.position = (-CM_AnkleJoint.ProsCtrl.position - ANKLE_POSITION_OFFSET_FROM_PLANARFLEXION_BUMPER) * ANKLE_GEAR_RATIO * DEG_TO_RAD;
 8002b92:	4b64      	ldr	r3, [pc, #400]	; (8002d24 <ServiceMotor+0x260>)
 8002b94:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b98:	eef1 7a67 	vneg.f32	s15, s15
 8002b9c:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ba4:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bac:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002d34 <ServiceMotor+0x270>
 8002bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb4:	4b60      	ldr	r3, [pc, #384]	; (8002d38 <ServiceMotor+0x274>)
 8002bb6:	edc3 7a02 	vstr	s15, [r3, #8]
			MotorTxData.kd = CM_AnkleJoint.ProsCtrl.kd;
 8002bba:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <ServiceMotor+0x260>)
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	4a5e      	ldr	r2, [pc, #376]	; (8002d38 <ServiceMotor+0x274>)
 8002bc0:	6013      	str	r3, [r2, #0]
			MotorTxData.kp = CM_AnkleJoint.ProsCtrl.kp;
 8002bc2:	4b58      	ldr	r3, [pc, #352]	; (8002d24 <ServiceMotor+0x260>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	4a5c      	ldr	r2, [pc, #368]	; (8002d38 <ServiceMotor+0x274>)
 8002bc8:	6053      	str	r3, [r2, #4]

			if(AKxx_x_WriteMotor(deviceIndex, &MotorTxData, &txMailbox))
 8002bca:	f107 020c 	add.w	r2, r7, #12
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	4959      	ldr	r1, [pc, #356]	; (8002d38 <ServiceMotor+0x274>)
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fcfc 	bl	80035d0 <AKxx_x_WriteMotor>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 809b 	beq.w	8002d16 <ServiceMotor+0x252>
				ErrorHandler(AnkleMotorError);
 8002be0:	2002      	movs	r0, #2
 8002be2:	f7ff f9a7 	bl	8001f34 <ErrorHandler>
			if(AKxx_x_WriteMotor(deviceIndex, &MotorTxData, &txMailbox))
 8002be6:	e096      	b.n	8002d16 <ServiceMotor+0x252>
		}
		else
			if(AKxx_x_EnterMotorCtrlMode(deviceIndex, &txMailbox))
 8002be8:	f107 020c 	add.w	r2, r7, #12
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fd0d 	bl	8003610 <AKxx_x_EnterMotorCtrlMode>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 808c 	beq.w	8002d16 <ServiceMotor+0x252>
				ErrorHandler(AnkleMotorError);
 8002bfe:	2002      	movs	r0, #2
 8002c00:	f7ff f998 	bl	8001f34 <ErrorHandler>
		}
		else
			if(AKxx_x_EnterMotorCtrlMode(deviceIndex, &txMailbox))
				ErrorHandler(KneeMotorError);
	}
}
 8002c04:	e087      	b.n	8002d16 <ServiceMotor+0x252>
	else if(deviceIndex == KneeIndex)
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	f040 8084 	bne.w	8002d16 <ServiceMotor+0x252>
		if(CM_KneeJoint.MotorReadData.error)
 8002c0e:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <ServiceMotor+0x278>)
 8002c10:	7c1b      	ldrb	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <ServiceMotor+0x158>
			ErrorHandler(KneeMotorError);
 8002c16:	2005      	movs	r0, #5
 8002c18:	f7ff f98c 	bl	8001f34 <ErrorHandler>
		CM_KneeJoint.MotorReadData.position = MotorRxData[deviceIndex].position / KNEE_GEAR_RATIO * RAD_TO_DEG - KNEE_POSITION_OFFSET_FROM_EXTENSION_BUMPER;
 8002c1c:	79fa      	ldrb	r2, [r7, #7]
 8002c1e:	4942      	ldr	r1, [pc, #264]	; (8002d28 <ServiceMotor+0x264>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	ed93 7a00 	vldr	s14, [r3]
 8002c30:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002d40 <ServiceMotor+0x27c>
 8002c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c38:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d2c <ServiceMotor+0x268>
 8002c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c48:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <ServiceMotor+0x278>)
 8002c4a:	edc3 7a01 	vstr	s15, [r3, #4]
		CM_KneeJoint.MotorReadData.speed = MotorRxData[deviceIndex].speed / KNEE_GEAR_RATIO * RAD_TO_DEG;
 8002c4e:	79fa      	ldrb	r2, [r7, #7]
 8002c50:	4935      	ldr	r1, [pc, #212]	; (8002d28 <ServiceMotor+0x264>)
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	ed93 7a00 	vldr	s14, [r3]
 8002c62:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002d40 <ServiceMotor+0x27c>
 8002c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c6a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002d2c <ServiceMotor+0x268>
 8002c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c72:	4b32      	ldr	r3, [pc, #200]	; (8002d3c <ServiceMotor+0x278>)
 8002c74:	edc3 7a02 	vstr	s15, [r3, #8]
		CM_KneeJoint.MotorReadData.torque = MotorRxData[deviceIndex].torque * KNEE_GEAR_RATIO ;
 8002c78:	79fa      	ldrb	r2, [r7, #7]
 8002c7a:	492b      	ldr	r1, [pc, #172]	; (8002d28 <ServiceMotor+0x264>)
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	330c      	adds	r3, #12
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002d40 <ServiceMotor+0x27c>
 8002c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <ServiceMotor+0x278>)
 8002c96:	edc3 7a03 	vstr	s15, [r3, #12]
		if((testProgram == None) || (testProgram == ImpedanceControl))
 8002c9a:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <ServiceMotor+0x26c>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <ServiceMotor+0x1e6>
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <ServiceMotor+0x26c>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d127      	bne.n	8002cfa <ServiceMotor+0x236>
			MotorTxData.position = (CM_KneeJoint.ProsCtrl.position - KNEE_POSITION_OFFSET_FROM_EXTENSION_BUMPER) * KNEE_GEAR_RATIO * DEG_TO_RAD;
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <ServiceMotor+0x278>)
 8002cac:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cb8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002d40 <ServiceMotor+0x27c>
 8002cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d34 <ServiceMotor+0x270>
 8002cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <ServiceMotor+0x274>)
 8002cca:	edc3 7a02 	vstr	s15, [r3, #8]
			MotorTxData.kd = CM_KneeJoint.ProsCtrl.kd;
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <ServiceMotor+0x278>)
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <ServiceMotor+0x274>)
 8002cd4:	6013      	str	r3, [r2, #0]
			MotorTxData.kp = CM_KneeJoint.ProsCtrl.kp;
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <ServiceMotor+0x278>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <ServiceMotor+0x274>)
 8002cdc:	6053      	str	r3, [r2, #4]
			if(AKxx_x_WriteMotor(deviceIndex, &MotorTxData, &txMailbox))
 8002cde:	f107 0208 	add.w	r2, r7, #8
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	4914      	ldr	r1, [pc, #80]	; (8002d38 <ServiceMotor+0x274>)
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 fc72 	bl	80035d0 <AKxx_x_WriteMotor>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d011      	beq.n	8002d16 <ServiceMotor+0x252>
				ErrorHandler(KneeMotorError);
 8002cf2:	2005      	movs	r0, #5
 8002cf4:	f7ff f91e 	bl	8001f34 <ErrorHandler>
			if(AKxx_x_WriteMotor(deviceIndex, &MotorTxData, &txMailbox))
 8002cf8:	e00d      	b.n	8002d16 <ServiceMotor+0x252>
			if(AKxx_x_EnterMotorCtrlMode(deviceIndex, &txMailbox))
 8002cfa:	f107 0208 	add.w	r2, r7, #8
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fc84 	bl	8003610 <AKxx_x_EnterMotorCtrlMode>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <ServiceMotor+0x252>
				ErrorHandler(KneeMotorError);
 8002d0e:	2005      	movs	r0, #5
 8002d10:	f7ff f910 	bl	8001f34 <ErrorHandler>
}
 8002d14:	e7ff      	b.n	8002d16 <ServiceMotor+0x252>
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000001 	.word	0x20000001
 8002d24:	20000148 	.word	0x20000148
 8002d28:	200000d0 	.word	0x200000d0
 8002d2c:	42652ebe 	.word	0x42652ebe
 8002d30:	20000142 	.word	0x20000142
 8002d34:	3c8efa4b 	.word	0x3c8efa4b
 8002d38:	200000f8 	.word	0x200000f8
 8002d3c:	20000228 	.word	0x20000228
 8002d40:	408c0000 	.word	0x408c0000

08002d44 <HAL_SPI_TxCpltCallback>:
/*******************************************************************************
* CALLBACKS
*******************************************************************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	imuReadStarted = 1;
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <HAL_SPI_TxCpltCallback+0x1c>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000143 	.word	0x20000143

08002d64 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	imuDataReceived = 1;
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <HAL_SPI_RxCpltCallback+0x1c>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000144 	.word	0x20000144

08002d84 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	AKxx_x_ReadData_t temp;
	if(AKxx_x_ReadMotor(CAN_RX_FIFO0, &temp))
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	4619      	mov	r1, r3
 8002d92:	2000      	movs	r0, #0
 8002d94:	f000 fc0e 	bl	80035b4 <AKxx_x_ReadMotor>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		ErrorHandler(MotorReadError);
 8002d9e:	2006      	movs	r0, #6
 8002da0:	f7ff f8c8 	bl	8001f34 <ErrorHandler>

	CM_AnkleJoint.motorDataReceived = 1;
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	memcpy(&MotorRxData[AnkleIndex], &temp, sizeof(AKxx_x_ReadData_t));
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002dae:	461d      	mov	r5, r3
 8002db0:	f107 040c 	add.w	r4, r7, #12
 8002db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	602b      	str	r3, [r5, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc4:	20000148 	.word	0x20000148
 8002dc8:	200000d0 	.word	0x200000d0

08002dcc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002dcc:	b5b0      	push	{r4, r5, r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	AKxx_x_ReadData_t temp;
	if(AKxx_x_ReadMotor(CAN_RX_FIFO1, &temp))
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	4619      	mov	r1, r3
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f000 fbea 	bl	80035b4 <AKxx_x_ReadMotor>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		ErrorHandler(MotorReadError);
 8002de6:	2006      	movs	r0, #6
 8002de8:	f7ff f8a4 	bl	8001f34 <ErrorHandler>

	CM_KneeJoint.motorDataReceived = 1;
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	memcpy(&MotorRxData[KneeIndex], &temp, sizeof(AKxx_x_ReadData_t));
 8002df4:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8002df6:	f103 0414 	add.w	r4, r3, #20
 8002dfa:	f107 050c 	add.w	r5, r7, #12
 8002dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e02:	682b      	ldr	r3, [r5, #0]
 8002e04:	6023      	str	r3, [r4, #0]
}
 8002e06:	bf00      	nop
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000228 	.word	0x20000228
 8002e14:	200000d0 	.word	0x200000d0

08002e18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	; (8002e90 <MX_SPI1_Init+0x78>)
 8002e20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e22:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e2a:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e4e:	2220      	movs	r2, #32
 8002e50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e66:	2207      	movs	r2, #7
 8002e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e72:	2208      	movs	r2, #8
 8002e74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e76:	4805      	ldr	r0, [pc, #20]	; (8002e8c <MX_SPI1_Init+0x74>)
 8002e78:	f005 fd18 	bl	80088ac <HAL_SPI_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002e82:	f7fe fe6f 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000348 	.word	0x20000348
 8002e90:	40013000 	.word	0x40013000

08002e94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <HAL_SPI_MspInit+0x8c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d130      	bne.n	8002f18 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_SPI_MspInit+0x90>)
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eba:	4a1a      	ldr	r2, [pc, #104]	; (8002f24 <HAL_SPI_MspInit+0x90>)
 8002ebc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ec0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_SPI_MspInit+0x90>)
 8002ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_SPI_MspInit+0x90>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <HAL_SPI_MspInit+0x90>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_SPI_MspInit+0x90>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8002ee6:	23e0      	movs	r3, #224	; 0xe0
 8002ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ef6:	2305      	movs	r3, #5
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efa:	f107 0314 	add.w	r3, r7, #20
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f04:	f005 fa04 	bl	8008310 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	2023      	movs	r0, #35	; 0x23
 8002f0e:	f005 f97a 	bl	8008206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002f12:	2023      	movs	r0, #35	; 0x23
 8002f14:	f005 f993 	bl	800823e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f18:	bf00      	nop
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40013000 	.word	0x40013000
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_SPI_MspDeInit+0x38>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10d      	bne.n	8002f56 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_SPI_MspDeInit+0x3c>)
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_SPI_MspDeInit+0x3c>)
 8002f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f44:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, IMU_SCL_Pin|IMU_MISO_Pin|IMU_MOSI_Pin);
 8002f46:	21e0      	movs	r1, #224	; 0xe0
 8002f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f4c:	f005 fb8a 	bl	8008664 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8002f50:	2023      	movs	r0, #35	; 0x23
 8002f52:	f005 f982 	bl	800825a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40013000 	.word	0x40013000
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_MspInit+0x44>)
 8002f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f72:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <HAL_MspInit+0x44>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6613      	str	r3, [r2, #96]	; 0x60
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <HAL_MspInit+0x44>)
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_MspInit+0x44>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <HAL_MspInit+0x44>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6593      	str	r3, [r2, #88]	; 0x58
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_MspInit+0x44>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000

08002fb0 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f043 0202 	orr.w	r2, r3, #2
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	605a      	str	r2, [r3, #4]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d101      	bne.n	8002fe8 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ffa:	e7fe      	b.n	8002ffa <NMI_Handler+0x4>

08002ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <HardFault_Handler+0x4>

08003002 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003006:	e7fe      	b.n	8003006 <MemManage_Handler+0x4>

08003008 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800300c:	e7fe      	b.n	800300c <BusFault_Handler+0x4>

0800300e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003012:	e7fe      	b.n	8003012 <UsageFault_Handler+0x4>

08003014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003042:	f004 f917 	bl	8007274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <CAN1_RX0_IRQHandler+0x10>)
 8003052:	f004 fdb3 	bl	8007bbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200000a4 	.word	0x200000a4

08003060 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <CAN1_RX1_IRQHandler+0x10>)
 8003066:	f004 fda9 	bl	8007bbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200000a4 	.word	0x200000a4

08003074 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KNEE_IMU_INT_Pin);
 8003078:	2020      	movs	r0, #32
 800307a:	f005 fbff 	bl	800887c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <TIM2_IRQHandler+0x10>)
 800308a:	f007 f959 	bl	800a340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200003ac 	.word	0x200003ac

08003098 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <SPI1_IRQHandler+0x10>)
 800309e:	f006 fb6f 	bl	8009780 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000348 	.word	0x20000348

080030ac <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0

/******************************************************************************
* USER ADDED LPTIM2_IRQHANDLER
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 80030b0:	4806      	ldr	r0, [pc, #24]	; (80030cc <LPTIM2_IRQHandler+0x20>)
 80030b2:	f7ff ff8d 	bl	8002fd0 <LL_LPTIM_IsActiveFlag_ARRM>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <LPTIM2_IRQHandler+0x24>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 80030c2:	4802      	ldr	r0, [pc, #8]	; (80030cc <LPTIM2_IRQHandler+0x20>)
 80030c4:	f7ff ff74 	bl	8002fb0 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40009400 	.word	0x40009400
 80030d0:	200000cc 	.word	0x200000cc

080030d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <SystemInit+0x20>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <SystemInit+0x20>)
 80030e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030fe:	f107 0310 	add.w	r3, r7, #16
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <MX_TIM2_Init+0x98>)
 8003118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800311c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800311e:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <MX_TIM2_Init+0x98>)
 8003120:	224f      	movs	r2, #79	; 0x4f
 8003122:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <MX_TIM2_Init+0x98>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <MX_TIM2_Init+0x98>)
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003132:	4b17      	ldr	r3, [pc, #92]	; (8003190 <MX_TIM2_Init+0x98>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003138:	4b15      	ldr	r3, [pc, #84]	; (8003190 <MX_TIM2_Init+0x98>)
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800313e:	4814      	ldr	r0, [pc, #80]	; (8003190 <MX_TIM2_Init+0x98>)
 8003140:	f007 f83f 	bl	800a1c2 <HAL_TIM_Base_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800314a:	f7fe fd0b 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800314e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003152:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	4619      	mov	r1, r3
 800315a:	480d      	ldr	r0, [pc, #52]	; (8003190 <MX_TIM2_Init+0x98>)
 800315c:	f007 fa0f 	bl	800a57e <HAL_TIM_ConfigClockSource>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003166:	f7fe fcfd 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	4619      	mov	r1, r3
 8003176:	4806      	ldr	r0, [pc, #24]	; (8003190 <MX_TIM2_Init+0x98>)
 8003178:	f007 fc30 	bl	800a9dc <HAL_TIMEx_MasterConfigSynchronization>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003182:	f7fe fcef 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003186:	bf00      	nop
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200003ac 	.word	0x200003ac

08003194 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a4:	d113      	bne.n	80031ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_TIM_Base_MspInit+0x44>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <HAL_TIM_Base_MspInit+0x44>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6593      	str	r3, [r2, #88]	; 0x58
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_TIM_Base_MspInit+0x44>)
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2102      	movs	r1, #2
 80031c2:	201c      	movs	r0, #28
 80031c4:	f005 f81f 	bl	8008206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031c8:	201c      	movs	r0, #28
 80031ca:	f005 f838 	bl	800823e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	00000000 	.word	0x00000000

080031e0 <QuaternionsToYPR>:

	return globalAngle;
}

void QuaternionsToYPR(float r, float i, float j, float k, float *yaw, float *pitch, float *roll)
{
 80031e0:	b5b0      	push	{r4, r5, r7, lr}
 80031e2:	b08e      	sub	sp, #56	; 0x38
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	ed87 0a07 	vstr	s0, [r7, #28]
 80031ea:	edc7 0a06 	vstr	s1, [r7, #24]
 80031ee:	ed87 1a05 	vstr	s2, [r7, #20]
 80031f2:	edc7 1a04 	vstr	s3, [r7, #16]
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
	float siny_cosp = 2 * (r * k + i * j);
 80031fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003200:	edd7 7a04 	vldr	s15, [r7, #16]
 8003204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003208:	edd7 6a06 	vldr	s13, [r7, #24]
 800320c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800321c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float cosy_cosp = 1 - 2 * (j * j + k * k);
 8003220:	edd7 7a05 	vldr	s15, [r7, #20]
 8003224:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003228:	edd7 7a04 	vldr	s15, [r7, #16]
 800322c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003234:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800323c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003240:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	*yaw = atan2(siny_cosp, cosy_cosp);
 8003244:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003246:	f7fd f923 	bl	8000490 <__aeabi_f2d>
 800324a:	4604      	mov	r4, r0
 800324c:	460d      	mov	r5, r1
 800324e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003250:	f7fd f91e 	bl	8000490 <__aeabi_f2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	ec43 2b11 	vmov	d1, r2, r3
 800325c:	ec45 4b10 	vmov	d0, r4, r5
 8003260:	f008 f91b 	bl	800b49a <atan2>
 8003264:	ec53 2b10 	vmov	r2, r3, d0
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f7fd fc18 	bl	8000aa0 <__aeabi_d2f>
 8003270:	4602      	mov	r2, r0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	601a      	str	r2, [r3, #0]

	float sinp = sqrt(1 + 2 * (r * j - i * k));
 8003276:	ed97 7a07 	vldr	s14, [r7, #28]
 800327a:	edd7 7a05 	vldr	s15, [r7, #20]
 800327e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003282:	edd7 6a06 	vldr	s13, [r7, #24]
 8003286:	edd7 7a04 	vldr	s15, [r7, #16]
 800328a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003292:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800329a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800329e:	ee17 0a90 	vmov	r0, s15
 80032a2:	f7fd f8f5 	bl	8000490 <__aeabi_f2d>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	ec43 2b10 	vmov	d0, r2, r3
 80032ae:	f008 f8f6 	bl	800b49e <sqrt>
 80032b2:	ec53 2b10 	vmov	r2, r3, d0
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	f7fd fbf1 	bl	8000aa0 <__aeabi_d2f>
 80032be:	4603      	mov	r3, r0
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float cosp = sqrt(1 - 2 * (r * j - i * k));
 80032c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80032c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80032ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80032d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80032d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ea:	ee17 0a90 	vmov	r0, s15
 80032ee:	f7fd f8cf 	bl	8000490 <__aeabi_f2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	ec43 2b10 	vmov	d0, r2, r3
 80032fa:	f008 f8d0 	bl	800b49e <sqrt>
 80032fe:	ec53 2b10 	vmov	r2, r3, d0
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	f7fd fbcb 	bl	8000aa0 <__aeabi_d2f>
 800330a:	4603      	mov	r3, r0
 800330c:	62bb      	str	r3, [r7, #40]	; 0x28
    *pitch = 2 * atan2(sinp, cosp) - M_PI / 2;
 800330e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003310:	f7fd f8be 	bl	8000490 <__aeabi_f2d>
 8003314:	4604      	mov	r4, r0
 8003316:	460d      	mov	r5, r1
 8003318:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800331a:	f7fd f8b9 	bl	8000490 <__aeabi_f2d>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	ec43 2b11 	vmov	d1, r2, r3
 8003326:	ec45 4b10 	vmov	d0, r4, r5
 800332a:	f008 f8b6 	bl	800b49a <atan2>
 800332e:	ec51 0b10 	vmov	r0, r1, d0
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	f7fc ff4d 	bl	80001d4 <__adddf3>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4610      	mov	r0, r2
 8003340:	4619      	mov	r1, r3
 8003342:	a327      	add	r3, pc, #156	; (adr r3, 80033e0 <QuaternionsToYPR+0x200>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f7fc ff42 	bl	80001d0 <__aeabi_dsub>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	f7fd fba4 	bl	8000aa0 <__aeabi_d2f>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	601a      	str	r2, [r3, #0]

    float sinr_cosp = 2 * (r * i + j * k);
 800335e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003362:	edd7 7a06 	vldr	s15, [r7, #24]
 8003366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800336a:	edd7 6a05 	vldr	s13, [r7, #20]
 800336e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800337e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosr_cosp = 1 - 2 * (i * i + j * j);
 8003382:	edd7 7a06 	vldr	s15, [r7, #24]
 8003386:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800338a:	edd7 7a05 	vldr	s15, [r7, #20]
 800338e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003396:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800339a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800339e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a2:	edc7 7a08 	vstr	s15, [r7, #32]
    *roll = atan2(sinr_cosp, cosr_cosp);
 80033a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033a8:	f7fd f872 	bl	8000490 <__aeabi_f2d>
 80033ac:	4604      	mov	r4, r0
 80033ae:	460d      	mov	r5, r1
 80033b0:	6a38      	ldr	r0, [r7, #32]
 80033b2:	f7fd f86d 	bl	8000490 <__aeabi_f2d>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	ec43 2b11 	vmov	d1, r2, r3
 80033be:	ec45 4b10 	vmov	d0, r4, r5
 80033c2:	f008 f86a 	bl	800b49a <atan2>
 80033c6:	ec53 2b10 	vmov	r2, r3, d0
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	f7fd fb67 	bl	8000aa0 <__aeabi_d2f>
 80033d2:	4602      	mov	r2, r0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	601a      	str	r2, [r3, #0]
}
 80033d8:	bf00      	nop
 80033da:	3738      	adds	r7, #56	; 0x38
 80033dc:	46bd      	mov	sp, r7
 80033de:	bdb0      	pop	{r4, r5, r7, pc}
 80033e0:	54442d18 	.word	0x54442d18
 80033e4:	3ff921fb 	.word	0x3ff921fb

080033e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80033e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003420 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033ec:	f7ff fe72 	bl	80030d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033f0:	480c      	ldr	r0, [pc, #48]	; (8003424 <LoopForever+0x6>)
  ldr r1, =_edata
 80033f2:	490d      	ldr	r1, [pc, #52]	; (8003428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033f4:	4a0d      	ldr	r2, [pc, #52]	; (800342c <LoopForever+0xe>)
  movs r3, #0
 80033f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033f8:	e002      	b.n	8003400 <LoopCopyDataInit>

080033fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033fe:	3304      	adds	r3, #4

08003400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003404:	d3f9      	bcc.n	80033fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003406:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003408:	4c0a      	ldr	r4, [pc, #40]	; (8003434 <LoopForever+0x16>)
  movs r3, #0
 800340a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800340c:	e001      	b.n	8003412 <LoopFillZerobss>

0800340e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800340e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003410:	3204      	adds	r2, #4

08003412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003414:	d3fb      	bcc.n	800340e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003416:	f007 fe5d 	bl	800b0d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800341a:	f7fe fa0d 	bl	8001838 <main>

0800341e <LoopForever>:

LoopForever:
    b LoopForever
 800341e:	e7fe      	b.n	800341e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003420:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003428:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800342c:	0800bd50 	.word	0x0800bd50
  ldr r2, =_sbss
 8003430:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003434:	200013c8 	.word	0x200013c8

08003438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003438:	e7fe      	b.n	8003438 <ADC1_2_IRQHandler>
	...

0800343c <AKxx_x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

AKxx_x_Error_e AKxx_x_Init(uint8_t deviceIndex, AKxx_x_Init_t *Device_Init)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	6039      	str	r1, [r7, #0]
 8003446:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex >= AKXX_X_NUMBER_OF_DEVICES)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d900      	bls.n	8003450 <AKxx_x_Init+0x14>
		while(1);
 800344e:	e7fe      	b.n	800344e <AKxx_x_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(AKxx_x_Init_t));
 8003450:	79fa      	ldrb	r2, [r7, #7]
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4a4e      	ldr	r2, [pc, #312]	; (8003594 <AKxx_x_Init+0x158>)
 800345c:	4413      	add	r3, r2
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	601a      	str	r2, [r3, #0]

	if(HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING))	// Polling is used for initialization
 8003464:	2112      	movs	r1, #18
 8003466:	484c      	ldr	r0, [pc, #304]	; (8003598 <AKxx_x_Init+0x15c>)
 8003468:	f004 fb81 	bl	8007b6e <HAL_CAN_DeactivateNotification>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <AKxx_x_Init+0x3a>
		return AKxx_x_InitError;
 8003472:	2301      	movs	r3, #1
 8003474:	e089      	b.n	800358a <AKxx_x_Init+0x14e>

	uint32_t txMailbox;
	if(EnterMotorCtrlMode(deviceIndex, &txMailbox))
 8003476:	f107 021c 	add.w	r2, r7, #28
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fa36 	bl	80038f0 <EnterMotorCtrlMode>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <AKxx_x_Init+0x52>
		return AKxx_x_InitError;
 800348a:	2301      	movs	r3, #1
 800348c:	e07d      	b.n	800358a <AKxx_x_Init+0x14e>
	if(AKxx_x_PollTxMessagePendingWith10msTimeout(txMailbox))
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f967 	bl	8003764 <AKxx_x_PollTxMessagePendingWith10msTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <AKxx_x_Init+0x64>
		return AKxx_x_InitError;
 800349c:	2301      	movs	r3, #1
 800349e:	e074      	b.n	800358a <AKxx_x_Init+0x14e>

	AKxx_x_ReadData_t RxData_Float;
	if(AKxx_x_PollMotorReadWith10msTimeout(&RxData_Float))
 80034a0:	f107 0308 	add.w	r3, r7, #8
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 f985 	bl	80037b4 <AKxx_x_PollMotorReadWith10msTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <AKxx_x_Init+0x78>
		return AKxx_x_InitError;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e06a      	b.n	800358a <AKxx_x_Init+0x14e>

	switch(Device[deviceIndex].InitVals.Motor)
 80034b4:	79fa      	ldrb	r2, [r7, #7]
 80034b6:	4937      	ldr	r1, [pc, #220]	; (8003594 <AKxx_x_Init+0x158>)
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3302      	adds	r3, #2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <AKxx_x_Init+0x94>
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d029      	beq.n	8003522 <AKxx_x_Init+0xe6>
 80034ce:	e051      	b.n	8003574 <AKxx_x_Init+0x138>
	{
	case AK70_10:
		Device[deviceIndex].speedMax = 50.0f;
 80034d0:	79fa      	ldrb	r2, [r7, #7]
 80034d2:	4930      	ldr	r1, [pc, #192]	; (8003594 <AKxx_x_Init+0x158>)
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	440b      	add	r3, r1
 80034de:	3304      	adds	r3, #4
 80034e0:	4a2e      	ldr	r2, [pc, #184]	; (800359c <AKxx_x_Init+0x160>)
 80034e2:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].speedMin = -50.0f;
 80034e4:	79fa      	ldrb	r2, [r7, #7]
 80034e6:	492b      	ldr	r1, [pc, #172]	; (8003594 <AKxx_x_Init+0x158>)
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	440b      	add	r3, r1
 80034f2:	3308      	adds	r3, #8
 80034f4:	4a2a      	ldr	r2, [pc, #168]	; (80035a0 <AKxx_x_Init+0x164>)
 80034f6:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMax = 25.0f;
 80034f8:	79fa      	ldrb	r2, [r7, #7]
 80034fa:	4926      	ldr	r1, [pc, #152]	; (8003594 <AKxx_x_Init+0x158>)
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	330c      	adds	r3, #12
 8003508:	4a26      	ldr	r2, [pc, #152]	; (80035a4 <AKxx_x_Init+0x168>)
 800350a:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMin = -25.0f;
 800350c:	79fa      	ldrb	r2, [r7, #7]
 800350e:	4921      	ldr	r1, [pc, #132]	; (8003594 <AKxx_x_Init+0x158>)
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	440b      	add	r3, r1
 800351a:	3310      	adds	r3, #16
 800351c:	4a22      	ldr	r2, [pc, #136]	; (80035a8 <AKxx_x_Init+0x16c>)
 800351e:	601a      	str	r2, [r3, #0]
		break;
 8003520:	e028      	b.n	8003574 <AKxx_x_Init+0x138>
	case AK80_9:
		Device[deviceIndex].speedMax = 50.0f;
 8003522:	79fa      	ldrb	r2, [r7, #7]
 8003524:	491b      	ldr	r1, [pc, #108]	; (8003594 <AKxx_x_Init+0x158>)
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	440b      	add	r3, r1
 8003530:	3304      	adds	r3, #4
 8003532:	4a1a      	ldr	r2, [pc, #104]	; (800359c <AKxx_x_Init+0x160>)
 8003534:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].speedMin = -50.0f;
 8003536:	79fa      	ldrb	r2, [r7, #7]
 8003538:	4916      	ldr	r1, [pc, #88]	; (8003594 <AKxx_x_Init+0x158>)
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	3308      	adds	r3, #8
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <AKxx_x_Init+0x164>)
 8003548:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMax = 18.0f;
 800354a:	79fa      	ldrb	r2, [r7, #7]
 800354c:	4911      	ldr	r1, [pc, #68]	; (8003594 <AKxx_x_Init+0x158>)
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	440b      	add	r3, r1
 8003558:	330c      	adds	r3, #12
 800355a:	4a14      	ldr	r2, [pc, #80]	; (80035ac <AKxx_x_Init+0x170>)
 800355c:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMin = -18.0f;
 800355e:	79fa      	ldrb	r2, [r7, #7]
 8003560:	490c      	ldr	r1, [pc, #48]	; (8003594 <AKxx_x_Init+0x158>)
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	3310      	adds	r3, #16
 800356e:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <AKxx_x_Init+0x174>)
 8003570:	601a      	str	r2, [r3, #0]
		break;
 8003572:	bf00      	nop
	}

	Device[deviceIndex].isInit = 1;
 8003574:	79fa      	ldrb	r2, [r7, #7]
 8003576:	4907      	ldr	r1, [pc, #28]	; (8003594 <AKxx_x_Init+0x158>)
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	440b      	add	r3, r1
 8003582:	3314      	adds	r3, #20
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]

	return AKxx_x_NoError;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200003f8 	.word	0x200003f8
 8003598:	200000a4 	.word	0x200000a4
 800359c:	42480000 	.word	0x42480000
 80035a0:	c2480000 	.word	0xc2480000
 80035a4:	41c80000 	.word	0x41c80000
 80035a8:	c1c80000 	.word	0xc1c80000
 80035ac:	41900000 	.word	0x41900000
 80035b0:	c1900000 	.word	0xc1900000

080035b4 <AKxx_x_ReadMotor>:

AKxx_x_Error_e AKxx_x_ReadMotor(uint32_t rxFifo, AKxx_x_ReadData_t *RxData_Float)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
	return ReadData(rxFifo, RxData_Float);
 80035be:	6839      	ldr	r1, [r7, #0]
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f93d 	bl	8003840 <ReadData>
 80035c6:	4603      	mov	r3, r0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <AKxx_x_WriteMotor>:

AKxx_x_Error_e AKxx_x_WriteMotor(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float, uint32_t *txMailbox)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	73fb      	strb	r3, [r7, #15]
	if(!Device[deviceIndex].isInit)
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	490a      	ldr	r1, [pc, #40]	; (800360c <AKxx_x_WriteMotor+0x3c>)
 80035e2:	4613      	mov	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4413      	add	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	440b      	add	r3, r1
 80035ec:	3314      	adds	r3, #20
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d100      	bne.n	80035f6 <AKxx_x_WriteMotor+0x26>
		while(1);
 80035f4:	e7fe      	b.n	80035f4 <AKxx_x_WriteMotor+0x24>

	return WriteData(deviceIndex, TxData_Float, txMailbox);
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 f93f 	bl	8003880 <WriteData>
 8003602:	4603      	mov	r3, r0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	200003f8 	.word	0x200003f8

08003610 <AKxx_x_EnterMotorCtrlMode>:

AKxx_x_Error_e AKxx_x_EnterMotorCtrlMode(uint8_t deviceIndex, uint32_t *txMailbox)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 800361c:	79fa      	ldrb	r2, [r7, #7]
 800361e:	490a      	ldr	r1, [pc, #40]	; (8003648 <AKxx_x_EnterMotorCtrlMode+0x38>)
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	440b      	add	r3, r1
 800362a:	3314      	adds	r3, #20
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d100      	bne.n	8003634 <AKxx_x_EnterMotorCtrlMode+0x24>
		while(1);
 8003632:	e7fe      	b.n	8003632 <AKxx_x_EnterMotorCtrlMode+0x22>

	return EnterMotorCtrlMode(deviceIndex, txMailbox);
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	6839      	ldr	r1, [r7, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f959 	bl	80038f0 <EnterMotorCtrlMode>
 800363e:	4603      	mov	r3, r0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200003f8 	.word	0x200003f8

0800364c <AKxx_x_ExitMotorCtrlMode>:

AKxx_x_Error_e AKxx_x_ExitMotorCtrlMode(uint8_t deviceIndex, uint32_t *txMailbox)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	6039      	str	r1, [r7, #0]
 8003656:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8003658:	79fa      	ldrb	r2, [r7, #7]
 800365a:	491c      	ldr	r1, [pc, #112]	; (80036cc <AKxx_x_ExitMotorCtrlMode+0x80>)
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	3314      	adds	r3, #20
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d100      	bne.n	8003670 <AKxx_x_ExitMotorCtrlMode+0x24>
		while(1);
 800366e:	e7fe      	b.n	800366e <AKxx_x_ExitMotorCtrlMode+0x22>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 8003670:	2308      	movs	r3, #8
 8003672:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8003678:	2300      	movs	r3, #0
 800367a:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 8003680:	79fa      	ldrb	r2, [r7, #7]
 8003682:	4912      	ldr	r1, [pc, #72]	; (80036cc <AKxx_x_ExitMotorCtrlMode+0x80>)
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFD};
 8003698:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <AKxx_x_ExitMotorCtrlMode+0x84>)
 800369a:	f107 0308 	add.w	r3, r7, #8
 800369e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036a2:	e883 0003 	stmia.w	r3, {r0, r1}
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, txMailbox) != HAL_OK)
 80036a6:	f107 0208 	add.w	r2, r7, #8
 80036aa:	f107 0110 	add.w	r1, r7, #16
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	4808      	ldr	r0, [pc, #32]	; (80036d4 <AKxx_x_ExitMotorCtrlMode+0x88>)
 80036b2:	f004 f808 	bl	80076c6 <HAL_CAN_AddTxMessage>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <AKxx_x_ExitMotorCtrlMode+0x74>
		return AKxx_x_ExitMotorCtrlModeError;
 80036bc:	2303      	movs	r3, #3
 80036be:	e000      	b.n	80036c2 <AKxx_x_ExitMotorCtrlMode+0x76>

	return AKxx_x_NoError;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3728      	adds	r7, #40	; 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200003f8 	.word	0x200003f8
 80036d0:	0800b808 	.word	0x0800b808
 80036d4:	200000a4 	.word	0x200000a4

080036d8 <AKxx_x_ZeroMotorPosition>:

AKxx_x_Error_e AKxx_x_ZeroMotorPosition(uint8_t deviceIndex, uint32_t *txMailbox)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	; 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 80036e4:	79fa      	ldrb	r2, [r7, #7]
 80036e6:	491c      	ldr	r1, [pc, #112]	; (8003758 <AKxx_x_ZeroMotorPosition+0x80>)
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	440b      	add	r3, r1
 80036f2:	3314      	adds	r3, #20
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d100      	bne.n	80036fc <AKxx_x_ZeroMotorPosition+0x24>
		while(1);
 80036fa:	e7fe      	b.n	80036fa <AKxx_x_ZeroMotorPosition+0x22>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 80036fc:	2308      	movs	r3, #8
 80036fe:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8003704:	2300      	movs	r3, #0
 8003706:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 800370c:	79fa      	ldrb	r2, [r7, #7]
 800370e:	4912      	ldr	r1, [pc, #72]	; (8003758 <AKxx_x_ZeroMotorPosition+0x80>)
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	440b      	add	r3, r1
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 800371e:	2300      	movs	r3, #0
 8003720:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFE};
 8003724:	4a0d      	ldr	r2, [pc, #52]	; (800375c <AKxx_x_ZeroMotorPosition+0x84>)
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800372e:	e883 0003 	stmia.w	r3, {r0, r1}
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, txMailbox) != HAL_OK)
 8003732:	f107 0208 	add.w	r2, r7, #8
 8003736:	f107 0110 	add.w	r1, r7, #16
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	4808      	ldr	r0, [pc, #32]	; (8003760 <AKxx_x_ZeroMotorPosition+0x88>)
 800373e:	f003 ffc2 	bl	80076c6 <HAL_CAN_AddTxMessage>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <AKxx_x_ZeroMotorPosition+0x74>
		return AKxx_x_ZeroMotorPositionError;
 8003748:	2304      	movs	r3, #4
 800374a:	e000      	b.n	800374e <AKxx_x_ZeroMotorPosition+0x76>

	return AKxx_x_NoError;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3728      	adds	r7, #40	; 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	200003f8 	.word	0x200003f8
 800375c:	0800b810 	.word	0x0800b810
 8003760:	200000a4 	.word	0x200000a4

08003764 <AKxx_x_PollTxMessagePendingWith10msTimeout>:

AKxx_x_Error_e AKxx_x_PollTxMessagePendingWith10msTimeout(uint32_t txMailbox)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	uint8_t timeoutOccurred = 1;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
	uint32_t tickStart = HAL_GetTick();
 8003770:	f003 fd94 	bl	800729c <HAL_GetTick>
 8003774:	60b8      	str	r0, [r7, #8]
	while ((HAL_GetTick() - tickStart) < 10U)
 8003776:	e009      	b.n	800378c <AKxx_x_PollTxMessagePendingWith10msTimeout+0x28>
	{
		if(!HAL_CAN_IsTxMessagePending(&hcan1, txMailbox))
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <AKxx_x_PollTxMessagePendingWith10msTimeout+0x4c>)
 800377c:	f004 f873 	bl	8007866 <HAL_CAN_IsTxMessagePending>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <AKxx_x_PollTxMessagePendingWith10msTimeout+0x28>
		{
			timeoutOccurred = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
			break;
 800378a:	e006      	b.n	800379a <AKxx_x_PollTxMessagePendingWith10msTimeout+0x36>
	while ((HAL_GetTick() - tickStart) < 10U)
 800378c:	f003 fd86 	bl	800729c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b09      	cmp	r3, #9
 8003798:	d9ee      	bls.n	8003778 <AKxx_x_PollTxMessagePendingWith10msTimeout+0x14>
		}
	}

	if(timeoutOccurred)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <AKxx_x_PollTxMessagePendingWith10msTimeout+0x40>
		return AKxx_x_PollTxMessagePendingWithTimeoutError;
 80037a0:	2306      	movs	r3, #6
 80037a2:	e000      	b.n	80037a6 <AKxx_x_PollTxMessagePendingWith10msTimeout+0x42>

	return AKxx_x_NoError;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200000a4 	.word	0x200000a4

080037b4 <AKxx_x_PollMotorReadWith10msTimeout>:

AKxx_x_Error_e AKxx_x_PollMotorReadWith10msTimeout(AKxx_x_ReadData_t *RxData_Float)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	uint8_t timeoutOccurred = 1;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
	uint32_t tickStart = HAL_GetTick();
 80037c0:	f003 fd6c 	bl	800729c <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]
	while ((HAL_GetTick() - tickStart) < 10U)
 80037c6:	e023      	b.n	8003810 <AKxx_x_PollMotorReadWith10msTimeout+0x5c>
	{
		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0))
 80037c8:	2100      	movs	r1, #0
 80037ca:	481c      	ldr	r0, [pc, #112]	; (800383c <AKxx_x_PollMotorReadWith10msTimeout+0x88>)
 80037cc:	f004 f981 	bl	8007ad2 <HAL_CAN_GetRxFifoFillLevel>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <AKxx_x_PollMotorReadWith10msTimeout+0x38>
		{
			timeoutOccurred = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
			if(ReadData(CAN_RX_FIFO0, RxData_Float))
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	2000      	movs	r0, #0
 80037de:	f000 f82f 	bl	8003840 <ReadData>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01b      	beq.n	8003820 <AKxx_x_PollMotorReadWith10msTimeout+0x6c>
				return AKxx_x_PollMotorReadWithTimeoutError;
 80037e8:	2305      	movs	r3, #5
 80037ea:	e022      	b.n	8003832 <AKxx_x_PollMotorReadWith10msTimeout+0x7e>
			break;
		}
		else if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1))
 80037ec:	2101      	movs	r1, #1
 80037ee:	4813      	ldr	r0, [pc, #76]	; (800383c <AKxx_x_PollMotorReadWith10msTimeout+0x88>)
 80037f0:	f004 f96f 	bl	8007ad2 <HAL_CAN_GetRxFifoFillLevel>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <AKxx_x_PollMotorReadWith10msTimeout+0x5c>
		{
			timeoutOccurred = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]
			if(ReadData(CAN_RX_FIFO1, RxData_Float))
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	2001      	movs	r0, #1
 8003802:	f000 f81d 	bl	8003840 <ReadData>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <AKxx_x_PollMotorReadWith10msTimeout+0x70>
				return AKxx_x_PollMotorReadWithTimeoutError;
 800380c:	2305      	movs	r3, #5
 800380e:	e010      	b.n	8003832 <AKxx_x_PollMotorReadWith10msTimeout+0x7e>
	while ((HAL_GetTick() - tickStart) < 10U)
 8003810:	f003 fd44 	bl	800729c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b09      	cmp	r3, #9
 800381c:	d9d4      	bls.n	80037c8 <AKxx_x_PollMotorReadWith10msTimeout+0x14>
 800381e:	e002      	b.n	8003826 <AKxx_x_PollMotorReadWith10msTimeout+0x72>
			break;
 8003820:	bf00      	nop
 8003822:	e000      	b.n	8003826 <AKxx_x_PollMotorReadWith10msTimeout+0x72>
			break;
 8003824:	bf00      	nop
		}
	}

	if(timeoutOccurred)
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <AKxx_x_PollMotorReadWith10msTimeout+0x7c>
		return AKxx_x_PollMotorReadWithTimeoutError;
 800382c:	2305      	movs	r3, #5
 800382e:	e000      	b.n	8003832 <AKxx_x_PollMotorReadWith10msTimeout+0x7e>

	return AKxx_x_NoError;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200000a4 	.word	0x200000a4

08003840 <ReadData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static AKxx_x_Error_e ReadData(uint32_t rxFifo, AKxx_x_ReadData_t *RxData_Float)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08c      	sub	sp, #48	; 0x30
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rxData_uint[8];
	if(HAL_CAN_GetRxMessage(&hcan1, rxFifo, &RxHeader, rxData_uint) != HAL_OK)
 800384a:	f107 030c 	add.w	r3, r7, #12
 800384e:	f107 0214 	add.w	r2, r7, #20
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4809      	ldr	r0, [pc, #36]	; (800387c <ReadData+0x3c>)
 8003856:	f004 f82a 	bl	80078ae <HAL_CAN_GetRxMessage>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <ReadData+0x24>
		return AKxx_x_ReadDataError;
 8003860:	2307      	movs	r3, #7
 8003862:	e006      	b.n	8003872 <ReadData+0x32>

	UnpackData(rxData_uint, RxData_Float);
 8003864:	f107 030c 	add.w	r3, r7, #12
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f936 	bl	8003adc <UnpackData>

	return AKxx_x_NoError;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3730      	adds	r7, #48	; 0x30
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200000a4 	.word	0x200000a4

08003880 <WriteData>:

static AKxx_x_Error_e WriteData(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float, uint32_t *txMailbox)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08c      	sub	sp, #48	; 0x30
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	73fb      	strb	r3, [r7, #15]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 800388e:	2308      	movs	r3, #8
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 8003896:	2300      	movs	r3, #0
 8003898:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 800389a:	2300      	movs	r3, #0
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	4911      	ldr	r1, [pc, #68]	; (80038e8 <WriteData+0x68>)
 80038a2:	4613      	mov	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4413      	add	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	440b      	add	r3, r1
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t txData_uint[8];
	PackData(deviceIndex, TxData_Float, txData_uint);
 80038b6:	f107 0210 	add.w	r2, r7, #16
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f850 	bl	8003964 <PackData>

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, txMailbox) != HAL_OK)
 80038c4:	f107 0210 	add.w	r2, r7, #16
 80038c8:	f107 0118 	add.w	r1, r7, #24
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4807      	ldr	r0, [pc, #28]	; (80038ec <WriteData+0x6c>)
 80038d0:	f003 fef9 	bl	80076c6 <HAL_CAN_AddTxMessage>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <WriteData+0x5e>
		return AKxx_x_WriteDataError;
 80038da:	2308      	movs	r3, #8
 80038dc:	e000      	b.n	80038e0 <WriteData+0x60>

	return AKxx_x_NoError;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3730      	adds	r7, #48	; 0x30
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	200003f8 	.word	0x200003f8
 80038ec:	200000a4 	.word	0x200000a4

080038f0 <EnterMotorCtrlMode>:

static AKxx_x_Error_e EnterMotorCtrlMode(uint8_t deviceIndex, uint32_t *txMailbox)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 80038fc:	2308      	movs	r3, #8
 80038fe:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 8003904:	2300      	movs	r3, #0
 8003906:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 800390c:	79fa      	ldrb	r2, [r7, #7]
 800390e:	4912      	ldr	r1, [pc, #72]	; (8003958 <EnterMotorCtrlMode+0x68>)
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 800391e:	2300      	movs	r3, #0
 8003920:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFC};
 8003924:	4a0d      	ldr	r2, [pc, #52]	; (800395c <EnterMotorCtrlMode+0x6c>)
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800392e:	e883 0003 	stmia.w	r3, {r0, r1}
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, txMailbox) != HAL_OK)
 8003932:	f107 0208 	add.w	r2, r7, #8
 8003936:	f107 0110 	add.w	r1, r7, #16
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4808      	ldr	r0, [pc, #32]	; (8003960 <EnterMotorCtrlMode+0x70>)
 800393e:	f003 fec2 	bl	80076c6 <HAL_CAN_AddTxMessage>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <EnterMotorCtrlMode+0x5c>
		return AKxx_x_EnterMotorCtrlModeError;
 8003948:	2302      	movs	r3, #2
 800394a:	e000      	b.n	800394e <EnterMotorCtrlMode+0x5e>

	return AKxx_x_NoError;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3728      	adds	r7, #40	; 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200003f8 	.word	0x200003f8
 800395c:	0800b818 	.word	0x0800b818
 8003960:	200000a4 	.word	0x200000a4

08003964 <PackData>:

static void PackData(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float, uint8_t *txData_uint)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	73fb      	strb	r3, [r7, #15]
	uint16_t position = FloatToUint(TxData_Float->position, -12.5, 12.5, 16);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	edd3 7a02 	vldr	s15, [r3, #8]
 8003978:	2010      	movs	r0, #16
 800397a:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 800397e:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8003982:	eeb0 0a67 	vmov.f32	s0, s15
 8003986:	f000 f9a1 	bl	8003ccc <FloatToUint>
 800398a:	4603      	mov	r3, r0
 800398c:	83fb      	strh	r3, [r7, #30]
	uint16_t speed = FloatToUint(TxData_Float->speed, Device[deviceIndex].speedMin, Device[deviceIndex].speedMax, 12);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	edd3 7a03 	vldr	s15, [r3, #12]
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	494e      	ldr	r1, [pc, #312]	; (8003ad0 <PackData+0x16c>)
 8003998:	4613      	mov	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	4413      	add	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	440b      	add	r3, r1
 80039a2:	3308      	adds	r3, #8
 80039a4:	ed93 7a00 	vldr	s14, [r3]
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	4949      	ldr	r1, [pc, #292]	; (8003ad0 <PackData+0x16c>)
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	440b      	add	r3, r1
 80039b6:	3304      	adds	r3, #4
 80039b8:	edd3 6a00 	vldr	s13, [r3]
 80039bc:	200c      	movs	r0, #12
 80039be:	eeb0 1a66 	vmov.f32	s2, s13
 80039c2:	eef0 0a47 	vmov.f32	s1, s14
 80039c6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ca:	f000 f97f 	bl	8003ccc <FloatToUint>
 80039ce:	4603      	mov	r3, r0
 80039d0:	83bb      	strh	r3, [r7, #28]
	uint16_t torque = FloatToUint(TxData_Float->torque, Device[deviceIndex].torqueMin, Device[deviceIndex].torqueMax, 12);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	493d      	ldr	r1, [pc, #244]	; (8003ad0 <PackData+0x16c>)
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	3310      	adds	r3, #16
 80039e8:	ed93 7a00 	vldr	s14, [r3]
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	4938      	ldr	r1, [pc, #224]	; (8003ad0 <PackData+0x16c>)
 80039f0:	4613      	mov	r3, r2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4413      	add	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	440b      	add	r3, r1
 80039fa:	330c      	adds	r3, #12
 80039fc:	edd3 6a00 	vldr	s13, [r3]
 8003a00:	200c      	movs	r0, #12
 8003a02:	eeb0 1a66 	vmov.f32	s2, s13
 8003a06:	eef0 0a47 	vmov.f32	s1, s14
 8003a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0e:	f000 f95d 	bl	8003ccc <FloatToUint>
 8003a12:	4603      	mov	r3, r0
 8003a14:	837b      	strh	r3, [r7, #26]
	uint16_t kd = FloatToUint(TxData_Float->kd, 0, 5, 12);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	edd3 7a00 	vldr	s15, [r3]
 8003a1c:	200c      	movs	r0, #12
 8003a1e:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8003a22:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8003ad4 <PackData+0x170>
 8003a26:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2a:	f000 f94f 	bl	8003ccc <FloatToUint>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	833b      	strh	r3, [r7, #24]
	uint16_t kp = FloatToUint(TxData_Float->kp, 0, 500, 12);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a38:	200c      	movs	r0, #12
 8003a3a:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8003ad8 <PackData+0x174>
 8003a3e:	eddf 0a25 	vldr	s1, [pc, #148]	; 8003ad4 <PackData+0x170>
 8003a42:	eeb0 0a67 	vmov.f32	s0, s15
 8003a46:	f000 f941 	bl	8003ccc <FloatToUint>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	82fb      	strh	r3, [r7, #22]

	txData_uint[0] = position >> 8;
 8003a4e:	8bfb      	ldrh	r3, [r7, #30]
 8003a50:	0a1b      	lsrs	r3, r3, #8
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	701a      	strb	r2, [r3, #0]
	txData_uint[1] = position & 0xFF;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	8bfa      	ldrh	r2, [r7, #30]
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	701a      	strb	r2, [r3, #0]
	txData_uint[2] = speed >> 4;
 8003a64:	8bbb      	ldrh	r3, [r7, #28]
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]
	txData_uint[3] = ((speed & 0x0F) << 4) | (kp >> 8);
 8003a72:	8bbb      	ldrh	r3, [r7, #28]
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	b25a      	sxtb	r2, r3
 8003a78:	8afb      	ldrh	r3, [r7, #22]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	b25b      	sxtb	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b25a      	sxtb	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3303      	adds	r3, #3
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]
	txData_uint[4] = kp & 0xFF;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	8afa      	ldrh	r2, [r7, #22]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]
	txData_uint[5] = kd >> 4;
 8003a96:	8b3b      	ldrh	r3, [r7, #24]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3305      	adds	r3, #5
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]
	txData_uint[6] = ((kd & 0x0F) << 4) | (torque >> 8);
 8003aa4:	8b3b      	ldrh	r3, [r7, #24]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	b25a      	sxtb	r2, r3
 8003aaa:	8b7b      	ldrh	r3, [r7, #26]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b25a      	sxtb	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3306      	adds	r3, #6
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]
	txData_uint[7] = torque & 0xFF;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3307      	adds	r3, #7
 8003ac2:	8b7a      	ldrh	r2, [r7, #26]
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]
}
 8003ac8:	bf00      	nop
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	200003f8 	.word	0x200003f8
 8003ad4:	00000000 	.word	0x00000000
 8003ad8:	43fa0000 	.word	0x43fa0000

08003adc <UnpackData>:

static void UnpackData(uint8_t *rxData_uint, AKxx_x_ReadData_t *RxData_Float)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
	RxData_Float->canId = rxData_uint[0];
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	701a      	strb	r2, [r3, #0]

	uint16_t position = (rxData_uint[1] << 8) | rxData_uint[2];
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3301      	adds	r3, #1
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	b21a      	sxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3302      	adds	r3, #2
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b21b      	sxth	r3, r3
 8003b00:	4313      	orrs	r3, r2
 8003b02:	b21b      	sxth	r3, r3
 8003b04:	81bb      	strh	r3, [r7, #12]
	uint16_t speed = (rxData_uint[3] << 4) | (rxData_uint[4] >> 4);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3303      	adds	r3, #3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	b21a      	sxth	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	b21b      	sxth	r3, r3
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	b21b      	sxth	r3, r3
 8003b20:	817b      	strh	r3, [r7, #10]
	uint16_t torque = ((rxData_uint[4] & 0x0F) << 8) | rxData_uint[5];
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3304      	adds	r3, #4
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	b21b      	sxth	r3, r3
 8003b2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b30:	b21a      	sxth	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3305      	adds	r3, #5
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b21b      	sxth	r3, r3
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	b21b      	sxth	r3, r3
 8003b3e:	813b      	strh	r3, [r7, #8]

	RxData_Float->error = rxData_uint[7];
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	79da      	ldrb	r2, [r3, #7]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	741a      	strb	r2, [r3, #16]

	uint8_t i;
	for(i = 0; i < AKXX_X_NUMBER_OF_DEVICES; i++)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	73fb      	strb	r3, [r7, #15]
 8003b4c:	e00f      	b.n	8003b6e <UnpackData+0x92>
		if(Device[i].InitVals.canId == RxData_Float->canId)
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	4934      	ldr	r1, [pc, #208]	; (8003c24 <UnpackData+0x148>)
 8003b52:	4613      	mov	r3, r2
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4413      	add	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	440b      	add	r3, r1
 8003b5c:	881a      	ldrh	r2, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d006      	beq.n	8003b76 <UnpackData+0x9a>
	for(i = 0; i < AKXX_X_NUMBER_OF_DEVICES; i++)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d9ec      	bls.n	8003b4e <UnpackData+0x72>
 8003b74:	e000      	b.n	8003b78 <UnpackData+0x9c>
			break;
 8003b76:	bf00      	nop

	RxData_Float->position = UintToFloat(position, -12.5, 12.5, 16);
 8003b78:	89bb      	ldrh	r3, [r7, #12]
 8003b7a:	2110      	movs	r1, #16
 8003b7c:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8003b80:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 f84f 	bl	8003c28 <UintToFloat>
 8003b8a:	eef0 7a40 	vmov.f32	s15, s0
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	edc3 7a01 	vstr	s15, [r3, #4]
	RxData_Float->speed = UintToFloat(speed, Device[i].speedMin, Device[i].speedMax, 12);
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	4923      	ldr	r1, [pc, #140]	; (8003c24 <UnpackData+0x148>)
 8003b98:	4613      	mov	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	491e      	ldr	r1, [pc, #120]	; (8003c24 <UnpackData+0x148>)
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	ed93 7a00 	vldr	s14, [r3]
 8003bbc:	897b      	ldrh	r3, [r7, #10]
 8003bbe:	210c      	movs	r1, #12
 8003bc0:	eef0 0a47 	vmov.f32	s1, s14
 8003bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f82d 	bl	8003c28 <UintToFloat>
 8003bce:	eef0 7a40 	vmov.f32	s15, s0
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	edc3 7a02 	vstr	s15, [r3, #8]
	RxData_Float->torque = UintToFloat(torque, Device[i].torqueMin, Device[i].torqueMax, 12);
 8003bd8:	7bfa      	ldrb	r2, [r7, #15]
 8003bda:	4912      	ldr	r1, [pc, #72]	; (8003c24 <UnpackData+0x148>)
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	440b      	add	r3, r1
 8003be6:	3310      	adds	r3, #16
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	490d      	ldr	r1, [pc, #52]	; (8003c24 <UnpackData+0x148>)
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	ed93 7a00 	vldr	s14, [r3]
 8003c00:	893b      	ldrh	r3, [r7, #8]
 8003c02:	210c      	movs	r1, #12
 8003c04:	eef0 0a47 	vmov.f32	s1, s14
 8003c08:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f80b 	bl	8003c28 <UintToFloat>
 8003c12:	eef0 7a40 	vmov.f32	s15, s0
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	200003f8 	.word	0x200003f8

08003c28 <UintToFloat>:

static float UintToFloat(uint16_t x_uint, float xMin_float, float xMax_float, uint8_t nBits)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c34:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c38:	460a      	mov	r2, r1
 8003c3a:	81fb      	strh	r3, [r7, #14]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	737b      	strb	r3, [r7, #13]
	float offset = xMin_float;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	61bb      	str	r3, [r7, #24]
	float span = xMax_float - xMin_float;
 8003c44:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c48:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c50:	edc7 7a05 	vstr	s15, [r7, #20]
	float x_float;
	if(nBits == 12)
 8003c54:	7b7b      	ldrb	r3, [r7, #13]
 8003c56:	2b0c      	cmp	r3, #12
 8003c58:	d113      	bne.n	8003c82 <UintToFloat+0x5a>
		x_float = (((float)x_uint) * span / 4095.0f) + offset;
 8003c5a:	89fb      	ldrh	r3, [r7, #14]
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c6c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003cc4 <UintToFloat+0x9c>
 8003c70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c74:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c7c:	edc7 7a07 	vstr	s15, [r7, #28]
 8003c80:	e015      	b.n	8003cae <UintToFloat+0x86>
	else if(nBits == 16)
 8003c82:	7b7b      	ldrb	r3, [r7, #13]
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d112      	bne.n	8003cae <UintToFloat+0x86>
		x_float = (((float)x_uint) * span / 65535.0f) + offset;
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c92:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c9a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003cc8 <UintToFloat+0xa0>
 8003c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ca2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003caa:	edc7 7a07 	vstr	s15, [r7, #28]

	return x_float;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	ee07 3a90 	vmov	s15, r3
}
 8003cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb8:	3724      	adds	r7, #36	; 0x24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	457ff000 	.word	0x457ff000
 8003cc8:	477fff00 	.word	0x477fff00

08003ccc <FloatToUint>:

static uint16_t FloatToUint(float x_float, float xMin_float, float xMax_float, uint8_t nBits)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	ed87 0a03 	vstr	s0, [r7, #12]
 8003cd6:	edc7 0a02 	vstr	s1, [r7, #8]
 8003cda:	ed87 1a01 	vstr	s2, [r7, #4]
 8003cde:	4603      	mov	r3, r0
 8003ce0:	70fb      	strb	r3, [r7, #3]
	if(x_float < xMin_float)
 8003ce2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf2:	d501      	bpl.n	8003cf8 <FloatToUint+0x2c>
		x_float = xMin_float;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	60fb      	str	r3, [r7, #12]
	if(x_float > xMax_float)
 8003cf8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d08:	dd01      	ble.n	8003d0e <FloatToUint+0x42>
		x_float = xMax_float;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]

	float offset = xMin_float;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	61bb      	str	r3, [r7, #24]
	float span = xMax_float - xMin_float;
 8003d12:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1e:	edc7 7a05 	vstr	s15, [r7, #20]
	uint16_t x_uint;
	if(nBits == 12)
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d113      	bne.n	8003d50 <FloatToUint+0x84>
		x_uint = (uint16_t)((x_float - offset) * 4095.0f / span);
 8003d28:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d34:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003d8c <FloatToUint+0xc0>
 8003d38:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d48:	ee17 3a90 	vmov	r3, s15
 8003d4c:	83fb      	strh	r3, [r7, #30]
 8003d4e:	e015      	b.n	8003d7c <FloatToUint+0xb0>
	else if(nBits == 16)
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d112      	bne.n	8003d7c <FloatToUint+0xb0>
		x_uint = (uint16_t)((x_float - offset) * 65535.0f / span);
 8003d56:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d62:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003d90 <FloatToUint+0xc4>
 8003d66:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d76:	ee17 3a90 	vmov	r3, s15
 8003d7a:	83fb      	strh	r3, [r7, #30]

	return x_uint;
 8003d7c:	8bfb      	ldrh	r3, [r7, #30]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3724      	adds	r7, #36	; 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	457ff000 	.word	0x457ff000
 8003d90:	477fff00 	.word	0x477fff00

08003d94 <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <opStart+0x18>
 8003da6:	f06f 0302 	mvn.w	r3, #2
 8003daa:	e014      	b.n	8003dd6 <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
 8003dc0:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	61da      	str	r2, [r3, #28]
    }

    return rc;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	4613      	mov	r3, r2
 8003dea:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d006      	beq.n	8003e0c <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	4798      	blx	r3
    }
}
 8003e0c:	bf00      	nop
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00f      	beq.n	8003e68 <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 8003e5c:	e004      	b.n	8003e68 <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 8003e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ffd6 	bl	8003e14 <opCompleted>
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	e00f      	b.n	8003ea0 <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 8003e80:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <getReportLen+0x44>)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003e88:	79fa      	ldrb	r2, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d105      	bne.n	8003e9a <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <getReportLen+0x44>)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	785b      	ldrb	r3, [r3, #1]
 8003e98:	e006      	b.n	8003ea8 <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b2f      	cmp	r3, #47	; 0x2f
 8003ea4:	d9ec      	bls.n	8003e80 <getReportLen+0x10>
        }
    }

    return 0;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	0800b820 	.word	0x0800b820

08003eb8 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	; 0x28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 8094 	bne.w	8004008 <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        return;
 8003eee:	e090      	b.n	8004012 <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 8003ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	4413      	add	r3, r2
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff ffb4 	bl	8003e70 <getReportLen>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 8003f0c:	7dbb      	ldrb	r3, [r7, #22]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d107      	bne.n	8003f22 <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
            return;
 8003f20:	e077      	b.n	8004012 <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2bf1      	cmp	r3, #241	; 0xf1
 8003f26:	d107      	bne.n	8003f38 <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 8003f28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	789b      	ldrb	r3, [r3, #2]
 8003f34:	2b84      	cmp	r3, #132	; 0x84
 8003f36:	e059      	b.n	8003fec <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2bfc      	cmp	r3, #252	; 0xfc
 8003f3c:	d156      	bne.n	8003fec <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d052      	beq.n	8003fec <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 8003f46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 8003f4e:	4b32      	ldr	r3, [pc, #200]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003f50:	2202      	movs	r2, #2
 8003f52:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	785a      	ldrb	r2, [r3, #1]
 8003f58:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003f5a:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	789b      	ldrb	r3, [r3, #2]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 8003f6e:	4b2a      	ldr	r3, [pc, #168]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003f70:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	789b      	ldrb	r3, [r3, #2]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 8003f84:	4b24      	ldr	r3, [pc, #144]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003f86:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	789b      	ldrb	r3, [r3, #2]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003f9c:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	789b      	ldrb	r3, [r3, #2]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003fb2:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003fba:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 8003fbc:	4b16      	ldr	r3, [pc, #88]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003fbe:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 8003fc6:	4a14      	ldr	r2, [pc, #80]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003fc8:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 8003fd0:	4a11      	ldr	r2, [pc, #68]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003fd2:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 8003fda:	4a0f      	ldr	r2, [pc, #60]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003fdc:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fe6:	490c      	ldr	r1, [pc, #48]	; (8004018 <sensorhubControlHdlr+0x160>)
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 8003fec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	7dba      	ldrb	r2, [r7, #22]
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	69f8      	ldr	r0, [r7, #28]
 8003ffa:	f7ff fef0 	bl	8003dde <opRx>
            cursor += reportLen;
 8003ffe:	7dbb      	ldrb	r3, [r7, #22]
 8004000:	b29a      	uxth	r2, r3
 8004002:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004004:	4413      	add	r3, r2
 8004006:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cursor < len) {
 8004008:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	429a      	cmp	r2, r3
 800400e:	f4ff af6f 	bcc.w	8003ef0 <sensorhubControlHdlr+0x38>
        }
    }
}
 8004012:	3728      	adds	r7, #40	; 0x28
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	200005a0 	.word	0x200005a0

0800401c <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	4610      	mov	r0, r2
 800403a:	4798      	blx	r3
 800403c:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 800403e:	6839      	ldr	r1, [r7, #0]
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fea7 	bl	8003d94 <opStart>
 8004046:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <opProcess+0x36>
        return status;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	e034      	b.n	80040bc <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 8004056:	e015      	b.n	8004084 <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f04f 32ff 	mov.w	r2, #4294967295
 8004066:	621a      	str	r2, [r3, #32]
            break;
 8004068:	e01b      	b.n	80040a2 <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4618      	mov	r0, r3
 8004070:	f002 f91b 	bl	80062aa <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	4610      	mov	r0, r2
 8004080:	4798      	blx	r3
 8004082:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0e1      	beq.n	8004058 <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad2      	subs	r2, r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d3da      	bcc.n	8004058 <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f06f 0205 	mvn.w	r2, #5
 80040b6:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 80040c4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80040c8:	b087      	sub	sp, #28
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	4613      	mov	r3, r2
 80040d2:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <touSTimestamp+0x80>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d204      	bcs.n	80040e8 <touSTimestamp+0x24>
        rollovers++;
 80040de:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <touSTimestamp+0x84>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	4a18      	ldr	r2, [pc, #96]	; (8004148 <touSTimestamp+0x84>)
 80040e6:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 80040e8:	4a16      	ldr	r2, [pc, #88]	; (8004144 <touSTimestamp+0x80>)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <touSTimestamp+0x84>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	469a      	mov	sl, r3
 80040f6:	4693      	mov	fp, r2
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	4653      	mov	r3, sl
 8004102:	2200      	movs	r2, #0
 8004104:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 8004108:	88fa      	ldrh	r2, [r7, #6]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4413      	add	r3, r2
 800410e:	2264      	movs	r2, #100	; 0x64
 8004110:	fb02 f303 	mul.w	r3, r2, r3
 8004114:	461a      	mov	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	2200      	movs	r2, #0
 800411c:	461c      	mov	r4, r3
 800411e:	4615      	mov	r5, r2
 8004120:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004124:	eb12 0804 	adds.w	r8, r2, r4
 8004128:	eb43 0905 	adc.w	r9, r3, r5
 800412c:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 8004130:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004134:	4610      	mov	r0, r2
 8004136:	4619      	mov	r1, r3
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	200005bc 	.word	0x200005bc
 8004148:	200005c0 	.word	0x200005c0

0800414c <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 800414c:	b5b0      	push	{r4, r5, r7, lr}
 800414e:	b0a0      	sub	sp, #128	; 0x80
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    int32_t referenceDelta = 0;
 8004162:	2300      	movs	r3, #0
 8004164:	67bb      	str	r3, [r7, #120]	; 0x78

    while (cursor < len) {
 8004166:	e099      	b.n	800429c <sensorhubInputHdlr+0x150>
        // Get next report id
        uint8_t reportId = payload[cursor];
 8004168:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	4413      	add	r3, r2
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8004176:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fe78 	bl	8003e70 <getReportLen>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        if (reportLen == 0) {
 8004186:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 800419c:	e084      	b.n	80042a8 <sensorhubInputHdlr+0x15c>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 800419e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80041a2:	2bfb      	cmp	r3, #251	; 0xfb
 80041a4:	d10a      	bne.n	80041bc <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 80041a6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	4413      	add	r3, r2
 80041ae:	667b      	str	r3, [r7, #100]	; 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 80041b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b2:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80041b6:	425b      	negs	r3, r3
 80041b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ba:	e067      	b.n	800428c <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 80041bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80041c0:	2bfa      	cmp	r3, #250	; 0xfa
 80041c2:	d10b      	bne.n	80041dc <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 80041c4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	4413      	add	r3, r2
 80041cc:	66bb      	str	r3, [r7, #104]	; 0x68

                referenceDelta += rpt->timebase;
 80041ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041d0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80041d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041d6:	4413      	add	r3, r2
 80041d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041da:	e057      	b.n	800428c <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 80041dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80041e0:	2bef      	cmp	r3, #239	; 0xef
 80041e2:	d10b      	bne.n	80041fc <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 80041e4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	4413      	add	r3, r2
 80041ec:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 80041f0:	b292      	uxth	r2, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7ff fdf2 	bl	8003dde <opRx>
 80041fa:	e047      	b.n	800428c <sensorhubInputHdlr+0x140>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 80041fc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	4413      	add	r3, r2
 8004204:	673b      	str	r3, [r7, #112]	; 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 8004206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004208:	3302      	adds	r3, #2
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	019b      	lsls	r3, r3, #6
 800420e:	b29b      	uxth	r3, r3
 8004210:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004214:	b29a      	uxth	r2, r3
 8004216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004218:	3303      	adds	r3, #3
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	4413      	add	r3, r2
 8004220:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 8004224:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004228:	461a      	mov	r2, r3
 800422a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800422c:	6838      	ldr	r0, [r7, #0]
 800422e:	f7ff ff49 	bl	80040c4 <touSTimestamp>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 800423a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800423e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004240:	4413      	add	r3, r2
 8004242:	2264      	movs	r2, #100	; 0x64
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	17da      	asrs	r2, r3, #31
 800424a:	461c      	mov	r4, r3
 800424c:	4615      	mov	r5, r2
 800424e:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 8004252:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004256:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                memcpy(event.report, pReport, reportLen);
 800425a:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800425e:	f107 0310 	add.w	r3, r7, #16
 8004262:	3312      	adds	r3, #18
 8004264:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8004266:	4618      	mov	r0, r3
 8004268:	f006 ff58 	bl	800b11c <memcpy>
                event.len = reportLen;
 800426c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004270:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <sensorhubInputHdlr+0x140>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004284:	f107 0110 	add.w	r1, r7, #16
 8004288:	4610      	mov	r0, r2
 800428a:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 800428c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004290:	b29a      	uxth	r2, r3
 8004292:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8004296:	4413      	add	r3, r2
 8004298:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    while (cursor < len) {
 800429c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	f4ff af60 	bcc.w	8004168 <sensorhubInputHdlr+0x1c>
        }
    }
}
 80042a8:	3780      	adds	r7, #128	; 0x80
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bdb0      	pop	{r4, r5, r7, pc}

080042ae <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	6978      	ldr	r0, [r7, #20]
 80042ca:	f7ff ff3f 	bl	800414c <sensorhubInputHdlr>
}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	6978      	ldr	r0, [r7, #20]
 80042f2:	f7ff ff2b 	bl	800414c <sensorhubInputHdlr>
}
 80042f6:	bf00      	nop
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80042fe:	b5b0      	push	{r4, r5, r7, lr}
 8004300:	b09c      	sub	sp, #112	; 0x70
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	66bb      	str	r3, [r7, #104]	; 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 8004318:	232a      	movs	r3, #42	; 0x2a
 800431a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t reportLen = getReportLen(reportId);
 800431e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fda4 	bl	8003e70 <getReportLen>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    while (cursor < len) {
 800432e:	e02d      	b.n	800438c <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	461c      	mov	r4, r3
 8004336:	4615      	mov	r5, r2
 8004338:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 800433c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004340:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        memcpy(event.report, payload+cursor, reportLen);
 8004344:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	18d1      	adds	r1, r2, r3
 800434c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	3312      	adds	r3, #18
 8004356:	4618      	mov	r0, r3
 8004358:	f006 fee0 	bl	800b11c <memcpy>
        event.len = reportLen;
 800435c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004360:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 8004364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 800436c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004372:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004374:	f107 0110 	add.w	r1, r7, #16
 8004378:	4610      	mov	r0, r2
 800437a:	4798      	blx	r3
        }

        cursor += reportLen;
 800437c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004380:	b29a      	uxth	r2, r3
 8004382:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004386:	4413      	add	r3, r2
 8004388:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    while (cursor < len) {
 800438c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	429a      	cmp	r2, r3
 8004394:	d3cc      	bcc.n	8004330 <sensorhubInputGyroRvHdlr+0x32>
    }
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	3770      	adds	r7, #112	; 0x70
 800439c:	46bd      	mov	sp, r7
 800439e:	bdb0      	pop	{r4, r5, r7, pc}

080043a0 <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d007      	beq.n	80043ca <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        return;
 80043c8:	e021      	b.n	800440e <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d114      	bne.n	80043fc <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2201      	movs	r2, #1
 80043d6:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 80043d8:	6978      	ldr	r0, [r7, #20]
 80043da:	f7ff fd2d 	bl	8003e38 <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <executableDeviceHdlr+0x74>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00f      	beq.n	800440c <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043f4:	4907      	ldr	r1, [pc, #28]	; (8004414 <executableDeviceHdlr+0x74>)
 80043f6:	4610      	mov	r0, r2
 80043f8:	4798      	blx	r3
            }
            break;
 80043fa:	e007      	b.n	800440c <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
            break;
 800440a:	e000      	b.n	800440e <executableDeviceHdlr+0x6e>
            break;
 800440c:	bf00      	nop
    }
}
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	200005a0 	.word	0x200005a0

08004418 <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6858      	ldr	r0, [r3, #4]
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	2102      	movs	r1, #2
 8004430:	f001 ff0a 	bl	8006248 <shtp_send>
 8004434:	4603      	mov	r3, r0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b08a      	sub	sp, #40	; 0x28
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <setSensorConfigStart+0x28>
 800445a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800445e:	f043 0302 	orr.w	r3, r3, #2
 8004462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <setSensorConfigStart+0x3c>
 800446e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	789b      	ldrb	r3, [r3, #2]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <setSensorConfigStart+0x50>
 8004482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	78db      	ldrb	r3, [r3, #3]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <setSensorConfigStart+0x64>
 8004496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800449a:	f043 0308 	orr.w	r3, r3, #8
 800449e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	791b      	ldrb	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <setSensorConfigStart+0x78>
 80044aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044ae:	f043 0310 	orr.w	r3, r3, #16
 80044b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    memset(&req, 0, sizeof(req));
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	2211      	movs	r2, #17
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f006 fe3a 	bl	800b138 <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 80044c4:	23fd      	movs	r3, #253	; 0xfd
 80044c6:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ce:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 80044d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044d4:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	88db      	ldrh	r3, [r3, #6]
 80044da:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 80044f6:	f107 0308 	add.w	r3, r7, #8
 80044fa:	2211      	movs	r2, #17
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff ff8a 	bl	8004418 <sendCtrl>
 8004504:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 8004506:	69f9      	ldr	r1, [r7, #28]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fc83 	bl	8003e14 <opCompleted>

    return rc;
 800450e:	69fb      	ldr	r3, [r7, #28]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3728      	adds	r7, #40	; 0x28
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <shtpEventCallback+0x3c>)
 8004526:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <shtpEventCallback+0x40>)
 800452a:	2201      	movs	r2, #1
 800452c:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 800452e:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <shtpEventCallback+0x40>)
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d006      	beq.n	800454a <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004544:	4904      	ldr	r1, [pc, #16]	; (8004558 <shtpEventCallback+0x40>)
 8004546:	4610      	mov	r0, r2
 8004548:	4798      	blx	r3
    }
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000428 	.word	0x20000428
 8004558:	200005a0 	.word	0x200005a0

0800455c <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 8004568:	4b41      	ldr	r3, [pc, #260]	; (8004670 <sh2_open+0x114>)
 800456a:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <sh2_open+0x1c>
 8004572:	f06f 0301 	mvn.w	r3, #1
 8004576:	e077      	b.n	8004668 <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 8004578:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800457c:	2100      	movs	r1, #0
 800457e:	69b8      	ldr	r0, [r7, #24]
 8004580:	f006 fdda 	bl	800b138 <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2200      	movs	r2, #0
 8004588:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
    pSh2->eventCookie = eventCookie;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	63da      	str	r2, [r3, #60]	; 0x3c
    pSh2->sensorCallback = 0;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2200      	movs	r2, #0
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = 0;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2200      	movs	r2, #0
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f001 fdd3 	bl	8006158 <shtp_open>
 80045b2:	4602      	mov	r2, r0
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 80045c0:	f04f 33ff 	mov.w	r3, #4294967295
 80045c4:	e050      	b.n	8004668 <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4929      	ldr	r1, [pc, #164]	; (8004674 <sh2_open+0x118>)
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 fdf6 	bl	80061c0 <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	6858      	ldr	r0, [r3, #4]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	4a27      	ldr	r2, [pc, #156]	; (8004678 <sh2_open+0x11c>)
 80045dc:	2102      	movs	r1, #2
 80045de:	f001 fe03 	bl	80061e8 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	6858      	ldr	r0, [r3, #4]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	4a24      	ldr	r2, [pc, #144]	; (800467c <sh2_open+0x120>)
 80045ea:	2103      	movs	r1, #3
 80045ec:	f001 fdfc 	bl	80061e8 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	6858      	ldr	r0, [r3, #4]
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	4a22      	ldr	r2, [pc, #136]	; (8004680 <sh2_open+0x124>)
 80045f8:	2104      	movs	r1, #4
 80045fa:	f001 fdf5 	bl	80061e8 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	6858      	ldr	r0, [r3, #4]
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <sh2_open+0x128>)
 8004606:	2105      	movs	r1, #5
 8004608:	f001 fdee 	bl	80061e8 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6858      	ldr	r0, [r3, #4]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <sh2_open+0x12c>)
 8004614:	2101      	movs	r1, #1
 8004616:	f001 fde7 	bl	80061e8 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	4610      	mov	r0, r2
 8004626:	4798      	blx	r3
 8004628:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 800462e:	e00c      	b.n	800464a <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4618      	mov	r0, r3
 8004636:	f001 fe38 	bl	80062aa <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	4610      	mov	r0, r2
 8004646:	4798      	blx	r3
 8004648:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	4a0e      	ldr	r2, [pc, #56]	; (800468c <sh2_open+0x130>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d807      	bhi.n	8004666 <sh2_open+0x10a>
           (!pSh2->resetComplete))
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	7a1b      	ldrb	r3, [r3, #8]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f083 0301 	eor.w	r3, r3, #1
 8004660:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e4      	bne.n	8004630 <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000428 	.word	0x20000428
 8004674:	08004519 	.word	0x08004519
 8004678:	08003eb9 	.word	0x08003eb9
 800467c:	080042af 	.word	0x080042af
 8004680:	080042d7 	.word	0x080042d7
 8004684:	080042ff 	.word	0x080042ff
 8004688:	080043a1 	.word	0x080043a1
 800468c:	00030d3f 	.word	0x00030d3f

08004690 <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 8004696:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <sh2_service+0x24>)
 8004698:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d004      	beq.n	80046ac <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fdff 	bl	80062aa <shtp_service>
    }
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000428 	.word	0x20000428

080046b8 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <sh2_setSensorCallback+0x28>)
 80046c4:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = cookie;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44

    return SH2_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	20000428 	.word	0x20000428

080046e4 <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	6039      	str	r1, [r7, #0]
 80046ee:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <sh2_setSensorConfig+0x4c>)
 80046f2:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d102      	bne.n	8004702 <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 80046fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004700:	e012      	b.n	8004728 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3324      	adds	r3, #36	; 0x24
 8004706:	2210      	movs	r2, #16
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f006 fd14 	bl	800b138 <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	79fa      	ldrb	r2, [r7, #7]
 8004714:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 800471e:	4905      	ldr	r1, [pc, #20]	; (8004734 <sh2_setSensorConfig+0x50>)
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f7ff fc7b 	bl	800401c <opProcess>
 8004726:	4603      	mov	r3, r0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000428 	.word	0x20000428
 8004734:	0800b880 	.word	0x0800b880

08004738 <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	7c5a      	ldrb	r2, [r3, #17]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b2a      	cmp	r3, #42	; 0x2a
 8004760:	d00b      	beq.n	800477a <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	7cda      	ldrb	r2, [r3, #19]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	7d1b      	ldrb	r3, [r3, #20]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	b2da      	uxtb	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	709a      	strb	r2, [r3, #2]
 8004778:	e005      	b.n	8004786 <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	3b01      	subs	r3, #1
 800478c:	2b2d      	cmp	r3, #45	; 0x2d
 800478e:	f200 8155 	bhi.w	8004a3c <sh2_decodeSensorEvent+0x304>
 8004792:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <sh2_decodeSensorEvent+0x60>)
 8004794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004798:	0800485d 	.word	0x0800485d
 800479c:	0800488d 	.word	0x0800488d
 80047a0:	080048b1 	.word	0x080048b1
 80047a4:	08004869 	.word	0x08004869
 80047a8:	080048c9 	.word	0x080048c9
 80047ac:	08004875 	.word	0x08004875
 80047b0:	08004899 	.word	0x08004899
 80047b4:	080048d5 	.word	0x080048d5
 80047b8:	080048e1 	.word	0x080048e1
 80047bc:	080048ed 	.word	0x080048ed
 80047c0:	080048f9 	.word	0x080048f9
 80047c4:	08004905 	.word	0x08004905
 80047c8:	08004911 	.word	0x08004911
 80047cc:	0800491d 	.word	0x0800491d
 80047d0:	080048bd 	.word	0x080048bd
 80047d4:	08004935 	.word	0x08004935
 80047d8:	0800494d 	.word	0x0800494d
 80047dc:	08004959 	.word	0x08004959
 80047e0:	08004965 	.word	0x08004965
 80047e4:	08004851 	.word	0x08004851
 80047e8:	08004881 	.word	0x08004881
 80047ec:	080048a5 	.word	0x080048a5
 80047f0:	08004929 	.word	0x08004929
 80047f4:	08004941 	.word	0x08004941
 80047f8:	08004971 	.word	0x08004971
 80047fc:	0800497d 	.word	0x0800497d
 8004800:	08004989 	.word	0x08004989
 8004804:	08004995 	.word	0x08004995
 8004808:	08004a3d 	.word	0x08004a3d
 800480c:	080049a1 	.word	0x080049a1
 8004810:	080049ad 	.word	0x080049ad
 8004814:	080049b9 	.word	0x080049b9
 8004818:	080049c5 	.word	0x080049c5
 800481c:	080049d1 	.word	0x080049d1
 8004820:	080049dd 	.word	0x080049dd
 8004824:	08004a3d 	.word	0x08004a3d
 8004828:	08004a3d 	.word	0x08004a3d
 800482c:	08004a3d 	.word	0x08004a3d
 8004830:	08004a3d 	.word	0x08004a3d
 8004834:	080049e9 	.word	0x080049e9
 8004838:	080049f5 	.word	0x080049f5
 800483c:	08004a01 	.word	0x08004a01
 8004840:	08004a0d 	.word	0x08004a0d
 8004844:	08004a19 	.word	0x08004a19
 8004848:	08004a25 	.word	0x08004a25
 800484c:	08004a31 	.word	0x08004a31
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f8fc 	bl	8004a50 <decodeRawAccelerometer>
 8004858:	60f8      	str	r0, [r7, #12]
            break;
 800485a:	e0f3      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f924 	bl	8004aac <decodeAccelerometer>
 8004864:	60f8      	str	r0, [r7, #12]
            break;
 8004866:	e0ed      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f95e 	bl	8004b2c <decodeLinearAcceleration>
 8004870:	60f8      	str	r0, [r7, #12]
            break;
 8004872:	e0e7      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f998 	bl	8004bac <decodeGravity>
 800487c:	60f8      	str	r0, [r7, #12]
            break;
 800487e:	e0e1      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9d2 	bl	8004c2c <decodeRawGyroscope>
 8004888:	60f8      	str	r0, [r7, #12]
            break;
 800488a:	e0db      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fa04 	bl	8004c9c <decodeGyroscopeCalibrated>
 8004894:	60f8      	str	r0, [r7, #12]
            break;
 8004896:	e0d5      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 8004898:	6839      	ldr	r1, [r7, #0]
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fa3e 	bl	8004d1c <decodeGyroscopeUncal>
 80048a0:	60f8      	str	r0, [r7, #12]
            break;
 80048a2:	e0cf      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 faaa 	bl	8004e00 <decodeRawMagnetometer>
 80048ac:	60f8      	str	r0, [r7, #12]
            break;
 80048ae:	e0c9      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fad2 	bl	8004e5c <decodeMagneticFieldCalibrated>
 80048b8:	60f8      	str	r0, [r7, #12]
            break;
 80048ba:	e0c3      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fb0c 	bl	8004edc <decodeMagneticFieldUncal>
 80048c4:	60f8      	str	r0, [r7, #12]
            break;
 80048c6:	e0bd      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 80048c8:	6839      	ldr	r1, [r7, #0]
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fb78 	bl	8004fc0 <decodeRotationVector>
 80048d0:	60f8      	str	r0, [r7, #12]
            break;
 80048d2:	e0b7      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fbd6 	bl	8005088 <decodeGameRotationVector>
 80048dc:	60f8      	str	r0, [r7, #12]
            break;
 80048de:	e0b1      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 80048e0:	6839      	ldr	r1, [r7, #0]
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fc20 	bl	8005128 <decodeGeomagneticRotationVector>
 80048e8:	60f8      	str	r0, [r7, #12]
            break;
 80048ea:	e0ab      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fc7e 	bl	80051f0 <decodePressure>
 80048f4:	60f8      	str	r0, [r7, #12]
            break;
 80048f6:	e0a5      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fc94 	bl	8005228 <decodeAmbientLight>
 8004900:	60f8      	str	r0, [r7, #12]
            break;
 8004902:	e09f      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fcaa 	bl	8005260 <decodeHumidity>
 800490c:	60f8      	str	r0, [r7, #12]
            break;
 800490e:	e099      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 8004910:	6839      	ldr	r1, [r7, #0]
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fcc2 	bl	800529c <decodeProximity>
 8004918:	60f8      	str	r0, [r7, #12]
            break;
 800491a:	e093      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fcda 	bl	80052d8 <decodeTemperature>
 8004924:	60f8      	str	r0, [r7, #12]
            break;
 8004926:	e08d      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fcf2 	bl	8005314 <decodeReserved>
 8004930:	60f8      	str	r0, [r7, #12]
            break;
 8004932:	e087      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fd0a 	bl	8005350 <decodeTapDetector>
 800493c:	60f8      	str	r0, [r7, #12]
            break;
 800493e:	e081      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 8004940:	6839      	ldr	r1, [r7, #0]
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fd14 	bl	8005370 <decodeStepDetector>
 8004948:	60f8      	str	r0, [r7, #12]
            break;
 800494a:	e07b      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fd20 	bl	8005394 <decodeStepCounter>
 8004954:	60f8      	str	r0, [r7, #12]
            break;
 8004956:	e075      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fd35 	bl	80053ca <decodeSignificantMotion>
 8004960:	60f8      	str	r0, [r7, #12]
            break;
 8004962:	e06f      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fd42 	bl	80053f0 <decodeStabilityClassifier>
 800496c:	60f8      	str	r0, [r7, #12]
            break;
 800496e:	e069      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fd4c 	bl	8005410 <decodeShakeDetector>
 8004978:	60f8      	str	r0, [r7, #12]
            break;
 800497a:	e063      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 800497c:	6839      	ldr	r1, [r7, #0]
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fd59 	bl	8005436 <decodeFlipDetector>
 8004984:	60f8      	str	r0, [r7, #12]
            break;
 8004986:	e05d      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8004988:	6839      	ldr	r1, [r7, #0]
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fd66 	bl	800545c <decodePickupDetector>
 8004990:	60f8      	str	r0, [r7, #12]
            break;
 8004992:	e057      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fd73 	bl	8005482 <decodeStabilityDetector>
 800499c:	60f8      	str	r0, [r7, #12]
            break;
 800499e:	e051      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fd80 	bl	80054a8 <decodePersonalActivityClassifier>
 80049a8:	60f8      	str	r0, [r7, #12]
            break;
 80049aa:	e04b      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 80049ac:	6839      	ldr	r1, [r7, #0]
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fdad 	bl	800550e <decodeSleepDetector>
 80049b4:	60f8      	str	r0, [r7, #12]
            break;
 80049b6:	e045      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fdb7 	bl	800552e <decodeTiltDetector>
 80049c0:	60f8      	str	r0, [r7, #12]
            break;
 80049c2:	e03f      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 80049c4:	6839      	ldr	r1, [r7, #0]
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fdc4 	bl	8005554 <decodePocketDetector>
 80049cc:	60f8      	str	r0, [r7, #12]
            break;
 80049ce:	e039      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fdd1 	bl	800557a <decodeCircleDetector>
 80049d8:	60f8      	str	r0, [r7, #12]
            break;
 80049da:	e033      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 80049dc:	6839      	ldr	r1, [r7, #0]
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fdde 	bl	80055a0 <decodeHeartRateMonitor>
 80049e4:	60f8      	str	r0, [r7, #12]
            break;
 80049e6:	e02d      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 80049e8:	6839      	ldr	r1, [r7, #0]
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fdec 	bl	80055c8 <decodeArvrStabilizedRV>
 80049f0:	60f8      	str	r0, [r7, #12]
            break;
 80049f2:	e027      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fe4a 	bl	8005690 <decodeArvrStabilizedGRV>
 80049fc:	60f8      	str	r0, [r7, #12]
            break;
 80049fe:	e021      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fe94 	bl	8005730 <decodeGyroIntegratedRV>
 8004a08:	60f8      	str	r0, [r7, #12]
            break;
 8004a0a:	e01b      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 8004a0c:	6839      	ldr	r1, [r7, #0]
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 ff14 	bl	800583c <decodeIZroRequest>
 8004a14:	60f8      	str	r0, [r7, #12]
            break;
 8004a16:	e015      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 8004a18:	6839      	ldr	r1, [r7, #0]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 ff22 	bl	8005864 <decodeRawOptFlow>
 8004a20:	60f8      	str	r0, [r7, #12]
            break;
 8004a22:	e00f      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 8004a24:	6839      	ldr	r1, [r7, #0]
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 ff9a 	bl	8005960 <decodeDeadReckoningPose>
 8004a2c:	60f8      	str	r0, [r7, #12]
            break;
 8004a2e:	e009      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f001 f87e 	bl	8005b34 <decodeWheelEncoder>
 8004a38:	60f8      	str	r0, [r7, #12]
            break;
 8004a3a:	e003      	b.n	8004a44 <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 8004a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a40:	60fb      	str	r3, [r7, #12]
            break;
 8004a42:	bf00      	nop
    }

    return rc;
 8004a44:	68fb      	ldr	r3, [r7, #12]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop

08004a50 <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	3316      	adds	r3, #22
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f8d9 	bl	8005c16 <read16>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	3318      	adds	r3, #24
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 f8d0 	bl	8005c16 <read16>
 8004a76:	4603      	mov	r3, r0
 8004a78:	461a      	mov	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	331a      	adds	r3, #26
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 f8c7 	bl	8005c16 <read16>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	331e      	adds	r3, #30
 8004a94:	4618      	mov	r0, r3
 8004a96:	f001 f8d4 	bl	8005c42 <read32>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	3316      	adds	r3, #22
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 f8ab 	bl	8005c16 <read16>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aca:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004b28 <decodeAccelerometer+0x7c>
 8004ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	3318      	adds	r3, #24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f001 f89a 	bl	8005c16 <read16>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aec:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004b28 <decodeAccelerometer+0x7c>
 8004af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	331a      	adds	r3, #26
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 f889 	bl	8005c16 <read16>
 8004b04:	4603      	mov	r3, r0
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b0e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004b28 <decodeAccelerometer+0x7c>
 8004b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	3b800000 	.word	0x3b800000

08004b2c <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	3316      	adds	r3, #22
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 f86b 	bl	8005c16 <read16>
 8004b40:	4603      	mov	r3, r0
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b4a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004ba8 <decodeLinearAcceleration+0x7c>
 8004b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	3318      	adds	r3, #24
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f001 f85a 	bl	8005c16 <read16>
 8004b62:	4603      	mov	r3, r0
 8004b64:	ee07 3a90 	vmov	s15, r3
 8004b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b6c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004ba8 <decodeLinearAcceleration+0x7c>
 8004b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	331a      	adds	r3, #26
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 f849 	bl	8005c16 <read16>
 8004b84:	4603      	mov	r3, r0
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b8e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004ba8 <decodeLinearAcceleration+0x7c>
 8004b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	3b800000 	.word	0x3b800000

08004bac <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	3316      	adds	r3, #22
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 f82b 	bl	8005c16 <read16>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bca:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004c28 <decodeGravity+0x7c>
 8004bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	3318      	adds	r3, #24
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f001 f81a 	bl	8005c16 <read16>
 8004be2:	4603      	mov	r3, r0
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bec:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004c28 <decodeGravity+0x7c>
 8004bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	331a      	adds	r3, #26
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 f809 	bl	8005c16 <read16>
 8004c04:	4603      	mov	r3, r0
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c0e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004c28 <decodeGravity+0x7c>
 8004c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	3b800000 	.word	0x3b800000

08004c2c <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	3316      	adds	r3, #22
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 ffeb 	bl	8005c16 <read16>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	3318      	adds	r3, #24
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 ffe2 	bl	8005c16 <read16>
 8004c52:	4603      	mov	r3, r0
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	331a      	adds	r3, #26
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 ffd9 	bl	8005c16 <read16>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461a      	mov	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	331c      	adds	r3, #28
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 ffd0 	bl	8005c16 <read16>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	331e      	adds	r3, #30
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 ffdd 	bl	8005c42 <read32>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	3316      	adds	r3, #22
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 ffb3 	bl	8005c16 <read16>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cba:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004d18 <decodeGyroscopeCalibrated+0x7c>
 8004cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	3318      	adds	r3, #24
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 ffa2 	bl	8005c16 <read16>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cdc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004d18 <decodeGyroscopeCalibrated+0x7c>
 8004ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	331a      	adds	r3, #26
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 ff91 	bl	8005c16 <read16>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cfe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004d18 <decodeGyroscopeCalibrated+0x7c>
 8004d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	3b000000 	.word	0x3b000000

08004d1c <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	3316      	adds	r3, #22
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 ff73 	bl	8005c16 <read16>
 8004d30:	4603      	mov	r3, r0
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d3a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004dfc <decodeGyroscopeUncal+0xe0>
 8004d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	3318      	adds	r3, #24
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 ff62 	bl	8005c16 <read16>
 8004d52:	4603      	mov	r3, r0
 8004d54:	ee07 3a90 	vmov	s15, r3
 8004d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d5c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004dfc <decodeGyroscopeUncal+0xe0>
 8004d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	331a      	adds	r3, #26
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 ff51 	bl	8005c16 <read16>
 8004d74:	4603      	mov	r3, r0
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004dfc <decodeGyroscopeUncal+0xe0>
 8004d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	331c      	adds	r3, #28
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 ff40 	bl	8005c16 <read16>
 8004d96:	4603      	mov	r3, r0
 8004d98:	ee07 3a90 	vmov	s15, r3
 8004d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004da0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004dfc <decodeGyroscopeUncal+0xe0>
 8004da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	331e      	adds	r3, #30
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 ff2f 	bl	8005c16 <read16>
 8004db8:	4603      	mov	r3, r0
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004dfc <decodeGyroscopeUncal+0xe0>
 8004dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	3320      	adds	r3, #32
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 ff1e 	bl	8005c16 <read16>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	ee07 3a90 	vmov	s15, r3
 8004de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004dfc <decodeGyroscopeUncal+0xe0>
 8004de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	3b000000 	.word	0x3b000000

08004e00 <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	3316      	adds	r3, #22
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 ff01 	bl	8005c16 <read16>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	3318      	adds	r3, #24
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fef8 	bl	8005c16 <read16>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	331a      	adds	r3, #26
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 feef 	bl	8005c16 <read16>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	331e      	adds	r3, #30
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fefc 	bl	8005c42 <read32>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	3316      	adds	r3, #22
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fed3 	bl	8005c16 <read16>
 8004e70:	4603      	mov	r3, r0
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e7a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004ed8 <decodeMagneticFieldCalibrated+0x7c>
 8004e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	3318      	adds	r3, #24
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fec2 	bl	8005c16 <read16>
 8004e92:	4603      	mov	r3, r0
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e9c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004ed8 <decodeMagneticFieldCalibrated+0x7c>
 8004ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	331a      	adds	r3, #26
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 feb1 	bl	8005c16 <read16>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ebe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004ed8 <decodeMagneticFieldCalibrated+0x7c>
 8004ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	3d800000 	.word	0x3d800000

08004edc <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	3316      	adds	r3, #22
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fe93 	bl	8005c16 <read16>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004efa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004fbc <decodeMagneticFieldUncal+0xe0>
 8004efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	3318      	adds	r3, #24
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fe82 	bl	8005c16 <read16>
 8004f12:	4603      	mov	r3, r0
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f1c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004fbc <decodeMagneticFieldUncal+0xe0>
 8004f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	331a      	adds	r3, #26
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fe71 	bl	8005c16 <read16>
 8004f34:	4603      	mov	r3, r0
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f3e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004fbc <decodeMagneticFieldUncal+0xe0>
 8004f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	331c      	adds	r3, #28
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fe60 	bl	8005c16 <read16>
 8004f56:	4603      	mov	r3, r0
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f60:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004fbc <decodeMagneticFieldUncal+0xe0>
 8004f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	331e      	adds	r3, #30
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fe4f 	bl	8005c16 <read16>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f82:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004fbc <decodeMagneticFieldUncal+0xe0>
 8004f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	3320      	adds	r3, #32
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 fe3e 	bl	8005c16 <read16>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004fbc <decodeMagneticFieldUncal+0xe0>
 8004fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	3d800000 	.word	0x3d800000

08004fc0 <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	3316      	adds	r3, #22
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fe21 	bl	8005c16 <read16>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fde:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005080 <decodeRotationVector+0xc0>
 8004fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	3318      	adds	r3, #24
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fe10 	bl	8005c16 <read16>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005000:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005080 <decodeRotationVector+0xc0>
 8005004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	331a      	adds	r3, #26
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fdff 	bl	8005c16 <read16>
 8005018:	4603      	mov	r3, r0
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005022:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005080 <decodeRotationVector+0xc0>
 8005026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	331c      	adds	r3, #28
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fdee 	bl	8005c16 <read16>
 800503a:	4603      	mov	r3, r0
 800503c:	ee07 3a90 	vmov	s15, r3
 8005040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005044:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005080 <decodeRotationVector+0xc0>
 8005048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	331e      	adds	r3, #30
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fddd 	bl	8005c16 <read16>
 800505c:	4603      	mov	r3, r0
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005066:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005084 <decodeRotationVector+0xc4>
 800506a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	38800000 	.word	0x38800000
 8005084:	39800000 	.word	0x39800000

08005088 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	3316      	adds	r3, #22
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fdbd 	bl	8005c16 <read16>
 800509c:	4603      	mov	r3, r0
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005124 <decodeGameRotationVector+0x9c>
 80050aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	3318      	adds	r3, #24
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fdac 	bl	8005c16 <read16>
 80050be:	4603      	mov	r3, r0
 80050c0:	ee07 3a90 	vmov	s15, r3
 80050c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050c8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005124 <decodeGameRotationVector+0x9c>
 80050cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	331a      	adds	r3, #26
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fd9b 	bl	8005c16 <read16>
 80050e0:	4603      	mov	r3, r0
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005124 <decodeGameRotationVector+0x9c>
 80050ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	331c      	adds	r3, #28
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 fd8a 	bl	8005c16 <read16>
 8005102:	4603      	mov	r3, r0
 8005104:	ee07 3a90 	vmov	s15, r3
 8005108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800510c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005124 <decodeGameRotationVector+0x9c>
 8005110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	38800000 	.word	0x38800000

08005128 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	3316      	adds	r3, #22
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fd6d 	bl	8005c16 <read16>
 800513c:	4603      	mov	r3, r0
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005146:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80051e8 <decodeGeomagneticRotationVector+0xc0>
 800514a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	3318      	adds	r3, #24
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fd5c 	bl	8005c16 <read16>
 800515e:	4603      	mov	r3, r0
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005168:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80051e8 <decodeGeomagneticRotationVector+0xc0>
 800516c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	331a      	adds	r3, #26
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fd4b 	bl	8005c16 <read16>
 8005180:	4603      	mov	r3, r0
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800518a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80051e8 <decodeGeomagneticRotationVector+0xc0>
 800518e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	331c      	adds	r3, #28
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fd3a 	bl	8005c16 <read16>
 80051a2:	4603      	mov	r3, r0
 80051a4:	ee07 3a90 	vmov	s15, r3
 80051a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ac:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80051e8 <decodeGeomagneticRotationVector+0xc0>
 80051b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	331e      	adds	r3, #30
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fd29 	bl	8005c16 <read16>
 80051c4:	4603      	mov	r3, r0
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ce:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80051ec <decodeGeomagneticRotationVector+0xc4>
 80051d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	38800000 	.word	0x38800000
 80051ec:	39800000 	.word	0x39800000

080051f0 <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	3316      	adds	r3, #22
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fd1f 	bl	8005c42 <read32>
 8005204:	ee07 0a90 	vmov	s15, r0
 8005208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800520c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005224 <decodePressure+0x34>
 8005210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	35800000 	.word	0x35800000

08005228 <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	3316      	adds	r3, #22
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fd03 	bl	8005c42 <read32>
 800523c:	ee07 0a90 	vmov	s15, r0
 8005240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005244:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800525c <decodeAmbientLight+0x34>
 8005248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	3b800000 	.word	0x3b800000

08005260 <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	3316      	adds	r3, #22
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fcd1 	bl	8005c16 <read16>
 8005274:	4603      	mov	r3, r0
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800527e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005298 <decodeHumidity+0x38>
 8005282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	3b800000 	.word	0x3b800000

0800529c <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	3316      	adds	r3, #22
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fcb3 	bl	8005c16 <read16>
 80052b0:	4603      	mov	r3, r0
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052ba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80052d4 <decodeProximity+0x38>
 80052be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	3d800000 	.word	0x3d800000

080052d8 <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	3316      	adds	r3, #22
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fc95 	bl	8005c16 <read16>
 80052ec:	4603      	mov	r3, r0
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005310 <decodeTemperature+0x38>
 80052fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	3c000000 	.word	0x3c000000

08005314 <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	3316      	adds	r3, #22
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fc77 	bl	8005c16 <read16>
 8005328:	4603      	mov	r3, r0
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005332:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800534c <decodeReserved+0x38>
 8005336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	3c000000 	.word	0x3c000000

08005350 <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	7d9a      	ldrb	r2, [r3, #22]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	3316      	adds	r3, #22
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fc1c 	bl	8005bbc <readu32>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	3316      	adds	r3, #22
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fc0a 	bl	8005bbc <readu32>
 80053a8:	4602      	mov	r2, r0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	331a      	adds	r3, #26
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fc02 	bl	8005bbc <readu32>
 80053b8:	4603      	mov	r3, r0
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	3316      	adds	r3, #22
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fbd9 	bl	8005b90 <readu16>
 80053de:	4603      	mov	r3, r0
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	7d9a      	ldrb	r2, [r3, #22]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	3316      	adds	r3, #22
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fbb6 	bl	8005b90 <readu16>
 8005424:	4603      	mov	r3, r0
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	3316      	adds	r3, #22
 8005444:	4618      	mov	r0, r3
 8005446:	f000 fba3 	bl	8005b90 <readu16>
 800544a:	4603      	mov	r3, r0
 800544c:	461a      	mov	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	3316      	adds	r3, #22
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fb90 	bl	8005b90 <readu16>
 8005470:	4603      	mov	r3, r0
 8005472:	461a      	mov	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	3316      	adds	r3, #22
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fb7d 	bl	8005b90 <readu16>
 8005496:	4603      	mov	r3, r0
 8005498:	461a      	mov	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	7d9b      	ldrb	r3, [r3, #22]
 80054b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	7d9b      	ldrb	r3, [r3, #22]
 80054c4:	b25b      	sxtb	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	09db      	lsrs	r3, r3, #7
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	7dda      	ldrb	r2, [r3, #23]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e00d      	b.n	80054fa <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3306      	adds	r3, #6
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	4413      	add	r3, r2
 80054e6:	7c99      	ldrb	r1, [r3, #18]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	3317      	adds	r3, #23
 80054f0:	460a      	mov	r2, r1
 80054f2:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b09      	cmp	r3, #9
 80054fe:	ddee      	ble.n	80054de <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	7d9a      	ldrb	r2, [r3, #22]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	3316      	adds	r3, #22
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fb27 	bl	8005b90 <readu16>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	3316      	adds	r3, #22
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fb14 	bl	8005b90 <readu16>
 8005568:	4603      	mov	r3, r0
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	3316      	adds	r3, #22
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fb01 	bl	8005b90 <readu16>
 800558e:	4603      	mov	r3, r0
 8005590:	461a      	mov	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	3316      	adds	r3, #22
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 faee 	bl	8005b90 <readu16>
 80055b4:	4603      	mov	r3, r0
 80055b6:	461a      	mov	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	3316      	adds	r3, #22
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fb1d 	bl	8005c16 <read16>
 80055dc:	4603      	mov	r3, r0
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055e6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005688 <decodeArvrStabilizedRV+0xc0>
 80055ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	3318      	adds	r3, #24
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fb0c 	bl	8005c16 <read16>
 80055fe:	4603      	mov	r3, r0
 8005600:	ee07 3a90 	vmov	s15, r3
 8005604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005608:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005688 <decodeArvrStabilizedRV+0xc0>
 800560c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	331a      	adds	r3, #26
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fafb 	bl	8005c16 <read16>
 8005620:	4603      	mov	r3, r0
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800562a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005688 <decodeArvrStabilizedRV+0xc0>
 800562e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	331c      	adds	r3, #28
 800563c:	4618      	mov	r0, r3
 800563e:	f000 faea 	bl	8005c16 <read16>
 8005642:	4603      	mov	r3, r0
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005688 <decodeArvrStabilizedRV+0xc0>
 8005650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	331e      	adds	r3, #30
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fad9 	bl	8005c16 <read16>
 8005664:	4603      	mov	r3, r0
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800566e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800568c <decodeArvrStabilizedRV+0xc4>
 8005672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	38800000 	.word	0x38800000
 800568c:	39800000 	.word	0x39800000

08005690 <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	3316      	adds	r3, #22
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fab9 	bl	8005c16 <read16>
 80056a4:	4603      	mov	r3, r0
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ae:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800572c <decodeArvrStabilizedGRV+0x9c>
 80056b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	3318      	adds	r3, #24
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 faa8 	bl	8005c16 <read16>
 80056c6:	4603      	mov	r3, r0
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800572c <decodeArvrStabilizedGRV+0x9c>
 80056d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	331a      	adds	r3, #26
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fa97 	bl	8005c16 <read16>
 80056e8:	4603      	mov	r3, r0
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800572c <decodeArvrStabilizedGRV+0x9c>
 80056f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	331c      	adds	r3, #28
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fa86 	bl	8005c16 <read16>
 800570a:	4603      	mov	r3, r0
 800570c:	ee07 3a90 	vmov	s15, r3
 8005710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005714:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800572c <decodeArvrStabilizedGRV+0x9c>
 8005718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	38800000 	.word	0x38800000

08005730 <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	3312      	adds	r3, #18
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fa69 	bl	8005c16 <read16>
 8005744:	4603      	mov	r3, r0
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800574e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005834 <decodeGyroIntegratedRV+0x104>
 8005752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	3314      	adds	r3, #20
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fa58 	bl	8005c16 <read16>
 8005766:	4603      	mov	r3, r0
 8005768:	ee07 3a90 	vmov	s15, r3
 800576c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005770:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005834 <decodeGyroIntegratedRV+0x104>
 8005774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	3316      	adds	r3, #22
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fa47 	bl	8005c16 <read16>
 8005788:	4603      	mov	r3, r0
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005792:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005834 <decodeGyroIntegratedRV+0x104>
 8005796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	3318      	adds	r3, #24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fa36 	bl	8005c16 <read16>
 80057aa:	4603      	mov	r3, r0
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057b4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005834 <decodeGyroIntegratedRV+0x104>
 80057b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	331a      	adds	r3, #26
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fa25 	bl	8005c16 <read16>
 80057cc:	4603      	mov	r3, r0
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057d6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005838 <decodeGyroIntegratedRV+0x108>
 80057da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	331c      	adds	r3, #28
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fa14 	bl	8005c16 <read16>
 80057ee:	4603      	mov	r3, r0
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005838 <decodeGyroIntegratedRV+0x108>
 80057fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	331e      	adds	r3, #30
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fa03 	bl	8005c16 <read16>
 8005810:	4603      	mov	r3, r0
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800581a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005838 <decodeGyroIntegratedRV+0x108>
 800581e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    return SH2_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	38800000 	.word	0x38800000
 8005838:	3a800000 	.word	0x3a800000

0800583c <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	7d9a      	ldrb	r2, [r3, #22]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	7dda      	ldrb	r2, [r3, #23]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	3316      	adds	r3, #22
 8005872:	4618      	mov	r0, r3
 8005874:	f000 f9cf 	bl	8005c16 <read16>
 8005878:	4603      	mov	r3, r0
 800587a:	461a      	mov	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	3318      	adds	r3, #24
 8005884:	4618      	mov	r0, r3
 8005886:	f000 f9c6 	bl	8005c16 <read16>
 800588a:	4603      	mov	r3, r0
 800588c:	461a      	mov	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	331a      	adds	r3, #26
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f9bd 	bl	8005c16 <read16>
 800589c:	4603      	mov	r3, r0
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	331c      	adds	r3, #28
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f9a5 	bl	8005bf8 <read8>
 80058ae:	4603      	mov	r3, r0
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	331d      	adds	r3, #29
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 f99b 	bl	8005bf8 <read8>
 80058c2:	4603      	mov	r3, r0
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	331e      	adds	r3, #30
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 f991 	bl	8005bf8 <read8>
 80058d6:	4603      	mov	r3, r0
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	331f      	adds	r3, #31
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f987 	bl	8005bf8 <read8>
 80058ea:	4603      	mov	r3, r0
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	3320      	adds	r3, #32
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 f97d 	bl	8005bf8 <read8>
 80058fe:	4603      	mov	r3, r0
 8005900:	b2da      	uxtb	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	3321      	adds	r3, #33	; 0x21
 800590c:	4618      	mov	r0, r3
 800590e:	f000 f973 	bl	8005bf8 <read8>
 8005912:	4603      	mov	r3, r0
 8005914:	b2da      	uxtb	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	3322      	adds	r3, #34	; 0x22
 8005920:	4618      	mov	r0, r3
 8005922:	f000 f969 	bl	8005bf8 <read8>
 8005926:	4603      	mov	r3, r0
 8005928:	b2da      	uxtb	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	3324      	adds	r3, #36	; 0x24
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f96e 	bl	8005c16 <read16>
 800593a:	4603      	mov	r3, r0
 800593c:	461a      	mov	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	3326      	adds	r3, #38	; 0x26
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f97b 	bl	8005c42 <read32>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	3316      	adds	r3, #22
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f967 	bl	8005c42 <read32>
 8005974:	4603      	mov	r3, r0
 8005976:	461a      	mov	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	331a      	adds	r3, #26
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f95e 	bl	8005c42 <read32>
 8005986:	ee07 0a90 	vmov	s15, r0
 800598a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800598e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8005b28 <decodeDeadReckoningPose+0x1c8>
 8005992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	331e      	adds	r3, #30
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 f94e 	bl	8005c42 <read32>
 80059a6:	ee07 0a90 	vmov	s15, r0
 80059aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ae:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005b28 <decodeDeadReckoningPose+0x1c8>
 80059b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	3322      	adds	r3, #34	; 0x22
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 f93e 	bl	8005c42 <read32>
 80059c6:	ee07 0a90 	vmov	s15, r0
 80059ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ce:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005b28 <decodeDeadReckoningPose+0x1c8>
 80059d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	3326      	adds	r3, #38	; 0x26
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 f92e 	bl	8005c42 <read32>
 80059e6:	ee07 0a90 	vmov	s15, r0
 80059ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ee:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005b2c <decodeDeadReckoningPose+0x1cc>
 80059f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	332a      	adds	r3, #42	; 0x2a
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 f91e 	bl	8005c42 <read32>
 8005a06:	ee07 0a90 	vmov	s15, r0
 8005a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a0e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005b2c <decodeDeadReckoningPose+0x1cc>
 8005a12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	332e      	adds	r3, #46	; 0x2e
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 f90e 	bl	8005c42 <read32>
 8005a26:	ee07 0a90 	vmov	s15, r0
 8005a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005b2c <decodeDeadReckoningPose+0x1cc>
 8005a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	3332      	adds	r3, #50	; 0x32
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f8fe 	bl	8005c42 <read32>
 8005a46:	ee07 0a90 	vmov	s15, r0
 8005a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a4e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005b2c <decodeDeadReckoningPose+0x1cc>
 8005a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	3336      	adds	r3, #54	; 0x36
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f8ee 	bl	8005c42 <read32>
 8005a66:	ee07 0a90 	vmov	s15, r0
 8005a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005b30 <decodeDeadReckoningPose+0x1d0>
 8005a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	333a      	adds	r3, #58	; 0x3a
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 f8de 	bl	8005c42 <read32>
 8005a86:	ee07 0a90 	vmov	s15, r0
 8005a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a8e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005b30 <decodeDeadReckoningPose+0x1d0>
 8005a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	333e      	adds	r3, #62	; 0x3e
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 f8ce 	bl	8005c42 <read32>
 8005aa6:	ee07 0a90 	vmov	s15, r0
 8005aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aae:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005b30 <decodeDeadReckoningPose+0x1d0>
 8005ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	3342      	adds	r3, #66	; 0x42
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 f8be 	bl	8005c42 <read32>
 8005ac6:	ee07 0a90 	vmov	s15, r0
 8005aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ace:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005b30 <decodeDeadReckoningPose+0x1d0>
 8005ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	3346      	adds	r3, #70	; 0x46
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f8ae 	bl	8005c42 <read32>
 8005ae6:	ee07 0a90 	vmov	s15, r0
 8005aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005b30 <decodeDeadReckoningPose+0x1d0>
 8005af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	334a      	adds	r3, #74	; 0x4a
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 f89e 	bl	8005c42 <read32>
 8005b06:	ee07 0a90 	vmov	s15, r0
 8005b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b0e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005b30 <decodeDeadReckoningPose+0x1d0>
 8005b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    return SH2_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	37000000 	.word	0x37000000
 8005b2c:	30800000 	.word	0x30800000
 8005b30:	33000000 	.word	0x33000000

08005b34 <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	3316      	adds	r3, #22
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f87d 	bl	8005c42 <read32>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	331a      	adds	r3, #26
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f84f 	bl	8005bf8 <read8>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	331b      	adds	r3, #27
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f846 	bl	8005bf8 <read8>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	331c      	adds	r3, #28
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f84c 	bl	8005c16 <read16>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b21a      	sxth	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	b21b      	sxth	r3, r3
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	b21b      	sxth	r3, r3
 8005bac:	81fb      	strh	r3, [r7, #14]
    return retval;
 8005bae:	89fb      	ldrh	r3, [r7, #14]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3302      	adds	r3, #2
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	041b      	lsls	r3, r3, #16
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3303      	adds	r3, #3
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	061b      	lsls	r3, r3, #24
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
    return retval;
 8005bea:	68fb      	ldr	r3, [r7, #12]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	73fb      	strb	r3, [r7, #15]
    return retval;
 8005c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	b21a      	sxth	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3301      	adds	r3, #1
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	b21b      	sxth	r3, r3
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	81fb      	strh	r3, [r7, #14]
    return retval;
 8005c32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3301      	adds	r3, #1
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3303      	adds	r3, #3
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	061b      	lsls	r3, r3, #24
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
    return retval;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8005c86:	2300      	movs	r3, #0
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	e00b      	b.n	8005ca4 <shtp_init+0x24>
        instances[n].pHal = 0;
 8005c8c:	4a0b      	ldr	r2, [pc, #44]	; (8005cbc <shtp_init+0x3c>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f640 1114 	movw	r1, #2324	; 0x914
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	4413      	add	r3, r2
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	ddf0      	ble.n	8005c8c <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <shtp_init+0x40>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	200005c4 	.word	0x200005c4
 8005cc0:	20000ed8 	.word	0x20000ed8

08005cc4 <getInstance>:

static shtp_t *getInstance(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	e014      	b.n	8005cfa <getInstance+0x36>
        if (instances[n].pHal == 0) {
 8005cd0:	4a0f      	ldr	r2, [pc, #60]	; (8005d10 <getInstance+0x4c>)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f640 1114 	movw	r1, #2324	; 0x914
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	4413      	add	r3, r2
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d107      	bne.n	8005cf4 <getInstance+0x30>
            // This instance is free
            return &instances[n];
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f640 1214 	movw	r2, #2324	; 0x914
 8005cea:	fb02 f303 	mul.w	r3, r2, r3
 8005cee:	4a08      	ldr	r2, [pc, #32]	; (8005d10 <getInstance+0x4c>)
 8005cf0:	4413      	add	r3, r2
 8005cf2:	e006      	b.n	8005d02 <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	dde7      	ble.n	8005cd0 <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	200005c4 	.word	0x200005c4

08005d14 <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	460a      	mov	r2, r1
 8005d1e:	80fb      	strh	r3, [r7, #6]
 8005d20:	4613      	mov	r3, r2
 8005d22:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 8005d24:	88fa      	ldrh	r2, [r7, #6]
 8005d26:	88bb      	ldrh	r3, [r7, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d201      	bcs.n	8005d30 <min_u16+0x1c>
        return a;
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	e000      	b.n	8005d32 <min_u16+0x1e>
    }
    else {
        return b;
 8005d30:	88bb      	ldrh	r3, [r7, #4]
    }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 8005d3e:	b590      	push	{r4, r7, lr}
 8005d40:	b08b      	sub	sp, #44	; 0x2c
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	60f8      	str	r0, [r7, #12]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
    
    bool continuation = false;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint16_t cursor = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	843b      	strh	r3, [r7, #32]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	843b      	strh	r3, [r7, #32]
    remaining = len;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	83fb      	strh	r3, [r7, #30]
    while (remaining > 0) {
 8005d64:	e090      	b.n	8005e88 <txProcess+0x14a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 8005d66:	8bfb      	ldrh	r3, [r7, #30]
 8005d68:	217c      	movs	r1, #124	; 0x7c
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff ffd2 	bl	8005d14 <min_u16>
 8005d70:	4603      	mov	r3, r0
 8005d72:	837b      	strh	r3, [r7, #26]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 8005d74:	8b7b      	ldrh	r3, [r7, #26]
 8005d76:	3304      	adds	r3, #4
 8005d78:	833b      	strh	r3, [r7, #24]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 8005d7a:	8b3b      	ldrh	r3, [r7, #24]
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 8005d82:	8b3b      	ldrh	r3, [r7, #24]
 8005d84:	0a1b      	lsrs	r3, r3, #8
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 8005d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d006      	beq.n	8005daa <txProcess+0x6c>
            pShtp->outTransfer[1] |= 0x80;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	7b5b      	ldrb	r3, [r3, #13]
 8005da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	7afa      	ldrb	r2, [r7, #11]
 8005dae:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 8005db0:	7afa      	ldrb	r2, [r7, #11]
 8005db2:	68f9      	ldr	r1, [r7, #12]
 8005db4:	4613      	mov	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005dc2:	7819      	ldrb	r1, [r3, #0]
 8005dc4:	1c4b      	adds	r3, r1, #1
 8005dc6:	b2dc      	uxtb	r4, r3
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4403      	add	r3, r0
 8005dd4:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005dd8:	4622      	mov	r2, r4
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	460a      	mov	r2, r1
 8005de0:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	330c      	adds	r3, #12
 8005de6:	1d18      	adds	r0, r3, #4
 8005de8:	8c3b      	ldrh	r3, [r7, #32]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4413      	add	r3, r2
 8005dee:	8b7a      	ldrh	r2, [r7, #26]
 8005df0:	4619      	mov	r1, r3
 8005df2:	f005 f993 	bl	800b11c <memcpy>
        remaining -= transferLen;
 8005df6:	8bfa      	ldrh	r2, [r7, #30]
 8005df8:	8b7b      	ldrh	r3, [r7, #26]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	83fb      	strh	r3, [r7, #30]
        cursor += transferLen;
 8005dfe:	8c3a      	ldrh	r2, [r7, #32]
 8005e00:	8b7b      	ldrh	r3, [r7, #26]
 8005e02:	4413      	add	r3, r2
 8005e04:	843b      	strh	r3, [r7, #32]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	6810      	ldr	r0, [r2, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	f102 010c 	add.w	r1, r2, #12
 8005e16:	8b3a      	ldrh	r2, [r7, #24]
 8005e18:	4798      	blx	r3
 8005e1a:	6278      	str	r0, [r7, #36]	; 0x24

/*******************************************************************************
* USER ADDED CODE
*******************************************************************************/

        uint8_t timeoutOccurred = 1;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	777b      	strb	r3, [r7, #29]
        uint32_t tickStart = HAL_GetTick();
 8005e20:	f001 fa3c 	bl	800729c <HAL_GetTick>
 8005e24:	6178      	str	r0, [r7, #20]
        while((HAL_GetTick() - tickStart) < 10U)
 8005e26:	e013      	b.n	8005e50 <txProcess+0x112>
        {
			shtp_service(pShtp);
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fa3e 	bl	80062aa <shtp_service>
			status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	6810      	ldr	r0, [r2, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	f102 010c 	add.w	r1, r2, #12
 8005e3e:	8b3a      	ldrh	r2, [r7, #24]
 8005e40:	4798      	blx	r3
 8005e42:	6278      	str	r0, [r7, #36]	; 0x24
			if(status)
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <txProcess+0x112>
			{
				timeoutOccurred = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	777b      	strb	r3, [r7, #29]
				break;
 8005e4e:	e006      	b.n	8005e5e <txProcess+0x120>
        while((HAL_GetTick() - tickStart) < 10U)
 8005e50:	f001 fa24 	bl	800729c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b09      	cmp	r3, #9
 8005e5c:	d9e4      	bls.n	8005e28 <txProcess+0xea>
			}
        }

        if(timeoutOccurred)
 8005e5e:	7f7b      	ldrb	r3, [r7, #29]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <txProcess+0x12c>
        	return SH2_ERR_TIMEOUT;
 8005e64:	f06f 0305 	mvn.w	r3, #5
 8005e68:	e013      	b.n	8005e92 <txProcess+0x154>


/******************************************************************************/

        if (status < 0)
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	da08      	bge.n	8005e82 <txProcess+0x144>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
            return status;
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	e007      	b.n	8005e92 <txProcess+0x154>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while (remaining > 0) {
 8005e88:	8bfb      	ldrh	r3, [r7, #30]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f47f af6b 	bne.w	8005d66 <txProcess+0x28>
    }

    return SH2_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	372c      	adds	r7, #44	; 0x2c
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd90      	pop	{r4, r7, pc}

08005e9a <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 8005e9a:	b590      	push	{r4, r7, lr}
 8005e9c:	b087      	sub	sp, #28
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d813      	bhi.n	8005ee0 <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 813a 	beq.w	8006144 <rxAssemble+0x2aa>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	6892      	ldr	r2, [r2, #8]
 8005ed8:	2101      	movs	r1, #1
 8005eda:	4610      	mov	r0, r2
 8005edc:	4798      	blx	r3
        }
        return;
 8005ede:	e131      	b.n	8006144 <rxAssemble+0x2aa>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005efa:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	3301      	adds	r3, #1
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	b25b      	sxtb	r3, r3
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	09db      	lsrs	r3, r3, #7
 8005f08:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	789b      	ldrb	r3, [r3, #2]
 8005f0e:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	78db      	ldrb	r3, [r3, #3]
 8005f14:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 8005f16:	7dfa      	ldrb	r2, [r7, #23]
 8005f18:	68f9      	ldr	r1, [r7, #12]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	7dba      	ldrb	r2, [r7, #22]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d00a      	beq.n	8005f46 <rxAssemble+0xac>
        if (pShtp->eventCallback) {
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d006      	beq.n	8005f46 <rxAssemble+0xac>
            pShtp->eventCallback(pShtp->eventCookie,
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	6892      	ldr	r2, [r2, #8]
 8005f40:	2106      	movs	r1, #6
 8005f42:	4610      	mov	r0, r2
 8005f44:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 8005f46:	8abb      	ldrh	r3, [r7, #20]
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d813      	bhi.n	8005f74 <rxAssemble+0xda>
        pShtp->rxShortFragments++;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80f2 	beq.w	8006148 <rxAssemble+0x2ae>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	6892      	ldr	r2, [r2, #8]
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4798      	blx	r3
        }
        return;
 8005f72:	e0e9      	b.n	8006148 <rxAssemble+0x2ae>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 8005f74:	7dfb      	ldrb	r3, [r7, #23]
 8005f76:	2b07      	cmp	r3, #7
 8005f78:	d913      	bls.n	8005fa2 <rxAssemble+0x108>
        // Invalid channel id.
        pShtp->rxBadChan++;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

        if (pShtp->eventCallback) {
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80dd 	beq.w	800614c <rxAssemble+0x2b2>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	6892      	ldr	r2, [r2, #8]
 8005f9a:	2103      	movs	r1, #3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4798      	blx	r3
        }
        return;
 8005fa0:	e0d4      	b.n	800614c <rxAssemble+0x2b2>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d040      	beq.n	800602e <rxAssemble+0x194>
        // Check this against previously received data.
        if (!continuation ||
 8005fac:	7cfb      	ldrb	r3, [r7, #19]
 8005fae:	f083 0301 	eor.w	r3, r3, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d119      	bne.n	8005fec <rxAssemble+0x152>
            (chan != pShtp->inChan) ||
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
        if (!continuation ||
 8005fbe:	7dfa      	ldrb	r2, [r7, #23]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d113      	bne.n	8005fec <rxAssemble+0x152>
            (seq != pShtp->chan[chan].nextInSeq) ||
 8005fc4:	7dfa      	ldrb	r2, [r7, #23]
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8005fd6:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8005fd8:	7dba      	ldrb	r2, [r7, #22]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d106      	bne.n	8005fec <rxAssemble+0x152>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 8005fde:	8abb      	ldrh	r3, [r7, #20]
 8005fe0:	3b04      	subs	r3, #4
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	f8b2 208c 	ldrh.w	r2, [r2, #140]	; 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d020      	beq.n	800602e <rxAssemble+0x194>
            
            if (pShtp->eventCallback) {
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d006      	beq.n	8006002 <rxAssemble+0x168>
                pShtp->eventCallback(pShtp->eventCookie,
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	6892      	ldr	r2, [r2, #8]
 8005ffc:	2105      	movs	r1, #5
 8005ffe:	4610      	mov	r0, r2
 8006000:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

            pShtp->rxInterruptedPayloads++;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            if (pShtp->eventCallback) {
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d006      	beq.n	800602e <rxAssemble+0x194>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	6892      	ldr	r2, [r2, #8]
 8006028:	2107      	movs	r1, #7
 800602a:	4610      	mov	r0, r2
 800602c:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 800602e:	7dfa      	ldrb	r2, [r7, #23]
 8006030:	7dbb      	ldrb	r3, [r7, #22]
 8006032:	3301      	adds	r3, #1
 8006034:	b2d8      	uxtb	r0, r3
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	4613      	mov	r3, r2
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	4413      	add	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8006046:	4602      	mov	r2, r0
 8006048:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d122      	bne.n	800609a <rxAssemble+0x200>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 8006054:	8abb      	ldrh	r3, [r7, #20]
 8006056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605a:	d912      	bls.n	8006082 <rxAssemble+0x1e8>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
            
            if (pShtp->eventCallback) {
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d06e      	beq.n	8006150 <rxAssemble+0x2b6>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	6892      	ldr	r2, [r2, #8]
 800607a:	2102      	movs	r1, #2
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
            }

            return;
 8006080:	e066      	b.n	8006150 <rxAssemble+0x2b6>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
        pShtp->inChan = chan;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	7dfa      	ldrb	r2, [r7, #23]
 8006096:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	8abb      	ldrh	r3, [r7, #20]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d901      	bls.n	80060a6 <rxAssemble+0x20c>
        // Only use the valid portion of the transfer
        len = payloadLen;
 80060a2:	8abb      	ldrh	r3, [r7, #20]
 80060a4:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	338f      	adds	r3, #143	; 0x8f
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	; 0x490
 80060b0:	1898      	adds	r0, r3, r2
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	1d19      	adds	r1, r3, #4
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	3b04      	subs	r3, #4
 80060ba:	461a      	mov	r2, r3
 80060bc:	f005 f82e 	bl	800b11c <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	4413      	add	r3, r2
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b04      	subs	r3, #4
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
    pShtp->inRemaining = payloadLen - len;
 80060d6:	8aba      	ldrh	r2, [r7, #20]
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d131      	bne.n	8006152 <rxAssemble+0x2b8>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 80060ee:	7dfa      	ldrb	r2, [r7, #23]
 80060f0:	68f9      	ldr	r1, [r7, #12]
 80060f2:	4613      	mov	r3, r2
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d025      	beq.n	8006152 <rxAssemble+0x2b8>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8006106:	7dfa      	ldrb	r2, [r7, #23]
 8006108:	68f9      	ldr	r1, [r7, #12]
 800610a:	4613      	mov	r3, r2
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8006118:	681c      	ldr	r4, [r3, #0]
 800611a:	7dfa      	ldrb	r2, [r7, #23]
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	4613      	mov	r3, r2
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 800612c:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f103 018f 	add.w	r1, r3, #143	; 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8006140:	47a0      	blx	r4
 8006142:	e006      	b.n	8006152 <rxAssemble+0x2b8>
        return;
 8006144:	bf00      	nop
 8006146:	e004      	b.n	8006152 <rxAssemble+0x2b8>
        return;
 8006148:	bf00      	nop
 800614a:	e002      	b.n	8006152 <rxAssemble+0x2b8>
        return;
 800614c:	bf00      	nop
 800614e:	e000      	b.n	8006152 <rxAssemble+0x2b8>
            return;
 8006150:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd90      	pop	{r4, r7, pc}

08006158 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 8006160:	4b16      	ldr	r3, [pc, #88]	; (80061bc <shtp_open+0x64>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f083 0301 	eor.w	r3, r3, #1
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 800616e:	f7ff fd87 	bl	8005c80 <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <shtp_open+0x24>
        // Error
        return 0;
 8006178:	2300      	movs	r3, #0
 800617a:	e01b      	b.n	80061b4 <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 800617c:	f7ff fda2 	bl	8005cc4 <getInstance>
 8006180:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8006188:	2300      	movs	r3, #0
 800618a:	e013      	b.n	80061b4 <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 800618c:	f640 1214 	movw	r2, #2324	; 0x914
 8006190:	2100      	movs	r1, #0
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f004 ffd0 	bl	800b138 <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
 80061a0:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <shtp_open+0x54>
        return 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e003      	b.n	80061b4 <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]

    return pShtp;
 80061b2:	68fb      	ldr	r3, [r7, #12]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000ed8 	.word	0x20000ed8

080061c0 <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	609a      	str	r2, [r3, #8]
}
 80061dc:	bf00      	nop
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	607a      	str	r2, [r7, #4]
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	460b      	mov	r3, r1
 80061f6:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <shtp_listenChan+0x20>
 8006202:	7afb      	ldrb	r3, [r7, #11]
 8006204:	2b07      	cmp	r3, #7
 8006206:	d902      	bls.n	800620e <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 8006208:	f06f 0301 	mvn.w	r3, #1
 800620c:	e016      	b.n	800623c <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 800620e:	7afa      	ldrb	r2, [r7, #11]
 8006210:	6979      	ldr	r1, [r7, #20]
 8006212:	4613      	mov	r3, r2
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 8006224:	7afa      	ldrb	r2, [r7, #11]
 8006226:	6979      	ldr	r1, [r7, #20]
 8006228:	4613      	mov	r3, r2
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	461a      	mov	r2, r3
 8006254:	460b      	mov	r3, r1
 8006256:	72fb      	strb	r3, [r7, #11]
 8006258:	4613      	mov	r3, r2
 800625a:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 8006260:	893b      	ldrh	r3, [r7, #8]
 8006262:	2b80      	cmp	r3, #128	; 0x80
 8006264:	d909      	bls.n	800627a <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f8d3 3910 	ldr.w	r3, [r3, #2320]	; 0x910
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
        return SH2_ERR_BAD_PARAM;
 8006274:	f06f 0301 	mvn.w	r3, #1
 8006278:	e013      	b.n	80062a2 <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 800627a:	7afb      	ldrb	r3, [r7, #11]
 800627c:	2b07      	cmp	r3, #7
 800627e:	d909      	bls.n	8006294 <shtp_send+0x4c>
        pShtp->badTxChan++;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
        return SH2_ERR_BAD_PARAM;
 800628e:	f06f 0301 	mvn.w	r3, #1
 8006292:	e006      	b.n	80062a2 <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8006294:	893b      	ldrh	r3, [r7, #8]
 8006296:	7af9      	ldrb	r1, [r7, #11]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6978      	ldr	r0, [r7, #20]
 800629c:	f7ff fd4f 	bl	8005d3e <txProcess>
 80062a0:	4603      	mov	r3, r0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 80062aa:	b590      	push	{r4, r7, lr}
 80062ac:	b087      	sub	sp, #28
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689c      	ldr	r4, [r3, #8]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 80062ca:	f107 030c 	add.w	r3, r7, #12
 80062ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062d2:	47a0      	blx	r4
 80062d4:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	dd08      	ble.n	80062ee <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6978      	ldr	r0, [r7, #20]
 80062ea:	f7ff fdd6 	bl	8005e9a <rxAssemble>
    }
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd90      	pop	{r4, r7, pc}
	...

080062f8 <BNO08x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

BNO08x_Error_e BNO08x_Init(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
	sh2_Hal_t *pSh2Hal = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	607b      	str	r3, [r7, #4]
	pSh2Hal = sh2_hal_init();
 8006302:	f000 fbb5 	bl	8006a70 <sh2_hal_init>
 8006306:	6078      	str	r0, [r7, #4]
	int status = sh2_open(pSh2Hal, EventHandler, NULL);
 8006308:	2200      	movs	r2, #0
 800630a:	490e      	ldr	r1, [pc, #56]	; (8006344 <BNO08x_Init+0x4c>)
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7fe f925 	bl	800455c <sh2_open>
 8006312:	6038      	str	r0, [r7, #0]
	if(status != SH2_OK)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <BNO08x_Init+0x26>
		return BNO08x_InitError;
 800631a:	2301      	movs	r3, #1
 800631c:	e00e      	b.n	800633c <BNO08x_Init+0x44>

	sh2_setSensorCallback(ReadEvent, NULL); // incompatible??
 800631e:	2100      	movs	r1, #0
 8006320:	4809      	ldr	r0, [pc, #36]	; (8006348 <BNO08x_Init+0x50>)
 8006322:	f7fe f9c9 	bl	80046b8 <sh2_setSensorCallback>

  	if(StartReports())
 8006326:	f000 f82f 	bl	8006388 <StartReports>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <BNO08x_Init+0x3c>
  		return BNO08x_InitError;
 8006330:	2301      	movs	r3, #1
 8006332:	e003      	b.n	800633c <BNO08x_Init+0x44>

  	isInit = 1;
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <BNO08x_Init+0x54>)
 8006336:	2201      	movs	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]

	return BNO08x_NoError;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	080063e9 	.word	0x080063e9
 8006348:	08006411 	.word	0x08006411
 800634c:	20000f05 	.word	0x20000f05

08006350 <BNO08x_StartReports>:

BNO08x_Error_e BNO08x_StartReports(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
	if(!isInit)
 8006354:	4b04      	ldr	r3, [pc, #16]	; (8006368 <BNO08x_StartReports+0x18>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d100      	bne.n	800635e <BNO08x_StartReports+0xe>
		while(1);
 800635c:	e7fe      	b.n	800635c <BNO08x_StartReports+0xc>

	return StartReports();
 800635e:	f000 f813 	bl	8006388 <StartReports>
 8006362:	4603      	mov	r3, r0
}
 8006364:	4618      	mov	r0, r3
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20000f05 	.word	0x20000f05

0800636c <BNO08x_ReadSensors>:


void BNO08x_ReadSensors(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
	if(!isInit)
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <BNO08x_ReadSensors+0x18>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d100      	bne.n	800637a <BNO08x_ReadSensors+0xe>
		while(1);
 8006378:	e7fe      	b.n	8006378 <BNO08x_ReadSensors+0xc>

	sh2_service();
 800637a:	f7fe f989 	bl	8004690 <sh2_service>
}
 800637e:	bf00      	nop
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000f05 	.word	0x20000f05

08006388 <StartReports>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static BNO08x_Error_e StartReports(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
		{SH2_ACCELEROMETER, {.reportInterval_us = 2000}},			// m/s^2, max interval = 500 Hz = 2000 us
		{SH2_GYROSCOPE_CALIBRATED, {.reportInterval_us = 2500}},	// rad/s, max interval = 400 Hz = 2500 us
        {SH2_GAME_ROTATION_VECTOR, {.reportInterval_us = 2500}},	// quaternions, max interval = 400 Hz = 2500 us
    };

    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e01e      	b.n	80063d2 <StartReports+0x4a>
    {
        int sensorId = sensorConfig[n].sensorId;
 8006394:	4913      	ldr	r1, [pc, #76]	; (80063e4 <StartReports+0x5c>)
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4613      	mov	r3, r2
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4413      	add	r3, r2
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	440b      	add	r3, r1
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	60bb      	str	r3, [r7, #8]

        int status = sh2_setSensorConfig(sensorId, &sensorConfig[n].config);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	b2d8      	uxtb	r0, r3
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <StartReports+0x5c>)
 80063b6:	4413      	add	r3, r2
 80063b8:	3304      	adds	r3, #4
 80063ba:	4619      	mov	r1, r3
 80063bc:	f7fe f992 	bl	80046e4 <sh2_setSensorConfig>
 80063c0:	6078      	str	r0, [r7, #4]
        if (status != 0)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <StartReports+0x44>
        	return BNO08x_StartReportError;
 80063c8:	2302      	movs	r3, #2
 80063ca:	e006      	b.n	80063da <StartReports+0x52>
    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d9dd      	bls.n	8006394 <StartReports+0xc>
    }

    return BNO08x_NoError;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	0800b890 	.word	0x0800b890

080063e8 <EventHandler>:

static void EventHandler(void * cookie, sh2_AsyncEvent_t *pEvent)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
    if (pEvent->eventId == SH2_RESET)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <EventHandler+0x18>
        BNO08x_resetOccurred = 1;
 80063fa:	4b04      	ldr	r3, [pc, #16]	; (800640c <EventHandler+0x24>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	20000f04 	.word	0x20000f04

08006410 <ReadEvent>:

static void ReadEvent(void * cookie, sh2_SensorEvent_t * event, int16_t *data)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b09a      	sub	sp, #104	; 0x68
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
    int rc;
    sh2_SensorValue_t value;

    rc = sh2_decodeSensorEvent(&value, event);
 800641c:	f107 0310 	add.w	r3, r7, #16
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe f988 	bl	8004738 <sh2_decodeSensorEvent>
 8006428:	6678      	str	r0, [r7, #100]	; 0x64
    if (rc != SH2_OK)
 800642a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800642c:	2b00      	cmp	r3, #0
 800642e:	d12a      	bne.n	8006486 <ReadEvent+0x76>
        return;

    switch(value.sensorId)
 8006430:	7c3b      	ldrb	r3, [r7, #16]
 8006432:	2b08      	cmp	r3, #8
 8006434:	d01a      	beq.n	800646c <ReadEvent+0x5c>
 8006436:	2b08      	cmp	r3, #8
 8006438:	dc26      	bgt.n	8006488 <ReadEvent+0x78>
 800643a:	2b01      	cmp	r3, #1
 800643c:	d002      	beq.n	8006444 <ReadEvent+0x34>
 800643e:	2b02      	cmp	r3, #2
 8006440:	d00a      	beq.n	8006458 <ReadEvent+0x48>
 8006442:	e021      	b.n	8006488 <ReadEvent+0x78>
    {
        case SH2_ACCELEROMETER:
        	BNO08x_IMU_Data[0] = value.un.accelerometer.x;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <ReadEvent+0x80>)
 8006448:	6013      	str	r3, [r2, #0]
        	BNO08x_IMU_Data[1] = value.un.accelerometer.y;
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	4a10      	ldr	r2, [pc, #64]	; (8006490 <ReadEvent+0x80>)
 800644e:	6053      	str	r3, [r2, #4]
        	BNO08x_IMU_Data[2] = value.un.accelerometer.z;
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <ReadEvent+0x80>)
 8006454:	6093      	str	r3, [r2, #8]
            break;
 8006456:	e017      	b.n	8006488 <ReadEvent+0x78>

        case SH2_GYROSCOPE_CALIBRATED:
        	BNO08x_IMU_Data[3] = value.un.gyroscope.x;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	4a0d      	ldr	r2, [pc, #52]	; (8006490 <ReadEvent+0x80>)
 800645c:	60d3      	str	r3, [r2, #12]
        	BNO08x_IMU_Data[4] = value.un.gyroscope.y;
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	4a0b      	ldr	r2, [pc, #44]	; (8006490 <ReadEvent+0x80>)
 8006462:	6113      	str	r3, [r2, #16]
        	BNO08x_IMU_Data[5] = value.un.gyroscope.z;
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	4a0a      	ldr	r2, [pc, #40]	; (8006490 <ReadEvent+0x80>)
 8006468:	6153      	str	r3, [r2, #20]
            break;
 800646a:	e00d      	b.n	8006488 <ReadEvent+0x78>

        case SH2_GAME_ROTATION_VECTOR:
        	BNO08x_IMU_Data[6] = value.un.gameRotationVector.real;
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	4a08      	ldr	r2, [pc, #32]	; (8006490 <ReadEvent+0x80>)
 8006470:	6193      	str	r3, [r2, #24]
        	BNO08x_IMU_Data[7] = value.un.gameRotationVector.i;
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	4a06      	ldr	r2, [pc, #24]	; (8006490 <ReadEvent+0x80>)
 8006476:	61d3      	str	r3, [r2, #28]
        	BNO08x_IMU_Data[8] = value.un.gameRotationVector.j;
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	4a05      	ldr	r2, [pc, #20]	; (8006490 <ReadEvent+0x80>)
 800647c:	6213      	str	r3, [r2, #32]
        	BNO08x_IMU_Data[9] = value.un.gameRotationVector.k;
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	4a03      	ldr	r2, [pc, #12]	; (8006490 <ReadEvent+0x80>)
 8006482:	6253      	str	r3, [r2, #36]	; 0x24
            break;
 8006484:	e000      	b.n	8006488 <ReadEvent+0x78>
        return;
 8006486:	bf00      	nop
    }
}
 8006488:	3768      	adds	r7, #104	; 0x68
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000edc 	.word	0x20000edc

08006494 <bootn>:

// ------------------------------------------------------------------------
// Private methods

static void bootn(bool state)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(KNEE_IMU_BT_GPIO_Port, KNEE_IMU_BT_Pin,
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	461a      	mov	r2, r3
 80064a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80064a6:	4803      	ldr	r0, [pc, #12]	; (80064b4 <bootn+0x20>)
 80064a8:	f002 f9d0 	bl	800884c <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80064ac:	bf00      	nop
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	48000400 	.word	0x48000400

080064b8 <rstn>:

static void rstn(bool state)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(KNEE_IMU_RST_GPIO_Port, KNEE_IMU_RST_Pin,
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	461a      	mov	r2, r3
 80064c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064ca:	4803      	ldr	r0, [pc, #12]	; (80064d8 <rstn+0x20>)
 80064cc:	f002 f9be 	bl	800884c <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	48000400 	.word	0x48000400

080064dc <ps0_waken>:

static void ps0_waken(bool state)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(KNEE_IMU_P0_GPIO_Port, KNEE_IMU_P0_Pin,
 80064e6:	79fb      	ldrb	r3, [r7, #7]
 80064e8:	461a      	mov	r2, r3
 80064ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064ee:	4803      	ldr	r0, [pc, #12]	; (80064fc <ps0_waken+0x20>)
 80064f0:	f002 f9ac 	bl	800884c <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	48000400 	.word	0x48000400

08006500 <ps1>:

static void ps1(bool state)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(KNEE_IMU_P1_GPIO_Port, KNEE_IMU_P1_Pin,
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	461a      	mov	r2, r3
 800650e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006512:	4803      	ldr	r0, [pc, #12]	; (8006520 <ps1+0x20>)
 8006514:	f002 f99a 	bl	800884c <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	48000400 	.word	0x48000400

08006524 <csn>:

static void csn(bool state)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(KNEE_IMU_CS_GPIO_Port, KNEE_IMU_CS_Pin,
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	461a      	mov	r2, r3
 8006532:	2110      	movs	r1, #16
 8006534:	4803      	ldr	r0, [pc, #12]	; (8006544 <csn+0x20>)
 8006536:	f002 f989 	bl	800884c <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	48000400 	.word	0x48000400

08006548 <timeNowUs>:

static uint32_t timeNowUs(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);
 800654c:	4b03      	ldr	r3, [pc, #12]	; (800655c <timeNowUs+0x14>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8006552:	4618      	mov	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	200003ac 	.word	0x200003ac

08006560 <hal_init_timer>:

static void hal_init_timer(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0

    HAL_TIM_Base_Start(&htim2);
 8006564:	4802      	ldr	r0, [pc, #8]	; (8006570 <hal_init_timer+0x10>)
 8006566:	f003 fe83 	bl	800a270 <HAL_TIM_Base_Start>
}
 800656a:	bf00      	nop
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	200003ac 	.word	0x200003ac

08006574 <spiDummyOp>:



static void spiDummyOp(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af02      	add	r7, sp, #8
 800657a:	23aa      	movs	r3, #170	; 0xaa
 800657c:	713b      	strb	r3, [r7, #4]
    uint8_t dummyTx[1];
    uint8_t dummyRx[1];

    memset(dummyTx, 0xAA, sizeof(dummyTx));

    HAL_SPI_TransmitReceive(&hspi1, dummyTx, dummyRx, sizeof(dummyTx), 2);
 800657e:	463a      	mov	r2, r7
 8006580:	1d39      	adds	r1, r7, #4
 8006582:	2302      	movs	r3, #2
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	2301      	movs	r3, #1
 8006588:	4803      	ldr	r0, [pc, #12]	; (8006598 <spiDummyOp+0x24>)
 800658a:	f002 fcf8 	bl	8008f7e <HAL_SPI_TransmitReceive>
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000348 	.word	0x20000348

0800659c <hal_init_hw>:



static void hal_init_hw(bool dfu)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	71fb      	strb	r3, [r7, #7]
    hal_init_timer();
 80065a6:	f7ff ffdb 	bl	8006560 <hal_init_timer>

}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <enableInts>:

static void enableInts(void)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	af00      	add	r7, sp, #0
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80065b6:	2017      	movs	r0, #23
 80065b8:	f001 fe41 	bl	800823e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80065bc:	2023      	movs	r0, #35	; 0x23
 80065be:	f001 fe3e 	bl	800823e <HAL_NVIC_EnableIRQ>
}
 80065c2:	bf00      	nop
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <disableInts>:

static void disableInts()
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80065ca:	2023      	movs	r0, #35	; 0x23
 80065cc:	f001 fe45 	bl	800825a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80065d0:	2017      	movs	r0, #23
 80065d2:	f001 fe42 	bl	800825a <HAL_NVIC_DisableIRQ>
}
 80065d6:	bf00      	nop
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <spiActivate>:
// Attempt to start a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// If SPI periph is not in use and there is data to send or receive,
// this will start a SPI operation.
static void spiActivate(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
    if ((spiState == SPI_IDLE) && (rxBufLen == 0))
 80065e0:	4b18      	ldr	r3, [pc, #96]	; (8006644 <spiActivate+0x68>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d12a      	bne.n	800663e <spiActivate+0x62>
 80065e8:	4b17      	ldr	r3, [pc, #92]	; (8006648 <spiActivate+0x6c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d126      	bne.n	800663e <spiActivate+0x62>
    {
        if (rxReady)
 80065f0:	4b16      	ldr	r3, [pc, #88]	; (800664c <spiActivate+0x70>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d021      	beq.n	800663e <spiActivate+0x62>
        {
            // reset flag that was set with INTN
            rxReady = false;
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <spiActivate+0x70>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	701a      	strb	r2, [r3, #0]

            // assert CSN
            csn(false);
 8006600:	2000      	movs	r0, #0
 8006602:	f7ff ff8f 	bl	8006524 <csn>

            if (txBufLen > 0)
 8006606:	4b12      	ldr	r3, [pc, #72]	; (8006650 <spiActivate+0x74>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00e      	beq.n	800662c <spiActivate+0x50>
            {
                spiState = SPI_WRITE;
 800660e:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <spiActivate+0x68>)
 8006610:	2206      	movs	r2, #6
 8006612:	701a      	strb	r2, [r3, #0]

                // Start operation to write (and, incidentally, read)
                HAL_SPI_TransmitReceive_IT(&hspi1, txBuf, rxBuf, txBufLen);
 8006614:	4b0e      	ldr	r3, [pc, #56]	; (8006650 <spiActivate+0x74>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	b29b      	uxth	r3, r3
 800661a:	4a0e      	ldr	r2, [pc, #56]	; (8006654 <spiActivate+0x78>)
 800661c:	490e      	ldr	r1, [pc, #56]	; (8006658 <spiActivate+0x7c>)
 800661e:	480f      	ldr	r0, [pc, #60]	; (800665c <spiActivate+0x80>)
 8006620:	f002 fffe 	bl	8009620 <HAL_SPI_TransmitReceive_IT>

                // Deassert Wake
                ps0_waken(true);
 8006624:	2001      	movs	r0, #1
 8006626:	f7ff ff59 	bl	80064dc <ps0_waken>
                // Start SPI operation to read header (writing zeros)
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
            }
        }
    }
}
 800662a:	e008      	b.n	800663e <spiActivate+0x62>
                spiState = SPI_RD_HDR;
 800662c:	4b05      	ldr	r3, [pc, #20]	; (8006644 <spiActivate+0x68>)
 800662e:	2204      	movs	r2, #4
 8006630:	701a      	strb	r2, [r3, #0]
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
 8006632:	2304      	movs	r3, #4
 8006634:	4a07      	ldr	r2, [pc, #28]	; (8006654 <spiActivate+0x78>)
 8006636:	490a      	ldr	r1, [pc, #40]	; (8006660 <spiActivate+0x84>)
 8006638:	4808      	ldr	r0, [pc, #32]	; (800665c <spiActivate+0x80>)
 800663a:	f002 fff1 	bl	8009620 <HAL_SPI_TransmitReceive_IT>
}
 800663e:	bf00      	nop
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000f06 	.word	0x20000f06
 8006648:	20001310 	.word	0x20001310
 800664c:	20000f0d 	.word	0x20000f0d
 8006650:	20001398 	.word	0x20001398
 8006654:	20000f10 	.word	0x20000f10
 8006658:	20001318 	.word	0x20001318
 800665c:	20000348 	.word	0x20000348
 8006660:	0800b8d8 	.word	0x0800b8d8

08006664 <spiCompleted>:
// Handle the end of a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// Depending on spiState, it may start a follow-up operation or transition
// to idle.  In the latter case, it will call spiActivate
static void spiCompleted(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
    // Get length of payload available
    uint16_t rxLen = (rxBuf[0] + (rxBuf[1] << 8)) & ~0x8000;
 800666a:	4b33      	ldr	r3, [pc, #204]	; (8006738 <spiCompleted+0xd4>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	b29a      	uxth	r2, r3
 8006670:	4b31      	ldr	r3, [pc, #196]	; (8006738 <spiCompleted+0xd4>)
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	b29b      	uxth	r3, r3
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	b29b      	uxth	r3, r3
 800667a:	4413      	add	r3, r2
 800667c:	b29b      	uxth	r3, r3
 800667e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006682:	80fb      	strh	r3, [r7, #6]

    // Truncate that to max len we can read
    if (rxLen > sizeof(rxBuf))
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668a:	d902      	bls.n	8006692 <spiCompleted+0x2e>
    {
        rxLen = sizeof(rxBuf);
 800668c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006690:	80fb      	strh	r3, [r7, #6]
    }

    if (spiState == SPI_DUMMY)
 8006692:	4b2a      	ldr	r3, [pc, #168]	; (800673c <spiCompleted+0xd8>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d103      	bne.n	80066a2 <spiCompleted+0x3e>
    {
        // SPI Dummy operation completed, transition now to idle
        spiState = SPI_IDLE;
 800669a:	4b28      	ldr	r3, [pc, #160]	; (800673c <spiCompleted+0xd8>)
 800669c:	2203      	movs	r2, #3
 800669e:	701a      	strb	r2, [r3, #0]
        spiState = SPI_IDLE;

        // Activate the next operation, if any.
        spiActivate();
    }
}
 80066a0:	e045      	b.n	800672e <spiCompleted+0xca>
    else if (spiState == SPI_RD_HDR)
 80066a2:	4b26      	ldr	r3, [pc, #152]	; (800673c <spiCompleted+0xd8>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d11a      	bne.n	80066e0 <spiCompleted+0x7c>
        if (rxLen > READ_LEN) {
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d90b      	bls.n	80066c8 <spiCompleted+0x64>
            spiState = SPI_RD_BODY;
 80066b0:	4b22      	ldr	r3, [pc, #136]	; (800673c <spiCompleted+0xd8>)
 80066b2:	2205      	movs	r2, #5
 80066b4:	701a      	strb	r2, [r3, #0]
            HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf+READ_LEN, rxLen-READ_LEN);
 80066b6:	4a22      	ldr	r2, [pc, #136]	; (8006740 <spiCompleted+0xdc>)
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	3b04      	subs	r3, #4
 80066bc:	b29b      	uxth	r3, r3
 80066be:	4921      	ldr	r1, [pc, #132]	; (8006744 <spiCompleted+0xe0>)
 80066c0:	4821      	ldr	r0, [pc, #132]	; (8006748 <spiCompleted+0xe4>)
 80066c2:	f002 ffad 	bl	8009620 <HAL_SPI_TransmitReceive_IT>
}
 80066c6:	e032      	b.n	800672e <spiCompleted+0xca>
            csn(true);            // deassert CSN
 80066c8:	2001      	movs	r0, #1
 80066ca:	f7ff ff2b 	bl	8006524 <csn>
            rxBufLen = 0;         // no rx data available
 80066ce:	4b1f      	ldr	r3, [pc, #124]	; (800674c <spiCompleted+0xe8>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
            spiState = SPI_IDLE;  // back to idle state
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <spiCompleted+0xd8>)
 80066d6:	2203      	movs	r2, #3
 80066d8:	701a      	strb	r2, [r3, #0]
            spiActivate();        // activate next operation, if any.
 80066da:	f7ff ff7f 	bl	80065dc <spiActivate>
}
 80066de:	e026      	b.n	800672e <spiCompleted+0xca>
    else if (spiState == SPI_RD_BODY)
 80066e0:	4b16      	ldr	r3, [pc, #88]	; (800673c <spiCompleted+0xd8>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b05      	cmp	r3, #5
 80066e6:	d10b      	bne.n	8006700 <spiCompleted+0x9c>
        csn(true);
 80066e8:	2001      	movs	r0, #1
 80066ea:	f7ff ff1b 	bl	8006524 <csn>
        rxBufLen = rxLen;
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	4a16      	ldr	r2, [pc, #88]	; (800674c <spiCompleted+0xe8>)
 80066f2:	6013      	str	r3, [r2, #0]
        spiState = SPI_IDLE;
 80066f4:	4b11      	ldr	r3, [pc, #68]	; (800673c <spiCompleted+0xd8>)
 80066f6:	2203      	movs	r2, #3
 80066f8:	701a      	strb	r2, [r3, #0]
        spiActivate();
 80066fa:	f7ff ff6f 	bl	80065dc <spiActivate>
}
 80066fe:	e016      	b.n	800672e <spiCompleted+0xca>
    else if (spiState == SPI_WRITE)
 8006700:	4b0e      	ldr	r3, [pc, #56]	; (800673c <spiCompleted+0xd8>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b06      	cmp	r3, #6
 8006706:	d112      	bne.n	800672e <spiCompleted+0xca>
        csn(true);
 8006708:	2001      	movs	r0, #1
 800670a:	f7ff ff0b 	bl	8006524 <csn>
        rxBufLen = (txBufLen < rxLen) ? txBufLen : rxLen;
 800670e:	88fa      	ldrh	r2, [r7, #6]
 8006710:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <spiCompleted+0xec>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4293      	cmp	r3, r2
 8006716:	bf28      	it	cs
 8006718:	4613      	movcs	r3, r2
 800671a:	4a0c      	ldr	r2, [pc, #48]	; (800674c <spiCompleted+0xe8>)
 800671c:	6013      	str	r3, [r2, #0]
        txBufLen = 0;
 800671e:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <spiCompleted+0xec>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]
        spiState = SPI_IDLE;
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <spiCompleted+0xd8>)
 8006726:	2203      	movs	r2, #3
 8006728:	701a      	strb	r2, [r3, #0]
        spiActivate();
 800672a:	f7ff ff57 	bl	80065dc <spiActivate>
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000f10 	.word	0x20000f10
 800673c:	20000f06 	.word	0x20000f06
 8006740:	20000f14 	.word	0x20000f14
 8006744:	0800b8d8 	.word	0x0800b8d8
 8006748:	20000348 	.word	0x20000348
 800674c:	20001310 	.word	0x20001310
 8006750:	20001398 	.word	0x20001398

08006754 <HAL_GPIO_EXTI_Callback>:


// Interrupt handlers and SPI operation callbacks

void HAL_GPIO_EXTI_Callback(uint16_t n)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	80fb      	strh	r3, [r7, #6]
    rxTimestamp_us = timeNowUs();
 800675e:	f7ff fef3 	bl	8006548 <timeNowUs>
 8006762:	4603      	mov	r3, r0
 8006764:	4a06      	ldr	r2, [pc, #24]	; (8006780 <HAL_GPIO_EXTI_Callback+0x2c>)
 8006766:	6013      	str	r3, [r2, #0]

    inReset = false;
 8006768:	4b06      	ldr	r3, [pc, #24]	; (8006784 <HAL_GPIO_EXTI_Callback+0x30>)
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
    rxReady = true;
 800676e:	4b06      	ldr	r3, [pc, #24]	; (8006788 <HAL_GPIO_EXTI_Callback+0x34>)
 8006770:	2201      	movs	r2, #1
 8006772:	701a      	strb	r2, [r3, #0]

    // Start read, if possible
    spiActivate();
 8006774:	f7ff ff32 	bl	80065dc <spiActivate>
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20000f08 	.word	0x20000f08
 8006784:	20000f0c 	.word	0x20000f0c
 8006788:	20000f0d 	.word	0x20000f0d

0800678c <EXTI15_10_IRQHandler>:

// Handle INTN Interrupt through STM32 HAL
// (It, in turn, calls HAL_GPIO_EXTI_Callback, above)
void EXTI15_10_IRQHandler(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006790:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006794:	f002 f872 	bl	800887c <HAL_GPIO_EXTI_IRQHandler>
}
 8006798:	bf00      	nop
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi1)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
    if (isOpen)
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_SPI_TxRxCpltCallback+0x14>
    {
        spiCompleted();
 80067ac:	f7ff ff5a 	bl	8006664 <spiCompleted>
    }
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200013b0 	.word	0x200013b0

080067bc <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi1)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]

/*******************************************************************************
* USER ADDED CODE
*******************************************************************************/

	ErrorHandler(KneeIMU_Error);
 80067c4:	2004      	movs	r0, #4
 80067c6:	f7fb fbb5 	bl	8001f34 <ErrorHandler>

/******************************************************************************/


}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <delayUs>:
//{
//    HAL_SPI_IRQHandler(&hspi1);
//}

void delayUs(uint32_t delay)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 80067da:	f7ff feb5 	bl	8006548 <timeNowUs>
 80067de:	4603      	mov	r3, r0
 80067e0:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	60fb      	str	r3, [r7, #12]
    while ((now - start) < delay) {
 80067e6:	e003      	b.n	80067f0 <delayUs+0x1e>
        now = timeNowUs();
 80067e8:	f7ff feae 	bl	8006548 <timeNowUs>
 80067ec:	4603      	mov	r3, r0
 80067ee:	60bb      	str	r3, [r7, #8]
    while ((now - start) < delay) {
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d8f5      	bhi.n	80067e8 <delayUs+0x16>
    }
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <resetDelayUs>:

void resetDelayUs(uint32_t delay)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 8006810:	f7ff fe9a 	bl	8006548 <timeNowUs>
 8006814:	4603      	mov	r3, r0
 8006816:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	60fb      	str	r3, [r7, #12]
    while (((now - start) < delay) && (inReset))
 800681c:	e003      	b.n	8006826 <resetDelayUs+0x1e>
    {
        now = timeNowUs();
 800681e:	f7ff fe93 	bl	8006548 <timeNowUs>
 8006822:	4603      	mov	r3, r0
 8006824:	60bb      	str	r3, [r7, #8]
    while (((now - start) < delay) && (inReset))
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	429a      	cmp	r2, r3
 8006830:	d904      	bls.n	800683c <resetDelayUs+0x34>
 8006832:	4b04      	ldr	r3, [pc, #16]	; (8006844 <resetDelayUs+0x3c>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1f0      	bne.n	800681e <resetDelayUs+0x16>
    }
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000f0c 	.word	0x20000f0c

08006848 <sh2_spi_hal_open>:

// ------------------------------------------------------------------------
// SH2 SPI Hal Methods

static int sh2_spi_hal_open(sh2_Hal_t *self)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
    int retval = SH2_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]

    if (isOpen)
 8006854:	4b21      	ldr	r3, [pc, #132]	; (80068dc <sh2_spi_hal_open+0x94>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <sh2_spi_hal_open+0x1a>
    {
        // Can't open if another instance is already open
        return SH2_ERR;
 800685c:	f04f 33ff 	mov.w	r3, #4294967295
 8006860:	e038      	b.n	80068d4 <sh2_spi_hal_open+0x8c>
    }

    isOpen = true;
 8006862:	4b1e      	ldr	r3, [pc, #120]	; (80068dc <sh2_spi_hal_open+0x94>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]

    // Init hardware (false -> non-DFU config)
    hal_init_hw(false);
 8006868:	2000      	movs	r0, #0
 800686a:	f7ff fe97 	bl	800659c <hal_init_hw>

    // Hold in reset
    rstn(false);
 800686e:	2000      	movs	r0, #0
 8006870:	f7ff fe22 	bl	80064b8 <rstn>

    // deassert CSN
    csn(true);
 8006874:	2001      	movs	r0, #1
 8006876:	f7ff fe55 	bl	8006524 <csn>

    // Clear rx, tx buffers
    rxBufLen = 0;
 800687a:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <sh2_spi_hal_open+0x98>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
    txBufLen = 0;
 8006880:	4b18      	ldr	r3, [pc, #96]	; (80068e4 <sh2_spi_hal_open+0x9c>)
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
    rxDataReady = false;
 8006886:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <sh2_spi_hal_open+0xa0>)
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
    rxReady = false;
 800688c:	4b17      	ldr	r3, [pc, #92]	; (80068ec <sh2_spi_hal_open+0xa4>)
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]

    inReset = true;  // will change back to false when INTN serviced
 8006892:	4b17      	ldr	r3, [pc, #92]	; (80068f0 <sh2_spi_hal_open+0xa8>)
 8006894:	2201      	movs	r2, #1
 8006896:	701a      	strb	r2, [r3, #0]

    // Do dummy SPI operation
    // (First SPI op after reconfig has bad initial state of signals
    // so this is a throwaway operation.  Afterward, all is well.)
    spiState = SPI_DUMMY;
 8006898:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <sh2_spi_hal_open+0xac>)
 800689a:	2201      	movs	r2, #1
 800689c:	701a      	strb	r2, [r3, #0]
    spiDummyOp();
 800689e:	f7ff fe69 	bl	8006574 <spiDummyOp>
    spiState = SPI_IDLE;
 80068a2:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <sh2_spi_hal_open+0xac>)
 80068a4:	2203      	movs	r2, #3
 80068a6:	701a      	strb	r2, [r3, #0]

    // Delay for RESET_DELAY_US to ensure reset takes effect
    delayUs(RESET_DELAY_US);
 80068a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80068ac:	f7ff ff91 	bl	80067d2 <delayUs>

    // To boot in SHTP-SPI mode, must have PS1=1, PS0=1.
    // PS1 is set via jumper.
    // PS0 will be 1 PS1 jumper is 1 AND PS0_WAKEN sig is 1.
    // So we set PS0_WAKEN signal to 1
    ps0_waken(true);
 80068b0:	2001      	movs	r0, #1
 80068b2:	f7ff fe13 	bl	80064dc <ps0_waken>
    ps1(true);
 80068b6:	2001      	movs	r0, #1
 80068b8:	f7ff fe22 	bl	8006500 <ps1>

    // Deassert reset, boot in non-DFU mode
    bootn(true);
 80068bc:	2001      	movs	r0, #1
 80068be:	f7ff fde9 	bl	8006494 <bootn>
    rstn(true);
 80068c2:	2001      	movs	r0, #1
 80068c4:	f7ff fdf8 	bl	80064b8 <rstn>

    // enable interrupts
    enableInts();
 80068c8:	f7ff fe73 	bl	80065b2 <enableInts>

    // Wait for INTN to be asserted
    resetDelayUs(START_DELAY_US);
 80068cc:	480a      	ldr	r0, [pc, #40]	; (80068f8 <sh2_spi_hal_open+0xb0>)
 80068ce:	f7ff ff9b 	bl	8006808 <resetDelayUs>

    return retval;
 80068d2:	68fb      	ldr	r3, [r7, #12]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	200013b0 	.word	0x200013b0
 80068e0:	20001310 	.word	0x20001310
 80068e4:	20001398 	.word	0x20001398
 80068e8:	20001314 	.word	0x20001314
 80068ec:	20000f0d 	.word	0x20000f0d
 80068f0:	20000f0c 	.word	0x20000f0c
 80068f4:	20000f06 	.word	0x20000f06
 80068f8:	001e8480 	.word	0x001e8480

080068fc <sh2_spi_hal_close>:

static void sh2_spi_hal_close(sh2_Hal_t *self)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
    // Disable interrupts
    disableInts();
 8006904:	f7ff fe5f 	bl	80065c6 <disableInts>

    // Set state machine to INIT state
    spiState = SPI_INIT;
 8006908:	4b15      	ldr	r3, [pc, #84]	; (8006960 <sh2_spi_hal_close+0x64>)
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]

    // Hold sensor hub in reset
    rstn(false);
 800690e:	2000      	movs	r0, #0
 8006910:	f7ff fdd2 	bl	80064b8 <rstn>

    // deassert CSN
    csn(true);
 8006914:	2001      	movs	r0, #1
 8006916:	f7ff fe05 	bl	8006524 <csn>

    // Deinit SPI peripheral
    HAL_SPI_DeInit(&hspi1);
 800691a:	4812      	ldr	r0, [pc, #72]	; (8006964 <sh2_spi_hal_close+0x68>)
 800691c:	f002 f869 	bl	80089f2 <HAL_SPI_DeInit>

    // Deinit timer
    __HAL_TIM_DISABLE(&htim2);
 8006920:	4b11      	ldr	r3, [pc, #68]	; (8006968 <sh2_spi_hal_close+0x6c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	f241 1311 	movw	r3, #4369	; 0x1111
 800692a:	4013      	ands	r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10f      	bne.n	8006950 <sh2_spi_hal_close+0x54>
 8006930:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <sh2_spi_hal_close+0x6c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6a1a      	ldr	r2, [r3, #32]
 8006936:	f240 4344 	movw	r3, #1092	; 0x444
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d107      	bne.n	8006950 <sh2_spi_hal_close+0x54>
 8006940:	4b09      	ldr	r3, [pc, #36]	; (8006968 <sh2_spi_hal_close+0x6c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4b08      	ldr	r3, [pc, #32]	; (8006968 <sh2_spi_hal_close+0x6c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]

    // No longer open
    isOpen = false;
 8006950:	4b06      	ldr	r3, [pc, #24]	; (800696c <sh2_spi_hal_close+0x70>)
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]
}
 8006956:	bf00      	nop
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000f06 	.word	0x20000f06
 8006964:	20000348 	.word	0x20000348
 8006968:	200003ac 	.word	0x200003ac
 800696c:	200013b0 	.word	0x200013b0

08006970 <sh2_spi_hal_read>:

static int sh2_spi_hal_read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
    int retval = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]

    // If there is received data available...
    if (rxBufLen > 0)
 8006982:	4b16      	ldr	r3, [pc, #88]	; (80069dc <sh2_spi_hal_read+0x6c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d022      	beq.n	80069d0 <sh2_spi_hal_read+0x60>
    {
        // And if the data will fit in this buffer...
        if (len >= rxBufLen)
 800698a:	4b14      	ldr	r3, [pc, #80]	; (80069dc <sh2_spi_hal_read+0x6c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d311      	bcc.n	80069b8 <sh2_spi_hal_read+0x48>
        {
            // Copy data to the client buffer
            memcpy(pBuffer, rxBuf, rxBufLen);
 8006994:	4b11      	ldr	r3, [pc, #68]	; (80069dc <sh2_spi_hal_read+0x6c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	4911      	ldr	r1, [pc, #68]	; (80069e0 <sh2_spi_hal_read+0x70>)
 800699c:	68b8      	ldr	r0, [r7, #8]
 800699e:	f004 fbbd 	bl	800b11c <memcpy>
            retval = rxBufLen;
 80069a2:	4b0e      	ldr	r3, [pc, #56]	; (80069dc <sh2_spi_hal_read+0x6c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	617b      	str	r3, [r7, #20]

            // Set timestamp of that data
            *t = rxTimestamp_us;
 80069a8:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <sh2_spi_hal_read+0x74>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	601a      	str	r2, [r3, #0]

            // Clear rxBuf so we can receive again
            rxBufLen = 0;
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <sh2_spi_hal_read+0x6c>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e005      	b.n	80069c4 <sh2_spi_hal_read+0x54>
        }
        else
        {
            // Discard what was read and return error because buffer was too small.
            retval = SH2_ERR_BAD_PARAM;
 80069b8:	f06f 0301 	mvn.w	r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
            rxBufLen = 0;
 80069be:	4b07      	ldr	r3, [pc, #28]	; (80069dc <sh2_spi_hal_read+0x6c>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	601a      	str	r2, [r3, #0]
        }

        // Now that rxBuf is empty, activate SPI processing to send any
        // potential write that was blocked.
        disableInts();
 80069c4:	f7ff fdff 	bl	80065c6 <disableInts>
        spiActivate();
 80069c8:	f7ff fe08 	bl	80065dc <spiActivate>
        enableInts();
 80069cc:	f7ff fdf1 	bl	80065b2 <enableInts>
    }

    return retval;
 80069d0:	697b      	ldr	r3, [r7, #20]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20001310 	.word	0x20001310
 80069e0:	20000f10 	.word	0x20000f10
 80069e4:	20000f08 	.word	0x20000f08

080069e8 <sh2_spi_hal_write>:

static int sh2_spi_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
    int retval = SH2_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]

    // Validate parameters
    if ((self == 0) || (len > sizeof(txBuf)) ||
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d008      	beq.n	8006a10 <sh2_spi_hal_write+0x28>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	d805      	bhi.n	8006a10 <sh2_spi_hal_write+0x28>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d005      	beq.n	8006a16 <sh2_spi_hal_write+0x2e>
        ((len > 0) && (pBuffer == 0)))
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <sh2_spi_hal_write+0x2e>
    {
        return SH2_ERR_BAD_PARAM;
 8006a10:	f06f 0301 	mvn.w	r3, #1
 8006a14:	e017      	b.n	8006a46 <sh2_spi_hal_write+0x5e>
    }

    // If tx buffer is not empty, return 0
    if (txBufLen != 0)
 8006a16:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <sh2_spi_hal_write+0x68>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <sh2_spi_hal_write+0x3a>
    {
        return 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e011      	b.n	8006a46 <sh2_spi_hal_write+0x5e>
    }

    // Copy data to tx buffer
    memcpy(txBuf, pBuffer, len);
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	480b      	ldr	r0, [pc, #44]	; (8006a54 <sh2_spi_hal_write+0x6c>)
 8006a28:	f004 fb78 	bl	800b11c <memcpy>
    txBufLen = len;
 8006a2c:	4a08      	ldr	r2, [pc, #32]	; (8006a50 <sh2_spi_hal_write+0x68>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6013      	str	r3, [r2, #0]
    retval = len;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	617b      	str	r3, [r7, #20]

    // disable SH2 interrupts for a moment
    disableInts();
 8006a36:	f7ff fdc6 	bl	80065c6 <disableInts>

    // Assert Wake
    ps0_waken(false);
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	f7ff fd4e 	bl	80064dc <ps0_waken>

    // re-enable SH2 interrupts.
    enableInts();
 8006a40:	f7ff fdb7 	bl	80065b2 <enableInts>

    return retval;
 8006a44:	697b      	ldr	r3, [r7, #20]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20001398 	.word	0x20001398
 8006a54:	20001318 	.word	0x20001318

08006a58 <sh2_spi_hal_getTimeUs>:

static uint32_t sh2_spi_hal_getTimeUs(sh2_Hal_t *self)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
    return timeNowUs();
 8006a60:	f7ff fd72 	bl	8006548 <timeNowUs>
 8006a64:	4603      	mov	r3, r0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <sh2_hal_init>:

// ------------------------------------------------------------------------
// Public methods

sh2_Hal_t *sh2_hal_init(void)
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
    // Set up the HAL reference object for the client
    sh2Hal.open = sh2_spi_hal_open;
 8006a74:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <sh2_hal_init+0x30>)
 8006a76:	4a0b      	ldr	r2, [pc, #44]	; (8006aa4 <sh2_hal_init+0x34>)
 8006a78:	601a      	str	r2, [r3, #0]
    sh2Hal.close = sh2_spi_hal_close;
 8006a7a:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <sh2_hal_init+0x30>)
 8006a7c:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <sh2_hal_init+0x38>)
 8006a7e:	605a      	str	r2, [r3, #4]
    sh2Hal.read = sh2_spi_hal_read;
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <sh2_hal_init+0x30>)
 8006a82:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <sh2_hal_init+0x3c>)
 8006a84:	609a      	str	r2, [r3, #8]
    sh2Hal.write = sh2_spi_hal_write;
 8006a86:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <sh2_hal_init+0x30>)
 8006a88:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <sh2_hal_init+0x40>)
 8006a8a:	60da      	str	r2, [r3, #12]
    sh2Hal.getTimeUs = sh2_spi_hal_getTimeUs;
 8006a8c:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <sh2_hal_init+0x30>)
 8006a8e:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <sh2_hal_init+0x44>)
 8006a90:	611a      	str	r2, [r3, #16]

    return &sh2Hal;
 8006a92:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <sh2_hal_init+0x30>)
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	2000139c 	.word	0x2000139c
 8006aa4:	08006849 	.word	0x08006849
 8006aa8:	080068fd 	.word	0x080068fd
 8006aac:	08006971 	.word	0x08006971
 8006ab0:	080069e9 	.word	0x080069e9
 8006ab4:	08006a59 	.word	0x08006a59

08006ab8 <LL_GPIO_SetOutputPin>:
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	619a      	str	r2, [r3, #24]
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <LL_GPIO_ResetOutputPin>:
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <MPU925x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

MPU925x_Error_e MPU925x_Init(uint8_t deviceIndex, MPU925x_Init_t *Device_Init)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	6039      	str	r1, [r7, #0]
 8006afa:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex >= MPU925X_NUMBER_OF_DEVICES)
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d000      	beq.n	8006b04 <MPU925x_Init+0x14>
		while(1);
 8006b02:	e7fe      	b.n	8006b02 <MPU925x_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(MPU925x_Init_t));
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <MPU925x_Init+0x64>)
 8006b0a:	4413      	add	r3, r2
 8006b0c:	220c      	movs	r2, #12
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f004 fb03 	bl	800b11c <memcpy>

	ClearChipSelect(deviceIndex);
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fb1f 	bl	800715c <ClearChipSelect>

	uint8_t whoAmI;
	ReadRegData(deviceIndex, MPU925X_REG_WHO_AM_I, &whoAmI, 1);
 8006b1e:	f107 020f 	add.w	r2, r7, #15
 8006b22:	79f8      	ldrb	r0, [r7, #7]
 8006b24:	2301      	movs	r3, #1
 8006b26:	2175      	movs	r1, #117	; 0x75
 8006b28:	f000 fa82 	bl	8007030 <ReadRegData>
	if((whoAmI != MPU9250_DEVICE_ID) && (whoAmI != MPU9255_DEVICE_ID))
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	2b71      	cmp	r3, #113	; 0x71
 8006b30:	d004      	beq.n	8006b3c <MPU925x_Init+0x4c>
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	2b73      	cmp	r3, #115	; 0x73
 8006b36:	d001      	beq.n	8006b3c <MPU925x_Init+0x4c>
		return MPU925x_WhoAmI_Error;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e007      	b.n	8006b4c <MPU925x_Init+0x5c>

	Device[deviceIndex].isInit = 1;
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	4a05      	ldr	r2, [pc, #20]	; (8006b54 <MPU925x_Init+0x64>)
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	4413      	add	r3, r2
 8006b44:	330c      	adds	r3, #12
 8006b46:	2201      	movs	r2, #1
 8006b48:	601a      	str	r2, [r3, #0]

	return MPU925x_NoError;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	200013b4 	.word	0x200013b4

08006b58 <MPU925x_SetAccelSensitivity>:

void MPU925x_SetAccelSensitivity(uint8_t deviceIndex, MPU925x_AccelSensitivity_e sensitivity)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	460a      	mov	r2, r1
 8006b62:	71fb      	strb	r3, [r7, #7]
 8006b64:	4613      	mov	r3, r2
 8006b66:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	4a46      	ldr	r2, [pc, #280]	; (8006c84 <MPU925x_SetAccelSensitivity+0x12c>)
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	4413      	add	r3, r2
 8006b70:	330c      	adds	r3, #12
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d100      	bne.n	8006b7a <MPU925x_SetAccelSensitivity+0x22>
		while(1);
 8006b78:	e7fe      	b.n	8006b78 <MPU925x_SetAccelSensitivity+0x20>

	uint8_t data;
	switch(sensitivity)
 8006b7a:	79bb      	ldrb	r3, [r7, #6]
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d87d      	bhi.n	8006c7c <MPU925x_SetAccelSensitivity+0x124>
 8006b80:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <MPU925x_SetAccelSensitivity+0x30>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006b99 	.word	0x08006b99
 8006b8c:	08006bcd 	.word	0x08006bcd
 8006b90:	08006c0b 	.word	0x08006c0b
 8006b94:	08006c49 	.word	0x08006c49
	{
	case MPU925x_AccelSensitivity_2g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8006b98:	f107 020f 	add.w	r2, r7, #15
 8006b9c:	79f8      	ldrb	r0, [r7, #7]
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	211c      	movs	r1, #28
 8006ba2:	f000 fa45 	bl	8007030 <ReadRegData>
		data = data & ~0x18;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	f023 0318 	bic.w	r3, r3, #24
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8006bb0:	f107 020f 	add.w	r2, r7, #15
 8006bb4:	79f8      	ldrb	r0, [r7, #7]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	211c      	movs	r1, #28
 8006bba:	f000 fa87 	bl	80070cc <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_2G;
 8006bbe:	4932      	ldr	r1, [pc, #200]	; (8006c88 <MPU925x_SetAccelSensitivity+0x130>)
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	4b31      	ldr	r3, [pc, #196]	; (8006c8c <MPU925x_SetAccelSensitivity+0x134>)
 8006bc6:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006bca:	e057      	b.n	8006c7c <MPU925x_SetAccelSensitivity+0x124>

	case MPU925x_AccelSensitivity_4g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8006bcc:	f107 020f 	add.w	r2, r7, #15
 8006bd0:	79f8      	ldrb	r0, [r7, #7]
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	211c      	movs	r1, #28
 8006bd6:	f000 fa2b 	bl	8007030 <ReadRegData>
		data = (data & ~0x18) | 0x08;
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	b25b      	sxtb	r3, r3
 8006bde:	f023 0318 	bic.w	r3, r3, #24
 8006be2:	b25b      	sxtb	r3, r3
 8006be4:	f043 0308 	orr.w	r3, r3, #8
 8006be8:	b25b      	sxtb	r3, r3
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8006bee:	f107 020f 	add.w	r2, r7, #15
 8006bf2:	79f8      	ldrb	r0, [r7, #7]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	211c      	movs	r1, #28
 8006bf8:	f000 fa68 	bl	80070cc <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_4G;
 8006bfc:	4922      	ldr	r1, [pc, #136]	; (8006c88 <MPU925x_SetAccelSensitivity+0x130>)
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	4b23      	ldr	r3, [pc, #140]	; (8006c90 <MPU925x_SetAccelSensitivity+0x138>)
 8006c04:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006c08:	e038      	b.n	8006c7c <MPU925x_SetAccelSensitivity+0x124>

	case MPU925x_AccelSensitivity_8g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8006c0a:	f107 020f 	add.w	r2, r7, #15
 8006c0e:	79f8      	ldrb	r0, [r7, #7]
 8006c10:	2301      	movs	r3, #1
 8006c12:	211c      	movs	r1, #28
 8006c14:	f000 fa0c 	bl	8007030 <ReadRegData>
		data = (data & ~0x18) | 0x10;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	b25b      	sxtb	r3, r3
 8006c1c:	f023 0318 	bic.w	r3, r3, #24
 8006c20:	b25b      	sxtb	r3, r3
 8006c22:	f043 0310 	orr.w	r3, r3, #16
 8006c26:	b25b      	sxtb	r3, r3
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8006c2c:	f107 020f 	add.w	r2, r7, #15
 8006c30:	79f8      	ldrb	r0, [r7, #7]
 8006c32:	2301      	movs	r3, #1
 8006c34:	211c      	movs	r1, #28
 8006c36:	f000 fa49 	bl	80070cc <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_8G;
 8006c3a:	4913      	ldr	r1, [pc, #76]	; (8006c88 <MPU925x_SetAccelSensitivity+0x130>)
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <MPU925x_SetAccelSensitivity+0x13c>)
 8006c42:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006c46:	e019      	b.n	8006c7c <MPU925x_SetAccelSensitivity+0x124>

	case MPU925x_AccelSensitivity_16g:
		ReadRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8006c48:	f107 020f 	add.w	r2, r7, #15
 8006c4c:	79f8      	ldrb	r0, [r7, #7]
 8006c4e:	2301      	movs	r3, #1
 8006c50:	211c      	movs	r1, #28
 8006c52:	f000 f9ed 	bl	8007030 <ReadRegData>
		data = (data & ~0x18) | 0x18;
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	f043 0318 	orr.w	r3, r3, #24
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_ACCEL_CONFIG, &data, 1);
 8006c60:	f107 020f 	add.w	r2, r7, #15
 8006c64:	79f8      	ldrb	r0, [r7, #7]
 8006c66:	2301      	movs	r3, #1
 8006c68:	211c      	movs	r1, #28
 8006c6a:	f000 fa2f 	bl	80070cc <WriteRegData>
		accelSensitivity = MPU925X_ACCEL_SENSITIVITY_16G;
 8006c6e:	4906      	ldr	r1, [pc, #24]	; (8006c88 <MPU925x_SetAccelSensitivity+0x130>)
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	4b08      	ldr	r3, [pc, #32]	; (8006c98 <MPU925x_SetAccelSensitivity+0x140>)
 8006c76:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006c7a:	bf00      	nop
	}
}
 8006c7c:	bf00      	nop
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	200013b4 	.word	0x200013b4
 8006c88:	20000008 	.word	0x20000008
 8006c8c:	40d00000 	.word	0x40d00000
 8006c90:	40c00000 	.word	0x40c00000
 8006c94:	40b00000 	.word	0x40b00000
 8006c98:	40a00000 	.word	0x40a00000
 8006c9c:	00000000 	.word	0x00000000

08006ca0 <MPU925x_SetGyroSensitivity>:

void MPU925x_SetGyroSensitivity(uint8_t deviceIndex, MPU925x_GyroSensitivity_e sensitivity)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	460a      	mov	r2, r1
 8006caa:	71fb      	strb	r3, [r7, #7]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71bb      	strb	r3, [r7, #6]
	if(!Device[deviceIndex].isInit)
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	4a4f      	ldr	r2, [pc, #316]	; (8006df0 <MPU925x_SetGyroSensitivity+0x150>)
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	4413      	add	r3, r2
 8006cb8:	330c      	adds	r3, #12
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d100      	bne.n	8006cc2 <MPU925x_SetGyroSensitivity+0x22>
		while(1);
 8006cc0:	e7fe      	b.n	8006cc0 <MPU925x_SetGyroSensitivity+0x20>

	uint8_t data;
	switch(sensitivity)
 8006cc2:	79bb      	ldrb	r3, [r7, #6]
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d87d      	bhi.n	8006dc4 <MPU925x_SetGyroSensitivity+0x124>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <MPU925x_SetGyroSensitivity+0x30>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006ce1 	.word	0x08006ce1
 8006cd4:	08006d15 	.word	0x08006d15
 8006cd8:	08006d53 	.word	0x08006d53
 8006cdc:	08006d91 	.word	0x08006d91
	{
	case MPU925x_GyroSensitivity_250dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8006ce0:	f107 020f 	add.w	r2, r7, #15
 8006ce4:	79f8      	ldrb	r0, [r7, #7]
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	211b      	movs	r1, #27
 8006cea:	f000 f9a1 	bl	8007030 <ReadRegData>
		data = data & ~0x18;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	f023 0318 	bic.w	r3, r3, #24
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8006cf8:	f107 020f 	add.w	r2, r7, #15
 8006cfc:	79f8      	ldrb	r0, [r7, #7]
 8006cfe:	2301      	movs	r3, #1
 8006d00:	211b      	movs	r1, #27
 8006d02:	f000 f9e3 	bl	80070cc <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_250DPS;
 8006d06:	493b      	ldr	r1, [pc, #236]	; (8006df4 <MPU925x_SetGyroSensitivity+0x154>)
 8006d08:	a331      	add	r3, pc, #196	; (adr r3, 8006dd0 <MPU925x_SetGyroSensitivity+0x130>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006d12:	e057      	b.n	8006dc4 <MPU925x_SetGyroSensitivity+0x124>

	case MPU925x_GyroSensitivity_500dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8006d14:	f107 020f 	add.w	r2, r7, #15
 8006d18:	79f8      	ldrb	r0, [r7, #7]
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	211b      	movs	r1, #27
 8006d1e:	f000 f987 	bl	8007030 <ReadRegData>
		data = (data & ~0x18) | 0x08;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	b25b      	sxtb	r3, r3
 8006d26:	f023 0318 	bic.w	r3, r3, #24
 8006d2a:	b25b      	sxtb	r3, r3
 8006d2c:	f043 0308 	orr.w	r3, r3, #8
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8006d36:	f107 020f 	add.w	r2, r7, #15
 8006d3a:	79f8      	ldrb	r0, [r7, #7]
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	211b      	movs	r1, #27
 8006d40:	f000 f9c4 	bl	80070cc <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_500DPS;
 8006d44:	492b      	ldr	r1, [pc, #172]	; (8006df4 <MPU925x_SetGyroSensitivity+0x154>)
 8006d46:	a324      	add	r3, pc, #144	; (adr r3, 8006dd8 <MPU925x_SetGyroSensitivity+0x138>)
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006d50:	e038      	b.n	8006dc4 <MPU925x_SetGyroSensitivity+0x124>

	case MPU925x_GyroSensitivity_1000dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8006d52:	f107 020f 	add.w	r2, r7, #15
 8006d56:	79f8      	ldrb	r0, [r7, #7]
 8006d58:	2301      	movs	r3, #1
 8006d5a:	211b      	movs	r1, #27
 8006d5c:	f000 f968 	bl	8007030 <ReadRegData>
		data = (data & ~0x18) | 0x10;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	b25b      	sxtb	r3, r3
 8006d64:	f023 0318 	bic.w	r3, r3, #24
 8006d68:	b25b      	sxtb	r3, r3
 8006d6a:	f043 0310 	orr.w	r3, r3, #16
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8006d74:	f107 020f 	add.w	r2, r7, #15
 8006d78:	79f8      	ldrb	r0, [r7, #7]
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	211b      	movs	r1, #27
 8006d7e:	f000 f9a5 	bl	80070cc <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_1000DPS;
 8006d82:	491c      	ldr	r1, [pc, #112]	; (8006df4 <MPU925x_SetGyroSensitivity+0x154>)
 8006d84:	a316      	add	r3, pc, #88	; (adr r3, 8006de0 <MPU925x_SetGyroSensitivity+0x140>)
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006d8e:	e019      	b.n	8006dc4 <MPU925x_SetGyroSensitivity+0x124>

	case MPU925x_GyroSensitivity_2000dps:
		ReadRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8006d90:	f107 020f 	add.w	r2, r7, #15
 8006d94:	79f8      	ldrb	r0, [r7, #7]
 8006d96:	2301      	movs	r3, #1
 8006d98:	211b      	movs	r1, #27
 8006d9a:	f000 f949 	bl	8007030 <ReadRegData>
		data = (data & ~0x18) | 0x18;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	f043 0318 	orr.w	r3, r3, #24
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	73fb      	strb	r3, [r7, #15]
		WriteRegData(deviceIndex, MPU925X_REG_GYRO_CONFIG, &data, 1);
 8006da8:	f107 020f 	add.w	r2, r7, #15
 8006dac:	79f8      	ldrb	r0, [r7, #7]
 8006dae:	2301      	movs	r3, #1
 8006db0:	211b      	movs	r1, #27
 8006db2:	f000 f98b 	bl	80070cc <WriteRegData>
		gyroSensitivity = MPU925X_GYRO_SENSITIVITY_2000DPS;
 8006db6:	490f      	ldr	r1, [pc, #60]	; (8006df4 <MPU925x_SetGyroSensitivity+0x154>)
 8006db8:	a30b      	add	r3, pc, #44	; (adr r3, 8006de8 <MPU925x_SetGyroSensitivity+0x148>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	e9c1 2300 	strd	r2, r3, [r1]
		break;
 8006dc2:	bf00      	nop
	}
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	f3af 8000 	nop.w
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	40606000 	.word	0x40606000
 8006dd8:	00000000 	.word	0x00000000
 8006ddc:	40506000 	.word	0x40506000
 8006de0:	66666666 	.word	0x66666666
 8006de4:	40406666 	.word	0x40406666
 8006de8:	66666666 	.word	0x66666666
 8006dec:	40306666 	.word	0x40306666
 8006df0:	200013b4 	.word	0x200013b4
 8006df4:	20000010 	.word	0x20000010

08006df8 <MPU925x_StartReadIMU_IT>:

	return MPU925x_ConvertIMU_Data(data);
}

void MPU925x_StartReadIMU_IT(uint8_t deviceIndex)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	4a0a      	ldr	r2, [pc, #40]	; (8006e30 <MPU925x_StartReadIMU_IT+0x38>)
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	4413      	add	r3, r2
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d100      	bne.n	8006e14 <MPU925x_StartReadIMU_IT+0x1c>
		while(1);
 8006e12:	e7fe      	b.n	8006e12 <MPU925x_StartReadIMU_IT+0x1a>

	uint8_t startAddress = MPU925X_REG_ACCEL_XOUT_H | 0x80;
 8006e14:	23bb      	movs	r3, #187	; 0xbb
 8006e16:	73fb      	strb	r3, [r7, #15]
	WriteData_IT(deviceIndex, &startAddress, 1);
 8006e18:	f107 010f 	add.w	r1, r7, #15
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f981 	bl	8007128 <WriteData_IT>
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	200013b4 	.word	0x200013b4

08006e34 <MPU925x_ReadIMU_IT>:

void MPU925x_ReadIMU_IT(uint8_t deviceIndex, uint8_t *data)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	6039      	str	r1, [r7, #0]
 8006e3e:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	4a09      	ldr	r2, [pc, #36]	; (8006e68 <MPU925x_ReadIMU_IT+0x34>)
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	4413      	add	r3, r2
 8006e48:	330c      	adds	r3, #12
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d100      	bne.n	8006e52 <MPU925x_ReadIMU_IT+0x1e>
		while(1);
 8006e50:	e7fe      	b.n	8006e50 <MPU925x_ReadIMU_IT+0x1c>

	ReadData_IT(deviceIndex, data, 14);
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	220e      	movs	r2, #14
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 f91d 	bl	8007098 <ReadData_IT>
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	200013b4 	.word	0x200013b4

08006e6c <MPU925x_ConvertIMU_Data>:

	WriteData_IT(deviceIndex, data, nBytes);
}

MPU925x_IMU_Data_t MPU925x_ConvertIMU_Data(uint8_t *data)
{
 8006e6c:	b5b0      	push	{r4, r5, r7, lr}
 8006e6e:	b092      	sub	sp, #72	; 0x48
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
	int16_t ax = ((int16_t) data[0] << 8) | data[1];
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	b21a      	sxth	r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	b21b      	sxth	r3, r3
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t ay = ((int16_t) data[2] << 8) | data[3];
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	3302      	adds	r3, #2
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	b21a      	sxth	r2, r3
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	3303      	adds	r3, #3
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	b21b      	sxth	r3, r3
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t az = ((int16_t) data[4] << 8) | data[5];
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	b21a      	sxth	r2, r3
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	3305      	adds	r3, #5
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	b21b      	sxth	r3, r3
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	int16_t gx = ((int16_t) data[8] << 8) | data[9];
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	b21a      	sxth	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	3309      	adds	r3, #9
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	b21b      	sxth	r3, r3
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	int16_t gy = ((int16_t) data[10] << 8) | data[11];
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	330a      	adds	r3, #10
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	021b      	lsls	r3, r3, #8
 8006edc:	b21a      	sxth	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	330b      	adds	r3, #11
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	b21b      	sxth	r3, r3
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	int16_t gz = ((int16_t) data[12] << 8) | data[13];
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	021b      	lsls	r3, r3, #8
 8006ef2:	b21a      	sxth	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	330d      	adds	r3, #13
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	b21b      	sxth	r3, r3
 8006efc:	4313      	orrs	r3, r2
 8006efe:	87bb      	strh	r3, [r7, #60]	; 0x3c

	MPU925x_IMU_Data_t IMU_Data;
	IMU_Data.Struct.ax = ax / accelSensitivity;
 8006f00:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7f9 fab1 	bl	800046c <__aeabi_i2d>
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <MPU925x_ConvertIMU_Data+0x15c>)
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f7f9 fc40 	bl	8000794 <__aeabi_ddiv>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	e9c7 2302 	strd	r2, r3, [r7, #8]
	IMU_Data.Struct.ay = ay / accelSensitivity;
 8006f1c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7f9 faa3 	bl	800046c <__aeabi_i2d>
 8006f26:	4b28      	ldr	r3, [pc, #160]	; (8006fc8 <MPU925x_ConvertIMU_Data+0x15c>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f7f9 fc32 	bl	8000794 <__aeabi_ddiv>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	e9c7 2304 	strd	r2, r3, [r7, #16]
	IMU_Data.Struct.az = az / accelSensitivity;
 8006f38:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7f9 fa95 	bl	800046c <__aeabi_i2d>
 8006f42:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <MPU925x_ConvertIMU_Data+0x15c>)
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	f7f9 fc24 	bl	8000794 <__aeabi_ddiv>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	e9c7 2306 	strd	r2, r3, [r7, #24]
	IMU_Data.Struct.gx = gx / gyroSensitivity;
 8006f54:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7f9 fa87 	bl	800046c <__aeabi_i2d>
 8006f5e:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <MPU925x_ConvertIMU_Data+0x160>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 fc16 	bl	8000794 <__aeabi_ddiv>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	IMU_Data.Struct.gy = gy / gyroSensitivity;
 8006f70:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7f9 fa79 	bl	800046c <__aeabi_i2d>
 8006f7a:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <MPU925x_ConvertIMU_Data+0x160>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f7f9 fc08 	bl	8000794 <__aeabi_ddiv>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	IMU_Data.Struct.gz = gz / gyroSensitivity;
 8006f8c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7f9 fa6b 	bl	800046c <__aeabi_i2d>
 8006f96:	4b0d      	ldr	r3, [pc, #52]	; (8006fcc <MPU925x_ConvertIMU_Data+0x160>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fbfa 	bl	8000794 <__aeabi_ddiv>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	return IMU_Data;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	461d      	mov	r5, r3
 8006fac:	f107 0408 	add.w	r4, r7, #8
 8006fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006fbc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	3748      	adds	r7, #72	; 0x48
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8006fc8:	20000008 	.word	0x20000008
 8006fcc:	20000010 	.word	0x20000010

08006fd0 <MPU925x_ClearChipSelect>:

void MPU925x_ClearChipSelect(uint8_t deviceIndex)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	4a07      	ldr	r2, [pc, #28]	; (8006ffc <MPU925x_ClearChipSelect+0x2c>)
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	4413      	add	r3, r2
 8006fe2:	330c      	adds	r3, #12
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d100      	bne.n	8006fec <MPU925x_ClearChipSelect+0x1c>
		while(1);
 8006fea:	e7fe      	b.n	8006fea <MPU925x_ClearChipSelect+0x1a>

	ClearChipSelect(deviceIndex);
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f8b4 	bl	800715c <ClearChipSelect>
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	200013b4 	.word	0x200013b4

08007000 <MPU925x_SetChipSelect>:

void MPU925x_SetChipSelect(uint8_t deviceIndex)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	4a07      	ldr	r2, [pc, #28]	; (800702c <MPU925x_SetChipSelect+0x2c>)
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	4413      	add	r3, r2
 8007012:	330c      	adds	r3, #12
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d100      	bne.n	800701c <MPU925x_SetChipSelect+0x1c>
		while(1);
 800701a:	e7fe      	b.n	800701a <MPU925x_SetChipSelect+0x1a>

	SetChipSelect(deviceIndex);
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f8b8 	bl	8007194 <SetChipSelect>
}
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	200013b4 	.word	0x200013b4

08007030 <ReadRegData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void ReadRegData(uint8_t deviceIndex, uint8_t startAddress, uint8_t *data, uint8_t nBytes)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	603a      	str	r2, [r7, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	4603      	mov	r3, r0
 800703c:	71fb      	strb	r3, [r7, #7]
 800703e:	460b      	mov	r3, r1
 8007040:	71bb      	strb	r3, [r7, #6]
 8007042:	4613      	mov	r3, r2
 8007044:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	4618      	mov	r0, r3
 800704a:	f000 f8a3 	bl	8007194 <SetChipSelect>

	startAddress = startAddress | 0x80;
 800704e:	79bb      	ldrb	r3, [r7, #6]
 8007050:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007054:	b2db      	uxtb	r3, r3
 8007056:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(Device[deviceIndex].SPI_Handle, &startAddress, 1, 10);
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	4a0e      	ldr	r2, [pc, #56]	; (8007094 <ReadRegData+0x64>)
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	4413      	add	r3, r2
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	1db9      	adds	r1, r7, #6
 8007064:	230a      	movs	r3, #10
 8007066:	2201      	movs	r2, #1
 8007068:	f001 fceb 	bl	8008a42 <HAL_SPI_Transmit>
	HAL_SPI_Receive(Device[deviceIndex].SPI_Handle, data, nBytes, 10);
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	4a09      	ldr	r2, [pc, #36]	; (8007094 <ReadRegData+0x64>)
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	4413      	add	r3, r2
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	797b      	ldrb	r3, [r7, #5]
 8007078:	b29a      	uxth	r2, r3
 800707a:	230a      	movs	r3, #10
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	f001 fe4e 	bl	8008d1e <HAL_SPI_Receive>

	ClearChipSelect(deviceIndex);
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	4618      	mov	r0, r3
 8007086:	f000 f869 	bl	800715c <ClearChipSelect>
}
 800708a:	bf00      	nop
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	200013b4 	.word	0x200013b4

08007098 <ReadData_IT>:

static void ReadData_IT(uint8_t deviceIndex, uint8_t *data, uint8_t nBytes)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
 80070a4:	4613      	mov	r3, r2
 80070a6:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Receive_IT(Device[deviceIndex].SPI_Handle, data, nBytes);
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	4a07      	ldr	r2, [pc, #28]	; (80070c8 <ReadData_IT+0x30>)
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	4413      	add	r3, r2
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	79ba      	ldrb	r2, [r7, #6]
 80070b4:	b292      	uxth	r2, r2
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f002 fa01 	bl	80094c0 <HAL_SPI_Receive_IT>
}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200013b4 	.word	0x200013b4

080070cc <WriteRegData>:

static void WriteRegData(uint8_t deviceIndex, uint8_t startAddress, uint8_t *data, uint8_t nBytes)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	603a      	str	r2, [r7, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	4603      	mov	r3, r0
 80070d8:	71fb      	strb	r3, [r7, #7]
 80070da:	460b      	mov	r3, r1
 80070dc:	71bb      	strb	r3, [r7, #6]
 80070de:	4613      	mov	r3, r2
 80070e0:	717b      	strb	r3, [r7, #5]
	SetChipSelect(deviceIndex);
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 f855 	bl	8007194 <SetChipSelect>

	HAL_SPI_Transmit(Device[deviceIndex].SPI_Handle, &startAddress, 1, 10);
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	4a0d      	ldr	r2, [pc, #52]	; (8007124 <WriteRegData+0x58>)
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	4413      	add	r3, r2
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	1db9      	adds	r1, r7, #6
 80070f6:	230a      	movs	r3, #10
 80070f8:	2201      	movs	r2, #1
 80070fa:	f001 fca2 	bl	8008a42 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(Device[deviceIndex].SPI_Handle, data, nBytes, 10);
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	4a08      	ldr	r2, [pc, #32]	; (8007124 <WriteRegData+0x58>)
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	4413      	add	r3, r2
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	797b      	ldrb	r3, [r7, #5]
 800710a:	b29a      	uxth	r2, r3
 800710c:	230a      	movs	r3, #10
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	f001 fc97 	bl	8008a42 <HAL_SPI_Transmit>

	ClearChipSelect(deviceIndex);
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	4618      	mov	r0, r3
 8007118:	f000 f820 	bl	800715c <ClearChipSelect>
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	200013b4 	.word	0x200013b4

08007128 <WriteData_IT>:

static void WriteData_IT(uint8_t deviceIndex, uint8_t *data, uint8_t nBytes)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	6039      	str	r1, [r7, #0]
 8007132:	71fb      	strb	r3, [r7, #7]
 8007134:	4613      	mov	r3, r2
 8007136:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit_IT(Device[deviceIndex].SPI_Handle, data, nBytes);
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	4a07      	ldr	r2, [pc, #28]	; (8007158 <WriteData_IT+0x30>)
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	4413      	add	r3, r2
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	79ba      	ldrb	r2, [r7, #6]
 8007144:	b292      	uxth	r2, r2
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f002 f92b 	bl	80093a4 <HAL_SPI_Transmit_IT>
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	200013b4 	.word	0x200013b4

0800715c <ClearChipSelect>:

static inline void ClearChipSelect(uint8_t deviceIndex)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin(Device[deviceIndex].CS_GPIOx, Device[deviceIndex].csPin);
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	4a09      	ldr	r2, [pc, #36]	; (8007190 <ClearChipSelect+0x34>)
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	4413      	add	r3, r2
 800716e:	3304      	adds	r3, #4
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	4906      	ldr	r1, [pc, #24]	; (8007190 <ClearChipSelect+0x34>)
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	440b      	add	r3, r1
 800717a:	3308      	adds	r3, #8
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	4619      	mov	r1, r3
 8007180:	4610      	mov	r0, r2
 8007182:	f7ff fc99 	bl	8006ab8 <LL_GPIO_SetOutputPin>
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200013b4 	.word	0x200013b4

08007194 <SetChipSelect>:

static inline void SetChipSelect(uint8_t deviceIndex)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_ResetOutputPin(Device[deviceIndex].CS_GPIOx, Device[deviceIndex].csPin);
 800719e:	79fb      	ldrb	r3, [r7, #7]
 80071a0:	4a09      	ldr	r2, [pc, #36]	; (80071c8 <SetChipSelect+0x34>)
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	4413      	add	r3, r2
 80071a6:	3304      	adds	r3, #4
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	4906      	ldr	r1, [pc, #24]	; (80071c8 <SetChipSelect+0x34>)
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	440b      	add	r3, r1
 80071b2:	3308      	adds	r3, #8
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f7ff fc8b 	bl	8006ad4 <LL_GPIO_ResetOutputPin>
}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	200013b4 	.word	0x200013b4

080071cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071d6:	2003      	movs	r0, #3
 80071d8:	f001 f80a 	bl	80081f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80071dc:	200f      	movs	r0, #15
 80071de:	f000 f80d 	bl	80071fc <HAL_InitTick>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	71fb      	strb	r3, [r7, #7]
 80071ec:	e001      	b.n	80071f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80071ee:	f7fb febb 	bl	8002f68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80071f2:	79fb      	ldrb	r3, [r7, #7]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007208:	4b17      	ldr	r3, [pc, #92]	; (8007268 <HAL_InitTick+0x6c>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d023      	beq.n	8007258 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007210:	4b16      	ldr	r3, [pc, #88]	; (800726c <HAL_InitTick+0x70>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4b14      	ldr	r3, [pc, #80]	; (8007268 <HAL_InitTick+0x6c>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	4619      	mov	r1, r3
 800721a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800721e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007222:	fbb2 f3f3 	udiv	r3, r2, r3
 8007226:	4618      	mov	r0, r3
 8007228:	f001 f825 	bl	8008276 <HAL_SYSTICK_Config>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10f      	bne.n	8007252 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b0f      	cmp	r3, #15
 8007236:	d809      	bhi.n	800724c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007238:	2200      	movs	r2, #0
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	f000 ffe1 	bl	8008206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007244:	4a0a      	ldr	r2, [pc, #40]	; (8007270 <HAL_InitTick+0x74>)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	e007      	b.n	800725c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	73fb      	strb	r3, [r7, #15]
 8007250:	e004      	b.n	800725c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
 8007256:	e001      	b.n	800725c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800725c:	7bfb      	ldrb	r3, [r7, #15]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	2000001c 	.word	0x2000001c
 800726c:	20000004 	.word	0x20000004
 8007270:	20000018 	.word	0x20000018

08007274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <HAL_IncTick+0x20>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	4b06      	ldr	r3, [pc, #24]	; (8007298 <HAL_IncTick+0x24>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4413      	add	r3, r2
 8007284:	4a04      	ldr	r2, [pc, #16]	; (8007298 <HAL_IncTick+0x24>)
 8007286:	6013      	str	r3, [r2, #0]
}
 8007288:	bf00      	nop
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	2000001c 	.word	0x2000001c
 8007298:	200013c4 	.word	0x200013c4

0800729c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  return uwTick;
 80072a0:	4b03      	ldr	r3, [pc, #12]	; (80072b0 <HAL_GetTick+0x14>)
 80072a2:	681b      	ldr	r3, [r3, #0]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	200013c4 	.word	0x200013c4

080072b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e0ed      	b.n	80074a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7f9 feac 	bl	8001030 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072e8:	f7ff ffd8 	bl	800729c <HAL_GetTick>
 80072ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80072ee:	e012      	b.n	8007316 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80072f0:	f7ff ffd4 	bl	800729c <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b0a      	cmp	r3, #10
 80072fc:	d90b      	bls.n	8007316 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2205      	movs	r2, #5
 800730e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e0c5      	b.n	80074a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0e5      	beq.n	80072f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0202 	bic.w	r2, r2, #2
 8007332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007334:	f7ff ffb2 	bl	800729c <HAL_GetTick>
 8007338:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800733a:	e012      	b.n	8007362 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800733c:	f7ff ffae 	bl	800729c <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b0a      	cmp	r3, #10
 8007348:	d90b      	bls.n	8007362 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2205      	movs	r2, #5
 800735a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e09f      	b.n	80074a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e5      	bne.n	800733c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	7e1b      	ldrb	r3, [r3, #24]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d108      	bne.n	800738a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	e007      	b.n	800739a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	7e5b      	ldrb	r3, [r3, #25]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d108      	bne.n	80073b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	e007      	b.n	80073c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7e9b      	ldrb	r3, [r3, #26]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d108      	bne.n	80073de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0220 	orr.w	r2, r2, #32
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e007      	b.n	80073ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0220 	bic.w	r2, r2, #32
 80073ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	7edb      	ldrb	r3, [r3, #27]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d108      	bne.n	8007408 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0210 	bic.w	r2, r2, #16
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e007      	b.n	8007418 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0210 	orr.w	r2, r2, #16
 8007416:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7f1b      	ldrb	r3, [r3, #28]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d108      	bne.n	8007432 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f042 0208 	orr.w	r2, r2, #8
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e007      	b.n	8007442 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0208 	bic.w	r2, r2, #8
 8007440:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7f5b      	ldrb	r3, [r3, #29]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d108      	bne.n	800745c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0204 	orr.w	r2, r2, #4
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e007      	b.n	800746c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0204 	bic.w	r2, r2, #4
 800746a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	ea42 0103 	orr.w	r1, r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	1e5a      	subs	r2, r3, #1
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b087      	sub	sp, #28
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074c0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80074c2:	7cfb      	ldrb	r3, [r7, #19]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d003      	beq.n	80074d0 <HAL_CAN_ConfigFilter+0x26>
 80074c8:	7cfb      	ldrb	r3, [r7, #19]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	f040 80aa 	bne.w	8007624 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074d6:	f043 0201 	orr.w	r2, r3, #1
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	f003 031f 	and.w	r3, r3, #31
 80074e8:	2201      	movs	r2, #1
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	43db      	mvns	r3, r3
 80074fa:	401a      	ands	r2, r3
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d123      	bne.n	8007552 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	43db      	mvns	r3, r3
 8007514:	401a      	ands	r2, r3
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800752c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	3248      	adds	r2, #72	; 0x48
 8007532:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007546:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007548:	6979      	ldr	r1, [r7, #20]
 800754a:	3348      	adds	r3, #72	; 0x48
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	440b      	add	r3, r1
 8007550:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d122      	bne.n	80075a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	431a      	orrs	r2, r3
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800757a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	3248      	adds	r2, #72	; 0x48
 8007580:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007594:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007596:	6979      	ldr	r1, [r7, #20]
 8007598:	3348      	adds	r3, #72	; 0x48
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	440b      	add	r3, r1
 800759e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d109      	bne.n	80075bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	43db      	mvns	r3, r3
 80075b2:	401a      	ands	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80075ba:	e007      	b.n	80075cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	431a      	orrs	r2, r3
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d109      	bne.n	80075e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	43db      	mvns	r3, r3
 80075de:	401a      	ands	r2, r3
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80075e6:	e007      	b.n	80075f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	431a      	orrs	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d107      	bne.n	8007610 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	431a      	orrs	r2, r3
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007616:	f023 0201 	bic.w	r2, r3, #1
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	e006      	b.n	8007632 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
  }
}
 8007632:	4618      	mov	r0, r3
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b01      	cmp	r3, #1
 8007650:	d12e      	bne.n	80076b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2202      	movs	r2, #2
 8007656:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0201 	bic.w	r2, r2, #1
 8007668:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800766a:	f7ff fe17 	bl	800729c <HAL_GetTick>
 800766e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007670:	e012      	b.n	8007698 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007672:	f7ff fe13 	bl	800729c <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b0a      	cmp	r3, #10
 800767e:	d90b      	bls.n	8007698 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2205      	movs	r2, #5
 8007690:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e012      	b.n	80076be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e5      	bne.n	8007672 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	e006      	b.n	80076be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
  }
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b089      	sub	sp, #36	; 0x24
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80076e4:	7ffb      	ldrb	r3, [r7, #31]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d003      	beq.n	80076f2 <HAL_CAN_AddTxMessage+0x2c>
 80076ea:	7ffb      	ldrb	r3, [r7, #31]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	f040 80ad 	bne.w	800784c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007702:	2b00      	cmp	r3, #0
 8007704:	d105      	bne.n	8007712 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8095 	beq.w	800783c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	0e1b      	lsrs	r3, r3, #24
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800771c:	2201      	movs	r2, #1
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	409a      	lsls	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10d      	bne.n	800774a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007738:	68f9      	ldr	r1, [r7, #12]
 800773a:	6809      	ldr	r1, [r1, #0]
 800773c:	431a      	orrs	r2, r3
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	3318      	adds	r3, #24
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	440b      	add	r3, r1
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	e00f      	b.n	800776a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007754:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800775a:	68f9      	ldr	r1, [r7, #12]
 800775c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800775e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	3318      	adds	r3, #24
 8007764:	011b      	lsls	r3, r3, #4
 8007766:	440b      	add	r3, r1
 8007768:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6819      	ldr	r1, [r3, #0]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	3318      	adds	r3, #24
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	440b      	add	r3, r1
 800777a:	3304      	adds	r3, #4
 800777c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	7d1b      	ldrb	r3, [r3, #20]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d111      	bne.n	80077aa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	3318      	adds	r3, #24
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	4413      	add	r3, r2
 8007792:	3304      	adds	r3, #4
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	6811      	ldr	r1, [r2, #0]
 800779a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	3318      	adds	r3, #24
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	440b      	add	r3, r1
 80077a6:	3304      	adds	r3, #4
 80077a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3307      	adds	r3, #7
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	061a      	lsls	r2, r3, #24
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3306      	adds	r3, #6
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	041b      	lsls	r3, r3, #16
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3305      	adds	r3, #5
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	4313      	orrs	r3, r2
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	3204      	adds	r2, #4
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	4610      	mov	r0, r2
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	6811      	ldr	r1, [r2, #0]
 80077d2:	ea43 0200 	orr.w	r2, r3, r0
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	440b      	add	r3, r1
 80077dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80077e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3303      	adds	r3, #3
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	061a      	lsls	r2, r3, #24
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3302      	adds	r3, #2
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	041b      	lsls	r3, r3, #16
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3301      	adds	r3, #1
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	021b      	lsls	r3, r3, #8
 80077fc:	4313      	orrs	r3, r2
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	7812      	ldrb	r2, [r2, #0]
 8007802:	4610      	mov	r0, r2
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	6811      	ldr	r1, [r2, #0]
 8007808:	ea43 0200 	orr.w	r2, r3, r0
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	440b      	add	r3, r1
 8007812:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007816:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	3318      	adds	r3, #24
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	4413      	add	r3, r2
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	6811      	ldr	r1, [r2, #0]
 800782a:	f043 0201 	orr.w	r2, r3, #1
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	3318      	adds	r3, #24
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	440b      	add	r3, r1
 8007836:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	e00e      	b.n	800785a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e006      	b.n	800785a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
  }
}
 800785a:	4618      	mov	r0, r3
 800785c:	3724      	adds	r7, #36	; 0x24
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8007866:	b480      	push	{r7}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800787a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800787c:	7afb      	ldrb	r3, [r7, #11]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d002      	beq.n	8007888 <HAL_CAN_IsTxMessagePending+0x22>
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d10b      	bne.n	80078a0 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	069b      	lsls	r3, r3, #26
 8007892:	401a      	ands	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	069b      	lsls	r3, r3, #26
 8007898:	429a      	cmp	r2, r3
 800789a:	d001      	beq.n	80078a0 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800789c:	2301      	movs	r3, #1
 800789e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80078a0:	68fb      	ldr	r3, [r7, #12]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80078ae:	b480      	push	{r7}
 80078b0:	b087      	sub	sp, #28
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078c2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d003      	beq.n	80078d2 <HAL_CAN_GetRxMessage+0x24>
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	f040 80f3 	bne.w	8007ab8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10e      	bne.n	80078f6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d116      	bne.n	8007914 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e0e7      	b.n	8007ac6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	f003 0303 	and.w	r3, r3, #3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d107      	bne.n	8007914 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e0d8      	b.n	8007ac6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	331b      	adds	r3, #27
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	4413      	add	r3, r2
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0204 	and.w	r2, r3, #4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10c      	bne.n	800794c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	331b      	adds	r3, #27
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	4413      	add	r3, r2
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	0d5b      	lsrs	r3, r3, #21
 8007942:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	e00b      	b.n	8007964 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	331b      	adds	r3, #27
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	4413      	add	r3, r2
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	08db      	lsrs	r3, r3, #3
 800795c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	331b      	adds	r3, #27
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	4413      	add	r3, r2
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0202 	and.w	r2, r3, #2
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	331b      	adds	r3, #27
 8007982:	011b      	lsls	r3, r3, #4
 8007984:	4413      	add	r3, r2
 8007986:	3304      	adds	r3, #4
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 020f 	and.w	r2, r3, #15
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	331b      	adds	r3, #27
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	4413      	add	r3, r2
 800799e:	3304      	adds	r3, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	331b      	adds	r3, #27
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	4413      	add	r3, r2
 80079b6:	3304      	adds	r3, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	0c1b      	lsrs	r3, r3, #16
 80079bc:	b29a      	uxth	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	0a1a      	lsrs	r2, r3, #8
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	3301      	adds	r3, #1
 80079ee:	b2d2      	uxtb	r2, r2
 80079f0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	0c1a      	lsrs	r2, r3, #16
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	3302      	adds	r3, #2
 8007a08:	b2d2      	uxtb	r2, r2
 8007a0a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	0e1a      	lsrs	r2, r3, #24
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	3303      	adds	r3, #3
 8007a22:	b2d2      	uxtb	r2, r2
 8007a24:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	011b      	lsls	r3, r3, #4
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	0a1a      	lsrs	r2, r3, #8
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	3305      	adds	r3, #5
 8007a54:	b2d2      	uxtb	r2, r2
 8007a56:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	0c1a      	lsrs	r2, r3, #16
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	3306      	adds	r3, #6
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	0e1a      	lsrs	r2, r3, #24
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	3307      	adds	r3, #7
 8007a88:	b2d2      	uxtb	r2, r2
 8007a8a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d108      	bne.n	8007aa4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0220 	orr.w	r2, r2, #32
 8007aa0:	60da      	str	r2, [r3, #12]
 8007aa2:	e007      	b.n	8007ab4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0220 	orr.w	r2, r2, #32
 8007ab2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	e006      	b.n	8007ac6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
  }
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ae6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d002      	beq.n	8007af4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8007aee:	7afb      	ldrb	r3, [r7, #11]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d10f      	bne.n	8007b14 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	e005      	b.n	8007b14 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8007b14:	68fb      	ldr	r3, [r7, #12]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b085      	sub	sp, #20
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b32:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d002      	beq.n	8007b40 <HAL_CAN_ActivateNotification+0x1e>
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d109      	bne.n	8007b54 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6959      	ldr	r1, [r3, #20]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	e006      	b.n	8007b62 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
  }
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b085      	sub	sp, #20
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b7e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d002      	beq.n	8007b8c <HAL_CAN_DeactivateNotification+0x1e>
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d10a      	bne.n	8007ba2 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6959      	ldr	r1, [r3, #20]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	43da      	mvns	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	400a      	ands	r2, r1
 8007b9c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e006      	b.n	8007bb0 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
  }
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08a      	sub	sp, #40	; 0x28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d07c      	beq.n	8007cfc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d023      	beq.n	8007c54 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2201      	movs	r2, #1
 8007c12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f983 	bl	8007f2a <HAL_CAN_TxMailbox0CompleteCallback>
 8007c24:	e016      	b.n	8007c54 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d004      	beq.n	8007c3a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007c36:	627b      	str	r3, [r7, #36]	; 0x24
 8007c38:	e00c      	b.n	8007c54 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d004      	beq.n	8007c4e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4c:	e002      	b.n	8007c54 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f989 	bl	8007f66 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d024      	beq.n	8007ca8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f963 	bl	8007f3e <HAL_CAN_TxMailbox1CompleteCallback>
 8007c78:	e016      	b.n	8007ca8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d004      	beq.n	8007c8e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c8c:	e00c      	b.n	8007ca8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca0:	e002      	b.n	8007ca8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f969 	bl	8007f7a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d024      	beq.n	8007cfc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007cba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f943 	bl	8007f52 <HAL_CAN_TxMailbox2CompleteCallback>
 8007ccc:	e016      	b.n	8007cfc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d004      	beq.n	8007ce2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cde:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce0:	e00c      	b.n	8007cfc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d004      	beq.n	8007cf6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf4:	e002      	b.n	8007cfc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f949 	bl	8007f8e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	f003 0308 	and.w	r3, r3, #8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00c      	beq.n	8007d20 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2210      	movs	r2, #16
 8007d1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d006      	beq.n	8007d42 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f930 	bl	8007fa2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d009      	beq.n	8007d60 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fb f812 	bl	8002d84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00c      	beq.n	8007d84 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f003 0310 	and.w	r3, r3, #16
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d007      	beq.n	8007d84 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2210      	movs	r2, #16
 8007d82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00b      	beq.n	8007da6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d006      	beq.n	8007da6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2208      	movs	r2, #8
 8007d9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f908 	bl	8007fb6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	f003 0310 	and.w	r3, r3, #16
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d009      	beq.n	8007dc4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7fb f804 	bl	8002dcc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00b      	beq.n	8007de6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	f003 0310 	and.w	r3, r3, #16
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d006      	beq.n	8007de6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2210      	movs	r2, #16
 8007dde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f8f2 	bl	8007fca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d006      	beq.n	8007e08 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2208      	movs	r2, #8
 8007e00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f8eb 	bl	8007fde <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d07b      	beq.n	8007f0a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	f003 0304 	and.w	r3, r3, #4
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d072      	beq.n	8007f02 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d008      	beq.n	8007e38 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	f043 0301 	orr.w	r3, r3, #1
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	f043 0302 	orr.w	r3, r3, #2
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d008      	beq.n	8007e70 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	f043 0304 	orr.w	r3, r3, #4
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d043      	beq.n	8007f02 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d03e      	beq.n	8007f02 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e8a:	2b60      	cmp	r3, #96	; 0x60
 8007e8c:	d02b      	beq.n	8007ee6 <HAL_CAN_IRQHandler+0x32a>
 8007e8e:	2b60      	cmp	r3, #96	; 0x60
 8007e90:	d82e      	bhi.n	8007ef0 <HAL_CAN_IRQHandler+0x334>
 8007e92:	2b50      	cmp	r3, #80	; 0x50
 8007e94:	d022      	beq.n	8007edc <HAL_CAN_IRQHandler+0x320>
 8007e96:	2b50      	cmp	r3, #80	; 0x50
 8007e98:	d82a      	bhi.n	8007ef0 <HAL_CAN_IRQHandler+0x334>
 8007e9a:	2b40      	cmp	r3, #64	; 0x40
 8007e9c:	d019      	beq.n	8007ed2 <HAL_CAN_IRQHandler+0x316>
 8007e9e:	2b40      	cmp	r3, #64	; 0x40
 8007ea0:	d826      	bhi.n	8007ef0 <HAL_CAN_IRQHandler+0x334>
 8007ea2:	2b30      	cmp	r3, #48	; 0x30
 8007ea4:	d010      	beq.n	8007ec8 <HAL_CAN_IRQHandler+0x30c>
 8007ea6:	2b30      	cmp	r3, #48	; 0x30
 8007ea8:	d822      	bhi.n	8007ef0 <HAL_CAN_IRQHandler+0x334>
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	d002      	beq.n	8007eb4 <HAL_CAN_IRQHandler+0x2f8>
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d005      	beq.n	8007ebe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007eb2:	e01d      	b.n	8007ef0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	f043 0308 	orr.w	r3, r3, #8
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ebc:	e019      	b.n	8007ef2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	f043 0310 	orr.w	r3, r3, #16
 8007ec4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ec6:	e014      	b.n	8007ef2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	f043 0320 	orr.w	r3, r3, #32
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ed0:	e00f      	b.n	8007ef2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007eda:	e00a      	b.n	8007ef2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ee4:	e005      	b.n	8007ef2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007eee:	e000      	b.n	8007ef2 <HAL_CAN_IRQHandler+0x336>
            break;
 8007ef0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699a      	ldr	r2, [r3, #24]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007f00:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2204      	movs	r2, #4
 8007f08:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	431a      	orrs	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f868 	bl	8007ff2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007f22:	bf00      	nop
 8007f24:	3728      	adds	r7, #40	; 0x28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007f32:	bf00      	nop
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007f46:	bf00      	nop
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007f6e:	bf00      	nop
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <__NVIC_SetPriorityGrouping>:
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008018:	4b0c      	ldr	r3, [pc, #48]	; (800804c <__NVIC_SetPriorityGrouping+0x44>)
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008024:	4013      	ands	r3, r2
 8008026:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800803a:	4a04      	ldr	r2, [pc, #16]	; (800804c <__NVIC_SetPriorityGrouping+0x44>)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	60d3      	str	r3, [r2, #12]
}
 8008040:	bf00      	nop
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	e000ed00 	.word	0xe000ed00

08008050 <__NVIC_GetPriorityGrouping>:
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008054:	4b04      	ldr	r3, [pc, #16]	; (8008068 <__NVIC_GetPriorityGrouping+0x18>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	0a1b      	lsrs	r3, r3, #8
 800805a:	f003 0307 	and.w	r3, r3, #7
}
 800805e:	4618      	mov	r0, r3
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	e000ed00 	.word	0xe000ed00

0800806c <__NVIC_EnableIRQ>:
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800807a:	2b00      	cmp	r3, #0
 800807c:	db0b      	blt.n	8008096 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800807e:	79fb      	ldrb	r3, [r7, #7]
 8008080:	f003 021f 	and.w	r2, r3, #31
 8008084:	4907      	ldr	r1, [pc, #28]	; (80080a4 <__NVIC_EnableIRQ+0x38>)
 8008086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800808a:	095b      	lsrs	r3, r3, #5
 800808c:	2001      	movs	r0, #1
 800808e:	fa00 f202 	lsl.w	r2, r0, r2
 8008092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	e000e100 	.word	0xe000e100

080080a8 <__NVIC_DisableIRQ>:
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	db12      	blt.n	80080e0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	f003 021f 	and.w	r2, r3, #31
 80080c0:	490a      	ldr	r1, [pc, #40]	; (80080ec <__NVIC_DisableIRQ+0x44>)
 80080c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c6:	095b      	lsrs	r3, r3, #5
 80080c8:	2001      	movs	r0, #1
 80080ca:	fa00 f202 	lsl.w	r2, r0, r2
 80080ce:	3320      	adds	r3, #32
 80080d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80080d4:	f3bf 8f4f 	dsb	sy
}
 80080d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80080da:	f3bf 8f6f 	isb	sy
}
 80080de:	bf00      	nop
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	e000e100 	.word	0xe000e100

080080f0 <__NVIC_SetPriority>:
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	6039      	str	r1, [r7, #0]
 80080fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008100:	2b00      	cmp	r3, #0
 8008102:	db0a      	blt.n	800811a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	b2da      	uxtb	r2, r3
 8008108:	490c      	ldr	r1, [pc, #48]	; (800813c <__NVIC_SetPriority+0x4c>)
 800810a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800810e:	0112      	lsls	r2, r2, #4
 8008110:	b2d2      	uxtb	r2, r2
 8008112:	440b      	add	r3, r1
 8008114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008118:	e00a      	b.n	8008130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	b2da      	uxtb	r2, r3
 800811e:	4908      	ldr	r1, [pc, #32]	; (8008140 <__NVIC_SetPriority+0x50>)
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	f003 030f 	and.w	r3, r3, #15
 8008126:	3b04      	subs	r3, #4
 8008128:	0112      	lsls	r2, r2, #4
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	440b      	add	r3, r1
 800812e:	761a      	strb	r2, [r3, #24]
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	e000e100 	.word	0xe000e100
 8008140:	e000ed00 	.word	0xe000ed00

08008144 <NVIC_EncodePriority>:
{
 8008144:	b480      	push	{r7}
 8008146:	b089      	sub	sp, #36	; 0x24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f003 0307 	and.w	r3, r3, #7
 8008156:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	f1c3 0307 	rsb	r3, r3, #7
 800815e:	2b04      	cmp	r3, #4
 8008160:	bf28      	it	cs
 8008162:	2304      	movcs	r3, #4
 8008164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	3304      	adds	r3, #4
 800816a:	2b06      	cmp	r3, #6
 800816c:	d902      	bls.n	8008174 <NVIC_EncodePriority+0x30>
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	3b03      	subs	r3, #3
 8008172:	e000      	b.n	8008176 <NVIC_EncodePriority+0x32>
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008178:	f04f 32ff 	mov.w	r2, #4294967295
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	fa02 f303 	lsl.w	r3, r2, r3
 8008182:	43da      	mvns	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	401a      	ands	r2, r3
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800818c:	f04f 31ff 	mov.w	r1, #4294967295
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	fa01 f303 	lsl.w	r3, r1, r3
 8008196:	43d9      	mvns	r1, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800819c:	4313      	orrs	r3, r2
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3724      	adds	r7, #36	; 0x24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
	...

080081ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081bc:	d301      	bcc.n	80081c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80081be:	2301      	movs	r3, #1
 80081c0:	e00f      	b.n	80081e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081c2:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <SysTick_Config+0x40>)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80081ca:	210f      	movs	r1, #15
 80081cc:	f04f 30ff 	mov.w	r0, #4294967295
 80081d0:	f7ff ff8e 	bl	80080f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <SysTick_Config+0x40>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80081da:	4b04      	ldr	r3, [pc, #16]	; (80081ec <SysTick_Config+0x40>)
 80081dc:	2207      	movs	r2, #7
 80081de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	e000e010 	.word	0xe000e010

080081f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ff05 	bl	8008008 <__NVIC_SetPriorityGrouping>
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b086      	sub	sp, #24
 800820a:	af00      	add	r7, sp, #0
 800820c:	4603      	mov	r3, r0
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008218:	f7ff ff1a 	bl	8008050 <__NVIC_GetPriorityGrouping>
 800821c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	6978      	ldr	r0, [r7, #20]
 8008224:	f7ff ff8e 	bl	8008144 <NVIC_EncodePriority>
 8008228:	4602      	mov	r2, r0
 800822a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800822e:	4611      	mov	r1, r2
 8008230:	4618      	mov	r0, r3
 8008232:	f7ff ff5d 	bl	80080f0 <__NVIC_SetPriority>
}
 8008236:	bf00      	nop
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	4603      	mov	r3, r0
 8008246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800824c:	4618      	mov	r0, r3
 800824e:	f7ff ff0d 	bl	800806c <__NVIC_EnableIRQ>
}
 8008252:	bf00      	nop
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b082      	sub	sp, #8
 800825e:	af00      	add	r7, sp, #0
 8008260:	4603      	mov	r3, r0
 8008262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff ff1d 	bl	80080a8 <__NVIC_DisableIRQ>
}
 800826e:	bf00      	nop
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff ff94 	bl	80081ac <SysTick_Config>
 8008284:	4603      	mov	r3, r0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d005      	beq.n	80082b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2204      	movs	r2, #4
 80082aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	73fb      	strb	r3, [r7, #15]
 80082b0:	e029      	b.n	8008306 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 020e 	bic.w	r2, r2, #14
 80082c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 0201 	bic.w	r2, r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d6:	f003 021c 	and.w	r2, r3, #28
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	2101      	movs	r1, #1
 80082e0:	fa01 f202 	lsl.w	r2, r1, r2
 80082e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
    }
  }
  return status;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800831a:	2300      	movs	r3, #0
 800831c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800831e:	e17f      	b.n	8008620 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	2101      	movs	r1, #1
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	fa01 f303 	lsl.w	r3, r1, r3
 800832c:	4013      	ands	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8171 	beq.w	800861a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f003 0303 	and.w	r3, r3, #3
 8008340:	2b01      	cmp	r3, #1
 8008342:	d005      	beq.n	8008350 <HAL_GPIO_Init+0x40>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f003 0303 	and.w	r3, r3, #3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d130      	bne.n	80083b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	005b      	lsls	r3, r3, #1
 800835a:	2203      	movs	r2, #3
 800835c:	fa02 f303 	lsl.w	r3, r2, r3
 8008360:	43db      	mvns	r3, r3
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	4013      	ands	r3, r2
 8008366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008386:	2201      	movs	r2, #1
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	fa02 f303 	lsl.w	r3, r2, r3
 800838e:	43db      	mvns	r3, r3
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	4013      	ands	r3, r2
 8008394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	091b      	lsrs	r3, r3, #4
 800839c:	f003 0201 	and.w	r2, r3, #1
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	fa02 f303 	lsl.w	r3, r2, r3
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d118      	bne.n	80083f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80083c4:	2201      	movs	r2, #1
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	43db      	mvns	r3, r3
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4013      	ands	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	08db      	lsrs	r3, r3, #3
 80083da:	f003 0201 	and.w	r2, r3, #1
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	fa02 f303 	lsl.w	r3, r2, r3
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d017      	beq.n	800842c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	2203      	movs	r2, #3
 8008408:	fa02 f303 	lsl.w	r3, r2, r3
 800840c:	43db      	mvns	r3, r3
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	4013      	ands	r3, r2
 8008412:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	fa02 f303 	lsl.w	r3, r2, r3
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	4313      	orrs	r3, r2
 8008424:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f003 0303 	and.w	r3, r3, #3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d123      	bne.n	8008480 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	08da      	lsrs	r2, r3, #3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3208      	adds	r2, #8
 8008440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008444:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	220f      	movs	r2, #15
 8008450:	fa02 f303 	lsl.w	r3, r2, r3
 8008454:	43db      	mvns	r3, r3
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	4013      	ands	r3, r2
 800845a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f003 0307 	and.w	r3, r3, #7
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	fa02 f303 	lsl.w	r3, r2, r3
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	08da      	lsrs	r2, r3, #3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3208      	adds	r2, #8
 800847a:	6939      	ldr	r1, [r7, #16]
 800847c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	2203      	movs	r2, #3
 800848c:	fa02 f303 	lsl.w	r3, r2, r3
 8008490:	43db      	mvns	r3, r3
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4013      	ands	r3, r2
 8008496:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f003 0203 	and.w	r2, r3, #3
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	fa02 f303 	lsl.w	r3, r2, r3
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80ac 	beq.w	800861a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084c2:	4b5f      	ldr	r3, [pc, #380]	; (8008640 <HAL_GPIO_Init+0x330>)
 80084c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c6:	4a5e      	ldr	r2, [pc, #376]	; (8008640 <HAL_GPIO_Init+0x330>)
 80084c8:	f043 0301 	orr.w	r3, r3, #1
 80084cc:	6613      	str	r3, [r2, #96]	; 0x60
 80084ce:	4b5c      	ldr	r3, [pc, #368]	; (8008640 <HAL_GPIO_Init+0x330>)
 80084d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	60bb      	str	r3, [r7, #8]
 80084d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80084da:	4a5a      	ldr	r2, [pc, #360]	; (8008644 <HAL_GPIO_Init+0x334>)
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	089b      	lsrs	r3, r3, #2
 80084e0:	3302      	adds	r3, #2
 80084e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	220f      	movs	r2, #15
 80084f2:	fa02 f303 	lsl.w	r3, r2, r3
 80084f6:	43db      	mvns	r3, r3
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4013      	ands	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008504:	d025      	beq.n	8008552 <HAL_GPIO_Init+0x242>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a4f      	ldr	r2, [pc, #316]	; (8008648 <HAL_GPIO_Init+0x338>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d01f      	beq.n	800854e <HAL_GPIO_Init+0x23e>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a4e      	ldr	r2, [pc, #312]	; (800864c <HAL_GPIO_Init+0x33c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d019      	beq.n	800854a <HAL_GPIO_Init+0x23a>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a4d      	ldr	r2, [pc, #308]	; (8008650 <HAL_GPIO_Init+0x340>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d013      	beq.n	8008546 <HAL_GPIO_Init+0x236>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a4c      	ldr	r2, [pc, #304]	; (8008654 <HAL_GPIO_Init+0x344>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00d      	beq.n	8008542 <HAL_GPIO_Init+0x232>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a4b      	ldr	r2, [pc, #300]	; (8008658 <HAL_GPIO_Init+0x348>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d007      	beq.n	800853e <HAL_GPIO_Init+0x22e>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a4a      	ldr	r2, [pc, #296]	; (800865c <HAL_GPIO_Init+0x34c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d101      	bne.n	800853a <HAL_GPIO_Init+0x22a>
 8008536:	2306      	movs	r3, #6
 8008538:	e00c      	b.n	8008554 <HAL_GPIO_Init+0x244>
 800853a:	2307      	movs	r3, #7
 800853c:	e00a      	b.n	8008554 <HAL_GPIO_Init+0x244>
 800853e:	2305      	movs	r3, #5
 8008540:	e008      	b.n	8008554 <HAL_GPIO_Init+0x244>
 8008542:	2304      	movs	r3, #4
 8008544:	e006      	b.n	8008554 <HAL_GPIO_Init+0x244>
 8008546:	2303      	movs	r3, #3
 8008548:	e004      	b.n	8008554 <HAL_GPIO_Init+0x244>
 800854a:	2302      	movs	r3, #2
 800854c:	e002      	b.n	8008554 <HAL_GPIO_Init+0x244>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <HAL_GPIO_Init+0x244>
 8008552:	2300      	movs	r3, #0
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	f002 0203 	and.w	r2, r2, #3
 800855a:	0092      	lsls	r2, r2, #2
 800855c:	4093      	lsls	r3, r2
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008564:	4937      	ldr	r1, [pc, #220]	; (8008644 <HAL_GPIO_Init+0x334>)
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	089b      	lsrs	r3, r3, #2
 800856a:	3302      	adds	r3, #2
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008572:	4b3b      	ldr	r3, [pc, #236]	; (8008660 <HAL_GPIO_Init+0x350>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	43db      	mvns	r3, r3
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	4013      	ands	r3, r2
 8008580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4313      	orrs	r3, r2
 8008594:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008596:	4a32      	ldr	r2, [pc, #200]	; (8008660 <HAL_GPIO_Init+0x350>)
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800859c:	4b30      	ldr	r3, [pc, #192]	; (8008660 <HAL_GPIO_Init+0x350>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	43db      	mvns	r3, r3
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4013      	ands	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80085c0:	4a27      	ldr	r2, [pc, #156]	; (8008660 <HAL_GPIO_Init+0x350>)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80085c6:	4b26      	ldr	r3, [pc, #152]	; (8008660 <HAL_GPIO_Init+0x350>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	43db      	mvns	r3, r3
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	4013      	ands	r3, r2
 80085d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80085ea:	4a1d      	ldr	r2, [pc, #116]	; (8008660 <HAL_GPIO_Init+0x350>)
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80085f0:	4b1b      	ldr	r3, [pc, #108]	; (8008660 <HAL_GPIO_Init+0x350>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	43db      	mvns	r3, r3
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4013      	ands	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	4313      	orrs	r3, r2
 8008612:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008614:	4a12      	ldr	r2, [pc, #72]	; (8008660 <HAL_GPIO_Init+0x350>)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	3301      	adds	r3, #1
 800861e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	fa22 f303 	lsr.w	r3, r2, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	f47f ae78 	bne.w	8008320 <HAL_GPIO_Init+0x10>
  }
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	40021000 	.word	0x40021000
 8008644:	40010000 	.word	0x40010000
 8008648:	48000400 	.word	0x48000400
 800864c:	48000800 	.word	0x48000800
 8008650:	48000c00 	.word	0x48000c00
 8008654:	48001000 	.word	0x48001000
 8008658:	48001400 	.word	0x48001400
 800865c:	48001800 	.word	0x48001800
 8008660:	40010400 	.word	0x40010400

08008664 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008672:	e0cd      	b.n	8008810 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008674:	2201      	movs	r2, #1
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	fa02 f303 	lsl.w	r3, r2, r3
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	4013      	ands	r3, r2
 8008680:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 80c0 	beq.w	800880a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800868a:	4a68      	ldr	r2, [pc, #416]	; (800882c <HAL_GPIO_DeInit+0x1c8>)
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	089b      	lsrs	r3, r3, #2
 8008690:	3302      	adds	r3, #2
 8008692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008696:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	220f      	movs	r2, #15
 80086a2:	fa02 f303 	lsl.w	r3, r2, r3
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4013      	ands	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80086b2:	d025      	beq.n	8008700 <HAL_GPIO_DeInit+0x9c>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a5e      	ldr	r2, [pc, #376]	; (8008830 <HAL_GPIO_DeInit+0x1cc>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d01f      	beq.n	80086fc <HAL_GPIO_DeInit+0x98>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a5d      	ldr	r2, [pc, #372]	; (8008834 <HAL_GPIO_DeInit+0x1d0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d019      	beq.n	80086f8 <HAL_GPIO_DeInit+0x94>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a5c      	ldr	r2, [pc, #368]	; (8008838 <HAL_GPIO_DeInit+0x1d4>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d013      	beq.n	80086f4 <HAL_GPIO_DeInit+0x90>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a5b      	ldr	r2, [pc, #364]	; (800883c <HAL_GPIO_DeInit+0x1d8>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00d      	beq.n	80086f0 <HAL_GPIO_DeInit+0x8c>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a5a      	ldr	r2, [pc, #360]	; (8008840 <HAL_GPIO_DeInit+0x1dc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d007      	beq.n	80086ec <HAL_GPIO_DeInit+0x88>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a59      	ldr	r2, [pc, #356]	; (8008844 <HAL_GPIO_DeInit+0x1e0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d101      	bne.n	80086e8 <HAL_GPIO_DeInit+0x84>
 80086e4:	2306      	movs	r3, #6
 80086e6:	e00c      	b.n	8008702 <HAL_GPIO_DeInit+0x9e>
 80086e8:	2307      	movs	r3, #7
 80086ea:	e00a      	b.n	8008702 <HAL_GPIO_DeInit+0x9e>
 80086ec:	2305      	movs	r3, #5
 80086ee:	e008      	b.n	8008702 <HAL_GPIO_DeInit+0x9e>
 80086f0:	2304      	movs	r3, #4
 80086f2:	e006      	b.n	8008702 <HAL_GPIO_DeInit+0x9e>
 80086f4:	2303      	movs	r3, #3
 80086f6:	e004      	b.n	8008702 <HAL_GPIO_DeInit+0x9e>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e002      	b.n	8008702 <HAL_GPIO_DeInit+0x9e>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <HAL_GPIO_DeInit+0x9e>
 8008700:	2300      	movs	r3, #0
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	f002 0203 	and.w	r2, r2, #3
 8008708:	0092      	lsls	r2, r2, #2
 800870a:	4093      	lsls	r3, r2
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	429a      	cmp	r2, r3
 8008710:	d132      	bne.n	8008778 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008712:	4b4d      	ldr	r3, [pc, #308]	; (8008848 <HAL_GPIO_DeInit+0x1e4>)
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	43db      	mvns	r3, r3
 800871a:	494b      	ldr	r1, [pc, #300]	; (8008848 <HAL_GPIO_DeInit+0x1e4>)
 800871c:	4013      	ands	r3, r2
 800871e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008720:	4b49      	ldr	r3, [pc, #292]	; (8008848 <HAL_GPIO_DeInit+0x1e4>)
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	43db      	mvns	r3, r3
 8008728:	4947      	ldr	r1, [pc, #284]	; (8008848 <HAL_GPIO_DeInit+0x1e4>)
 800872a:	4013      	ands	r3, r2
 800872c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800872e:	4b46      	ldr	r3, [pc, #280]	; (8008848 <HAL_GPIO_DeInit+0x1e4>)
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	43db      	mvns	r3, r3
 8008736:	4944      	ldr	r1, [pc, #272]	; (8008848 <HAL_GPIO_DeInit+0x1e4>)
 8008738:	4013      	ands	r3, r2
 800873a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800873c:	4b42      	ldr	r3, [pc, #264]	; (8008848 <HAL_GPIO_DeInit+0x1e4>)
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	43db      	mvns	r3, r3
 8008744:	4940      	ldr	r1, [pc, #256]	; (8008848 <HAL_GPIO_DeInit+0x1e4>)
 8008746:	4013      	ands	r3, r2
 8008748:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f003 0303 	and.w	r3, r3, #3
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	220f      	movs	r2, #15
 8008754:	fa02 f303 	lsl.w	r3, r2, r3
 8008758:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800875a:	4a34      	ldr	r2, [pc, #208]	; (800882c <HAL_GPIO_DeInit+0x1c8>)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	089b      	lsrs	r3, r3, #2
 8008760:	3302      	adds	r3, #2
 8008762:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	43da      	mvns	r2, r3
 800876a:	4830      	ldr	r0, [pc, #192]	; (800882c <HAL_GPIO_DeInit+0x1c8>)
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	089b      	lsrs	r3, r3, #2
 8008770:	400a      	ands	r2, r1
 8008772:	3302      	adds	r3, #2
 8008774:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	2103      	movs	r1, #3
 8008782:	fa01 f303 	lsl.w	r3, r1, r3
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	08da      	lsrs	r2, r3, #3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3208      	adds	r2, #8
 8008794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	220f      	movs	r2, #15
 80087a2:	fa02 f303 	lsl.w	r3, r2, r3
 80087a6:	43db      	mvns	r3, r3
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	08d2      	lsrs	r2, r2, #3
 80087ac:	4019      	ands	r1, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3208      	adds	r2, #8
 80087b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	2103      	movs	r1, #3
 80087c0:	fa01 f303 	lsl.w	r3, r1, r3
 80087c4:	43db      	mvns	r3, r3
 80087c6:	401a      	ands	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	2101      	movs	r1, #1
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	fa01 f303 	lsl.w	r3, r1, r3
 80087d8:	43db      	mvns	r3, r3
 80087da:	401a      	ands	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68da      	ldr	r2, [r3, #12]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	2103      	movs	r1, #3
 80087ea:	fa01 f303 	lsl.w	r3, r1, r3
 80087ee:	43db      	mvns	r3, r3
 80087f0:	401a      	ands	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fa:	2101      	movs	r1, #1
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008802:	43db      	mvns	r3, r3
 8008804:	401a      	ands	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	3301      	adds	r3, #1
 800880e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	fa22 f303 	lsr.w	r3, r2, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	f47f af2b 	bne.w	8008674 <HAL_GPIO_DeInit+0x10>
  }
}
 800881e:	bf00      	nop
 8008820:	bf00      	nop
 8008822:	371c      	adds	r7, #28
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	40010000 	.word	0x40010000
 8008830:	48000400 	.word	0x48000400
 8008834:	48000800 	.word	0x48000800
 8008838:	48000c00 	.word	0x48000c00
 800883c:	48001000 	.word	0x48001000
 8008840:	48001400 	.word	0x48001400
 8008844:	48001800 	.word	0x48001800
 8008848:	40010400 	.word	0x40010400

0800884c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	807b      	strh	r3, [r7, #2]
 8008858:	4613      	mov	r3, r2
 800885a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800885c:	787b      	ldrb	r3, [r7, #1]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008862:	887a      	ldrh	r2, [r7, #2]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008868:	e002      	b.n	8008870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800886a:	887a      	ldrh	r2, [r7, #2]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008886:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008888:	695a      	ldr	r2, [r3, #20]
 800888a:	88fb      	ldrh	r3, [r7, #6]
 800888c:	4013      	ands	r3, r2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d006      	beq.n	80088a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008892:	4a05      	ldr	r2, [pc, #20]	; (80088a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008894:	88fb      	ldrh	r3, [r7, #6]
 8008896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008898:	88fb      	ldrh	r3, [r7, #6]
 800889a:	4618      	mov	r0, r3
 800889c:	f7fd ff5a 	bl	8006754 <HAL_GPIO_EXTI_Callback>
  }
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	40010400 	.word	0x40010400

080088ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e095      	b.n	80089ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d108      	bne.n	80088d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088ce:	d009      	beq.n	80088e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	61da      	str	r2, [r3, #28]
 80088d6:	e005      	b.n	80088e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d106      	bne.n	8008904 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7fa fac8 	bl	8002e94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800891a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008924:	d902      	bls.n	800892c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008926:	2300      	movs	r3, #0
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	e002      	b.n	8008932 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800892c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008930:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800893a:	d007      	beq.n	800894c <HAL_SPI_Init+0xa0>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008944:	d002      	beq.n	800894c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800895c:	431a      	orrs	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	431a      	orrs	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	431a      	orrs	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800897a:	431a      	orrs	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898e:	ea42 0103 	orr.w	r1, r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008996:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	0c1b      	lsrs	r3, r3, #16
 80089a8:	f003 0204 	and.w	r2, r3, #4
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	431a      	orrs	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ba:	f003 0308 	and.w	r3, r3, #8
 80089be:	431a      	orrs	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80089c8:	ea42 0103 	orr.w	r1, r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b082      	sub	sp, #8
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e01a      	b.n	8008a3a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a1a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7fa fa83 	bl	8002f28 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b088      	sub	sp, #32
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d101      	bne.n	8008a64 <HAL_SPI_Transmit+0x22>
 8008a60:	2302      	movs	r3, #2
 8008a62:	e158      	b.n	8008d16 <HAL_SPI_Transmit+0x2d4>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a6c:	f7fe fc16 	bl	800729c <HAL_GetTick>
 8008a70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d002      	beq.n	8008a88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a82:	2302      	movs	r3, #2
 8008a84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a86:	e13d      	b.n	8008d04 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <HAL_SPI_Transmit+0x52>
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d102      	bne.n	8008a9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a98:	e134      	b.n	8008d04 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2203      	movs	r2, #3
 8008a9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	88fa      	ldrh	r2, [r7, #6]
 8008ab2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	88fa      	ldrh	r2, [r7, #6]
 8008ab8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae4:	d10f      	bne.n	8008b06 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b10:	2b40      	cmp	r3, #64	; 0x40
 8008b12:	d007      	beq.n	8008b24 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b2c:	d94b      	bls.n	8008bc6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <HAL_SPI_Transmit+0xfa>
 8008b36:	8afb      	ldrh	r3, [r7, #22]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d13e      	bne.n	8008bba <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	881a      	ldrh	r2, [r3, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	1c9a      	adds	r2, r3, #2
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b60:	e02b      	b.n	8008bba <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 0302 	and.w	r3, r3, #2
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d112      	bne.n	8008b96 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	881a      	ldrh	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	1c9a      	adds	r2, r3, #2
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b94:	e011      	b.n	8008bba <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b96:	f7fe fb81 	bl	800729c <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d803      	bhi.n	8008bae <HAL_SPI_Transmit+0x16c>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bac:	d102      	bne.n	8008bb4 <HAL_SPI_Transmit+0x172>
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d102      	bne.n	8008bba <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bb8:	e0a4      	b.n	8008d04 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1ce      	bne.n	8008b62 <HAL_SPI_Transmit+0x120>
 8008bc4:	e07c      	b.n	8008cc0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <HAL_SPI_Transmit+0x192>
 8008bce:	8afb      	ldrh	r3, [r7, #22]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d170      	bne.n	8008cb6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d912      	bls.n	8008c04 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	881a      	ldrh	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	1c9a      	adds	r2, r3, #2
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	3b02      	subs	r3, #2
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c02:	e058      	b.n	8008cb6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	330c      	adds	r3, #12
 8008c0e:	7812      	ldrb	r2, [r2, #0]
 8008c10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c2a:	e044      	b.n	8008cb6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d12b      	bne.n	8008c92 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d912      	bls.n	8008c6a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c48:	881a      	ldrh	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	1c9a      	adds	r2, r3, #2
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	3b02      	subs	r3, #2
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c68:	e025      	b.n	8008cb6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	330c      	adds	r3, #12
 8008c74:	7812      	ldrb	r2, [r2, #0]
 8008c76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c90:	e011      	b.n	8008cb6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c92:	f7fe fb03 	bl	800729c <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d803      	bhi.n	8008caa <HAL_SPI_Transmit+0x268>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca8:	d102      	bne.n	8008cb0 <HAL_SPI_Transmit+0x26e>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d102      	bne.n	8008cb6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008cb4:	e026      	b.n	8008d04 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1b5      	bne.n	8008c2c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f001 f985 	bl	8009fd4 <SPI_EndRxTxTransaction>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cde:	2300      	movs	r3, #0
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	613b      	str	r3, [r7, #16]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	613b      	str	r3, [r7, #16]
 8008cf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	77fb      	strb	r3, [r7, #31]
 8008d00:	e000      	b.n	8008d04 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008d02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d14:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3720      	adds	r7, #32
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b088      	sub	sp, #32
 8008d22:	af02      	add	r7, sp, #8
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	603b      	str	r3, [r7, #0]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d3a:	d112      	bne.n	8008d62 <HAL_SPI_Receive+0x44>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10e      	bne.n	8008d62 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2204      	movs	r2, #4
 8008d48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008d4c:	88fa      	ldrh	r2, [r7, #6]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	4613      	mov	r3, r2
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	68b9      	ldr	r1, [r7, #8]
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f910 	bl	8008f7e <HAL_SPI_TransmitReceive>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	e109      	b.n	8008f76 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d101      	bne.n	8008d70 <HAL_SPI_Receive+0x52>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e102      	b.n	8008f76 <HAL_SPI_Receive+0x258>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d78:	f7fe fa90 	bl	800729c <HAL_GetTick>
 8008d7c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d002      	beq.n	8008d90 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d8e:	e0e9      	b.n	8008f64 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <HAL_SPI_Receive+0x7e>
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008da0:	e0e0      	b.n	8008f64 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2204      	movs	r2, #4
 8008da6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	88fa      	ldrh	r2, [r7, #6]
 8008dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	88fa      	ldrh	r2, [r7, #6]
 8008dc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008dec:	d908      	bls.n	8008e00 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008dfc:	605a      	str	r2, [r3, #4]
 8008dfe:	e007      	b.n	8008e10 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e0e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e18:	d10f      	bne.n	8008e3a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e44:	2b40      	cmp	r3, #64	; 0x40
 8008e46:	d007      	beq.n	8008e58 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e60:	d867      	bhi.n	8008f32 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008e62:	e030      	b.n	8008ec6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d117      	bne.n	8008ea2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f103 020c 	add.w	r2, r3, #12
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008ea0:	e011      	b.n	8008ec6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ea2:	f7fe f9fb 	bl	800729c <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d803      	bhi.n	8008eba <HAL_SPI_Receive+0x19c>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb8:	d102      	bne.n	8008ec0 <HAL_SPI_Receive+0x1a2>
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ec4:	e04e      	b.n	8008f64 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1c8      	bne.n	8008e64 <HAL_SPI_Receive+0x146>
 8008ed2:	e034      	b.n	8008f3e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d115      	bne.n	8008f0e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eec:	b292      	uxth	r2, r2
 8008eee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef4:	1c9a      	adds	r2, r3, #2
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	3b01      	subs	r3, #1
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008f0c:	e011      	b.n	8008f32 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f0e:	f7fe f9c5 	bl	800729c <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d803      	bhi.n	8008f26 <HAL_SPI_Receive+0x208>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f24:	d102      	bne.n	8008f2c <HAL_SPI_Receive+0x20e>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d102      	bne.n	8008f32 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f30:	e018      	b.n	8008f64 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1ca      	bne.n	8008ed4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 ffee 	bl	8009f24 <SPI_EndRxTransaction>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2220      	movs	r2, #32
 8008f52:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	75fb      	strb	r3, [r7, #23]
 8008f60:	e000      	b.n	8008f64 <HAL_SPI_Receive+0x246>
  }

error :
 8008f62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3718      	adds	r7, #24
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b08a      	sub	sp, #40	; 0x28
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	607a      	str	r2, [r7, #4]
 8008f8a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_SPI_TransmitReceive+0x26>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e1fb      	b.n	800939c <HAL_SPI_TransmitReceive+0x41e>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fac:	f7fe f976 	bl	800729c <HAL_GetTick>
 8008fb0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008fb8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008fc0:	887b      	ldrh	r3, [r7, #2]
 8008fc2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008fc4:	887b      	ldrh	r3, [r7, #2]
 8008fc6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fc8:	7efb      	ldrb	r3, [r7, #27]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d00e      	beq.n	8008fec <HAL_SPI_TransmitReceive+0x6e>
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fd4:	d106      	bne.n	8008fe4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d102      	bne.n	8008fe4 <HAL_SPI_TransmitReceive+0x66>
 8008fde:	7efb      	ldrb	r3, [r7, #27]
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d003      	beq.n	8008fec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008fea:	e1cd      	b.n	8009388 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <HAL_SPI_TransmitReceive+0x80>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <HAL_SPI_TransmitReceive+0x80>
 8008ff8:	887b      	ldrh	r3, [r7, #2]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d103      	bne.n	8009006 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009004:	e1c0      	b.n	8009388 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b04      	cmp	r3, #4
 8009010:	d003      	beq.n	800901a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2205      	movs	r2, #5
 8009016:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	887a      	ldrh	r2, [r7, #2]
 800902a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	887a      	ldrh	r2, [r7, #2]
 8009032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	887a      	ldrh	r2, [r7, #2]
 8009040:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	887a      	ldrh	r2, [r7, #2]
 8009046:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800905c:	d802      	bhi.n	8009064 <HAL_SPI_TransmitReceive+0xe6>
 800905e:	8a3b      	ldrh	r3, [r7, #16]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d908      	bls.n	8009076 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009072:	605a      	str	r2, [r3, #4]
 8009074:	e007      	b.n	8009086 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009084:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009090:	2b40      	cmp	r3, #64	; 0x40
 8009092:	d007      	beq.n	80090a4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090ac:	d97c      	bls.n	80091a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <HAL_SPI_TransmitReceive+0x13e>
 80090b6:	8a7b      	ldrh	r3, [r7, #18]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d169      	bne.n	8009190 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c0:	881a      	ldrh	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090cc:	1c9a      	adds	r2, r3, #2
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090e0:	e056      	b.n	8009190 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	f003 0302 	and.w	r3, r3, #2
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d11b      	bne.n	8009128 <HAL_SPI_TransmitReceive+0x1aa>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d016      	beq.n	8009128 <HAL_SPI_TransmitReceive+0x1aa>
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d113      	bne.n	8009128 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	881a      	ldrh	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	1c9a      	adds	r2, r3, #2
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800911a:	b29b      	uxth	r3, r3
 800911c:	3b01      	subs	r3, #1
 800911e:	b29a      	uxth	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009124:	2300      	movs	r3, #0
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b01      	cmp	r3, #1
 8009134:	d11c      	bne.n	8009170 <HAL_SPI_TransmitReceive+0x1f2>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800913c:	b29b      	uxth	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d016      	beq.n	8009170 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	b292      	uxth	r2, r2
 800914e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009154:	1c9a      	adds	r2, r3, #2
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009160:	b29b      	uxth	r3, r3
 8009162:	3b01      	subs	r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800916c:	2301      	movs	r3, #1
 800916e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009170:	f7fe f894 	bl	800729c <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800917c:	429a      	cmp	r2, r3
 800917e:	d807      	bhi.n	8009190 <HAL_SPI_TransmitReceive+0x212>
 8009180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009186:	d003      	beq.n	8009190 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800918e:	e0fb      	b.n	8009388 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009194:	b29b      	uxth	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1a3      	bne.n	80090e2 <HAL_SPI_TransmitReceive+0x164>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d19d      	bne.n	80090e2 <HAL_SPI_TransmitReceive+0x164>
 80091a6:	e0df      	b.n	8009368 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <HAL_SPI_TransmitReceive+0x23a>
 80091b0:	8a7b      	ldrh	r3, [r7, #18]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	f040 80cb 	bne.w	800934e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091bc:	b29b      	uxth	r3, r3
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d912      	bls.n	80091e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c6:	881a      	ldrh	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	1c9a      	adds	r2, r3, #2
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b02      	subs	r3, #2
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091e6:	e0b2      	b.n	800934e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	330c      	adds	r3, #12
 80091f2:	7812      	ldrb	r2, [r2, #0]
 80091f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009204:	b29b      	uxth	r3, r3
 8009206:	3b01      	subs	r3, #1
 8009208:	b29a      	uxth	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800920e:	e09e      	b.n	800934e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b02      	cmp	r3, #2
 800921c:	d134      	bne.n	8009288 <HAL_SPI_TransmitReceive+0x30a>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009222:	b29b      	uxth	r3, r3
 8009224:	2b00      	cmp	r3, #0
 8009226:	d02f      	beq.n	8009288 <HAL_SPI_TransmitReceive+0x30a>
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	2b01      	cmp	r3, #1
 800922c:	d12c      	bne.n	8009288 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009232:	b29b      	uxth	r3, r3
 8009234:	2b01      	cmp	r3, #1
 8009236:	d912      	bls.n	800925e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923c:	881a      	ldrh	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009248:	1c9a      	adds	r2, r3, #2
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009252:	b29b      	uxth	r3, r3
 8009254:	3b02      	subs	r3, #2
 8009256:	b29a      	uxth	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800925c:	e012      	b.n	8009284 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	330c      	adds	r3, #12
 8009268:	7812      	ldrb	r2, [r2, #0]
 800926a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800927a:	b29b      	uxth	r3, r3
 800927c:	3b01      	subs	r3, #1
 800927e:	b29a      	uxth	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009284:	2300      	movs	r3, #0
 8009286:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b01      	cmp	r3, #1
 8009294:	d148      	bne.n	8009328 <HAL_SPI_TransmitReceive+0x3aa>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800929c:	b29b      	uxth	r3, r3
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d042      	beq.n	8009328 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d923      	bls.n	80092f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68da      	ldr	r2, [r3, #12]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b8:	b292      	uxth	r2, r2
 80092ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c0:	1c9a      	adds	r2, r3, #2
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	3b02      	subs	r3, #2
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d81f      	bhi.n	8009324 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80092f2:	605a      	str	r2, [r3, #4]
 80092f4:	e016      	b.n	8009324 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f103 020c 	add.w	r2, r3, #12
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	7812      	ldrb	r2, [r2, #0]
 8009304:	b2d2      	uxtb	r2, r2
 8009306:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009318:	b29b      	uxth	r3, r3
 800931a:	3b01      	subs	r3, #1
 800931c:	b29a      	uxth	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009324:	2301      	movs	r3, #1
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009328:	f7fd ffb8 	bl	800729c <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009334:	429a      	cmp	r2, r3
 8009336:	d803      	bhi.n	8009340 <HAL_SPI_TransmitReceive+0x3c2>
 8009338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d102      	bne.n	8009346 <HAL_SPI_TransmitReceive+0x3c8>
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	2b00      	cmp	r3, #0
 8009344:	d103      	bne.n	800934e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800934c:	e01c      	b.n	8009388 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009352:	b29b      	uxth	r3, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	f47f af5b 	bne.w	8009210 <HAL_SPI_TransmitReceive+0x292>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009360:	b29b      	uxth	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	f47f af54 	bne.w	8009210 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009368:	69fa      	ldr	r2, [r7, #28]
 800936a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f000 fe31 	bl	8009fd4 <SPI_EndRxTxTransaction>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d006      	beq.n	8009386 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2220      	movs	r2, #32
 8009382:	661a      	str	r2, [r3, #96]	; 0x60
 8009384:	e000      	b.n	8009388 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009386:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009398:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800939c:	4618      	mov	r0, r3
 800939e:	3728      	adds	r7, #40	; 0x28
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	4613      	mov	r3, r2
 80093b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d101      	bne.n	80093c4 <HAL_SPI_Transmit_IT+0x20>
 80093c0:	2302      	movs	r3, #2
 80093c2:	e072      	b.n	80094aa <HAL_SPI_Transmit_IT+0x106>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <HAL_SPI_Transmit_IT+0x34>
 80093d2:	88fb      	ldrh	r3, [r7, #6]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093dc:	e060      	b.n	80094a0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d002      	beq.n	80093f0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80093ea:	2302      	movs	r3, #2
 80093ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093ee:	e057      	b.n	80094a0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2203      	movs	r2, #3
 80093f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	88fa      	ldrh	r2, [r7, #6]
 8009408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	88fa      	ldrh	r2, [r7, #6]
 800940e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009434:	d903      	bls.n	800943e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4a1f      	ldr	r2, [pc, #124]	; (80094b8 <HAL_SPI_Transmit_IT+0x114>)
 800943a:	651a      	str	r2, [r3, #80]	; 0x50
 800943c:	e002      	b.n	8009444 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	4a1e      	ldr	r2, [pc, #120]	; (80094bc <HAL_SPI_Transmit_IT+0x118>)
 8009442:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800944c:	d10f      	bne.n	800946e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800945c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800946c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800947c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009488:	2b40      	cmp	r3, #64	; 0x40
 800948a:	d008      	beq.n	800949e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	e000      	b.n	80094a0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800949e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80094a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	371c      	adds	r7, #28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	08009ca3 	.word	0x08009ca3
 80094bc:	08009c5d 	.word	0x08009c5d

080094c0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	4613      	mov	r3, r2
 80094cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d110      	bne.n	80094fc <HAL_SPI_Receive_IT+0x3c>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094e2:	d10b      	bne.n	80094fc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2204      	movs	r2, #4
 80094e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80094ec:	88fb      	ldrh	r3, [r7, #6]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	68b9      	ldr	r1, [r7, #8]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f894 	bl	8009620 <HAL_SPI_TransmitReceive_IT>
 80094f8:	4603      	mov	r3, r0
 80094fa:	e089      	b.n	8009610 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <HAL_SPI_Receive_IT+0x4a>
 8009506:	2302      	movs	r3, #2
 8009508:	e082      	b.n	8009610 <HAL_SPI_Receive_IT+0x150>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b01      	cmp	r3, #1
 800951c:	d002      	beq.n	8009524 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800951e:	2302      	movs	r3, #2
 8009520:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009522:	e070      	b.n	8009606 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <HAL_SPI_Receive_IT+0x70>
 800952a:	88fb      	ldrh	r3, [r7, #6]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009534:	e067      	b.n	8009606 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2204      	movs	r2, #4
 800953a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	88fa      	ldrh	r2, [r7, #6]
 800954e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	88fa      	ldrh	r2, [r7, #6]
 8009556:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800957a:	d90b      	bls.n	8009594 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800958a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4a22      	ldr	r2, [pc, #136]	; (8009618 <HAL_SPI_Receive_IT+0x158>)
 8009590:	64da      	str	r2, [r3, #76]	; 0x4c
 8009592:	e00a      	b.n	80095aa <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095a2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4a1d      	ldr	r2, [pc, #116]	; (800961c <HAL_SPI_Receive_IT+0x15c>)
 80095a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b2:	d10f      	bne.n	80095d4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80095d2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80095e2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ee:	2b40      	cmp	r3, #64	; 0x40
 80095f0:	d008      	beq.n	8009604 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	e000      	b.n	8009606 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8009604:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800960e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	08009c11 	.word	0x08009c11
 800961c:	08009bc1 	.word	0x08009bc1

08009620 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <HAL_SPI_TransmitReceive_IT+0x20>
 800963c:	2302      	movs	r3, #2
 800963e:	e091      	b.n	8009764 <HAL_SPI_TransmitReceive_IT+0x144>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800964e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009656:	7dbb      	ldrb	r3, [r7, #22]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d00d      	beq.n	8009678 <HAL_SPI_TransmitReceive_IT+0x58>
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009662:	d106      	bne.n	8009672 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <HAL_SPI_TransmitReceive_IT+0x52>
 800966c:	7dbb      	ldrb	r3, [r7, #22]
 800966e:	2b04      	cmp	r3, #4
 8009670:	d002      	beq.n	8009678 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8009672:	2302      	movs	r3, #2
 8009674:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009676:	e070      	b.n	800975a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d005      	beq.n	800968a <HAL_SPI_TransmitReceive_IT+0x6a>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <HAL_SPI_TransmitReceive_IT+0x6a>
 8009684:	887b      	ldrh	r3, [r7, #2]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800968e:	e064      	b.n	800975a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b04      	cmp	r3, #4
 800969a:	d003      	beq.n	80096a4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2205      	movs	r2, #5
 80096a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	887a      	ldrh	r2, [r7, #2]
 80096b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	887a      	ldrh	r2, [r7, #2]
 80096ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	887a      	ldrh	r2, [r7, #2]
 80096c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	887a      	ldrh	r2, [r7, #2]
 80096ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096da:	d906      	bls.n	80096ea <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4a24      	ldr	r2, [pc, #144]	; (8009770 <HAL_SPI_TransmitReceive_IT+0x150>)
 80096e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4a23      	ldr	r2, [pc, #140]	; (8009774 <HAL_SPI_TransmitReceive_IT+0x154>)
 80096e6:	651a      	str	r2, [r3, #80]	; 0x50
 80096e8:	e005      	b.n	80096f6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4a22      	ldr	r2, [pc, #136]	; (8009778 <HAL_SPI_TransmitReceive_IT+0x158>)
 80096ee:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4a22      	ldr	r2, [pc, #136]	; (800977c <HAL_SPI_TransmitReceive_IT+0x15c>)
 80096f4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096fe:	d802      	bhi.n	8009706 <HAL_SPI_TransmitReceive_IT+0xe6>
 8009700:	887b      	ldrh	r3, [r7, #2]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d908      	bls.n	8009718 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009714:	605a      	str	r2, [r3, #4]
 8009716:	e007      	b.n	8009728 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009726:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009736:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009742:	2b40      	cmp	r3, #64	; 0x40
 8009744:	d008      	beq.n	8009758 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	e000      	b.n	800975a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009758:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
}
 8009764:	4618      	mov	r0, r3
 8009766:	371c      	adds	r7, #28
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	08009afb 	.word	0x08009afb
 8009774:	08009b61 	.word	0x08009b61
 8009778:	080099ab 	.word	0x080099ab
 800977c:	08009a69 	.word	0x08009a69

08009780 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	099b      	lsrs	r3, r3, #6
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10f      	bne.n	80097c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	099b      	lsrs	r3, r3, #6
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d004      	beq.n	80097c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
    return;
 80097c2:	e0d7      	b.n	8009974 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	085b      	lsrs	r3, r3, #1
 80097c8:	f003 0301 	and.w	r3, r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00a      	beq.n	80097e6 <HAL_SPI_IRQHandler+0x66>
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	09db      	lsrs	r3, r3, #7
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d004      	beq.n	80097e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	4798      	blx	r3
    return;
 80097e4:	e0c6      	b.n	8009974 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	095b      	lsrs	r3, r3, #5
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10c      	bne.n	800980c <HAL_SPI_IRQHandler+0x8c>
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	099b      	lsrs	r3, r3, #6
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d106      	bne.n	800980c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	0a1b      	lsrs	r3, r3, #8
 8009802:	f003 0301 	and.w	r3, r3, #1
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 80b4 	beq.w	8009974 <HAL_SPI_IRQHandler+0x1f4>
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	095b      	lsrs	r3, r3, #5
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 80ad 	beq.w	8009974 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	099b      	lsrs	r3, r3, #6
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	d023      	beq.n	800986e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b03      	cmp	r3, #3
 8009830:	d011      	beq.n	8009856 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009836:	f043 0204 	orr.w	r2, r3, #4
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800983e:	2300      	movs	r3, #0
 8009840:	617b      	str	r3, [r7, #20]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	617b      	str	r3, [r7, #20]
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	e00b      	b.n	800986e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009856:	2300      	movs	r3, #0
 8009858:	613b      	str	r3, [r7, #16]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	613b      	str	r3, [r7, #16]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	613b      	str	r3, [r7, #16]
 800986a:	693b      	ldr	r3, [r7, #16]
        return;
 800986c:	e082      	b.n	8009974 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	095b      	lsrs	r3, r3, #5
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d014      	beq.n	80098a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800987e:	f043 0201 	orr.w	r2, r3, #1
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009886:	2300      	movs	r3, #0
 8009888:	60fb      	str	r3, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	0a1b      	lsrs	r3, r3, #8
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d00c      	beq.n	80098ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b4:	f043 0208 	orr.w	r2, r3, #8
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80098bc:	2300      	movs	r3, #0
 80098be:	60bb      	str	r3, [r7, #8]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	60bb      	str	r3, [r7, #8]
 80098c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d04f      	beq.n	8009972 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	f003 0302 	and.w	r3, r3, #2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d104      	bne.n	80098fe <HAL_SPI_IRQHandler+0x17e>
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d034      	beq.n	8009968 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 0203 	bic.w	r2, r2, #3
 800990c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009912:	2b00      	cmp	r3, #0
 8009914:	d011      	beq.n	800993a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800991a:	4a18      	ldr	r2, [pc, #96]	; (800997c <HAL_SPI_IRQHandler+0x1fc>)
 800991c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fcb3 	bl	800828e <HAL_DMA_Abort_IT>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d005      	beq.n	800993a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993e:	2b00      	cmp	r3, #0
 8009940:	d016      	beq.n	8009970 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009946:	4a0d      	ldr	r2, [pc, #52]	; (800997c <HAL_SPI_IRQHandler+0x1fc>)
 8009948:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe fc9d 	bl	800828e <HAL_DMA_Abort_IT>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00a      	beq.n	8009970 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800995e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009966:	e003      	b.n	8009970 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7fc ff27 	bl	80067bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800996e:	e000      	b.n	8009972 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009970:	bf00      	nop
    return;
 8009972:	bf00      	nop
  }
}
 8009974:	3720      	adds	r7, #32
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	08009981 	.word	0x08009981

08009980 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7fc ff0d 	bl	80067bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099a2:	bf00      	nop
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b082      	sub	sp, #8
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d923      	bls.n	8009a06 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c8:	b292      	uxth	r2, r2
 80099ca:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d0:	1c9a      	adds	r2, r3, #2
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099dc:	b29b      	uxth	r3, r3
 80099de:	3b02      	subs	r3, #2
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d11f      	bne.n	8009a34 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a02:	605a      	str	r2, [r3, #4]
 8009a04:	e016      	b.n	8009a34 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f103 020c 	add.w	r2, r3, #12
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	7812      	ldrb	r2, [r2, #0]
 8009a14:	b2d2      	uxtb	r2, r2
 8009a16:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10f      	bne.n	8009a60 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009a4e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d102      	bne.n	8009a60 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fb00 	bl	800a060 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d912      	bls.n	8009aa0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	881a      	ldrh	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8a:	1c9a      	adds	r2, r3, #2
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	3b02      	subs	r3, #2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a9e:	e012      	b.n	8009ac6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	330c      	adds	r3, #12
 8009aaa:	7812      	ldrb	r2, [r2, #0]
 8009aac:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab2:	1c5a      	adds	r2, r3, #1
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d110      	bne.n	8009af2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ade:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d102      	bne.n	8009af2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fab7 	bl	800a060 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b082      	sub	sp, #8
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68da      	ldr	r2, [r3, #12]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	b292      	uxth	r2, r2
 8009b0e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b14:	1c9a      	adds	r2, r3, #2
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	3b01      	subs	r3, #1
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10f      	bne.n	8009b58 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b46:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d102      	bne.n	8009b58 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fa84 	bl	800a060 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6c:	881a      	ldrh	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	1c9a      	adds	r2, r3, #2
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3b01      	subs	r3, #1
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d110      	bne.n	8009bb8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ba4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d102      	bne.n	8009bb8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa54 	bl	800a060 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009bb8:	bf00      	nop
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f103 020c 	add.w	r2, r3, #12
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd4:	7812      	ldrb	r2, [r2, #0]
 8009bd6:	b2d2      	uxtb	r2, r2
 8009bd8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	3b01      	subs	r3, #1
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d102      	bne.n	8009c08 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa6e 	bl	800a0e4 <SPI_CloseRx_ISR>
  }
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c22:	b292      	uxth	r2, r2
 8009c24:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2a:	1c9a      	adds	r2, r3, #2
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fa48 	bl	800a0e4 <SPI_CloseRx_ISR>
  }
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	330c      	adds	r3, #12
 8009c6e:	7812      	ldrb	r2, [r2, #0]
 8009c70:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	3b01      	subs	r3, #1
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d102      	bne.n	8009c9a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fa55 	bl	800a144 <SPI_CloseTx_ISR>
  }
}
 8009c9a:	bf00      	nop
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b082      	sub	sp, #8
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cae:	881a      	ldrh	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cba:	1c9a      	adds	r2, r3, #2
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d102      	bne.n	8009cde <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fa33 	bl	800a144 <SPI_CloseTx_ISR>
  }
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009cf8:	f7fd fad0 	bl	800729c <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d00:	1a9b      	subs	r3, r3, r2
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	4413      	add	r3, r2
 8009d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d08:	f7fd fac8 	bl	800729c <HAL_GetTick>
 8009d0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d0e:	4b39      	ldr	r3, [pc, #228]	; (8009df4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	015b      	lsls	r3, r3, #5
 8009d14:	0d1b      	lsrs	r3, r3, #20
 8009d16:	69fa      	ldr	r2, [r7, #28]
 8009d18:	fb02 f303 	mul.w	r3, r2, r3
 8009d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d1e:	e054      	b.n	8009dca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d26:	d050      	beq.n	8009dca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d28:	f7fd fab8 	bl	800729c <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	69fa      	ldr	r2, [r7, #28]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d902      	bls.n	8009d3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d13d      	bne.n	8009dba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d56:	d111      	bne.n	8009d7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d60:	d004      	beq.n	8009d6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d6a:	d107      	bne.n	8009d7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d84:	d10f      	bne.n	8009da6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e017      	b.n	8009dea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	bf0c      	ite	eq
 8009dda:	2301      	moveq	r3, #1
 8009ddc:	2300      	movne	r3, #0
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	461a      	mov	r2, r3
 8009de2:	79fb      	ldrb	r3, [r7, #7]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d19b      	bne.n	8009d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3720      	adds	r7, #32
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000004 	.word	0x20000004

08009df8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08a      	sub	sp, #40	; 0x28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
 8009e04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009e0a:	f7fd fa47 	bl	800729c <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e12:	1a9b      	subs	r3, r3, r2
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	4413      	add	r3, r2
 8009e18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009e1a:	f7fd fa3f 	bl	800729c <HAL_GetTick>
 8009e1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	330c      	adds	r3, #12
 8009e26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009e28:	4b3d      	ldr	r3, [pc, #244]	; (8009f20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4413      	add	r3, r2
 8009e32:	00da      	lsls	r2, r3, #3
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	0d1b      	lsrs	r3, r3, #20
 8009e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e3a:	fb02 f303 	mul.w	r3, r2, r3
 8009e3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e40:	e060      	b.n	8009f04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009e48:	d107      	bne.n	8009e5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d104      	bne.n	8009e5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e60:	d050      	beq.n	8009f04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e62:	f7fd fa1b 	bl	800729c <HAL_GetTick>
 8009e66:	4602      	mov	r2, r0
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d902      	bls.n	8009e78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d13d      	bne.n	8009ef4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e90:	d111      	bne.n	8009eb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e9a:	d004      	beq.n	8009ea6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ea4:	d107      	bne.n	8009eb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009eb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ebe:	d10f      	bne.n	8009ee0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ede:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e010      	b.n	8009f16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689a      	ldr	r2, [r3, #8]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d196      	bne.n	8009e42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3728      	adds	r7, #40	; 0x28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000004 	.word	0x20000004

08009f24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f38:	d111      	bne.n	8009f5e <SPI_EndRxTransaction+0x3a>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f42:	d004      	beq.n	8009f4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f4c:	d107      	bne.n	8009f5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f5c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2200      	movs	r2, #0
 8009f66:	2180      	movs	r1, #128	; 0x80
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f7ff febd 	bl	8009ce8 <SPI_WaitFlagStateUntilTimeout>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d007      	beq.n	8009f84 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f78:	f043 0220 	orr.w	r2, r3, #32
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e023      	b.n	8009fcc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f8c:	d11d      	bne.n	8009fca <SPI_EndRxTransaction+0xa6>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f96:	d004      	beq.n	8009fa2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa0:	d113      	bne.n	8009fca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f7ff ff22 	bl	8009df8 <SPI_WaitFifoStateUntilTimeout>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d007      	beq.n	8009fca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fbe:	f043 0220 	orr.w	r2, r3, #32
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e000      	b.n	8009fcc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af02      	add	r7, sp, #8
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f7ff ff03 	bl	8009df8 <SPI_WaitFifoStateUntilTimeout>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d007      	beq.n	800a008 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ffc:	f043 0220 	orr.w	r2, r3, #32
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a004:	2303      	movs	r3, #3
 800a006:	e027      	b.n	800a058 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2200      	movs	r2, #0
 800a010:	2180      	movs	r1, #128	; 0x80
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f7ff fe68 	bl	8009ce8 <SPI_WaitFlagStateUntilTimeout>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d007      	beq.n	800a02e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a022:	f043 0220 	orr.w	r2, r3, #32
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e014      	b.n	800a058 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	9300      	str	r3, [sp, #0]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2200      	movs	r2, #0
 800a036:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f7ff fedc 	bl	8009df8 <SPI_WaitFifoStateUntilTimeout>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d007      	beq.n	800a056 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a04a:	f043 0220 	orr.w	r2, r3, #32
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e000      	b.n	800a058 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a068:	f7fd f918 	bl	800729c <HAL_GetTick>
 800a06c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f022 0220 	bic.w	r2, r2, #32
 800a07c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	2164      	movs	r1, #100	; 0x64
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7ff ffa6 	bl	8009fd4 <SPI_EndRxTxTransaction>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d005      	beq.n	800a09a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a092:	f043 0220 	orr.w	r2, r3, #32
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d115      	bne.n	800a0ce <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b04      	cmp	r3, #4
 800a0ac:	d107      	bne.n	800a0be <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7f8 fe54 	bl	8002d64 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a0bc:	e00e      	b.n	800a0dc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7fc fb68 	bl	800679c <HAL_SPI_TxRxCpltCallback>
}
 800a0cc:	e006      	b.n	800a0dc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7fc fb70 	bl	80067bc <HAL_SPI_ErrorCallback>
}
 800a0dc:	bf00      	nop
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a0fa:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a0fc:	f7fd f8ce 	bl	800729c <HAL_GetTick>
 800a100:	4603      	mov	r3, r0
 800a102:	461a      	mov	r2, r3
 800a104:	2164      	movs	r1, #100	; 0x64
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff ff0c 	bl	8009f24 <SPI_EndRxTransaction>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d005      	beq.n	800a11e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a116:	f043 0220 	orr.w	r2, r3, #32
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d103      	bne.n	800a136 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7f8 fe18 	bl	8002d64 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800a134:	e002      	b.n	800a13c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f7fc fb40 	bl	80067bc <HAL_SPI_ErrorCallback>
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a14c:	f7fd f8a6 	bl	800729c <HAL_GetTick>
 800a150:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a160:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	2164      	movs	r1, #100	; 0x64
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff ff34 	bl	8009fd4 <SPI_EndRxTxTransaction>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d005      	beq.n	800a17e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a176:	f043 0220 	orr.w	r2, r3, #32
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10a      	bne.n	800a19c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a186:	2300      	movs	r3, #0
 800a188:	60bb      	str	r3, [r7, #8]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	60bb      	str	r3, [r7, #8]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	60bb      	str	r3, [r7, #8]
 800a19a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7fc fb05 	bl	80067bc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a1b2:	e002      	b.n	800a1ba <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7f8 fdc5 	bl	8002d44 <HAL_SPI_TxCpltCallback>
}
 800a1ba:	bf00      	nop
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e049      	b.n	800a268 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d106      	bne.n	800a1ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7f8 ffd3 	bl	8003194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2202      	movs	r2, #2
 800a1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	4619      	mov	r1, r3
 800a200:	4610      	mov	r0, r2
 800a202:	f000 fab7 	bl	800a774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b01      	cmp	r3, #1
 800a282:	d001      	beq.n	800a288 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e047      	b.n	800a318 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a23      	ldr	r2, [pc, #140]	; (800a324 <HAL_TIM_Base_Start+0xb4>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d01d      	beq.n	800a2d6 <HAL_TIM_Base_Start+0x66>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a2:	d018      	beq.n	800a2d6 <HAL_TIM_Base_Start+0x66>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a1f      	ldr	r2, [pc, #124]	; (800a328 <HAL_TIM_Base_Start+0xb8>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d013      	beq.n	800a2d6 <HAL_TIM_Base_Start+0x66>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a1e      	ldr	r2, [pc, #120]	; (800a32c <HAL_TIM_Base_Start+0xbc>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d00e      	beq.n	800a2d6 <HAL_TIM_Base_Start+0x66>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a1c      	ldr	r2, [pc, #112]	; (800a330 <HAL_TIM_Base_Start+0xc0>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d009      	beq.n	800a2d6 <HAL_TIM_Base_Start+0x66>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a1b      	ldr	r2, [pc, #108]	; (800a334 <HAL_TIM_Base_Start+0xc4>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d004      	beq.n	800a2d6 <HAL_TIM_Base_Start+0x66>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a19      	ldr	r2, [pc, #100]	; (800a338 <HAL_TIM_Base_Start+0xc8>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d115      	bne.n	800a302 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689a      	ldr	r2, [r3, #8]
 800a2dc:	4b17      	ldr	r3, [pc, #92]	; (800a33c <HAL_TIM_Base_Start+0xcc>)
 800a2de:	4013      	ands	r3, r2
 800a2e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b06      	cmp	r3, #6
 800a2e6:	d015      	beq.n	800a314 <HAL_TIM_Base_Start+0xa4>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ee:	d011      	beq.n	800a314 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f042 0201 	orr.w	r2, r2, #1
 800a2fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a300:	e008      	b.n	800a314 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f042 0201 	orr.w	r2, r2, #1
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	e000      	b.n	800a316 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a314:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	40012c00 	.word	0x40012c00
 800a328:	40000400 	.word	0x40000400
 800a32c:	40000800 	.word	0x40000800
 800a330:	40000c00 	.word	0x40000c00
 800a334:	40013400 	.word	0x40013400
 800a338:	40014000 	.word	0x40014000
 800a33c:	00010007 	.word	0x00010007

0800a340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	f003 0302 	and.w	r3, r3, #2
 800a352:	2b02      	cmp	r3, #2
 800a354:	d122      	bne.n	800a39c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b02      	cmp	r3, #2
 800a362:	d11b      	bne.n	800a39c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f06f 0202 	mvn.w	r2, #2
 800a36c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f9d8 	bl	800a738 <HAL_TIM_IC_CaptureCallback>
 800a388:	e005      	b.n	800a396 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f9ca 	bl	800a724 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f9db 	bl	800a74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	f003 0304 	and.w	r3, r3, #4
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d122      	bne.n	800a3f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	f003 0304 	and.w	r3, r3, #4
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d11b      	bne.n	800a3f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f06f 0204 	mvn.w	r2, #4
 800a3c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f9ae 	bl	800a738 <HAL_TIM_IC_CaptureCallback>
 800a3dc:	e005      	b.n	800a3ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f9a0 	bl	800a724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f9b1 	bl	800a74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	f003 0308 	and.w	r3, r3, #8
 800a3fa:	2b08      	cmp	r3, #8
 800a3fc:	d122      	bne.n	800a444 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	f003 0308 	and.w	r3, r3, #8
 800a408:	2b08      	cmp	r3, #8
 800a40a:	d11b      	bne.n	800a444 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f06f 0208 	mvn.w	r2, #8
 800a414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2204      	movs	r2, #4
 800a41a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	f003 0303 	and.w	r3, r3, #3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f984 	bl	800a738 <HAL_TIM_IC_CaptureCallback>
 800a430:	e005      	b.n	800a43e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f976 	bl	800a724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f987 	bl	800a74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	f003 0310 	and.w	r3, r3, #16
 800a44e:	2b10      	cmp	r3, #16
 800a450:	d122      	bne.n	800a498 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f003 0310 	and.w	r3, r3, #16
 800a45c:	2b10      	cmp	r3, #16
 800a45e:	d11b      	bne.n	800a498 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f06f 0210 	mvn.w	r2, #16
 800a468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2208      	movs	r2, #8
 800a46e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f95a 	bl	800a738 <HAL_TIM_IC_CaptureCallback>
 800a484:	e005      	b.n	800a492 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f94c 	bl	800a724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f95d 	bl	800a74c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d10e      	bne.n	800a4c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d107      	bne.n	800a4c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f06f 0201 	mvn.w	r2, #1
 800a4bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f926 	bl	800a710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ce:	2b80      	cmp	r3, #128	; 0x80
 800a4d0:	d10e      	bne.n	800a4f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4dc:	2b80      	cmp	r3, #128	; 0x80
 800a4de:	d107      	bne.n	800a4f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fb08 	bl	800ab00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4fe:	d10e      	bne.n	800a51e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50a:	2b80      	cmp	r3, #128	; 0x80
 800a50c:	d107      	bne.n	800a51e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fafb 	bl	800ab14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a528:	2b40      	cmp	r3, #64	; 0x40
 800a52a:	d10e      	bne.n	800a54a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a536:	2b40      	cmp	r3, #64	; 0x40
 800a538:	d107      	bne.n	800a54a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 f90b 	bl	800a760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b20      	cmp	r3, #32
 800a556:	d10e      	bne.n	800a576 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	f003 0320 	and.w	r3, r3, #32
 800a562:	2b20      	cmp	r3, #32
 800a564:	d107      	bne.n	800a576 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f06f 0220 	mvn.w	r2, #32
 800a56e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fabb 	bl	800aaec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a576:	bf00      	nop
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a592:	2b01      	cmp	r3, #1
 800a594:	d101      	bne.n	800a59a <HAL_TIM_ConfigClockSource+0x1c>
 800a596:	2302      	movs	r3, #2
 800a598:	e0b6      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x18a>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2202      	movs	r2, #2
 800a5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d6:	d03e      	beq.n	800a656 <HAL_TIM_ConfigClockSource+0xd8>
 800a5d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5dc:	f200 8087 	bhi.w	800a6ee <HAL_TIM_ConfigClockSource+0x170>
 800a5e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e4:	f000 8086 	beq.w	800a6f4 <HAL_TIM_ConfigClockSource+0x176>
 800a5e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ec:	d87f      	bhi.n	800a6ee <HAL_TIM_ConfigClockSource+0x170>
 800a5ee:	2b70      	cmp	r3, #112	; 0x70
 800a5f0:	d01a      	beq.n	800a628 <HAL_TIM_ConfigClockSource+0xaa>
 800a5f2:	2b70      	cmp	r3, #112	; 0x70
 800a5f4:	d87b      	bhi.n	800a6ee <HAL_TIM_ConfigClockSource+0x170>
 800a5f6:	2b60      	cmp	r3, #96	; 0x60
 800a5f8:	d050      	beq.n	800a69c <HAL_TIM_ConfigClockSource+0x11e>
 800a5fa:	2b60      	cmp	r3, #96	; 0x60
 800a5fc:	d877      	bhi.n	800a6ee <HAL_TIM_ConfigClockSource+0x170>
 800a5fe:	2b50      	cmp	r3, #80	; 0x50
 800a600:	d03c      	beq.n	800a67c <HAL_TIM_ConfigClockSource+0xfe>
 800a602:	2b50      	cmp	r3, #80	; 0x50
 800a604:	d873      	bhi.n	800a6ee <HAL_TIM_ConfigClockSource+0x170>
 800a606:	2b40      	cmp	r3, #64	; 0x40
 800a608:	d058      	beq.n	800a6bc <HAL_TIM_ConfigClockSource+0x13e>
 800a60a:	2b40      	cmp	r3, #64	; 0x40
 800a60c:	d86f      	bhi.n	800a6ee <HAL_TIM_ConfigClockSource+0x170>
 800a60e:	2b30      	cmp	r3, #48	; 0x30
 800a610:	d064      	beq.n	800a6dc <HAL_TIM_ConfigClockSource+0x15e>
 800a612:	2b30      	cmp	r3, #48	; 0x30
 800a614:	d86b      	bhi.n	800a6ee <HAL_TIM_ConfigClockSource+0x170>
 800a616:	2b20      	cmp	r3, #32
 800a618:	d060      	beq.n	800a6dc <HAL_TIM_ConfigClockSource+0x15e>
 800a61a:	2b20      	cmp	r3, #32
 800a61c:	d867      	bhi.n	800a6ee <HAL_TIM_ConfigClockSource+0x170>
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d05c      	beq.n	800a6dc <HAL_TIM_ConfigClockSource+0x15e>
 800a622:	2b10      	cmp	r3, #16
 800a624:	d05a      	beq.n	800a6dc <HAL_TIM_ConfigClockSource+0x15e>
 800a626:	e062      	b.n	800a6ee <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	6899      	ldr	r1, [r3, #8]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	f000 f9b0 	bl	800a99c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a64a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	609a      	str	r2, [r3, #8]
      break;
 800a654:	e04f      	b.n	800a6f6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6818      	ldr	r0, [r3, #0]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	6899      	ldr	r1, [r3, #8]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f000 f999 	bl	800a99c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689a      	ldr	r2, [r3, #8]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a678:	609a      	str	r2, [r3, #8]
      break;
 800a67a:	e03c      	b.n	800a6f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	6859      	ldr	r1, [r3, #4]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	461a      	mov	r2, r3
 800a68a:	f000 f90d 	bl	800a8a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2150      	movs	r1, #80	; 0x50
 800a694:	4618      	mov	r0, r3
 800a696:	f000 f966 	bl	800a966 <TIM_ITRx_SetConfig>
      break;
 800a69a:	e02c      	b.n	800a6f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6818      	ldr	r0, [r3, #0]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	6859      	ldr	r1, [r3, #4]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f000 f92c 	bl	800a906 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2160      	movs	r1, #96	; 0x60
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 f956 	bl	800a966 <TIM_ITRx_SetConfig>
      break;
 800a6ba:	e01c      	b.n	800a6f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6818      	ldr	r0, [r3, #0]
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	6859      	ldr	r1, [r3, #4]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	f000 f8ed 	bl	800a8a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2140      	movs	r1, #64	; 0x40
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 f946 	bl	800a966 <TIM_ITRx_SetConfig>
      break;
 800a6da:	e00c      	b.n	800a6f6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	f000 f93d 	bl	800a966 <TIM_ITRx_SetConfig>
      break;
 800a6ec:	e003      	b.n	800a6f6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f2:	e000      	b.n	800a6f6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a6f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a706:	7bfb      	ldrb	r3, [r7, #15]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a40      	ldr	r2, [pc, #256]	; (800a888 <TIM_Base_SetConfig+0x114>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d013      	beq.n	800a7b4 <TIM_Base_SetConfig+0x40>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a792:	d00f      	beq.n	800a7b4 <TIM_Base_SetConfig+0x40>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a3d      	ldr	r2, [pc, #244]	; (800a88c <TIM_Base_SetConfig+0x118>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d00b      	beq.n	800a7b4 <TIM_Base_SetConfig+0x40>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a3c      	ldr	r2, [pc, #240]	; (800a890 <TIM_Base_SetConfig+0x11c>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d007      	beq.n	800a7b4 <TIM_Base_SetConfig+0x40>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a3b      	ldr	r2, [pc, #236]	; (800a894 <TIM_Base_SetConfig+0x120>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d003      	beq.n	800a7b4 <TIM_Base_SetConfig+0x40>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a3a      	ldr	r2, [pc, #232]	; (800a898 <TIM_Base_SetConfig+0x124>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d108      	bne.n	800a7c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a2f      	ldr	r2, [pc, #188]	; (800a888 <TIM_Base_SetConfig+0x114>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d01f      	beq.n	800a80e <TIM_Base_SetConfig+0x9a>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d4:	d01b      	beq.n	800a80e <TIM_Base_SetConfig+0x9a>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a2c      	ldr	r2, [pc, #176]	; (800a88c <TIM_Base_SetConfig+0x118>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d017      	beq.n	800a80e <TIM_Base_SetConfig+0x9a>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a2b      	ldr	r2, [pc, #172]	; (800a890 <TIM_Base_SetConfig+0x11c>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d013      	beq.n	800a80e <TIM_Base_SetConfig+0x9a>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a2a      	ldr	r2, [pc, #168]	; (800a894 <TIM_Base_SetConfig+0x120>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d00f      	beq.n	800a80e <TIM_Base_SetConfig+0x9a>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a29      	ldr	r2, [pc, #164]	; (800a898 <TIM_Base_SetConfig+0x124>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d00b      	beq.n	800a80e <TIM_Base_SetConfig+0x9a>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a28      	ldr	r2, [pc, #160]	; (800a89c <TIM_Base_SetConfig+0x128>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d007      	beq.n	800a80e <TIM_Base_SetConfig+0x9a>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a27      	ldr	r2, [pc, #156]	; (800a8a0 <TIM_Base_SetConfig+0x12c>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d003      	beq.n	800a80e <TIM_Base_SetConfig+0x9a>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a26      	ldr	r2, [pc, #152]	; (800a8a4 <TIM_Base_SetConfig+0x130>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d108      	bne.n	800a820 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	689a      	ldr	r2, [r3, #8]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a10      	ldr	r2, [pc, #64]	; (800a888 <TIM_Base_SetConfig+0x114>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d00f      	beq.n	800a86c <TIM_Base_SetConfig+0xf8>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a12      	ldr	r2, [pc, #72]	; (800a898 <TIM_Base_SetConfig+0x124>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d00b      	beq.n	800a86c <TIM_Base_SetConfig+0xf8>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a11      	ldr	r2, [pc, #68]	; (800a89c <TIM_Base_SetConfig+0x128>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d007      	beq.n	800a86c <TIM_Base_SetConfig+0xf8>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a10      	ldr	r2, [pc, #64]	; (800a8a0 <TIM_Base_SetConfig+0x12c>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d003      	beq.n	800a86c <TIM_Base_SetConfig+0xf8>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a0f      	ldr	r2, [pc, #60]	; (800a8a4 <TIM_Base_SetConfig+0x130>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d103      	bne.n	800a874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	691a      	ldr	r2, [r3, #16]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	615a      	str	r2, [r3, #20]
}
 800a87a:	bf00      	nop
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	40012c00 	.word	0x40012c00
 800a88c:	40000400 	.word	0x40000400
 800a890:	40000800 	.word	0x40000800
 800a894:	40000c00 	.word	0x40000c00
 800a898:	40013400 	.word	0x40013400
 800a89c:	40014000 	.word	0x40014000
 800a8a0:	40014400 	.word	0x40014400
 800a8a4:	40014800 	.word	0x40014800

0800a8a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	f023 0201 	bic.w	r2, r3, #1
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	011b      	lsls	r3, r3, #4
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f023 030a 	bic.w	r3, r3, #10
 800a8e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	621a      	str	r2, [r3, #32]
}
 800a8fa:	bf00      	nop
 800a8fc:	371c      	adds	r7, #28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a906:	b480      	push	{r7}
 800a908:	b087      	sub	sp, #28
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	f023 0210 	bic.w	r2, r3, #16
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	031b      	lsls	r3, r3, #12
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	4313      	orrs	r3, r2
 800a93a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a942:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	011b      	lsls	r3, r3, #4
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	621a      	str	r2, [r3, #32]
}
 800a95a:	bf00      	nop
 800a95c:	371c      	adds	r7, #28
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a966:	b480      	push	{r7}
 800a968:	b085      	sub	sp, #20
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
 800a96e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a97c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4313      	orrs	r3, r2
 800a984:	f043 0307 	orr.w	r3, r3, #7
 800a988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	609a      	str	r2, [r3, #8]
}
 800a990:	bf00      	nop
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b087      	sub	sp, #28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	021a      	lsls	r2, r3, #8
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	609a      	str	r2, [r3, #8]
}
 800a9d0:	bf00      	nop
 800a9d2:	371c      	adds	r7, #28
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d101      	bne.n	800a9f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	e068      	b.n	800aac6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2202      	movs	r2, #2
 800aa00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a2e      	ldr	r2, [pc, #184]	; (800aad4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d004      	beq.n	800aa28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a2d      	ldr	r2, [pc, #180]	; (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d108      	bne.n	800aa3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a1e      	ldr	r2, [pc, #120]	; (800aad4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d01d      	beq.n	800aa9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa66:	d018      	beq.n	800aa9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a1b      	ldr	r2, [pc, #108]	; (800aadc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d013      	beq.n	800aa9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a1a      	ldr	r2, [pc, #104]	; (800aae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d00e      	beq.n	800aa9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a18      	ldr	r2, [pc, #96]	; (800aae4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d009      	beq.n	800aa9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a13      	ldr	r2, [pc, #76]	; (800aad8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d004      	beq.n	800aa9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a14      	ldr	r2, [pc, #80]	; (800aae8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d10c      	bne.n	800aab4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	40012c00 	.word	0x40012c00
 800aad8:	40013400 	.word	0x40013400
 800aadc:	40000400 	.word	0x40000400
 800aae0:	40000800 	.word	0x40000800
 800aae4:	40000c00 	.word	0x40000c00
 800aae8:	40014000 	.word	0x40014000

0800aaec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab1c:	bf00      	nop
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <LL_ADC_REG_SetSequencerLength>:
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab36:	f023 020f 	bic.w	r2, r3, #15
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	431a      	orrs	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ab42:	bf00      	nop
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <LL_ADC_IsEnabled>:
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d101      	bne.n	800ab66 <LL_ADC_IsEnabled+0x18>
 800ab62:	2301      	movs	r3, #1
 800ab64:	e000      	b.n	800ab68 <LL_ADC_IsEnabled+0x1a>
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800ab74:	b590      	push	{r4, r7, lr}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800ab82:	481c      	ldr	r0, [pc, #112]	; (800abf4 <LL_ADC_CommonInit+0x80>)
 800ab84:	f7ff ffe3 	bl	800ab4e <LL_ADC_IsEnabled>
 800ab88:	4604      	mov	r4, r0
 800ab8a:	481b      	ldr	r0, [pc, #108]	; (800abf8 <LL_ADC_CommonInit+0x84>)
 800ab8c:	f7ff ffdf 	bl	800ab4e <LL_ADC_IsEnabled>
 800ab90:	4603      	mov	r3, r0
 800ab92:	431c      	orrs	r4, r3
 800ab94:	4819      	ldr	r0, [pc, #100]	; (800abfc <LL_ADC_CommonInit+0x88>)
 800ab96:	f7ff ffda 	bl	800ab4e <LL_ADC_IsEnabled>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	4323      	orrs	r3, r4
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d120      	bne.n	800abe4 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d012      	beq.n	800abd0 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	689a      	ldr	r2, [r3, #8]
 800abae:	4b14      	ldr	r3, [pc, #80]	; (800ac00 <LL_ADC_CommonInit+0x8c>)
 800abb0:	4013      	ands	r3, r2
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	6811      	ldr	r1, [r2, #0]
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	6852      	ldr	r2, [r2, #4]
 800abba:	4311      	orrs	r1, r2
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	6892      	ldr	r2, [r2, #8]
 800abc0:	4311      	orrs	r1, r2
 800abc2:	683a      	ldr	r2, [r7, #0]
 800abc4:	68d2      	ldr	r2, [r2, #12]
 800abc6:	430a      	orrs	r2, r1
 800abc8:	431a      	orrs	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	609a      	str	r2, [r3, #8]
 800abce:	e00b      	b.n	800abe8 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689a      	ldr	r2, [r3, #8]
 800abd4:	4b0a      	ldr	r3, [pc, #40]	; (800ac00 <LL_ADC_CommonInit+0x8c>)
 800abd6:	4013      	ands	r3, r2
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	6812      	ldr	r2, [r2, #0]
 800abdc:	431a      	orrs	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	609a      	str	r2, [r3, #8]
 800abe2:	e001      	b.n	800abe8 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd90      	pop	{r4, r7, pc}
 800abf2:	bf00      	nop
 800abf4:	50040000 	.word	0x50040000
 800abf8:	50040100 	.word	0x50040100
 800abfc:	50040200 	.word	0x50040200
 800ac00:	ffc030e0 	.word	0xffc030e0

0800ac04 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f7ff ff9b 	bl	800ab4e <LL_ADC_IsEnabled>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d111      	bne.n	800ac42 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac26:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800ac2a:	683a      	ldr	r2, [r7, #0]
 800ac2c:	6811      	ldr	r1, [r2, #0]
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	6852      	ldr	r2, [r2, #4]
 800ac32:	4311      	orrs	r1, r2
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	6892      	ldr	r2, [r2, #8]
 800ac38:	430a      	orrs	r2, r1
 800ac3a:	431a      	orrs	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	60da      	str	r2, [r3, #12]
 800ac40:	e001      	b.n	800ac46 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7ff ff75 	bl	800ab4e <LL_ADC_IsEnabled>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d132      	bne.n	800acd0 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d015      	beq.n	800ac9e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	68da      	ldr	r2, [r3, #12]
 800ac76:	4b1a      	ldr	r3, [pc, #104]	; (800ace0 <LL_ADC_REG_Init+0x90>)
 800ac78:	4013      	ands	r3, r2
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	6811      	ldr	r1, [r2, #0]
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	6892      	ldr	r2, [r2, #8]
 800ac82:	4311      	orrs	r1, r2
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	68d2      	ldr	r2, [r2, #12]
 800ac88:	4311      	orrs	r1, r2
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	6912      	ldr	r2, [r2, #16]
 800ac8e:	4311      	orrs	r1, r2
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	6952      	ldr	r2, [r2, #20]
 800ac94:	430a      	orrs	r2, r1
 800ac96:	431a      	orrs	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	60da      	str	r2, [r3, #12]
 800ac9c:	e011      	b.n	800acc2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	4b0f      	ldr	r3, [pc, #60]	; (800ace0 <LL_ADC_REG_Init+0x90>)
 800aca4:	4013      	ands	r3, r2
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	6811      	ldr	r1, [r2, #0]
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	68d2      	ldr	r2, [r2, #12]
 800acae:	4311      	orrs	r1, r2
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	6912      	ldr	r2, [r2, #16]
 800acb4:	4311      	orrs	r1, r2
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	6952      	ldr	r2, [r2, #20]
 800acba:	430a      	orrs	r2, r1
 800acbc:	431a      	orrs	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff ff2d 	bl	800ab28 <LL_ADC_REG_SetSequencerLength>
 800acce:	e001      	b.n	800acd4 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	fff0c03c 	.word	0xfff0c03c

0800ace4 <LL_GPIO_SetPinMode>:
{
 800ace4:	b480      	push	{r7}
 800ace6:	b08b      	sub	sp, #44	; 0x2c
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	fa93 f3a3 	rbit	r3, r3
 800acfe:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800ad0a:	2320      	movs	r3, #32
 800ad0c:	e003      	b.n	800ad16 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	fab3 f383 	clz	r3, r3
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	2103      	movs	r1, #3
 800ad1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad1e:	43db      	mvns	r3, r3
 800ad20:	401a      	ands	r2, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	fa93 f3a3 	rbit	r3, r3
 800ad2c:	61fb      	str	r3, [r7, #28]
  return result;
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800ad38:	2320      	movs	r3, #32
 800ad3a:	e003      	b.n	800ad44 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	fab3 f383 	clz	r3, r3
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	005b      	lsls	r3, r3, #1
 800ad46:	6879      	ldr	r1, [r7, #4]
 800ad48:	fa01 f303 	lsl.w	r3, r1, r3
 800ad4c:	431a      	orrs	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	601a      	str	r2, [r3, #0]
}
 800ad52:	bf00      	nop
 800ad54:	372c      	adds	r7, #44	; 0x2c
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <LL_GPIO_SetPinOutputType>:
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b085      	sub	sp, #20
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	60b9      	str	r1, [r7, #8]
 800ad68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	43db      	mvns	r3, r3
 800ad72:	401a      	ands	r2, r3
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	fb01 f303 	mul.w	r3, r1, r3
 800ad7c:	431a      	orrs	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	605a      	str	r2, [r3, #4]
}
 800ad82:	bf00      	nop
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <LL_GPIO_SetPinSpeed>:
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b08b      	sub	sp, #44	; 0x2c
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	60f8      	str	r0, [r7, #12]
 800ad96:	60b9      	str	r1, [r7, #8]
 800ad98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	689a      	ldr	r2, [r3, #8]
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	fa93 f3a3 	rbit	r3, r3
 800ada8:	613b      	str	r3, [r7, #16]
  return result;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800adb4:	2320      	movs	r3, #32
 800adb6:	e003      	b.n	800adc0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	fab3 f383 	clz	r3, r3
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	005b      	lsls	r3, r3, #1
 800adc2:	2103      	movs	r1, #3
 800adc4:	fa01 f303 	lsl.w	r3, r1, r3
 800adc8:	43db      	mvns	r3, r3
 800adca:	401a      	ands	r2, r3
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	fa93 f3a3 	rbit	r3, r3
 800add6:	61fb      	str	r3, [r7, #28]
  return result;
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800ade2:	2320      	movs	r3, #32
 800ade4:	e003      	b.n	800adee <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade8:	fab3 f383 	clz	r3, r3
 800adec:	b2db      	uxtb	r3, r3
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	6879      	ldr	r1, [r7, #4]
 800adf2:	fa01 f303 	lsl.w	r3, r1, r3
 800adf6:	431a      	orrs	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	609a      	str	r2, [r3, #8]
}
 800adfc:	bf00      	nop
 800adfe:	372c      	adds	r7, #44	; 0x2c
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <LL_GPIO_SetPinPull>:
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b08b      	sub	sp, #44	; 0x2c
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	68da      	ldr	r2, [r3, #12]
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	fa93 f3a3 	rbit	r3, r3
 800ae22:	613b      	str	r3, [r7, #16]
  return result;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae28:	69bb      	ldr	r3, [r7, #24]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800ae2e:	2320      	movs	r3, #32
 800ae30:	e003      	b.n	800ae3a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	fab3 f383 	clz	r3, r3
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	2103      	movs	r1, #3
 800ae3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae42:	43db      	mvns	r3, r3
 800ae44:	401a      	ands	r2, r3
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	fa93 f3a3 	rbit	r3, r3
 800ae50:	61fb      	str	r3, [r7, #28]
  return result;
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800ae5c:	2320      	movs	r3, #32
 800ae5e:	e003      	b.n	800ae68 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	fab3 f383 	clz	r3, r3
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae70:	431a      	orrs	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	60da      	str	r2, [r3, #12]
}
 800ae76:	bf00      	nop
 800ae78:	372c      	adds	r7, #44	; 0x2c
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <LL_GPIO_SetAFPin_0_7>:
{
 800ae82:	b480      	push	{r7}
 800ae84:	b08b      	sub	sp, #44	; 0x2c
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	60f8      	str	r0, [r7, #12]
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a1a      	ldr	r2, [r3, #32]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	fa93 f3a3 	rbit	r3, r3
 800ae9c:	613b      	str	r3, [r7, #16]
  return result;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800aea8:	2320      	movs	r3, #32
 800aeaa:	e003      	b.n	800aeb4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	fab3 f383 	clz	r3, r3
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	210f      	movs	r1, #15
 800aeb8:	fa01 f303 	lsl.w	r3, r1, r3
 800aebc:	43db      	mvns	r3, r3
 800aebe:	401a      	ands	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	fa93 f3a3 	rbit	r3, r3
 800aeca:	61fb      	str	r3, [r7, #28]
  return result;
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800aed6:	2320      	movs	r3, #32
 800aed8:	e003      	b.n	800aee2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	fab3 f383 	clz	r3, r3
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	fa01 f303 	lsl.w	r3, r1, r3
 800aeea:	431a      	orrs	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	621a      	str	r2, [r3, #32]
}
 800aef0:	bf00      	nop
 800aef2:	372c      	adds	r7, #44	; 0x2c
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <LL_GPIO_SetAFPin_8_15>:
{
 800aefc:	b480      	push	{r7}
 800aefe:	b08b      	sub	sp, #44	; 0x2c
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	0a1b      	lsrs	r3, r3, #8
 800af10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	fa93 f3a3 	rbit	r3, r3
 800af18:	613b      	str	r3, [r7, #16]
  return result;
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d101      	bne.n	800af28 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800af24:	2320      	movs	r3, #32
 800af26:	e003      	b.n	800af30 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	fab3 f383 	clz	r3, r3
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	210f      	movs	r1, #15
 800af34:	fa01 f303 	lsl.w	r3, r1, r3
 800af38:	43db      	mvns	r3, r3
 800af3a:	401a      	ands	r2, r3
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	0a1b      	lsrs	r3, r3, #8
 800af40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	fa93 f3a3 	rbit	r3, r3
 800af48:	61fb      	str	r3, [r7, #28]
  return result;
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800af54:	2320      	movs	r3, #32
 800af56:	e003      	b.n	800af60 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5a:	fab3 f383 	clz	r3, r3
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	6879      	ldr	r1, [r7, #4]
 800af64:	fa01 f303 	lsl.w	r3, r1, r3
 800af68:	431a      	orrs	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800af6e:	bf00      	nop
 800af70:	372c      	adds	r7, #44	; 0x2c
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b088      	sub	sp, #32
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	fa93 f3a3 	rbit	r3, r3
 800af90:	60fb      	str	r3, [r7, #12]
  return result;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d101      	bne.n	800afa0 <LL_GPIO_Init+0x26>
    return 32U;
 800af9c:	2320      	movs	r3, #32
 800af9e:	e003      	b.n	800afa8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	fab3 f383 	clz	r3, r3
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800afaa:	e048      	b.n	800b03e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	2101      	movs	r1, #1
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	fa01 f303 	lsl.w	r3, r1, r3
 800afb8:	4013      	ands	r3, r2
 800afba:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d03a      	beq.n	800b038 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d003      	beq.n	800afd2 <LL_GPIO_Init+0x58>
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d10e      	bne.n	800aff0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	461a      	mov	r2, r3
 800afd8:	69b9      	ldr	r1, [r7, #24]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7ff fed7 	bl	800ad8e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	6819      	ldr	r1, [r3, #0]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	461a      	mov	r2, r3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7ff feb7 	bl	800ad5e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	461a      	mov	r2, r3
 800aff6:	69b9      	ldr	r1, [r7, #24]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff ff05 	bl	800ae08 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	2b02      	cmp	r3, #2
 800b004:	d111      	bne.n	800b02a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	2bff      	cmp	r3, #255	; 0xff
 800b00a:	d807      	bhi.n	800b01c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	695b      	ldr	r3, [r3, #20]
 800b010:	461a      	mov	r2, r3
 800b012:	69b9      	ldr	r1, [r7, #24]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7ff ff34 	bl	800ae82 <LL_GPIO_SetAFPin_0_7>
 800b01a:	e006      	b.n	800b02a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	461a      	mov	r2, r3
 800b022:	69b9      	ldr	r1, [r7, #24]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff ff69 	bl	800aefc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	461a      	mov	r2, r3
 800b030:	69b9      	ldr	r1, [r7, #24]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fe56 	bl	800ace4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	3301      	adds	r3, #1
 800b03c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	fa22 f303 	lsr.w	r3, r2, r3
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1af      	bne.n	800afac <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3720      	adds	r7, #32
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800b060:	4b10      	ldr	r3, [pc, #64]	; (800b0a4 <LL_mDelay+0x4c>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800b06a:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b072:	d00c      	beq.n	800b08e <LL_mDelay+0x36>
  {
    tmpDelay++;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3301      	adds	r3, #1
 800b078:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800b07a:	e008      	b.n	800b08e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800b07c:	4b09      	ldr	r3, [pc, #36]	; (800b0a4 <LL_mDelay+0x4c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <LL_mDelay+0x36>
    {
      tmpDelay--;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1f3      	bne.n	800b07c <LL_mDelay+0x24>
    }
  }
}
 800b094:	bf00      	nop
 800b096:	bf00      	nop
 800b098:	3714      	adds	r7, #20
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	e000e010 	.word	0xe000e010

0800b0a8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800b0b0:	4a04      	ldr	r2, [pc, #16]	; (800b0c4 <LL_SetSystemCoreClock+0x1c>)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6013      	str	r3, [r2, #0]
}
 800b0b6:	bf00      	nop
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	20000004 	.word	0x20000004

0800b0c8 <__errno>:
 800b0c8:	4b01      	ldr	r3, [pc, #4]	; (800b0d0 <__errno+0x8>)
 800b0ca:	6818      	ldr	r0, [r3, #0]
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	20000020 	.word	0x20000020

0800b0d4 <__libc_init_array>:
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	4d0d      	ldr	r5, [pc, #52]	; (800b10c <__libc_init_array+0x38>)
 800b0d8:	4c0d      	ldr	r4, [pc, #52]	; (800b110 <__libc_init_array+0x3c>)
 800b0da:	1b64      	subs	r4, r4, r5
 800b0dc:	10a4      	asrs	r4, r4, #2
 800b0de:	2600      	movs	r6, #0
 800b0e0:	42a6      	cmp	r6, r4
 800b0e2:	d109      	bne.n	800b0f8 <__libc_init_array+0x24>
 800b0e4:	4d0b      	ldr	r5, [pc, #44]	; (800b114 <__libc_init_array+0x40>)
 800b0e6:	4c0c      	ldr	r4, [pc, #48]	; (800b118 <__libc_init_array+0x44>)
 800b0e8:	f000 fb82 	bl	800b7f0 <_init>
 800b0ec:	1b64      	subs	r4, r4, r5
 800b0ee:	10a4      	asrs	r4, r4, #2
 800b0f0:	2600      	movs	r6, #0
 800b0f2:	42a6      	cmp	r6, r4
 800b0f4:	d105      	bne.n	800b102 <__libc_init_array+0x2e>
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
 800b0f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0fc:	4798      	blx	r3
 800b0fe:	3601      	adds	r6, #1
 800b100:	e7ee      	b.n	800b0e0 <__libc_init_array+0xc>
 800b102:	f855 3b04 	ldr.w	r3, [r5], #4
 800b106:	4798      	blx	r3
 800b108:	3601      	adds	r6, #1
 800b10a:	e7f2      	b.n	800b0f2 <__libc_init_array+0x1e>
 800b10c:	0800bd48 	.word	0x0800bd48
 800b110:	0800bd48 	.word	0x0800bd48
 800b114:	0800bd48 	.word	0x0800bd48
 800b118:	0800bd4c 	.word	0x0800bd4c

0800b11c <memcpy>:
 800b11c:	440a      	add	r2, r1
 800b11e:	4291      	cmp	r1, r2
 800b120:	f100 33ff 	add.w	r3, r0, #4294967295
 800b124:	d100      	bne.n	800b128 <memcpy+0xc>
 800b126:	4770      	bx	lr
 800b128:	b510      	push	{r4, lr}
 800b12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b12e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b132:	4291      	cmp	r1, r2
 800b134:	d1f9      	bne.n	800b12a <memcpy+0xe>
 800b136:	bd10      	pop	{r4, pc}

0800b138 <memset>:
 800b138:	4402      	add	r2, r0
 800b13a:	4603      	mov	r3, r0
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d100      	bne.n	800b142 <memset+0xa>
 800b140:	4770      	bx	lr
 800b142:	f803 1b01 	strb.w	r1, [r3], #1
 800b146:	e7f9      	b.n	800b13c <memset+0x4>

0800b148 <atan>:
 800b148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	ec55 4b10 	vmov	r4, r5, d0
 800b150:	4bc3      	ldr	r3, [pc, #780]	; (800b460 <atan+0x318>)
 800b152:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b156:	429e      	cmp	r6, r3
 800b158:	46ab      	mov	fp, r5
 800b15a:	dd18      	ble.n	800b18e <atan+0x46>
 800b15c:	4bc1      	ldr	r3, [pc, #772]	; (800b464 <atan+0x31c>)
 800b15e:	429e      	cmp	r6, r3
 800b160:	dc01      	bgt.n	800b166 <atan+0x1e>
 800b162:	d109      	bne.n	800b178 <atan+0x30>
 800b164:	b144      	cbz	r4, 800b178 <atan+0x30>
 800b166:	4622      	mov	r2, r4
 800b168:	462b      	mov	r3, r5
 800b16a:	4620      	mov	r0, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	f7f5 f831 	bl	80001d4 <__adddf3>
 800b172:	4604      	mov	r4, r0
 800b174:	460d      	mov	r5, r1
 800b176:	e006      	b.n	800b186 <atan+0x3e>
 800b178:	f1bb 0f00 	cmp.w	fp, #0
 800b17c:	f300 8131 	bgt.w	800b3e2 <atan+0x29a>
 800b180:	a59b      	add	r5, pc, #620	; (adr r5, 800b3f0 <atan+0x2a8>)
 800b182:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b186:	ec45 4b10 	vmov	d0, r4, r5
 800b18a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18e:	4bb6      	ldr	r3, [pc, #728]	; (800b468 <atan+0x320>)
 800b190:	429e      	cmp	r6, r3
 800b192:	dc14      	bgt.n	800b1be <atan+0x76>
 800b194:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b198:	429e      	cmp	r6, r3
 800b19a:	dc0d      	bgt.n	800b1b8 <atan+0x70>
 800b19c:	a396      	add	r3, pc, #600	; (adr r3, 800b3f8 <atan+0x2b0>)
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	ee10 0a10 	vmov	r0, s0
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f7f5 f814 	bl	80001d4 <__adddf3>
 800b1ac:	4baf      	ldr	r3, [pc, #700]	; (800b46c <atan+0x324>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f7f5 fc56 	bl	8000a60 <__aeabi_dcmpgt>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d1e6      	bne.n	800b186 <atan+0x3e>
 800b1b8:	f04f 3aff 	mov.w	sl, #4294967295
 800b1bc:	e02b      	b.n	800b216 <atan+0xce>
 800b1be:	f000 f963 	bl	800b488 <fabs>
 800b1c2:	4bab      	ldr	r3, [pc, #684]	; (800b470 <atan+0x328>)
 800b1c4:	429e      	cmp	r6, r3
 800b1c6:	ec55 4b10 	vmov	r4, r5, d0
 800b1ca:	f300 80bf 	bgt.w	800b34c <atan+0x204>
 800b1ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b1d2:	429e      	cmp	r6, r3
 800b1d4:	f300 80a0 	bgt.w	800b318 <atan+0x1d0>
 800b1d8:	ee10 2a10 	vmov	r2, s0
 800b1dc:	ee10 0a10 	vmov	r0, s0
 800b1e0:	462b      	mov	r3, r5
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	f7f4 fff6 	bl	80001d4 <__adddf3>
 800b1e8:	4ba0      	ldr	r3, [pc, #640]	; (800b46c <atan+0x324>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f7f4 fff0 	bl	80001d0 <__aeabi_dsub>
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	f7f4 ffe9 	bl	80001d4 <__adddf3>
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	4630      	mov	r0, r6
 800b208:	4639      	mov	r1, r7
 800b20a:	f7f5 fac3 	bl	8000794 <__aeabi_ddiv>
 800b20e:	f04f 0a00 	mov.w	sl, #0
 800b212:	4604      	mov	r4, r0
 800b214:	460d      	mov	r5, r1
 800b216:	4622      	mov	r2, r4
 800b218:	462b      	mov	r3, r5
 800b21a:	4620      	mov	r0, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	f7f5 f98f 	bl	8000540 <__aeabi_dmul>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	4680      	mov	r8, r0
 800b228:	4689      	mov	r9, r1
 800b22a:	f7f5 f989 	bl	8000540 <__aeabi_dmul>
 800b22e:	a374      	add	r3, pc, #464	; (adr r3, 800b400 <atan+0x2b8>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	4606      	mov	r6, r0
 800b236:	460f      	mov	r7, r1
 800b238:	f7f5 f982 	bl	8000540 <__aeabi_dmul>
 800b23c:	a372      	add	r3, pc, #456	; (adr r3, 800b408 <atan+0x2c0>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	f7f4 ffc7 	bl	80001d4 <__adddf3>
 800b246:	4632      	mov	r2, r6
 800b248:	463b      	mov	r3, r7
 800b24a:	f7f5 f979 	bl	8000540 <__aeabi_dmul>
 800b24e:	a370      	add	r3, pc, #448	; (adr r3, 800b410 <atan+0x2c8>)
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	f7f4 ffbe 	bl	80001d4 <__adddf3>
 800b258:	4632      	mov	r2, r6
 800b25a:	463b      	mov	r3, r7
 800b25c:	f7f5 f970 	bl	8000540 <__aeabi_dmul>
 800b260:	a36d      	add	r3, pc, #436	; (adr r3, 800b418 <atan+0x2d0>)
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	f7f4 ffb5 	bl	80001d4 <__adddf3>
 800b26a:	4632      	mov	r2, r6
 800b26c:	463b      	mov	r3, r7
 800b26e:	f7f5 f967 	bl	8000540 <__aeabi_dmul>
 800b272:	a36b      	add	r3, pc, #428	; (adr r3, 800b420 <atan+0x2d8>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	f7f4 ffac 	bl	80001d4 <__adddf3>
 800b27c:	4632      	mov	r2, r6
 800b27e:	463b      	mov	r3, r7
 800b280:	f7f5 f95e 	bl	8000540 <__aeabi_dmul>
 800b284:	a368      	add	r3, pc, #416	; (adr r3, 800b428 <atan+0x2e0>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	f7f4 ffa3 	bl	80001d4 <__adddf3>
 800b28e:	4642      	mov	r2, r8
 800b290:	464b      	mov	r3, r9
 800b292:	f7f5 f955 	bl	8000540 <__aeabi_dmul>
 800b296:	a366      	add	r3, pc, #408	; (adr r3, 800b430 <atan+0x2e8>)
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	4680      	mov	r8, r0
 800b29e:	4689      	mov	r9, r1
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	f7f5 f94c 	bl	8000540 <__aeabi_dmul>
 800b2a8:	a363      	add	r3, pc, #396	; (adr r3, 800b438 <atan+0x2f0>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	f7f4 ff8f 	bl	80001d0 <__aeabi_dsub>
 800b2b2:	4632      	mov	r2, r6
 800b2b4:	463b      	mov	r3, r7
 800b2b6:	f7f5 f943 	bl	8000540 <__aeabi_dmul>
 800b2ba:	a361      	add	r3, pc, #388	; (adr r3, 800b440 <atan+0x2f8>)
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f7f4 ff86 	bl	80001d0 <__aeabi_dsub>
 800b2c4:	4632      	mov	r2, r6
 800b2c6:	463b      	mov	r3, r7
 800b2c8:	f7f5 f93a 	bl	8000540 <__aeabi_dmul>
 800b2cc:	a35e      	add	r3, pc, #376	; (adr r3, 800b448 <atan+0x300>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	f7f4 ff7d 	bl	80001d0 <__aeabi_dsub>
 800b2d6:	4632      	mov	r2, r6
 800b2d8:	463b      	mov	r3, r7
 800b2da:	f7f5 f931 	bl	8000540 <__aeabi_dmul>
 800b2de:	a35c      	add	r3, pc, #368	; (adr r3, 800b450 <atan+0x308>)
 800b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e4:	f7f4 ff74 	bl	80001d0 <__aeabi_dsub>
 800b2e8:	4632      	mov	r2, r6
 800b2ea:	463b      	mov	r3, r7
 800b2ec:	f7f5 f928 	bl	8000540 <__aeabi_dmul>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	f7f4 ff6c 	bl	80001d4 <__adddf3>
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	462b      	mov	r3, r5
 800b300:	f7f5 f91e 	bl	8000540 <__aeabi_dmul>
 800b304:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	d14b      	bne.n	800b3a6 <atan+0x25e>
 800b30e:	4620      	mov	r0, r4
 800b310:	4629      	mov	r1, r5
 800b312:	f7f4 ff5d 	bl	80001d0 <__aeabi_dsub>
 800b316:	e72c      	b.n	800b172 <atan+0x2a>
 800b318:	ee10 0a10 	vmov	r0, s0
 800b31c:	4b53      	ldr	r3, [pc, #332]	; (800b46c <atan+0x324>)
 800b31e:	2200      	movs	r2, #0
 800b320:	4629      	mov	r1, r5
 800b322:	f7f4 ff55 	bl	80001d0 <__aeabi_dsub>
 800b326:	4b51      	ldr	r3, [pc, #324]	; (800b46c <atan+0x324>)
 800b328:	4606      	mov	r6, r0
 800b32a:	460f      	mov	r7, r1
 800b32c:	2200      	movs	r2, #0
 800b32e:	4620      	mov	r0, r4
 800b330:	4629      	mov	r1, r5
 800b332:	f7f4 ff4f 	bl	80001d4 <__adddf3>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4630      	mov	r0, r6
 800b33c:	4639      	mov	r1, r7
 800b33e:	f7f5 fa29 	bl	8000794 <__aeabi_ddiv>
 800b342:	f04f 0a01 	mov.w	sl, #1
 800b346:	4604      	mov	r4, r0
 800b348:	460d      	mov	r5, r1
 800b34a:	e764      	b.n	800b216 <atan+0xce>
 800b34c:	4b49      	ldr	r3, [pc, #292]	; (800b474 <atan+0x32c>)
 800b34e:	429e      	cmp	r6, r3
 800b350:	da1d      	bge.n	800b38e <atan+0x246>
 800b352:	ee10 0a10 	vmov	r0, s0
 800b356:	4b48      	ldr	r3, [pc, #288]	; (800b478 <atan+0x330>)
 800b358:	2200      	movs	r2, #0
 800b35a:	4629      	mov	r1, r5
 800b35c:	f7f4 ff38 	bl	80001d0 <__aeabi_dsub>
 800b360:	4b45      	ldr	r3, [pc, #276]	; (800b478 <atan+0x330>)
 800b362:	4606      	mov	r6, r0
 800b364:	460f      	mov	r7, r1
 800b366:	2200      	movs	r2, #0
 800b368:	4620      	mov	r0, r4
 800b36a:	4629      	mov	r1, r5
 800b36c:	f7f5 f8e8 	bl	8000540 <__aeabi_dmul>
 800b370:	4b3e      	ldr	r3, [pc, #248]	; (800b46c <atan+0x324>)
 800b372:	2200      	movs	r2, #0
 800b374:	f7f4 ff2e 	bl	80001d4 <__adddf3>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	4630      	mov	r0, r6
 800b37e:	4639      	mov	r1, r7
 800b380:	f7f5 fa08 	bl	8000794 <__aeabi_ddiv>
 800b384:	f04f 0a02 	mov.w	sl, #2
 800b388:	4604      	mov	r4, r0
 800b38a:	460d      	mov	r5, r1
 800b38c:	e743      	b.n	800b216 <atan+0xce>
 800b38e:	462b      	mov	r3, r5
 800b390:	ee10 2a10 	vmov	r2, s0
 800b394:	4939      	ldr	r1, [pc, #228]	; (800b47c <atan+0x334>)
 800b396:	2000      	movs	r0, #0
 800b398:	f7f5 f9fc 	bl	8000794 <__aeabi_ddiv>
 800b39c:	f04f 0a03 	mov.w	sl, #3
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	460d      	mov	r5, r1
 800b3a4:	e737      	b.n	800b216 <atan+0xce>
 800b3a6:	4b36      	ldr	r3, [pc, #216]	; (800b480 <atan+0x338>)
 800b3a8:	4e36      	ldr	r6, [pc, #216]	; (800b484 <atan+0x33c>)
 800b3aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b3ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b3b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800b3b6:	f7f4 ff0b 	bl	80001d0 <__aeabi_dsub>
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	462b      	mov	r3, r5
 800b3be:	f7f4 ff07 	bl	80001d0 <__aeabi_dsub>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b3ca:	f7f4 ff01 	bl	80001d0 <__aeabi_dsub>
 800b3ce:	f1bb 0f00 	cmp.w	fp, #0
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	460d      	mov	r5, r1
 800b3d6:	f6bf aed6 	bge.w	800b186 <atan+0x3e>
 800b3da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3de:	461d      	mov	r5, r3
 800b3e0:	e6d1      	b.n	800b186 <atan+0x3e>
 800b3e2:	a51d      	add	r5, pc, #116	; (adr r5, 800b458 <atan+0x310>)
 800b3e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3e8:	e6cd      	b.n	800b186 <atan+0x3e>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	54442d18 	.word	0x54442d18
 800b3f4:	bff921fb 	.word	0xbff921fb
 800b3f8:	8800759c 	.word	0x8800759c
 800b3fc:	7e37e43c 	.word	0x7e37e43c
 800b400:	e322da11 	.word	0xe322da11
 800b404:	3f90ad3a 	.word	0x3f90ad3a
 800b408:	24760deb 	.word	0x24760deb
 800b40c:	3fa97b4b 	.word	0x3fa97b4b
 800b410:	a0d03d51 	.word	0xa0d03d51
 800b414:	3fb10d66 	.word	0x3fb10d66
 800b418:	c54c206e 	.word	0xc54c206e
 800b41c:	3fb745cd 	.word	0x3fb745cd
 800b420:	920083ff 	.word	0x920083ff
 800b424:	3fc24924 	.word	0x3fc24924
 800b428:	5555550d 	.word	0x5555550d
 800b42c:	3fd55555 	.word	0x3fd55555
 800b430:	2c6a6c2f 	.word	0x2c6a6c2f
 800b434:	bfa2b444 	.word	0xbfa2b444
 800b438:	52defd9a 	.word	0x52defd9a
 800b43c:	3fadde2d 	.word	0x3fadde2d
 800b440:	af749a6d 	.word	0xaf749a6d
 800b444:	3fb3b0f2 	.word	0x3fb3b0f2
 800b448:	fe231671 	.word	0xfe231671
 800b44c:	3fbc71c6 	.word	0x3fbc71c6
 800b450:	9998ebc4 	.word	0x9998ebc4
 800b454:	3fc99999 	.word	0x3fc99999
 800b458:	54442d18 	.word	0x54442d18
 800b45c:	3ff921fb 	.word	0x3ff921fb
 800b460:	440fffff 	.word	0x440fffff
 800b464:	7ff00000 	.word	0x7ff00000
 800b468:	3fdbffff 	.word	0x3fdbffff
 800b46c:	3ff00000 	.word	0x3ff00000
 800b470:	3ff2ffff 	.word	0x3ff2ffff
 800b474:	40038000 	.word	0x40038000
 800b478:	3ff80000 	.word	0x3ff80000
 800b47c:	bff00000 	.word	0xbff00000
 800b480:	0800bcf8 	.word	0x0800bcf8
 800b484:	0800bcd8 	.word	0x0800bcd8

0800b488 <fabs>:
 800b488:	ec51 0b10 	vmov	r0, r1, d0
 800b48c:	ee10 2a10 	vmov	r2, s0
 800b490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b494:	ec43 2b10 	vmov	d0, r2, r3
 800b498:	4770      	bx	lr

0800b49a <atan2>:
 800b49a:	f000 b82d 	b.w	800b4f8 <__ieee754_atan2>

0800b49e <sqrt>:
 800b49e:	b538      	push	{r3, r4, r5, lr}
 800b4a0:	ed2d 8b02 	vpush	{d8}
 800b4a4:	ec55 4b10 	vmov	r4, r5, d0
 800b4a8:	f000 f8f0 	bl	800b68c <__ieee754_sqrt>
 800b4ac:	4622      	mov	r2, r4
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	eeb0 8a40 	vmov.f32	s16, s0
 800b4b8:	eef0 8a60 	vmov.f32	s17, s1
 800b4bc:	f7f5 fada 	bl	8000a74 <__aeabi_dcmpun>
 800b4c0:	b990      	cbnz	r0, 800b4e8 <sqrt+0x4a>
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7f5 faab 	bl	8000a24 <__aeabi_dcmplt>
 800b4ce:	b158      	cbz	r0, 800b4e8 <sqrt+0x4a>
 800b4d0:	f7ff fdfa 	bl	800b0c8 <__errno>
 800b4d4:	2321      	movs	r3, #33	; 0x21
 800b4d6:	6003      	str	r3, [r0, #0]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	2300      	movs	r3, #0
 800b4dc:	4610      	mov	r0, r2
 800b4de:	4619      	mov	r1, r3
 800b4e0:	f7f5 f958 	bl	8000794 <__aeabi_ddiv>
 800b4e4:	ec41 0b18 	vmov	d8, r0, r1
 800b4e8:	eeb0 0a48 	vmov.f32	s0, s16
 800b4ec:	eef0 0a68 	vmov.f32	s1, s17
 800b4f0:	ecbd 8b02 	vpop	{d8}
 800b4f4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b4f8 <__ieee754_atan2>:
 800b4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4fc:	ec57 6b11 	vmov	r6, r7, d1
 800b500:	4273      	negs	r3, r6
 800b502:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b688 <__ieee754_atan2+0x190>
 800b506:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b50a:	4333      	orrs	r3, r6
 800b50c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b510:	4573      	cmp	r3, lr
 800b512:	ec51 0b10 	vmov	r0, r1, d0
 800b516:	ee11 8a10 	vmov	r8, s2
 800b51a:	d80a      	bhi.n	800b532 <__ieee754_atan2+0x3a>
 800b51c:	4244      	negs	r4, r0
 800b51e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b522:	4304      	orrs	r4, r0
 800b524:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b528:	4574      	cmp	r4, lr
 800b52a:	ee10 9a10 	vmov	r9, s0
 800b52e:	468c      	mov	ip, r1
 800b530:	d907      	bls.n	800b542 <__ieee754_atan2+0x4a>
 800b532:	4632      	mov	r2, r6
 800b534:	463b      	mov	r3, r7
 800b536:	f7f4 fe4d 	bl	80001d4 <__adddf3>
 800b53a:	ec41 0b10 	vmov	d0, r0, r1
 800b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b542:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b546:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b54a:	4334      	orrs	r4, r6
 800b54c:	d103      	bne.n	800b556 <__ieee754_atan2+0x5e>
 800b54e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b552:	f7ff bdf9 	b.w	800b148 <atan>
 800b556:	17bc      	asrs	r4, r7, #30
 800b558:	f004 0402 	and.w	r4, r4, #2
 800b55c:	ea53 0909 	orrs.w	r9, r3, r9
 800b560:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b564:	d107      	bne.n	800b576 <__ieee754_atan2+0x7e>
 800b566:	2c02      	cmp	r4, #2
 800b568:	d060      	beq.n	800b62c <__ieee754_atan2+0x134>
 800b56a:	2c03      	cmp	r4, #3
 800b56c:	d1e5      	bne.n	800b53a <__ieee754_atan2+0x42>
 800b56e:	a142      	add	r1, pc, #264	; (adr r1, 800b678 <__ieee754_atan2+0x180>)
 800b570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b574:	e7e1      	b.n	800b53a <__ieee754_atan2+0x42>
 800b576:	ea52 0808 	orrs.w	r8, r2, r8
 800b57a:	d106      	bne.n	800b58a <__ieee754_atan2+0x92>
 800b57c:	f1bc 0f00 	cmp.w	ip, #0
 800b580:	da5f      	bge.n	800b642 <__ieee754_atan2+0x14a>
 800b582:	a13f      	add	r1, pc, #252	; (adr r1, 800b680 <__ieee754_atan2+0x188>)
 800b584:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b588:	e7d7      	b.n	800b53a <__ieee754_atan2+0x42>
 800b58a:	4572      	cmp	r2, lr
 800b58c:	d10f      	bne.n	800b5ae <__ieee754_atan2+0xb6>
 800b58e:	4293      	cmp	r3, r2
 800b590:	f104 34ff 	add.w	r4, r4, #4294967295
 800b594:	d107      	bne.n	800b5a6 <__ieee754_atan2+0xae>
 800b596:	2c02      	cmp	r4, #2
 800b598:	d84c      	bhi.n	800b634 <__ieee754_atan2+0x13c>
 800b59a:	4b35      	ldr	r3, [pc, #212]	; (800b670 <__ieee754_atan2+0x178>)
 800b59c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b5a0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b5a4:	e7c9      	b.n	800b53a <__ieee754_atan2+0x42>
 800b5a6:	2c02      	cmp	r4, #2
 800b5a8:	d848      	bhi.n	800b63c <__ieee754_atan2+0x144>
 800b5aa:	4b32      	ldr	r3, [pc, #200]	; (800b674 <__ieee754_atan2+0x17c>)
 800b5ac:	e7f6      	b.n	800b59c <__ieee754_atan2+0xa4>
 800b5ae:	4573      	cmp	r3, lr
 800b5b0:	d0e4      	beq.n	800b57c <__ieee754_atan2+0x84>
 800b5b2:	1a9b      	subs	r3, r3, r2
 800b5b4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b5b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5bc:	da1e      	bge.n	800b5fc <__ieee754_atan2+0x104>
 800b5be:	2f00      	cmp	r7, #0
 800b5c0:	da01      	bge.n	800b5c6 <__ieee754_atan2+0xce>
 800b5c2:	323c      	adds	r2, #60	; 0x3c
 800b5c4:	db1e      	blt.n	800b604 <__ieee754_atan2+0x10c>
 800b5c6:	4632      	mov	r2, r6
 800b5c8:	463b      	mov	r3, r7
 800b5ca:	f7f5 f8e3 	bl	8000794 <__aeabi_ddiv>
 800b5ce:	ec41 0b10 	vmov	d0, r0, r1
 800b5d2:	f7ff ff59 	bl	800b488 <fabs>
 800b5d6:	f7ff fdb7 	bl	800b148 <atan>
 800b5da:	ec51 0b10 	vmov	r0, r1, d0
 800b5de:	2c01      	cmp	r4, #1
 800b5e0:	d013      	beq.n	800b60a <__ieee754_atan2+0x112>
 800b5e2:	2c02      	cmp	r4, #2
 800b5e4:	d015      	beq.n	800b612 <__ieee754_atan2+0x11a>
 800b5e6:	2c00      	cmp	r4, #0
 800b5e8:	d0a7      	beq.n	800b53a <__ieee754_atan2+0x42>
 800b5ea:	a319      	add	r3, pc, #100	; (adr r3, 800b650 <__ieee754_atan2+0x158>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	f7f4 fdee 	bl	80001d0 <__aeabi_dsub>
 800b5f4:	a318      	add	r3, pc, #96	; (adr r3, 800b658 <__ieee754_atan2+0x160>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	e014      	b.n	800b626 <__ieee754_atan2+0x12e>
 800b5fc:	a118      	add	r1, pc, #96	; (adr r1, 800b660 <__ieee754_atan2+0x168>)
 800b5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b602:	e7ec      	b.n	800b5de <__ieee754_atan2+0xe6>
 800b604:	2000      	movs	r0, #0
 800b606:	2100      	movs	r1, #0
 800b608:	e7e9      	b.n	800b5de <__ieee754_atan2+0xe6>
 800b60a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b60e:	4619      	mov	r1, r3
 800b610:	e793      	b.n	800b53a <__ieee754_atan2+0x42>
 800b612:	a30f      	add	r3, pc, #60	; (adr r3, 800b650 <__ieee754_atan2+0x158>)
 800b614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b618:	f7f4 fdda 	bl	80001d0 <__aeabi_dsub>
 800b61c:	4602      	mov	r2, r0
 800b61e:	460b      	mov	r3, r1
 800b620:	a10d      	add	r1, pc, #52	; (adr r1, 800b658 <__ieee754_atan2+0x160>)
 800b622:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b626:	f7f4 fdd3 	bl	80001d0 <__aeabi_dsub>
 800b62a:	e786      	b.n	800b53a <__ieee754_atan2+0x42>
 800b62c:	a10a      	add	r1, pc, #40	; (adr r1, 800b658 <__ieee754_atan2+0x160>)
 800b62e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b632:	e782      	b.n	800b53a <__ieee754_atan2+0x42>
 800b634:	a10c      	add	r1, pc, #48	; (adr r1, 800b668 <__ieee754_atan2+0x170>)
 800b636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b63a:	e77e      	b.n	800b53a <__ieee754_atan2+0x42>
 800b63c:	2000      	movs	r0, #0
 800b63e:	2100      	movs	r1, #0
 800b640:	e77b      	b.n	800b53a <__ieee754_atan2+0x42>
 800b642:	a107      	add	r1, pc, #28	; (adr r1, 800b660 <__ieee754_atan2+0x168>)
 800b644:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b648:	e777      	b.n	800b53a <__ieee754_atan2+0x42>
 800b64a:	bf00      	nop
 800b64c:	f3af 8000 	nop.w
 800b650:	33145c07 	.word	0x33145c07
 800b654:	3ca1a626 	.word	0x3ca1a626
 800b658:	54442d18 	.word	0x54442d18
 800b65c:	400921fb 	.word	0x400921fb
 800b660:	54442d18 	.word	0x54442d18
 800b664:	3ff921fb 	.word	0x3ff921fb
 800b668:	54442d18 	.word	0x54442d18
 800b66c:	3fe921fb 	.word	0x3fe921fb
 800b670:	0800bd18 	.word	0x0800bd18
 800b674:	0800bd30 	.word	0x0800bd30
 800b678:	54442d18 	.word	0x54442d18
 800b67c:	c00921fb 	.word	0xc00921fb
 800b680:	54442d18 	.word	0x54442d18
 800b684:	bff921fb 	.word	0xbff921fb
 800b688:	7ff00000 	.word	0x7ff00000

0800b68c <__ieee754_sqrt>:
 800b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	ec55 4b10 	vmov	r4, r5, d0
 800b694:	4e55      	ldr	r6, [pc, #340]	; (800b7ec <__ieee754_sqrt+0x160>)
 800b696:	43ae      	bics	r6, r5
 800b698:	ee10 0a10 	vmov	r0, s0
 800b69c:	ee10 3a10 	vmov	r3, s0
 800b6a0:	462a      	mov	r2, r5
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	d110      	bne.n	800b6c8 <__ieee754_sqrt+0x3c>
 800b6a6:	ee10 2a10 	vmov	r2, s0
 800b6aa:	462b      	mov	r3, r5
 800b6ac:	f7f4 ff48 	bl	8000540 <__aeabi_dmul>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f7f4 fd8c 	bl	80001d4 <__adddf3>
 800b6bc:	4604      	mov	r4, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	ec45 4b10 	vmov	d0, r4, r5
 800b6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c8:	2d00      	cmp	r5, #0
 800b6ca:	dc10      	bgt.n	800b6ee <__ieee754_sqrt+0x62>
 800b6cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b6d0:	4330      	orrs	r0, r6
 800b6d2:	d0f5      	beq.n	800b6c0 <__ieee754_sqrt+0x34>
 800b6d4:	b15d      	cbz	r5, 800b6ee <__ieee754_sqrt+0x62>
 800b6d6:	ee10 2a10 	vmov	r2, s0
 800b6da:	462b      	mov	r3, r5
 800b6dc:	ee10 0a10 	vmov	r0, s0
 800b6e0:	f7f4 fd76 	bl	80001d0 <__aeabi_dsub>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	f7f5 f854 	bl	8000794 <__aeabi_ddiv>
 800b6ec:	e7e6      	b.n	800b6bc <__ieee754_sqrt+0x30>
 800b6ee:	1512      	asrs	r2, r2, #20
 800b6f0:	d074      	beq.n	800b7dc <__ieee754_sqrt+0x150>
 800b6f2:	07d4      	lsls	r4, r2, #31
 800b6f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b6f8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b6fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b700:	bf5e      	ittt	pl
 800b702:	0fda      	lsrpl	r2, r3, #31
 800b704:	005b      	lslpl	r3, r3, #1
 800b706:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b70a:	2400      	movs	r4, #0
 800b70c:	0fda      	lsrs	r2, r3, #31
 800b70e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b712:	107f      	asrs	r7, r7, #1
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	2516      	movs	r5, #22
 800b718:	4620      	mov	r0, r4
 800b71a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b71e:	1886      	adds	r6, r0, r2
 800b720:	428e      	cmp	r6, r1
 800b722:	bfde      	ittt	le
 800b724:	1b89      	suble	r1, r1, r6
 800b726:	18b0      	addle	r0, r6, r2
 800b728:	18a4      	addle	r4, r4, r2
 800b72a:	0049      	lsls	r1, r1, #1
 800b72c:	3d01      	subs	r5, #1
 800b72e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b732:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b736:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b73a:	d1f0      	bne.n	800b71e <__ieee754_sqrt+0x92>
 800b73c:	462a      	mov	r2, r5
 800b73e:	f04f 0e20 	mov.w	lr, #32
 800b742:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b746:	4281      	cmp	r1, r0
 800b748:	eb06 0c05 	add.w	ip, r6, r5
 800b74c:	dc02      	bgt.n	800b754 <__ieee754_sqrt+0xc8>
 800b74e:	d113      	bne.n	800b778 <__ieee754_sqrt+0xec>
 800b750:	459c      	cmp	ip, r3
 800b752:	d811      	bhi.n	800b778 <__ieee754_sqrt+0xec>
 800b754:	f1bc 0f00 	cmp.w	ip, #0
 800b758:	eb0c 0506 	add.w	r5, ip, r6
 800b75c:	da43      	bge.n	800b7e6 <__ieee754_sqrt+0x15a>
 800b75e:	2d00      	cmp	r5, #0
 800b760:	db41      	blt.n	800b7e6 <__ieee754_sqrt+0x15a>
 800b762:	f100 0801 	add.w	r8, r0, #1
 800b766:	1a09      	subs	r1, r1, r0
 800b768:	459c      	cmp	ip, r3
 800b76a:	bf88      	it	hi
 800b76c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b770:	eba3 030c 	sub.w	r3, r3, ip
 800b774:	4432      	add	r2, r6
 800b776:	4640      	mov	r0, r8
 800b778:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b77c:	f1be 0e01 	subs.w	lr, lr, #1
 800b780:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b784:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b788:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b78c:	d1db      	bne.n	800b746 <__ieee754_sqrt+0xba>
 800b78e:	430b      	orrs	r3, r1
 800b790:	d006      	beq.n	800b7a0 <__ieee754_sqrt+0x114>
 800b792:	1c50      	adds	r0, r2, #1
 800b794:	bf13      	iteet	ne
 800b796:	3201      	addne	r2, #1
 800b798:	3401      	addeq	r4, #1
 800b79a:	4672      	moveq	r2, lr
 800b79c:	f022 0201 	bicne.w	r2, r2, #1
 800b7a0:	1063      	asrs	r3, r4, #1
 800b7a2:	0852      	lsrs	r2, r2, #1
 800b7a4:	07e1      	lsls	r1, r4, #31
 800b7a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b7aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b7ae:	bf48      	it	mi
 800b7b0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b7b4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b7b8:	4614      	mov	r4, r2
 800b7ba:	e781      	b.n	800b6c0 <__ieee754_sqrt+0x34>
 800b7bc:	0ad9      	lsrs	r1, r3, #11
 800b7be:	3815      	subs	r0, #21
 800b7c0:	055b      	lsls	r3, r3, #21
 800b7c2:	2900      	cmp	r1, #0
 800b7c4:	d0fa      	beq.n	800b7bc <__ieee754_sqrt+0x130>
 800b7c6:	02cd      	lsls	r5, r1, #11
 800b7c8:	d50a      	bpl.n	800b7e0 <__ieee754_sqrt+0x154>
 800b7ca:	f1c2 0420 	rsb	r4, r2, #32
 800b7ce:	fa23 f404 	lsr.w	r4, r3, r4
 800b7d2:	1e55      	subs	r5, r2, #1
 800b7d4:	4093      	lsls	r3, r2
 800b7d6:	4321      	orrs	r1, r4
 800b7d8:	1b42      	subs	r2, r0, r5
 800b7da:	e78a      	b.n	800b6f2 <__ieee754_sqrt+0x66>
 800b7dc:	4610      	mov	r0, r2
 800b7de:	e7f0      	b.n	800b7c2 <__ieee754_sqrt+0x136>
 800b7e0:	0049      	lsls	r1, r1, #1
 800b7e2:	3201      	adds	r2, #1
 800b7e4:	e7ef      	b.n	800b7c6 <__ieee754_sqrt+0x13a>
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	e7bd      	b.n	800b766 <__ieee754_sqrt+0xda>
 800b7ea:	bf00      	nop
 800b7ec:	7ff00000 	.word	0x7ff00000

0800b7f0 <_init>:
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	bf00      	nop
 800b7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f6:	bc08      	pop	{r3}
 800b7f8:	469e      	mov	lr, r3
 800b7fa:	4770      	bx	lr

0800b7fc <_fini>:
 800b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fe:	bf00      	nop
 800b800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b802:	bc08      	pop	{r3}
 800b804:	469e      	mov	lr, r3
 800b806:	4770      	bx	lr
