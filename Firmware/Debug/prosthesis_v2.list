
prosthesis_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006248  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006888  08006888  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006888  08006888  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006888  08006888  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001064  2000000c  0800689c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001070  0800689c  00021070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001758b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003350  00000000  00000000  000375c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  0003bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000555f  00000000  00000000  0003d410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162b0  00000000  00000000  0004296f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b018  00000000  00000000  00058c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163c37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d1c  00000000  00000000  00163c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080063b8 	.word	0x080063b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080063b8 	.word	0x080063b8

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80002e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80002f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b087      	sub	sp, #28
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000316:	4a17      	ldr	r2, [pc, #92]	; (8000374 <LL_SYSCFG_SetEXTISource+0x68>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	3302      	adds	r3, #2
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	0c1b      	lsrs	r3, r3, #16
 8000326:	43db      	mvns	r3, r3
 8000328:	ea02 0103 	and.w	r1, r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	fa93 f3a3 	rbit	r3, r3
 8000338:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d101      	bne.n	8000348 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000344:	2320      	movs	r3, #32
 8000346:	e003      	b.n	8000350 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	fab3 f383 	clz	r3, r3
 800034e:	b2db      	uxtb	r3, r3
 8000350:	461a      	mov	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	fa03 f202 	lsl.w	r2, r3, r2
 8000358:	4806      	ldr	r0, [pc, #24]	; (8000374 <LL_SYSCFG_SetEXTISource+0x68>)
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	b2db      	uxtb	r3, r3
 800035e:	430a      	orrs	r2, r1
 8000360:	3302      	adds	r3, #2
 8000362:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000366:	bf00      	nop
 8000368:	371c      	adds	r7, #28
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40010000 	.word	0x40010000

08000378 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000378:	b480      	push	{r7}
 800037a:	b08b      	sub	sp, #44	; 0x2c
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	fa93 f3a3 	rbit	r3, r3
 8000392:	613b      	str	r3, [r7, #16]
  return result;
 8000394:	693b      	ldr	r3, [r7, #16]
 8000396:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000398:	69bb      	ldr	r3, [r7, #24]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d101      	bne.n	80003a2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800039e:	2320      	movs	r3, #32
 80003a0:	e003      	b.n	80003aa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	fab3 f383 	clz	r3, r3
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	2103      	movs	r1, #3
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	43db      	mvns	r3, r3
 80003b4:	401a      	ands	r2, r3
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ba:	6a3b      	ldr	r3, [r7, #32]
 80003bc:	fa93 f3a3 	rbit	r3, r3
 80003c0:	61fb      	str	r3, [r7, #28]
  return result;
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80003c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d101      	bne.n	80003d0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80003cc:	2320      	movs	r3, #32
 80003ce:	e003      	b.n	80003d8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80003d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d2:	fab3 f383 	clz	r3, r3
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	6879      	ldr	r1, [r7, #4]
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
 80003e0:	431a      	orrs	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	601a      	str	r2, [r3, #0]
}
 80003e6:	bf00      	nop
 80003e8:	372c      	adds	r7, #44	; 0x2c
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b08b      	sub	sp, #44	; 0x2c
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	60f8      	str	r0, [r7, #12]
 80003fa:	60b9      	str	r1, [r7, #8]
 80003fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	68da      	ldr	r2, [r3, #12]
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	fa93 f3a3 	rbit	r3, r3
 800040c:	613b      	str	r3, [r7, #16]
  return result;
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000412:	69bb      	ldr	r3, [r7, #24]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d101      	bne.n	800041c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000418:	2320      	movs	r3, #32
 800041a:	e003      	b.n	8000424 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800041c:	69bb      	ldr	r3, [r7, #24]
 800041e:	fab3 f383 	clz	r3, r3
 8000422:	b2db      	uxtb	r3, r3
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	2103      	movs	r1, #3
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	401a      	ands	r2, r3
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000434:	6a3b      	ldr	r3, [r7, #32]
 8000436:	fa93 f3a3 	rbit	r3, r3
 800043a:	61fb      	str	r3, [r7, #28]
  return result;
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000442:	2b00      	cmp	r3, #0
 8000444:	d101      	bne.n	800044a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000446:	2320      	movs	r3, #32
 8000448:	e003      	b.n	8000452 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800044a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044c:	fab3 f383 	clz	r3, r3
 8000450:	b2db      	uxtb	r3, r3
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	6879      	ldr	r1, [r7, #4]
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
 800045a:	431a      	orrs	r2, r3
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	60da      	str	r2, [r3, #12]
}
 8000460:	bf00      	nop
 8000462:	372c      	adds	r7, #44	; 0x2c
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	683a      	ldr	r2, [r7, #0]
 800047a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800048e:	f107 031c 	add.w	r3, r7, #28
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
 80004a6:	611a      	str	r2, [r3, #16]
 80004a8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80004aa:	2004      	movs	r0, #4
 80004ac:	f7ff ff16 	bl	80002dc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80004b0:	2080      	movs	r0, #128	; 0x80
 80004b2:	f7ff ff13 	bl	80002dc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff ff10 	bl	80002dc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(OSCOPE_GPIO_Port, OSCOPE_Pin);
 80004bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c0:	4830      	ldr	r0, [pc, #192]	; (8000584 <MX_GPIO_Init+0xfc>)
 80004c2:	f7ff ffd3 	bl	800046c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, ANKLE_IMU_BT_Pin|ANKLE_IMU_P0_Pin|ANKLE_IMU_P1_Pin|ANKLE_IMU_RST_Pin
 80004c6:	211f      	movs	r1, #31
 80004c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004cc:	f7ff ffce 	bl	800046c <LL_GPIO_ResetOutputPin>
                          |ANKLE_IMU_CS_Pin);

  /**/
  GPIO_InitStruct.Pin = OSCOPE_Pin;
 80004d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004d6:	2301      	movs	r3, #1
 80004d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OSCOPE_GPIO_Port, &GPIO_InitStruct);
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	4619      	mov	r1, r3
 80004ea:	4826      	ldr	r0, [pc, #152]	; (8000584 <MX_GPIO_Init+0xfc>)
 80004ec:	f005 feac 	bl	8006248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ANKLE_IMU_BT_Pin|ANKLE_IMU_P0_Pin|ANKLE_IMU_P1_Pin|ANKLE_IMU_RST_Pin
 80004f0:	231f      	movs	r3, #31
 80004f2:	607b      	str	r3, [r7, #4]
                          |ANKLE_IMU_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004f4:	2301      	movs	r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f005 fe9c 	bl	8006248 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE8);
 8000510:	491d      	ldr	r1, [pc, #116]	; (8000588 <MX_GPIO_Init+0x100>)
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff fefa 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8000518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000522:	2301      	movs	r3, #1
 8000524:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000528:	2300      	movs	r3, #0
 800052a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800052e:	2302      	movs	r3, #2
 8000530:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000534:	f107 031c 	add.w	r3, r7, #28
 8000538:	4618      	mov	r0, r3
 800053a:	f005 fc43 	bl	8005dc4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(ANKLE_IMU_INT_GPIO_Port, ANKLE_IMU_INT_Pin, LL_GPIO_PULL_UP);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000548:	f7ff ff53 	bl	80003f2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ANKLE_IMU_INT_GPIO_Port, ANKLE_IMU_INT_Pin, LL_GPIO_MODE_INPUT);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f7ff ff0f 	bl	8000378 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800055a:	f7ff fe35 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 800055e:	4603      	mov	r3, r0
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe85 	bl	8000274 <NVIC_EncodePriority>
 800056a:	4603      	mov	r3, r0
 800056c:	4619      	mov	r1, r3
 800056e:	2017      	movs	r0, #23
 8000570:	f7ff fe56 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000574:	2017      	movs	r0, #23
 8000576:	f7ff fe35 	bl	80001e4 <__NVIC_EnableIRQ>

}
 800057a:	bf00      	nop
 800057c:	3728      	adds	r7, #40	; 0x28
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	48000800 	.word	0x48000800
 8000588:	000f0002 	.word	0x000f0002

0800058c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <LL_RCC_HSI_Enable+0x1c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <LL_RCC_HSI_Enable+0x1c>)
 8000596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <LL_RCC_HSI_IsReady+0x24>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005bc:	d101      	bne.n	80005c2 <LL_RCC_HSI_IsReady+0x16>
 80005be:	2301      	movs	r3, #1
 80005c0:	e000      	b.n	80005c4 <LL_RCC_HSI_IsReady+0x18>
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L43x/STM32L44x/STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	061b      	lsls	r3, r3, #24
 80005e8:	4904      	ldr	r1, [pc, #16]	; (80005fc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80005ea:	4313      	orrs	r3, r2
 80005ec:	604b      	str	r3, [r1, #4]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <LL_RCC_LSI_Enable+0x20>)
 8000606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <LL_RCC_LSI_Enable+0x20>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <LL_RCC_LSI_IsReady+0x24>)
 800062a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	2b02      	cmp	r3, #2
 8000634:	d101      	bne.n	800063a <LL_RCC_LSI_IsReady+0x16>
 8000636:	2301      	movs	r3, #1
 8000638:	e000      	b.n	800063c <LL_RCC_LSI_IsReady+0x18>
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <LL_RCC_SetSysClkSource+0x24>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f023 0203 	bic.w	r2, r3, #3
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <LL_RCC_SetSysClkSource+0x24>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4313      	orrs	r3, r2
 8000662:	608b      	str	r3, [r1, #8]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40021000 	.word	0x40021000

08000674 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <LL_RCC_GetSysClkSource+0x18>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f003 030c 	and.w	r3, r3, #12
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006a0:	4904      	ldr	r1, [pc, #16]	; (80006b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	608b      	str	r3, [r1, #8]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000

080006b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80006c8:	4904      	ldr	r1, [pc, #16]	; (80006dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	608b      	str	r3, [r1, #8]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000

080006e0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80006f0:	4904      	ldr	r1, [pc, #16]	; (8000704 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	608b      	str	r3, [r1, #8]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000

08000708 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <LL_RCC_PLL_Enable+0x1c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <LL_RCC_PLL_Enable+0x1c>)
 8000712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <LL_RCC_PLL_IsReady+0x24>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000734:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000738:	d101      	bne.n	800073e <LL_RCC_PLL_IsReady+0x16>
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <LL_RCC_PLL_IsReady+0x18>
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000760:	68da      	ldr	r2, [r3, #12]
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000764:	4013      	ands	r3, r2
 8000766:	68f9      	ldr	r1, [r7, #12]
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4311      	orrs	r1, r2
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	0212      	lsls	r2, r2, #8
 8000770:	4311      	orrs	r1, r2
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	430a      	orrs	r2, r1
 8000776:	4904      	ldr	r1, [pc, #16]	; (8000788 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000778:	4313      	orrs	r3, r2
 800077a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000
 800078c:	f9ff808c 	.word	0xf9ff808c

08000790 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800079a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000

080007b0 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <LL_FLASH_SetLatency+0x24>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f023 0207 	bic.w	r2, r3, #7
 80007c0:	4904      	ldr	r1, [pc, #16]	; (80007d4 <LL_FLASH_SetLatency+0x24>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	600b      	str	r3, [r1, #0]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	40022000 	.word	0x40022000

080007d8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <LL_FLASH_GetLatency+0x18>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f003 0307 	and.w	r3, r3, #7
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40022000 	.word	0x40022000

080007f4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000804:	4904      	ldr	r1, [pc, #16]	; (8000818 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4313      	orrs	r3, r2
 800080a:	600b      	str	r3, [r1, #0]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	40007000 	.word	0x40007000

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f003 f8c7 	bl	80039b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f810 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f7ff fe2e 	bl	8000488 <MX_GPIO_Init>
//  MX_LPTIM2_Init();
  MX_SPI1_Init();
 800082c:	f000 f866 	bl	80008fc <MX_SPI1_Init>
  MX_TIM2_Init();
 8000830:	f000 fcf0 	bl	8001214 <MX_TIM2_Init>
//	LL_LPTIM_Enable(LPTIM2);
//	LL_LPTIM_EnableIT_ARRM(LPTIM2);
//	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
//	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);

  	if(BNO08x_Init(0))
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fd89 	bl	800134c <BNO08x_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <main+0x28>
  		Error_Handler();
 8000840:	f000 f856 	bl	80008f0 <Error_Handler>

/*******************************************************************************
* USER ADDED MAIN LOOP
*******************************************************************************/

  while (1)
 8000844:	e7fe      	b.n	8000844 <main+0x28>
	...

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 800084c:	2004      	movs	r0, #4
 800084e:	f7ff ffaf 	bl	80007b0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8000852:	bf00      	nop
 8000854:	f7ff ffc0 	bl	80007d8 <LL_FLASH_GetLatency>
 8000858:	4603      	mov	r3, r0
 800085a:	2b04      	cmp	r3, #4
 800085c:	d1fa      	bne.n	8000854 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800085e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000862:	f7ff ffc7 	bl	80007f4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000866:	f7ff fe91 	bl	800058c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800086a:	bf00      	nop
 800086c:	f7ff fe9e 	bl	80005ac <LL_RCC_HSI_IsReady>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d1fa      	bne.n	800086c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000876:	2010      	movs	r0, #16
 8000878:	f7ff feac 	bl	80005d4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_LSI_Enable();
 800087c:	f7ff fec0 	bl	8000600 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8000880:	bf00      	nop
 8000882:	f7ff fecf 	bl	8000624 <LL_RCC_LSI_IsReady>
 8000886:	4603      	mov	r3, r0
 8000888:	2b01      	cmp	r3, #1
 800088a:	d1fa      	bne.n	8000882 <SystemClock_Config+0x3a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 800088c:	2300      	movs	r3, #0
 800088e:	220a      	movs	r2, #10
 8000890:	2100      	movs	r1, #0
 8000892:	2002      	movs	r0, #2
 8000894:	f7ff ff5c 	bl	8000750 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000898:	f7ff ff7a 	bl	8000790 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 800089c:	f7ff ff34 	bl	8000708 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008a0:	bf00      	nop
 80008a2:	f7ff ff41 	bl	8000728 <LL_RCC_PLL_IsReady>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d1fa      	bne.n	80008a2 <SystemClock_Config+0x5a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f7ff fecd 	bl	800064c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80008b2:	bf00      	nop
 80008b4:	f7ff fede 	bl	8000674 <LL_RCC_GetSysClkSource>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b0c      	cmp	r3, #12
 80008bc:	d1fa      	bne.n	80008b4 <SystemClock_Config+0x6c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fee6 	bl	8000690 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fef7 	bl	80006b8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff ff08 	bl	80006e0 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <SystemClock_Config+0xa4>)
 80008d2:	f005 fd27 	bl	8006324 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80008d6:	200f      	movs	r0, #15
 80008d8:	f003 f884 	bl	80039e4 <HAL_InitTick>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008e2:	f000 f805 	bl	80008f0 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	04c4b400 	.word	0x04c4b400

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_SPI1_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <MX_SPI1_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_SPI1_Init+0x74>)
 8000908:	f44f 7282 	mov.w	r2, #260	; 0x104
 800090c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_SPI1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <MX_SPI1_Init+0x74>)
 8000916:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800091a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_SPI1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_SPI1_Init+0x74>)
 800092a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_SPI1_Init+0x74>)
 8000932:	2220      	movs	r2, #32
 8000934:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_SPI1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_SPI1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_SPI1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_SPI1_Init+0x74>)
 800094a:	2207      	movs	r2, #7
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_SPI1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_SPI1_Init+0x74>)
 8000956:	2208      	movs	r2, #8
 8000958:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_SPI1_Init+0x74>)
 800095c:	f003 fcf0 	bl	8004340 <HAL_SPI_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000966:	f7ff ffc3 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000002c 	.word	0x2000002c
 8000974:	40013000 	.word	0x40013000

08000978 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a1b      	ldr	r2, [pc, #108]	; (8000a04 <HAL_SPI_MspInit+0x8c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d130      	bne.n	80009fc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_SPI_MspInit+0x90>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <HAL_SPI_MspInit+0x90>)
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_SPI_MspInit+0x90>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_SPI_MspInit+0x90>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <HAL_SPI_MspInit+0x90>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_SPI_MspInit+0x90>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009ca:	23e0      	movs	r3, #224	; 0xe0
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009da:	2305      	movs	r3, #5
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f003 f9dc 	bl	8003da4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	2023      	movs	r0, #35	; 0x23
 80009f2:	f003 f952 	bl	8003c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009f6:	2023      	movs	r0, #35	; 0x23
 80009f8:	f003 f96b 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40013000 	.word	0x40013000
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_SPI_MspDeInit+0x38>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d10d      	bne.n	8000a3a <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_SPI_MspDeInit+0x3c>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <HAL_SPI_MspDeInit+0x3c>)
 8000a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a28:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8000a2a:	21e0      	movs	r1, #224	; 0xe0
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f003 fb62 	bl	80040f8 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000a34:	2023      	movs	r0, #35	; 0x23
 8000a36:	f003 f95a 	bl	8003cee <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40013000 	.word	0x40013000
 8000a48:	40021000 	.word	0x40021000

08000a4c <bootn>:

// ------------------------------------------------------------------------
// Private methods

static void bootn(bool state)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_BT_GPIO_Port, ANKLE_IMU_BT_Pin,
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f003 fc3e 	bl	80042e0 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <rstn>:

static void rstn(bool state)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_RST_GPIO_Port, ANKLE_IMU_RST_Pin,
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f003 fc2e 	bl	80042e0 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <ps0_waken>:

static void ps0_waken(bool state)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_P0_GPIO_Port, ANKLE_IMU_P0_Pin,
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f003 fc1e 	bl	80042e0 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <ps1>:

static void ps1(bool state)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_P1_GPIO_Port, ANKLE_IMU_P1_Pin,
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	2104      	movs	r1, #4
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f003 fc0e 	bl	80042e0 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <csn>:

static void csn(bool state)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_CS_GPIO_Port, ANKLE_IMU_CS_Pin,
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	2110      	movs	r1, #16
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f003 fbfe 	bl	80042e0 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <timeNowUs>:

static uint32_t timeNowUs(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <timeNowUs+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	20000540 	.word	0x20000540

08000b04 <hal_init_timer>:

static void hal_init_timer(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

    HAL_TIM_Base_Start(&htim2);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <hal_init_timer+0x10>)
 8000b0a:	f004 fbcf 	bl	80052ac <HAL_TIM_Base_Start>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000540 	.word	0x20000540

08000b18 <spiDummyOp>:



static void spiDummyOp(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	23aa      	movs	r3, #170	; 0xaa
 8000b20:	713b      	strb	r3, [r7, #4]
    uint8_t dummyTx[1];
    uint8_t dummyRx[1];

    memset(dummyTx, 0xAA, sizeof(dummyTx));

    HAL_SPI_TransmitReceive(&hspi1, dummyTx, dummyRx, sizeof(dummyTx), 2);
 8000b22:	463a      	mov	r2, r7
 8000b24:	1d39      	adds	r1, r7, #4
 8000b26:	2302      	movs	r3, #2
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <spiDummyOp+0x24>)
 8000b2e:	f003 fcd2 	bl	80044d6 <HAL_SPI_TransmitReceive>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000002c 	.word	0x2000002c

08000b40 <hal_init_hw>:



static void hal_init_hw(bool dfu)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
    hal_init_timer();
 8000b4a:	f7ff ffdb 	bl	8000b04 <hal_init_timer>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <enableInts>:

static void enableInts(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b5a:	2017      	movs	r0, #23
 8000b5c:	f003 f8b9 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b60:	2023      	movs	r0, #35	; 0x23
 8000b62:	f003 f8b6 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <disableInts>:

static void disableInts()
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000b6e:	2023      	movs	r0, #35	; 0x23
 8000b70:	f003 f8bd 	bl	8003cee <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000b74:	2017      	movs	r0, #23
 8000b76:	f003 f8ba 	bl	8003cee <HAL_NVIC_DisableIRQ>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <spiActivate>:
// Attempt to start a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// If SPI periph is not in use and there is data to send or receive,
// this will start a SPI operation.
static void spiActivate(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    if ((spiState == SPI_IDLE) && (rxBufLen == 0))
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <spiActivate+0x68>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d12a      	bne.n	8000be2 <spiActivate+0x62>
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <spiActivate+0x6c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d126      	bne.n	8000be2 <spiActivate+0x62>
    {
        if (rxReady)
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <spiActivate+0x70>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d021      	beq.n	8000be2 <spiActivate+0x62>
        {
            // reset flag that was set with INTN
            rxReady = false;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <spiActivate+0x70>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]

            // assert CSN
            csn(false);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff ff91 	bl	8000acc <csn>

            if (txBufLen > 0)
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <spiActivate+0x74>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00e      	beq.n	8000bd0 <spiActivate+0x50>
            {
                spiState = SPI_WRITE;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <spiActivate+0x68>)
 8000bb4:	2206      	movs	r2, #6
 8000bb6:	701a      	strb	r2, [r3, #0]

                // Start operation to write (and, incidentally, read)
                HAL_SPI_TransmitReceive_IT(&hspi1, txBuf, rxBuf, txBufLen);
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <spiActivate+0x74>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <spiActivate+0x78>)
 8000bc0:	490e      	ldr	r1, [pc, #56]	; (8000bfc <spiActivate+0x7c>)
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <spiActivate+0x80>)
 8000bc4:	f003 fe9a 	bl	80048fc <HAL_SPI_TransmitReceive_IT>

                // Deassert Wake
                ps0_waken(true);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff ff5f 	bl	8000a8c <ps0_waken>
                // Start SPI operation to read header (writing zeros)
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
            }
        }
    }
}
 8000bce:	e008      	b.n	8000be2 <spiActivate+0x62>
                spiState = SPI_RD_HDR;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <spiActivate+0x68>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	701a      	strb	r2, [r3, #0]
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <spiActivate+0x78>)
 8000bda:	490a      	ldr	r1, [pc, #40]	; (8000c04 <spiActivate+0x84>)
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <spiActivate+0x80>)
 8000bde:	f003 fe8d 	bl	80048fc <HAL_SPI_TransmitReceive_IT>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000090 	.word	0x20000090
 8000bec:	2000049c 	.word	0x2000049c
 8000bf0:	20000099 	.word	0x20000099
 8000bf4:	20000524 	.word	0x20000524
 8000bf8:	2000009c 	.word	0x2000009c
 8000bfc:	200004a4 	.word	0x200004a4
 8000c00:	2000002c 	.word	0x2000002c
 8000c04:	080063d0 	.word	0x080063d0

08000c08 <spiCompleted>:
// Handle the end of a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// Depending on spiState, it may start a follow-up operation or transition
// to idle.  In the latter case, it will call spiActivate
static void spiCompleted(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
    // Get length of payload available
    uint16_t rxLen = (rxBuf[0] + (rxBuf[1] << 8)) & ~0x8000;
 8000c0e:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <spiCompleted+0xd4>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b31      	ldr	r3, [pc, #196]	; (8000cdc <spiCompleted+0xd4>)
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c26:	80fb      	strh	r3, [r7, #6]

    // Truncate that to max len we can read
    if (rxLen > sizeof(rxBuf))
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c2e:	d902      	bls.n	8000c36 <spiCompleted+0x2e>
    {
        rxLen = sizeof(rxBuf);
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	80fb      	strh	r3, [r7, #6]
    }

    if (spiState == SPI_DUMMY)
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <spiCompleted+0xd8>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d103      	bne.n	8000c46 <spiCompleted+0x3e>
    {
        // SPI Dummy operation completed, transition now to idle
        spiState = SPI_IDLE;
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <spiCompleted+0xd8>)
 8000c40:	2203      	movs	r2, #3
 8000c42:	701a      	strb	r2, [r3, #0]
        spiState = SPI_IDLE;

        // Activate the next operation, if any.
        spiActivate();
    }
}
 8000c44:	e045      	b.n	8000cd2 <spiCompleted+0xca>
    else if (spiState == SPI_RD_HDR)
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <spiCompleted+0xd8>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d11a      	bne.n	8000c84 <spiCompleted+0x7c>
        if (rxLen > READ_LEN) {
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d90b      	bls.n	8000c6c <spiCompleted+0x64>
            spiState = SPI_RD_BODY;
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <spiCompleted+0xd8>)
 8000c56:	2205      	movs	r2, #5
 8000c58:	701a      	strb	r2, [r3, #0]
            HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf+READ_LEN, rxLen-READ_LEN);
 8000c5a:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <spiCompleted+0xdc>)
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4921      	ldr	r1, [pc, #132]	; (8000ce8 <spiCompleted+0xe0>)
 8000c64:	4821      	ldr	r0, [pc, #132]	; (8000cec <spiCompleted+0xe4>)
 8000c66:	f003 fe49 	bl	80048fc <HAL_SPI_TransmitReceive_IT>
}
 8000c6a:	e032      	b.n	8000cd2 <spiCompleted+0xca>
            csn(true);            // deassert CSN
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff ff2d 	bl	8000acc <csn>
            rxBufLen = 0;         // no rx data available
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <spiCompleted+0xe8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
            spiState = SPI_IDLE;  // back to idle state
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <spiCompleted+0xd8>)
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	701a      	strb	r2, [r3, #0]
            spiActivate();        // activate next operation, if any.
 8000c7e:	f7ff ff7f 	bl	8000b80 <spiActivate>
}
 8000c82:	e026      	b.n	8000cd2 <spiCompleted+0xca>
    else if (spiState == SPI_RD_BODY)
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <spiCompleted+0xd8>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b05      	cmp	r3, #5
 8000c8a:	d10b      	bne.n	8000ca4 <spiCompleted+0x9c>
        csn(true);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ff1d 	bl	8000acc <csn>
        rxBufLen = rxLen;
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	4a16      	ldr	r2, [pc, #88]	; (8000cf0 <spiCompleted+0xe8>)
 8000c96:	6013      	str	r3, [r2, #0]
        spiState = SPI_IDLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <spiCompleted+0xd8>)
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	701a      	strb	r2, [r3, #0]
        spiActivate();
 8000c9e:	f7ff ff6f 	bl	8000b80 <spiActivate>
}
 8000ca2:	e016      	b.n	8000cd2 <spiCompleted+0xca>
    else if (spiState == SPI_WRITE)
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <spiCompleted+0xd8>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b06      	cmp	r3, #6
 8000caa:	d112      	bne.n	8000cd2 <spiCompleted+0xca>
        csn(true);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f7ff ff0d 	bl	8000acc <csn>
        rxBufLen = (txBufLen < rxLen) ? txBufLen : rxLen;
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <spiCompleted+0xec>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	bf28      	it	cs
 8000cbc:	4613      	movcs	r3, r2
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <spiCompleted+0xe8>)
 8000cc0:	6013      	str	r3, [r2, #0]
        txBufLen = 0;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <spiCompleted+0xec>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
        spiState = SPI_IDLE;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <spiCompleted+0xd8>)
 8000cca:	2203      	movs	r2, #3
 8000ccc:	701a      	strb	r2, [r3, #0]
        spiActivate();
 8000cce:	f7ff ff57 	bl	8000b80 <spiActivate>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000009c 	.word	0x2000009c
 8000ce0:	20000090 	.word	0x20000090
 8000ce4:	200000a0 	.word	0x200000a0
 8000ce8:	080063d0 	.word	0x080063d0
 8000cec:	2000002c 	.word	0x2000002c
 8000cf0:	2000049c 	.word	0x2000049c
 8000cf4:	20000524 	.word	0x20000524

08000cf8 <HAL_GPIO_EXTI_Callback>:


// Interrupt handlers and SPI operation callbacks

void HAL_GPIO_EXTI_Callback(uint16_t n)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
    rxTimestamp_us = timeNowUs();
 8000d02:	f7ff fef3 	bl	8000aec <timeNowUs>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d0a:	6013      	str	r3, [r2, #0]

    inReset = false;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_GPIO_EXTI_Callback+0x30>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
    rxReady = true;
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x34>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]

    // Start read, if possible
    spiActivate();
 8000d18:	f7ff ff32 	bl	8000b80 <spiActivate>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000094 	.word	0x20000094
 8000d28:	20000098 	.word	0x20000098
 8000d2c:	20000099 	.word	0x20000099

08000d30 <EXTI15_10_IRQHandler>:

// Handle INTN Interrupt through STM32 HAL
// (It, in turn, calls HAL_GPIO_EXTI_Callback, above)
void EXTI15_10_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000d34:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d38:	f003 faea 	bl	8004310 <HAL_GPIO_EXTI_IRQHandler>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi1)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    if (isOpen)
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_SPI_TxRxCpltCallback+0x14>
    {
        spiCompleted();
 8000d50:	f7ff ff5a 	bl	8000c08 <spiCompleted>
    }
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000053c 	.word	0x2000053c

08000d60 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi1)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
    // Shouldn't happen
    while (1);
 8000d68:	e7fe      	b.n	8000d68 <HAL_SPI_ErrorCallback+0x8>

08000d6a <delayUs>:
//{
//    HAL_SPI_IRQHandler(&hspi1);
//}

void delayUs(uint32_t delay)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 8000d72:	f7ff febb 	bl	8000aec <timeNowUs>
 8000d76:	4603      	mov	r3, r0
 8000d78:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	60fb      	str	r3, [r7, #12]
    while ((now - start) < delay) {
 8000d7e:	e003      	b.n	8000d88 <delayUs+0x1e>
        now = timeNowUs();
 8000d80:	f7ff feb4 	bl	8000aec <timeNowUs>
 8000d84:	4603      	mov	r3, r0
 8000d86:	60bb      	str	r3, [r7, #8]
    while ((now - start) < delay) {
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f5      	bhi.n	8000d80 <delayUs+0x16>
    }
}
 8000d94:	bf00      	nop
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <resetDelayUs>:

void resetDelayUs(uint32_t delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 8000da8:	f7ff fea0 	bl	8000aec <timeNowUs>
 8000dac:	4603      	mov	r3, r0
 8000dae:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60fb      	str	r3, [r7, #12]
    while (((now - start) < delay) && (inReset))
 8000db4:	e003      	b.n	8000dbe <resetDelayUs+0x1e>
    {
        now = timeNowUs();
 8000db6:	f7ff fe99 	bl	8000aec <timeNowUs>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	60bb      	str	r3, [r7, #8]
    while (((now - start) < delay) && (inReset))
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d904      	bls.n	8000dd4 <resetDelayUs+0x34>
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <resetDelayUs+0x3c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f0      	bne.n	8000db6 <resetDelayUs+0x16>
    }
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000098 	.word	0x20000098

08000de0 <sh2_spi_hal_open>:

// ------------------------------------------------------------------------
// SH2 SPI Hal Methods

static int sh2_spi_hal_open(sh2_Hal_t *self)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
    int retval = SH2_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]

    if (isOpen)
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <sh2_spi_hal_open+0x94>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <sh2_spi_hal_open+0x1a>
    {
        // Can't open if another instance is already open
        return SH2_ERR;
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	e038      	b.n	8000e6c <sh2_spi_hal_open+0x8c>
    }

    isOpen = true;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <sh2_spi_hal_open+0x94>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]

    // Init hardware (false -> non-DFU config)
    hal_init_hw(false);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff fe9d 	bl	8000b40 <hal_init_hw>

    // Hold in reset
    rstn(false);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff fe30 	bl	8000a6c <rstn>

    // deassert CSN
    csn(true);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff fe5d 	bl	8000acc <csn>

    // Clear rx, tx buffers
    rxBufLen = 0;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <sh2_spi_hal_open+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
    txBufLen = 0;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <sh2_spi_hal_open+0x9c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
    rxDataReady = false;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <sh2_spi_hal_open+0xa0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
    rxReady = false;
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <sh2_spi_hal_open+0xa4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]

    inReset = true;  // will change back to false when INTN serviced
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <sh2_spi_hal_open+0xa8>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]

    // Do dummy SPI operation
    // (First SPI op after reconfig has bad initial state of signals
    // so this is a throwaway operation.  Afterward, all is well.)
    spiState = SPI_DUMMY;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <sh2_spi_hal_open+0xac>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
    spiDummyOp();
 8000e36:	f7ff fe6f 	bl	8000b18 <spiDummyOp>
    spiState = SPI_IDLE;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <sh2_spi_hal_open+0xac>)
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	701a      	strb	r2, [r3, #0]

    // Delay for RESET_DELAY_US to ensure reset takes effect
    delayUs(RESET_DELAY_US);
 8000e40:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e44:	f7ff ff91 	bl	8000d6a <delayUs>

    // To boot in SHTP-SPI mode, must have PS1=1, PS0=1.
    // PS1 is set via jumper.
    // PS0 will be 1 PS1 jumper is 1 AND PS0_WAKEN sig is 1.
    // So we set PS0_WAKEN signal to 1
    ps0_waken(true);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff fe1f 	bl	8000a8c <ps0_waken>
    ps1(true);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff fe2c 	bl	8000aac <ps1>

    // Deassert reset, boot in non-DFU mode
    bootn(true);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fdf9 	bl	8000a4c <bootn>
    rstn(true);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff fe06 	bl	8000a6c <rstn>

    // enable interrupts
    enableInts();
 8000e60:	f7ff fe79 	bl	8000b56 <enableInts>

    // Wait for INTN to be asserted
    resetDelayUs(START_DELAY_US);
 8000e64:	480a      	ldr	r0, [pc, #40]	; (8000e90 <sh2_spi_hal_open+0xb0>)
 8000e66:	f7ff ff9b 	bl	8000da0 <resetDelayUs>

    return retval;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2000053c 	.word	0x2000053c
 8000e78:	2000049c 	.word	0x2000049c
 8000e7c:	20000524 	.word	0x20000524
 8000e80:	200004a0 	.word	0x200004a0
 8000e84:	20000099 	.word	0x20000099
 8000e88:	20000098 	.word	0x20000098
 8000e8c:	20000090 	.word	0x20000090
 8000e90:	001e8480 	.word	0x001e8480

08000e94 <sh2_spi_hal_close>:

static void sh2_spi_hal_close(sh2_Hal_t *self)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    // Disable interrupts
    disableInts();
 8000e9c:	f7ff fe65 	bl	8000b6a <disableInts>

    // Set state machine to INIT state
    spiState = SPI_INIT;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <sh2_spi_hal_close+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]

    // Hold sensor hub in reset
    rstn(false);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f7ff fde0 	bl	8000a6c <rstn>

    // deassert CSN
    csn(true);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff fe0d 	bl	8000acc <csn>

    // Deinit SPI peripheral
    HAL_SPI_DeInit(&hspi1);
 8000eb2:	4812      	ldr	r0, [pc, #72]	; (8000efc <sh2_spi_hal_close+0x68>)
 8000eb4:	f003 fae7 	bl	8004486 <HAL_SPI_DeInit>

    // Deinit timer
    __HAL_TIM_DISABLE(&htim2);
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <sh2_spi_hal_close+0x6c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a1a      	ldr	r2, [r3, #32]
 8000ebe:	f241 1311 	movw	r3, #4369	; 0x1111
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10f      	bne.n	8000ee8 <sh2_spi_hal_close+0x54>
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <sh2_spi_hal_close+0x6c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a1a      	ldr	r2, [r3, #32]
 8000ece:	f240 4344 	movw	r3, #1092	; 0x444
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d107      	bne.n	8000ee8 <sh2_spi_hal_close+0x54>
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <sh2_spi_hal_close+0x6c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <sh2_spi_hal_close+0x6c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0201 	bic.w	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]

    // No longer open
    isOpen = false;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <sh2_spi_hal_close+0x70>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000090 	.word	0x20000090
 8000efc:	2000002c 	.word	0x2000002c
 8000f00:	20000540 	.word	0x20000540
 8000f04:	2000053c 	.word	0x2000053c

08000f08 <sh2_spi_hal_read>:

static int sh2_spi_hal_read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
    int retval = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]

    // If there is received data available...
    if (rxBufLen > 0)
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <sh2_spi_hal_read+0x6c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d022      	beq.n	8000f68 <sh2_spi_hal_read+0x60>
    {
        // And if the data will fit in this buffer...
        if (len >= rxBufLen)
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <sh2_spi_hal_read+0x6c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d311      	bcc.n	8000f50 <sh2_spi_hal_read+0x48>
        {
            // Copy data to the client buffer
            memcpy(pBuffer, rxBuf, rxBufLen);
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <sh2_spi_hal_read+0x6c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4911      	ldr	r1, [pc, #68]	; (8000f78 <sh2_spi_hal_read+0x70>)
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f005 fa29 	bl	800638c <memcpy>
            retval = rxBufLen;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <sh2_spi_hal_read+0x6c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	617b      	str	r3, [r7, #20]

            // Set timestamp of that data
            *t = rxTimestamp_us;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <sh2_spi_hal_read+0x74>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	601a      	str	r2, [r3, #0]

            // Clear rxBuf so we can receive again
            rxBufLen = 0;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <sh2_spi_hal_read+0x6c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e005      	b.n	8000f5c <sh2_spi_hal_read+0x54>
        }
        else
        {
            // Discard what was read and return error because buffer was too small.
            retval = SH2_ERR_BAD_PARAM;
 8000f50:	f06f 0301 	mvn.w	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
            rxBufLen = 0;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <sh2_spi_hal_read+0x6c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
        }

        // Now that rxBuf is empty, activate SPI processing to send any
        // potential write that was blocked.
        disableInts();
 8000f5c:	f7ff fe05 	bl	8000b6a <disableInts>
        spiActivate();
 8000f60:	f7ff fe0e 	bl	8000b80 <spiActivate>
        enableInts();
 8000f64:	f7ff fdf7 	bl	8000b56 <enableInts>
    }

    return retval;
 8000f68:	697b      	ldr	r3, [r7, #20]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000049c 	.word	0x2000049c
 8000f78:	2000009c 	.word	0x2000009c
 8000f7c:	20000094 	.word	0x20000094

08000f80 <sh2_spi_hal_write>:

static int sh2_spi_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
    int retval = SH2_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

    // Validate parameters
    if ((self == 0) || (len > sizeof(txBuf)) ||
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <sh2_spi_hal_write+0x28>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b80      	cmp	r3, #128	; 0x80
 8000f9a:	d805      	bhi.n	8000fa8 <sh2_spi_hal_write+0x28>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <sh2_spi_hal_write+0x2e>
        ((len > 0) && (pBuffer == 0)))
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <sh2_spi_hal_write+0x2e>
    {
        return SH2_ERR_BAD_PARAM;
 8000fa8:	f06f 0301 	mvn.w	r3, #1
 8000fac:	e017      	b.n	8000fde <sh2_spi_hal_write+0x5e>
    }

    // If tx buffer is not empty, return 0
    if (txBufLen != 0)
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <sh2_spi_hal_write+0x68>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <sh2_spi_hal_write+0x3a>
    {
        return 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e011      	b.n	8000fde <sh2_spi_hal_write+0x5e>
    }

    // Copy data to tx buffer
    memcpy(txBuf, pBuffer, len);
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	480b      	ldr	r0, [pc, #44]	; (8000fec <sh2_spi_hal_write+0x6c>)
 8000fc0:	f005 f9e4 	bl	800638c <memcpy>
    txBufLen = len;
 8000fc4:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <sh2_spi_hal_write+0x68>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
    retval = len;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	617b      	str	r3, [r7, #20]

    // disable SH2 interrupts for a moment
    disableInts();
 8000fce:	f7ff fdcc 	bl	8000b6a <disableInts>

    // Assert Wake
    ps0_waken(false);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff fd5a 	bl	8000a8c <ps0_waken>

    // re-enable SH2 interrupts.
    enableInts();
 8000fd8:	f7ff fdbd 	bl	8000b56 <enableInts>

    return retval;
 8000fdc:	697b      	ldr	r3, [r7, #20]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000524 	.word	0x20000524
 8000fec:	200004a4 	.word	0x200004a4

08000ff0 <sh2_spi_hal_getTimeUs>:

static uint32_t sh2_spi_hal_getTimeUs(sh2_Hal_t *self)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    return timeNowUs();
 8000ff8:	f7ff fd78 	bl	8000aec <timeNowUs>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <sh2_hal_init>:

// ------------------------------------------------------------------------
// Public methods

sh2_Hal_t *sh2_hal_init(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
    // Set up the HAL reference object for the client
    sh2Hal.open = sh2_spi_hal_open;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <sh2_hal_init+0x30>)
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <sh2_hal_init+0x34>)
 8001010:	601a      	str	r2, [r3, #0]
    sh2Hal.close = sh2_spi_hal_close;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <sh2_hal_init+0x30>)
 8001014:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <sh2_hal_init+0x38>)
 8001016:	605a      	str	r2, [r3, #4]
    sh2Hal.read = sh2_spi_hal_read;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <sh2_hal_init+0x30>)
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <sh2_hal_init+0x3c>)
 800101c:	609a      	str	r2, [r3, #8]
    sh2Hal.write = sh2_spi_hal_write;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <sh2_hal_init+0x30>)
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <sh2_hal_init+0x40>)
 8001022:	60da      	str	r2, [r3, #12]
    sh2Hal.getTimeUs = sh2_spi_hal_getTimeUs;
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <sh2_hal_init+0x30>)
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <sh2_hal_init+0x44>)
 8001028:	611a      	str	r2, [r3, #16]

    return &sh2Hal;
 800102a:	4b03      	ldr	r3, [pc, #12]	; (8001038 <sh2_hal_init+0x30>)
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000528 	.word	0x20000528
 800103c:	08000de1 	.word	0x08000de1
 8001040:	08000e95 	.word	0x08000e95
 8001044:	08000f09 	.word	0x08000f09
 8001048:	08000f81 	.word	0x08000f81
 800104c:	08000ff1 	.word	0x08000ff1

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_MspInit+0x44>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_MspInit+0x44>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6613      	str	r3, [r2, #96]	; 0x60
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_MspInit+0x44>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_MspInit+0x44>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_MspInit+0x44>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_MspInit+0x44>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <LL_LPTIM_ClearFLAG_ARRM>:
  * @rmtoll ICR          ARRMCF        LL_LPTIM_ClearFLAG_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_ClearFLAG_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f043 0202 	orr.w	r2, r3, #2
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	605a      	str	r2, [r3, #4]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_LPTIM_IsActiveFlag_ARRM>:
  * @rmtoll ISR          ARRM          LL_LPTIM_IsActiveFlag_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPTIM_IsActiveFlag_ARRM(const LPTIM_TypeDef *LPTIMx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d101      	bne.n	80010d0 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4013      	ands	r3, r2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d101      	bne.n	80010fa <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40010400 	.word	0x40010400

0800110c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6153      	str	r3, [r2, #20]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40010400 	.word	0x40010400

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001178:	f002 fc70 	bl	8003a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}

08001180 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8001184:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001188:	f7ff ffaa 	bl	80010e0 <LL_EXTI_IsActiveFlag_0_31>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <EXTI9_5_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8001192:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001196:	f7ff ffb9 	bl	800110c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM2_IRQHandler+0x10>)
 80011a6:	f004 f8e9 	bl	800537c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000540 	.word	0x20000540

080011b4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <SPI1_IRQHandler+0x10>)
 80011ba:	f003 fc4f 	bl	8004a5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000002c 	.word	0x2000002c

080011c8 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

/******************************************************************************
* USER ADDED LPTIM2_IRQHANDLER
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <LPTIM2_IRQHandler+0x20>)
 80011ce:	f7ff ff73 	bl	80010b8 <LL_LPTIM_IsActiveFlag_ARRM>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d105      	bne.n	80011e4 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <LPTIM2_IRQHandler+0x24>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 80011de:	4802      	ldr	r0, [pc, #8]	; (80011e8 <LPTIM2_IRQHandler+0x20>)
 80011e0:	f7ff ff5a 	bl	8001098 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40009400 	.word	0x40009400
 80011ec:	20000028 	.word	0x20000028

080011f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <SystemInit+0x20>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <SystemInit+0x20>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_TIM2_Init+0x98>)
 8001234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001238:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_TIM2_Init+0x98>)
 800123c:	224f      	movs	r2, #79	; 0x4f
 800123e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_TIM2_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_TIM2_Init+0x98>)
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_TIM2_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_TIM2_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125a:	4814      	ldr	r0, [pc, #80]	; (80012ac <MX_TIM2_Init+0x98>)
 800125c:	f003 ffce 	bl	80051fc <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001266:	f7ff fb43 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_TIM2_Init+0x98>)
 8001278:	f004 f99f 	bl	80055ba <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001282:	f7ff fb35 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <MX_TIM2_Init+0x98>)
 8001294:	f004 fbc0 	bl	8005a18 <HAL_TIMEx_MasterConfigSynchronization>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800129e:	f7ff fb27 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000540 	.word	0x20000540

080012b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c0:	d113      	bne.n	80012ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6593      	str	r3, [r2, #88]	; 0x58
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_TIM_Base_MspInit+0x44>)
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2102      	movs	r1, #2
 80012de:	201c      	movs	r0, #28
 80012e0:	f002 fcdb 	bl	8003c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012e4:	201c      	movs	r0, #28
 80012e6:	f002 fcf4 	bl	8003cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012fc:	f7ff ff78 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopForever+0x6>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopForever+0xe>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopForever+0x16>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f005 f80d 	bl	8006344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132a:	f7ff fa77 	bl	800081c <main>

0800132e <LoopForever>:

LoopForever:
    b LoopForever
 800132e:	e7fe      	b.n	800132e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001330:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800133c:	08006890 	.word	0x08006890
  ldr r2, =_sbss
 8001340:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001344:	20001070 	.word	0x20001070

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>
	...

0800134c <BNO08x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

BNO08x_Error_e BNO08x_Init(uint8_t deviceIndex)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > BNO08X_NUMBER_OF_DEVICES)
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d000      	beq.n	800135e <BNO08x_Init+0x12>
		while(1);
 800135c:	e7fe      	b.n	800135c <BNO08x_Init+0x10>

	sh2_Hal_t *pSh2Hal = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
	pSh2Hal = sh2_hal_init();
 8001362:	f7ff fe51 	bl	8001008 <sh2_hal_init>
 8001366:	60f8      	str	r0, [r7, #12]
	int status = sh2_open(pSh2Hal, EventHandler, NULL);
 8001368:	2200      	movs	r2, #0
 800136a:	490a      	ldr	r1, [pc, #40]	; (8001394 <BNO08x_Init+0x48>)
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 fc7f 	bl	8001c70 <sh2_open>
 8001372:	60b8      	str	r0, [r7, #8]
	if(status != SH2_OK)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <BNO08x_Init+0x32>
		return BNO08x_InitError;
 800137a:	2301      	movs	r3, #1
 800137c:	e006      	b.n	800138c <BNO08x_Init+0x40>

	sh2_setSensorCallback(ReadEvent, NULL); // incompatible??
 800137e:	2100      	movs	r1, #0
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <BNO08x_Init+0x4c>)
 8001382:	f000 fd0f 	bl	8001da4 <sh2_setSensorCallback>

  	BNO08x_StartReports();
 8001386:	f000 f809 	bl	800139c <BNO08x_StartReports>

	return BNO08x_NoError;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	080013fd 	.word	0x080013fd
 8001398:	08001425 	.word	0x08001425

0800139c <BNO08x_StartReports>:

BNO08x_Error_e BNO08x_StartReports(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
		{SH2_ACCELEROMETER, {.reportInterval_us = 2000}},			// Max interval = 500 Hz = 2000 us
		{SH2_GYROSCOPE_CALIBRATED, {.reportInterval_us = 2500}},	// Max interval = 400 Hz = 2500 us
        {SH2_GAME_ROTATION_VECTOR, {.reportInterval_us = 2500}},	// Max interval = 400 Hz = 2500 us
    };

    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	e01e      	b.n	80013e6 <BNO08x_StartReports+0x4a>
    {
        int sensorId = sensorConfig[n].sensorId;
 80013a8:	4913      	ldr	r1, [pc, #76]	; (80013f8 <BNO08x_StartReports+0x5c>)
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60bb      	str	r3, [r7, #8]

        int status = sh2_setSensorConfig(sensorId, &sensorConfig[n].config);
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	b2d8      	uxtb	r0, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <BNO08x_StartReports+0x5c>)
 80013ca:	4413      	add	r3, r2
 80013cc:	3304      	adds	r3, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	f000 fcfe 	bl	8001dd0 <sh2_setSensorConfig>
 80013d4:	6078      	str	r0, [r7, #4]
        if (status != 0)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <BNO08x_StartReports+0x44>
        	return BNO08x_StartReportError;
 80013dc:	2302      	movs	r3, #2
 80013de:	e006      	b.n	80013ee <BNO08x_StartReports+0x52>
    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d9dd      	bls.n	80013a8 <BNO08x_StartReports+0xc>
    }

    return BNO08x_NoError;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	080067d0 	.word	0x080067d0

080013fc <EventHandler>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void EventHandler(void * cookie, sh2_AsyncEvent_t *pEvent)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    if (pEvent->eventId == SH2_RESET)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <EventHandler+0x18>
        BNO08x_resetOccurred = 1;
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <EventHandler+0x24>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	200005b4 	.word	0x200005b4

08001424 <ReadEvent>:

static void ReadEvent(void * cookie, sh2_SensorEvent_t * event, int16_t *data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09a      	sub	sp, #104	; 0x68
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
    int rc;
    sh2_SensorValue_t value;

    rc = sh2_decodeSensorEvent(&value, event);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fcf4 	bl	8001e24 <sh2_decodeSensorEvent>
 800143c:	6678      	str	r0, [r7, #100]	; 0x64
    if (rc != SH2_OK)
 800143e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001440:	2b00      	cmp	r3, #0
 8001442:	d12a      	bne.n	800149a <ReadEvent+0x76>
        return;

    switch(value.sensorId)
 8001444:	7c3b      	ldrb	r3, [r7, #16]
 8001446:	2b08      	cmp	r3, #8
 8001448:	d01a      	beq.n	8001480 <ReadEvent+0x5c>
 800144a:	2b08      	cmp	r3, #8
 800144c:	dc26      	bgt.n	800149c <ReadEvent+0x78>
 800144e:	2b01      	cmp	r3, #1
 8001450:	d002      	beq.n	8001458 <ReadEvent+0x34>
 8001452:	2b02      	cmp	r3, #2
 8001454:	d00a      	beq.n	800146c <ReadEvent+0x48>
 8001456:	e021      	b.n	800149c <ReadEvent+0x78>
    {
        case SH2_ACCELEROMETER:
        	BNO08x_IMU_Data[0] = value.un.accelerometer.x;
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <ReadEvent+0x80>)
 800145c:	6013      	str	r3, [r2, #0]
        	BNO08x_IMU_Data[1] = value.un.accelerometer.y;
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <ReadEvent+0x80>)
 8001462:	6053      	str	r3, [r2, #4]
        	BNO08x_IMU_Data[2] = value.un.accelerometer.z;
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <ReadEvent+0x80>)
 8001468:	6093      	str	r3, [r2, #8]
            break;
 800146a:	e017      	b.n	800149c <ReadEvent+0x78>

        case SH2_GYROSCOPE_CALIBRATED:
        	BNO08x_IMU_Data[3] = value.un.gyroscope.x;
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <ReadEvent+0x80>)
 8001470:	60d3      	str	r3, [r2, #12]
        	BNO08x_IMU_Data[4] = value.un.gyroscope.y;
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <ReadEvent+0x80>)
 8001476:	6113      	str	r3, [r2, #16]
        	BNO08x_IMU_Data[5] = value.un.gyroscope.z;
 8001478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <ReadEvent+0x80>)
 800147c:	6153      	str	r3, [r2, #20]
            break;
 800147e:	e00d      	b.n	800149c <ReadEvent+0x78>

        case SH2_GAME_ROTATION_VECTOR:
        	BNO08x_IMU_Data[6] = value.un.gameRotationVector.real;
 8001480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <ReadEvent+0x80>)
 8001484:	6193      	str	r3, [r2, #24]
        	BNO08x_IMU_Data[7] = value.un.gameRotationVector.i;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <ReadEvent+0x80>)
 800148a:	61d3      	str	r3, [r2, #28]
        	BNO08x_IMU_Data[8] = value.un.gameRotationVector.j;
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <ReadEvent+0x80>)
 8001490:	6213      	str	r3, [r2, #32]
        	BNO08x_IMU_Data[9] = value.un.gameRotationVector.k;
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <ReadEvent+0x80>)
 8001496:	6253      	str	r3, [r2, #36]	; 0x24
            break;
 8001498:	e000      	b.n	800149c <ReadEvent+0x78>
        return;
 800149a:	bf00      	nop
    }
}
 800149c:	3768      	adds	r7, #104	; 0x68
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000058c 	.word	0x2000058c

080014a8 <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <opStart+0x18>
 80014ba:	f06f 0302 	mvn.w	r3, #2
 80014be:	e014      	b.n	80014ea <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4798      	blx	r3
 80014d4:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
    }

    return rc;
 80014e8:	68fb      	ldr	r3, [r7, #12]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	4613      	mov	r3, r2
 80014fe:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 800150e:	2b00      	cmp	r3, #0
 8001510:	d006      	beq.n	8001520 <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	88fa      	ldrh	r2, [r7, #6]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	4798      	blx	r3
    }
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00f      	beq.n	800157c <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 8001570:	e004      	b.n	800157c <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 8001572:	f04f 31ff 	mov.w	r1, #4294967295
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffd6 	bl	8001528 <opCompleted>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e00f      	b.n	80015b4 <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 8001594:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <getReportLen+0x44>)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800159c:	79fa      	ldrb	r2, [r7, #7]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d105      	bne.n	80015ae <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <getReportLen+0x44>)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	785b      	ldrb	r3, [r3, #1]
 80015ac:	e006      	b.n	80015bc <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b2f      	cmp	r3, #47	; 0x2f
 80015b8:	d9ec      	bls.n	8001594 <getReportLen+0x10>
        }
    }

    return 0;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	08006818 	.word	0x08006818

080015cc <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	4613      	mov	r3, r2
 80015da:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 8094 	bne.w	800171c <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        return;
 8001602:	e090      	b.n	8001726 <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	3301      	adds	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 800160a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ffb4 	bl	8001584 <getReportLen>
 800161c:	4603      	mov	r3, r0
 800161e:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 8001620:	7dbb      	ldrb	r3, [r7, #22]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d107      	bne.n	8001636 <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
            return;
 8001634:	e077      	b.n	8001726 <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	2bf1      	cmp	r3, #241	; 0xf1
 800163a:	d107      	bne.n	800164c <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 800163c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4413      	add	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	789b      	ldrb	r3, [r3, #2]
 8001648:	2b84      	cmp	r3, #132	; 0x84
 800164a:	e059      	b.n	8001700 <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2bfc      	cmp	r3, #252	; 0xfc
 8001650:	d156      	bne.n	8001700 <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	2b00      	cmp	r3, #0
 8001658:	d052      	beq.n	8001700 <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 800165a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	4413      	add	r3, r2
 8001660:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <sensorhubControlHdlr+0x160>)
 8001664:	2202      	movs	r2, #2
 8001666:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	785a      	ldrb	r2, [r3, #1]
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <sensorhubControlHdlr+0x160>)
 800166e:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	789b      	ldrb	r3, [r3, #2]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf14      	ite	ne
 800167c:	2301      	movne	r3, #1
 800167e:	2300      	moveq	r3, #0
 8001680:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <sensorhubControlHdlr+0x160>)
 8001684:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	789b      	ldrb	r3, [r3, #2]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <sensorhubControlHdlr+0x160>)
 800169a:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	789b      	ldrb	r3, [r3, #2]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <sensorhubControlHdlr+0x160>)
 80016b0:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	789b      	ldrb	r3, [r3, #2]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bf14      	ite	ne
 80016be:	2301      	movne	r3, #1
 80016c0:	2300      	moveq	r3, #0
 80016c2:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <sensorhubControlHdlr+0x160>)
 80016c6:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80016ce:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <sensorhubControlHdlr+0x160>)
 80016d2:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <sensorhubControlHdlr+0x160>)
 80016dc:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <sensorhubControlHdlr+0x160>)
 80016e6:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 80016ee:	4a0f      	ldr	r2, [pc, #60]	; (800172c <sensorhubControlHdlr+0x160>)
 80016f0:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016fa:	490c      	ldr	r1, [pc, #48]	; (800172c <sensorhubControlHdlr+0x160>)
 80016fc:	4610      	mov	r0, r2
 80016fe:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 8001700:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	4413      	add	r3, r2
 8001706:	7dba      	ldrb	r2, [r7, #22]
 8001708:	b292      	uxth	r2, r2
 800170a:	4619      	mov	r1, r3
 800170c:	69f8      	ldr	r0, [r7, #28]
 800170e:	f7ff fef0 	bl	80014f2 <opRx>
            cursor += reportLen;
 8001712:	7dbb      	ldrb	r3, [r7, #22]
 8001714:	b29a      	uxth	r2, r3
 8001716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001718:	4413      	add	r3, r2
 800171a:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cursor < len) {
 800171c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	429a      	cmp	r2, r3
 8001722:	f4ff af6f 	bcc.w	8001604 <sensorhubControlHdlr+0x38>
        }
    }
}
 8001726:	3728      	adds	r7, #40	; 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000730 	.word	0x20000730

08001730 <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	4610      	mov	r0, r2
 800174e:	4798      	blx	r3
 8001750:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 8001752:	6839      	ldr	r1, [r7, #0]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fea7 	bl	80014a8 <opStart>
 800175a:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <opProcess+0x36>
        return status;
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	e034      	b.n	80017d0 <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 800176a:	e015      	b.n	8001798 <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d104      	bne.n	800177e <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f04f 32ff 	mov.w	r2, #4294967295
 800177a:	621a      	str	r2, [r3, #32]
            break;
 800177c:	e01b      	b.n	80017b6 <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 f8ef 	bl	8003966 <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	4610      	mov	r0, r2
 8001794:	4798      	blx	r3
 8001796:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00a      	beq.n	80017b6 <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0e1      	beq.n	800176c <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad2      	subs	r2, r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3da      	bcc.n	800176c <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f06f 0205 	mvn.w	r2, #5
 80017ca:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 80017d8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80017dc:	b087      	sub	sp, #28
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	4613      	mov	r3, r2
 80017e6:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <touSTimestamp+0x80>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d204      	bcs.n	80017fc <touSTimestamp+0x24>
        rollovers++;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <touSTimestamp+0x84>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a18      	ldr	r2, [pc, #96]	; (800185c <touSTimestamp+0x84>)
 80017fa:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <touSTimestamp+0x80>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <touSTimestamp+0x84>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	469a      	mov	sl, r3
 800180a:	4693      	mov	fp, r2
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	4653      	mov	r3, sl
 8001816:	2200      	movs	r2, #0
 8001818:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 800181c:	88fa      	ldrh	r2, [r7, #6]
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	4413      	add	r3, r2
 8001822:	2264      	movs	r2, #100	; 0x64
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	461a      	mov	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4413      	add	r3, r2
 800182e:	2200      	movs	r2, #0
 8001830:	461c      	mov	r4, r3
 8001832:	4615      	mov	r5, r2
 8001834:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001838:	eb12 0804 	adds.w	r8, r2, r4
 800183c:	eb43 0905 	adc.w	r9, r3, r5
 8001840:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 8001844:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	371c      	adds	r7, #28
 800184e:	46bd      	mov	sp, r7
 8001850:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	2000074c 	.word	0x2000074c
 800185c:	20000750 	.word	0x20000750

08001860 <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b0a0      	sub	sp, #128	; 0x80
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    int32_t referenceDelta = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	67bb      	str	r3, [r7, #120]	; 0x78

    while (cursor < len) {
 800187a:	e099      	b.n	80019b0 <sensorhubInputHdlr+0x150>
        // Get next report id
        uint8_t reportId = payload[cursor];
 800187c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 800188a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe78 	bl	8001584 <getReportLen>
 8001894:	4603      	mov	r3, r0
 8001896:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        if (reportLen == 0) {
 800189a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d107      	bne.n	80018b2 <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80018b0:	e084      	b.n	80019bc <sensorhubInputHdlr+0x15c>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 80018b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80018b6:	2bfb      	cmp	r3, #251	; 0xfb
 80018b8:	d10a      	bne.n	80018d0 <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 80018ba:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	4413      	add	r3, r2
 80018c2:	667b      	str	r3, [r7, #100]	; 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 80018c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018c6:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80018ca:	425b      	negs	r3, r3
 80018cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80018ce:	e067      	b.n	80019a0 <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 80018d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80018d4:	2bfa      	cmp	r3, #250	; 0xfa
 80018d6:	d10b      	bne.n	80018f0 <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 80018d8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	4413      	add	r3, r2
 80018e0:	66bb      	str	r3, [r7, #104]	; 0x68

                referenceDelta += rpt->timebase;
 80018e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018e4:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80018e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80018ea:	4413      	add	r3, r2
 80018ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80018ee:	e057      	b.n	80019a0 <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 80018f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80018f4:	2bef      	cmp	r3, #239	; 0xef
 80018f6:	d10b      	bne.n	8001910 <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 80018f8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	4413      	add	r3, r2
 8001900:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001904:	b292      	uxth	r2, r2
 8001906:	4619      	mov	r1, r3
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f7ff fdf2 	bl	80014f2 <opRx>
 800190e:	e047      	b.n	80019a0 <sensorhubInputHdlr+0x140>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 8001910:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	4413      	add	r3, r2
 8001918:	673b      	str	r3, [r7, #112]	; 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 800191a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800191c:	3302      	adds	r3, #2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	019b      	lsls	r3, r3, #6
 8001922:	b29b      	uxth	r3, r3
 8001924:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001928:	b29a      	uxth	r2, r3
 800192a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800192c:	3303      	adds	r3, #3
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	4413      	add	r3, r2
 8001934:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 8001938:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800193c:	461a      	mov	r2, r3
 800193e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001940:	6838      	ldr	r0, [r7, #0]
 8001942:	f7ff ff49 	bl	80017d8 <touSTimestamp>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 800194e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001954:	4413      	add	r3, r2
 8001956:	2264      	movs	r2, #100	; 0x64
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	17da      	asrs	r2, r3, #31
 800195e:	461c      	mov	r4, r3
 8001960:	4615      	mov	r5, r2
 8001962:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 8001966:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800196a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                memcpy(event.report, pReport, reportLen);
 800196e:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	3312      	adds	r3, #18
 8001978:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800197a:	4618      	mov	r0, r3
 800197c:	f004 fd06 	bl	800638c <memcpy>
                event.len = reportLen;
 8001980:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001984:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <sensorhubInputHdlr+0x140>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001998:	f107 0110 	add.w	r1, r7, #16
 800199c:	4610      	mov	r0, r2
 800199e:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 80019a0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80019aa:	4413      	add	r3, r2
 80019ac:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    while (cursor < len) {
 80019b0:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	f4ff af60 	bcc.w	800187c <sensorhubInputHdlr+0x1c>
        }
    }
}
 80019bc:	3780      	adds	r7, #128	; 0x80
 80019be:	46bd      	mov	sp, r7
 80019c0:	bdb0      	pop	{r4, r5, r7, pc}

080019c2 <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4613      	mov	r3, r2
 80019d0:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 80019d6:	88fa      	ldrh	r2, [r7, #6]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	6978      	ldr	r0, [r7, #20]
 80019de:	f7ff ff3f 	bl	8001860 <sensorhubInputHdlr>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4613      	mov	r3, r2
 80019f8:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 80019fe:	88fa      	ldrh	r2, [r7, #6]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	6978      	ldr	r0, [r7, #20]
 8001a06:	f7ff ff2b 	bl	8001860 <sensorhubInputHdlr>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8001a12:	b5b0      	push	{r4, r5, r7, lr}
 8001a14:	b09c      	sub	sp, #112	; 0x70
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	66bb      	str	r3, [r7, #104]	; 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 8001a2c:	232a      	movs	r3, #42	; 0x2a
 8001a2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t reportLen = getReportLen(reportId);
 8001a32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fda4 	bl	8001584 <getReportLen>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    while (cursor < len) {
 8001a42:	e02d      	b.n	8001aa0 <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	461c      	mov	r4, r3
 8001a4a:	4615      	mov	r5, r2
 8001a4c:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 8001a50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        memcpy(event.report, payload+cursor, reportLen);
 8001a58:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	18d1      	adds	r1, r2, r3
 8001a60:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	3312      	adds	r3, #18
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 fc8e 	bl	800638c <memcpy>
        event.len = reportLen;
 8001a70:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001a74:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 8001a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8001a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a88:	f107 0110 	add.w	r1, r7, #16
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4798      	blx	r3
        }

        cursor += reportLen;
 8001a90:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    while (cursor < len) {
 8001aa0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3cc      	bcc.n	8001a44 <sensorhubInputGyroRvHdlr+0x32>
    }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	3770      	adds	r7, #112	; 0x70
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bdb0      	pop	{r4, r5, r7, pc}

08001ab4 <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d007      	beq.n	8001ade <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        return;
 8001adc:	e021      	b.n	8001b22 <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d114      	bne.n	8001b10 <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 8001aec:	6978      	ldr	r0, [r7, #20]
 8001aee:	f7ff fd2d 	bl	800154c <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <executableDeviceHdlr+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00f      	beq.n	8001b20 <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <executableDeviceHdlr+0x74>)
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4798      	blx	r3
            }
            break;
 8001b0e:	e007      	b.n	8001b20 <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
            break;
 8001b1e:	e000      	b.n	8001b22 <executableDeviceHdlr+0x6e>
            break;
 8001b20:	bf00      	nop
    }
}
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000730 	.word	0x20000730

08001b2c <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6858      	ldr	r0, [r3, #4]
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	2102      	movs	r1, #2
 8001b44:	f001 fede 	bl	8003904 <shtp_send>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08a      	sub	sp, #40	; 0x28
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <setSensorConfigStart+0x28>
 8001b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	785b      	ldrb	r3, [r3, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <setSensorConfigStart+0x3c>
 8001b82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	789b      	ldrb	r3, [r3, #2]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <setSensorConfigStart+0x50>
 8001b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	78db      	ldrb	r3, [r3, #3]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <setSensorConfigStart+0x64>
 8001baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bae:	f043 0308 	orr.w	r3, r3, #8
 8001bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <setSensorConfigStart+0x78>
 8001bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    memset(&req, 0, sizeof(req));
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	2211      	movs	r2, #17
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 fbe8 	bl	80063a8 <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 8001bd8:	23fd      	movs	r3, #253	; 0xfd
 8001bda:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001be2:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 8001be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001be8:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	88db      	ldrh	r3, [r3, #6]
 8001bee:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	2211      	movs	r2, #17
 8001c10:	4619      	mov	r1, r3
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff8a 	bl	8001b2c <sendCtrl>
 8001c18:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 8001c1a:	69f9      	ldr	r1, [r7, #28]
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fc83 	bl	8001528 <opCompleted>

    return rc;
 8001c22:	69fb      	ldr	r3, [r7, #28]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <shtpEventCallback+0x3c>)
 8001c3a:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <shtpEventCallback+0x40>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <shtpEventCallback+0x40>)
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d006      	beq.n	8001c5e <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c58:	4904      	ldr	r1, [pc, #16]	; (8001c6c <shtpEventCallback+0x40>)
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4798      	blx	r3
    }
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200005b8 	.word	0x200005b8
 8001c6c:	20000730 	.word	0x20000730

08001c70 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 8001c7c:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <sh2_open+0x114>)
 8001c7e:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <sh2_open+0x1c>
 8001c86:	f06f 0301 	mvn.w	r3, #1
 8001c8a:	e077      	b.n	8001d7c <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 8001c8c:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001c90:	2100      	movs	r1, #0
 8001c92:	69b8      	ldr	r0, [r7, #24]
 8001c94:	f004 fb88 	bl	80063a8 <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	639a      	str	r2, [r3, #56]	; 0x38
    pSh2->eventCookie = eventCookie;
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c
    pSh2->sensorCallback = 0;
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = 0;
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	645a      	str	r2, [r3, #68]	; 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fda7 	bl	8003814 <shtp_open>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd8:	e050      	b.n	8001d7c <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4929      	ldr	r1, [pc, #164]	; (8001d88 <sh2_open+0x118>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fdca 	bl	800387c <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6858      	ldr	r0, [r3, #4]
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	4a27      	ldr	r2, [pc, #156]	; (8001d8c <sh2_open+0x11c>)
 8001cf0:	2102      	movs	r1, #2
 8001cf2:	f001 fdd7 	bl	80038a4 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6858      	ldr	r0, [r3, #4]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <sh2_open+0x120>)
 8001cfe:	2103      	movs	r1, #3
 8001d00:	f001 fdd0 	bl	80038a4 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6858      	ldr	r0, [r3, #4]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <sh2_open+0x124>)
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	f001 fdc9 	bl	80038a4 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6858      	ldr	r0, [r3, #4]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4a1f      	ldr	r2, [pc, #124]	; (8001d98 <sh2_open+0x128>)
 8001d1a:	2105      	movs	r1, #5
 8001d1c:	f001 fdc2 	bl	80038a4 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6858      	ldr	r0, [r3, #4]
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <sh2_open+0x12c>)
 8001d28:	2101      	movs	r1, #1
 8001d2a:	f001 fdbb 	bl	80038a4 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4798      	blx	r3
 8001d3c:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8001d42:	e00c      	b.n	8001d5e <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fe0c 	bl	8003966 <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4798      	blx	r3
 8001d5c:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <sh2_open+0x130>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d807      	bhi.n	8001d7a <sh2_open+0x10a>
           (!pSh2->resetComplete))
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	7a1b      	ldrb	r3, [r3, #8]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f083 0301 	eor.w	r3, r3, #1
 8001d74:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1e4      	bne.n	8001d44 <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200005b8 	.word	0x200005b8
 8001d88:	08001c2d 	.word	0x08001c2d
 8001d8c:	080015cd 	.word	0x080015cd
 8001d90:	080019c3 	.word	0x080019c3
 8001d94:	080019eb 	.word	0x080019eb
 8001d98:	08001a13 	.word	0x08001a13
 8001d9c:	08001ab5 	.word	0x08001ab5
 8001da0:	00030d3f 	.word	0x00030d3f

08001da4 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <sh2_setSensorCallback+0x28>)
 8001db0:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = cookie;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44

    return SH2_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	200005b8 	.word	0x200005b8

08001dd0 <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <sh2_setSensorConfig+0x4c>)
 8001dde:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	e012      	b.n	8001e14 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3324      	adds	r3, #36	; 0x24
 8001df2:	2210      	movs	r2, #16
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fad6 	bl	80063a8 <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	79fa      	ldrb	r2, [r7, #7]
 8001e00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 8001e0a:	4905      	ldr	r1, [pc, #20]	; (8001e20 <sh2_setSensorConfig+0x50>)
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff fc8f 	bl	8001730 <opProcess>
 8001e12:	4603      	mov	r3, r0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200005b8 	.word	0x200005b8
 8001e20:	08006878 	.word	0x08006878

08001e24 <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	7c5a      	ldrb	r2, [r3, #17]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e4c:	d00b      	beq.n	8001e66 <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	7cda      	ldrb	r2, [r3, #19]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	7d1b      	ldrb	r3, [r3, #20]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	709a      	strb	r2, [r3, #2]
 8001e64:	e005      	b.n	8001e72 <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	2b2d      	cmp	r3, #45	; 0x2d
 8001e7a:	f200 8155 	bhi.w	8002128 <sh2_decodeSensorEvent+0x304>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <sh2_decodeSensorEvent+0x60>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001f49 	.word	0x08001f49
 8001e88:	08001f79 	.word	0x08001f79
 8001e8c:	08001f9d 	.word	0x08001f9d
 8001e90:	08001f55 	.word	0x08001f55
 8001e94:	08001fb5 	.word	0x08001fb5
 8001e98:	08001f61 	.word	0x08001f61
 8001e9c:	08001f85 	.word	0x08001f85
 8001ea0:	08001fc1 	.word	0x08001fc1
 8001ea4:	08001fcd 	.word	0x08001fcd
 8001ea8:	08001fd9 	.word	0x08001fd9
 8001eac:	08001fe5 	.word	0x08001fe5
 8001eb0:	08001ff1 	.word	0x08001ff1
 8001eb4:	08001ffd 	.word	0x08001ffd
 8001eb8:	08002009 	.word	0x08002009
 8001ebc:	08001fa9 	.word	0x08001fa9
 8001ec0:	08002021 	.word	0x08002021
 8001ec4:	08002039 	.word	0x08002039
 8001ec8:	08002045 	.word	0x08002045
 8001ecc:	08002051 	.word	0x08002051
 8001ed0:	08001f3d 	.word	0x08001f3d
 8001ed4:	08001f6d 	.word	0x08001f6d
 8001ed8:	08001f91 	.word	0x08001f91
 8001edc:	08002015 	.word	0x08002015
 8001ee0:	0800202d 	.word	0x0800202d
 8001ee4:	0800205d 	.word	0x0800205d
 8001ee8:	08002069 	.word	0x08002069
 8001eec:	08002075 	.word	0x08002075
 8001ef0:	08002081 	.word	0x08002081
 8001ef4:	08002129 	.word	0x08002129
 8001ef8:	0800208d 	.word	0x0800208d
 8001efc:	08002099 	.word	0x08002099
 8001f00:	080020a5 	.word	0x080020a5
 8001f04:	080020b1 	.word	0x080020b1
 8001f08:	080020bd 	.word	0x080020bd
 8001f0c:	080020c9 	.word	0x080020c9
 8001f10:	08002129 	.word	0x08002129
 8001f14:	08002129 	.word	0x08002129
 8001f18:	08002129 	.word	0x08002129
 8001f1c:	08002129 	.word	0x08002129
 8001f20:	080020d5 	.word	0x080020d5
 8001f24:	080020e1 	.word	0x080020e1
 8001f28:	080020ed 	.word	0x080020ed
 8001f2c:	080020f9 	.word	0x080020f9
 8001f30:	08002105 	.word	0x08002105
 8001f34:	08002111 	.word	0x08002111
 8001f38:	0800211d 	.word	0x0800211d
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 8001f3c:	6839      	ldr	r1, [r7, #0]
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8fc 	bl	800213c <decodeRawAccelerometer>
 8001f44:	60f8      	str	r0, [r7, #12]
            break;
 8001f46:	e0f3      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 8001f48:	6839      	ldr	r1, [r7, #0]
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f924 	bl	8002198 <decodeAccelerometer>
 8001f50:	60f8      	str	r0, [r7, #12]
            break;
 8001f52:	e0ed      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 8001f54:	6839      	ldr	r1, [r7, #0]
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f95e 	bl	8002218 <decodeLinearAcceleration>
 8001f5c:	60f8      	str	r0, [r7, #12]
            break;
 8001f5e:	e0e7      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f998 	bl	8002298 <decodeGravity>
 8001f68:	60f8      	str	r0, [r7, #12]
            break;
 8001f6a:	e0e1      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f9d2 	bl	8002318 <decodeRawGyroscope>
 8001f74:	60f8      	str	r0, [r7, #12]
            break;
 8001f76:	e0db      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fa04 	bl	8002388 <decodeGyroscopeCalibrated>
 8001f80:	60f8      	str	r0, [r7, #12]
            break;
 8001f82:	e0d5      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fa3e 	bl	8002408 <decodeGyroscopeUncal>
 8001f8c:	60f8      	str	r0, [r7, #12]
            break;
 8001f8e:	e0cf      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 8001f90:	6839      	ldr	r1, [r7, #0]
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 faaa 	bl	80024ec <decodeRawMagnetometer>
 8001f98:	60f8      	str	r0, [r7, #12]
            break;
 8001f9a:	e0c9      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fad2 	bl	8002548 <decodeMagneticFieldCalibrated>
 8001fa4:	60f8      	str	r0, [r7, #12]
            break;
 8001fa6:	e0c3      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 8001fa8:	6839      	ldr	r1, [r7, #0]
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fb0c 	bl	80025c8 <decodeMagneticFieldUncal>
 8001fb0:	60f8      	str	r0, [r7, #12]
            break;
 8001fb2:	e0bd      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fb78 	bl	80026ac <decodeRotationVector>
 8001fbc:	60f8      	str	r0, [r7, #12]
            break;
 8001fbe:	e0b7      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 8001fc0:	6839      	ldr	r1, [r7, #0]
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fbd6 	bl	8002774 <decodeGameRotationVector>
 8001fc8:	60f8      	str	r0, [r7, #12]
            break;
 8001fca:	e0b1      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 8001fcc:	6839      	ldr	r1, [r7, #0]
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fc20 	bl	8002814 <decodeGeomagneticRotationVector>
 8001fd4:	60f8      	str	r0, [r7, #12]
            break;
 8001fd6:	e0ab      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 8001fd8:	6839      	ldr	r1, [r7, #0]
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fc7e 	bl	80028dc <decodePressure>
 8001fe0:	60f8      	str	r0, [r7, #12]
            break;
 8001fe2:	e0a5      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fc94 	bl	8002914 <decodeAmbientLight>
 8001fec:	60f8      	str	r0, [r7, #12]
            break;
 8001fee:	e09f      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fcaa 	bl	800294c <decodeHumidity>
 8001ff8:	60f8      	str	r0, [r7, #12]
            break;
 8001ffa:	e099      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 8001ffc:	6839      	ldr	r1, [r7, #0]
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fcc2 	bl	8002988 <decodeProximity>
 8002004:	60f8      	str	r0, [r7, #12]
            break;
 8002006:	e093      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 8002008:	6839      	ldr	r1, [r7, #0]
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fcda 	bl	80029c4 <decodeTemperature>
 8002010:	60f8      	str	r0, [r7, #12]
            break;
 8002012:	e08d      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fcf2 	bl	8002a00 <decodeReserved>
 800201c:	60f8      	str	r0, [r7, #12]
            break;
 800201e:	e087      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 8002020:	6839      	ldr	r1, [r7, #0]
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fd0a 	bl	8002a3c <decodeTapDetector>
 8002028:	60f8      	str	r0, [r7, #12]
            break;
 800202a:	e081      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fd14 	bl	8002a5c <decodeStepDetector>
 8002034:	60f8      	str	r0, [r7, #12]
            break;
 8002036:	e07b      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 8002038:	6839      	ldr	r1, [r7, #0]
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fd20 	bl	8002a80 <decodeStepCounter>
 8002040:	60f8      	str	r0, [r7, #12]
            break;
 8002042:	e075      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fd35 	bl	8002ab6 <decodeSignificantMotion>
 800204c:	60f8      	str	r0, [r7, #12]
            break;
 800204e:	e06f      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fd42 	bl	8002adc <decodeStabilityClassifier>
 8002058:	60f8      	str	r0, [r7, #12]
            break;
 800205a:	e069      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fd4c 	bl	8002afc <decodeShakeDetector>
 8002064:	60f8      	str	r0, [r7, #12]
            break;
 8002066:	e063      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 8002068:	6839      	ldr	r1, [r7, #0]
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fd59 	bl	8002b22 <decodeFlipDetector>
 8002070:	60f8      	str	r0, [r7, #12]
            break;
 8002072:	e05d      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fd66 	bl	8002b48 <decodePickupDetector>
 800207c:	60f8      	str	r0, [r7, #12]
            break;
 800207e:	e057      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 8002080:	6839      	ldr	r1, [r7, #0]
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fd73 	bl	8002b6e <decodeStabilityDetector>
 8002088:	60f8      	str	r0, [r7, #12]
            break;
 800208a:	e051      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 800208c:	6839      	ldr	r1, [r7, #0]
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fd80 	bl	8002b94 <decodePersonalActivityClassifier>
 8002094:	60f8      	str	r0, [r7, #12]
            break;
 8002096:	e04b      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 8002098:	6839      	ldr	r1, [r7, #0]
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fdad 	bl	8002bfa <decodeSleepDetector>
 80020a0:	60f8      	str	r0, [r7, #12]
            break;
 80020a2:	e045      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 80020a4:	6839      	ldr	r1, [r7, #0]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fdb7 	bl	8002c1a <decodeTiltDetector>
 80020ac:	60f8      	str	r0, [r7, #12]
            break;
 80020ae:	e03f      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 80020b0:	6839      	ldr	r1, [r7, #0]
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fdc4 	bl	8002c40 <decodePocketDetector>
 80020b8:	60f8      	str	r0, [r7, #12]
            break;
 80020ba:	e039      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 80020bc:	6839      	ldr	r1, [r7, #0]
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fdd1 	bl	8002c66 <decodeCircleDetector>
 80020c4:	60f8      	str	r0, [r7, #12]
            break;
 80020c6:	e033      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 80020c8:	6839      	ldr	r1, [r7, #0]
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fdde 	bl	8002c8c <decodeHeartRateMonitor>
 80020d0:	60f8      	str	r0, [r7, #12]
            break;
 80020d2:	e02d      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fdec 	bl	8002cb4 <decodeArvrStabilizedRV>
 80020dc:	60f8      	str	r0, [r7, #12]
            break;
 80020de:	e027      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fe4a 	bl	8002d7c <decodeArvrStabilizedGRV>
 80020e8:	60f8      	str	r0, [r7, #12]
            break;
 80020ea:	e021      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 80020ec:	6839      	ldr	r1, [r7, #0]
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fe94 	bl	8002e1c <decodeGyroIntegratedRV>
 80020f4:	60f8      	str	r0, [r7, #12]
            break;
 80020f6:	e01b      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 80020f8:	6839      	ldr	r1, [r7, #0]
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 ff14 	bl	8002f28 <decodeIZroRequest>
 8002100:	60f8      	str	r0, [r7, #12]
            break;
 8002102:	e015      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 8002104:	6839      	ldr	r1, [r7, #0]
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 ff22 	bl	8002f50 <decodeRawOptFlow>
 800210c:	60f8      	str	r0, [r7, #12]
            break;
 800210e:	e00f      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 ff9a 	bl	800304c <decodeDeadReckoningPose>
 8002118:	60f8      	str	r0, [r7, #12]
            break;
 800211a:	e009      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f001 f87e 	bl	8003220 <decodeWheelEncoder>
 8002124:	60f8      	str	r0, [r7, #12]
            break;
 8002126:	e003      	b.n	8002130 <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 8002128:	f04f 33ff 	mov.w	r3, #4294967295
 800212c:	60fb      	str	r3, [r7, #12]
            break;
 800212e:	bf00      	nop
    }

    return rc;
 8002130:	68fb      	ldr	r3, [r7, #12]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop

0800213c <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	3316      	adds	r3, #22
 800214a:	4618      	mov	r0, r3
 800214c:	f001 f8d9 	bl	8003302 <read16>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	3318      	adds	r3, #24
 800215c:	4618      	mov	r0, r3
 800215e:	f001 f8d0 	bl	8003302 <read16>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	331a      	adds	r3, #26
 800216e:	4618      	mov	r0, r3
 8002170:	f001 f8c7 	bl	8003302 <read16>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	331e      	adds	r3, #30
 8002180:	4618      	mov	r0, r3
 8002182:	f001 f8d4 	bl	800332e <read32>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	3316      	adds	r3, #22
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 f8ab 	bl	8003302 <read16>
 80021ac:	4603      	mov	r3, r0
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002214 <decodeAccelerometer+0x7c>
 80021ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	3318      	adds	r3, #24
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 f89a 	bl	8003302 <read16>
 80021ce:	4603      	mov	r3, r0
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002214 <decodeAccelerometer+0x7c>
 80021dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	331a      	adds	r3, #26
 80021ea:	4618      	mov	r0, r3
 80021ec:	f001 f889 	bl	8003302 <read16>
 80021f0:	4603      	mov	r3, r0
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002214 <decodeAccelerometer+0x7c>
 80021fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	3b800000 	.word	0x3b800000

08002218 <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	3316      	adds	r3, #22
 8002226:	4618      	mov	r0, r3
 8002228:	f001 f86b 	bl	8003302 <read16>
 800222c:	4603      	mov	r3, r0
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002236:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002294 <decodeLinearAcceleration+0x7c>
 800223a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	3318      	adds	r3, #24
 8002248:	4618      	mov	r0, r3
 800224a:	f001 f85a 	bl	8003302 <read16>
 800224e:	4603      	mov	r3, r0
 8002250:	ee07 3a90 	vmov	s15, r3
 8002254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002258:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002294 <decodeLinearAcceleration+0x7c>
 800225c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	331a      	adds	r3, #26
 800226a:	4618      	mov	r0, r3
 800226c:	f001 f849 	bl	8003302 <read16>
 8002270:	4603      	mov	r3, r0
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800227a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002294 <decodeLinearAcceleration+0x7c>
 800227e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	3b800000 	.word	0x3b800000

08002298 <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	3316      	adds	r3, #22
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 f82b 	bl	8003302 <read16>
 80022ac:	4603      	mov	r3, r0
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002314 <decodeGravity+0x7c>
 80022ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3318      	adds	r3, #24
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 f81a 	bl	8003302 <read16>
 80022ce:	4603      	mov	r3, r0
 80022d0:	ee07 3a90 	vmov	s15, r3
 80022d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002314 <decodeGravity+0x7c>
 80022dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	331a      	adds	r3, #26
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 f809 	bl	8003302 <read16>
 80022f0:	4603      	mov	r3, r0
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002314 <decodeGravity+0x7c>
 80022fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	3b800000 	.word	0x3b800000

08002318 <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	3316      	adds	r3, #22
 8002326:	4618      	mov	r0, r3
 8002328:	f000 ffeb 	bl	8003302 <read16>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	3318      	adds	r3, #24
 8002338:	4618      	mov	r0, r3
 800233a:	f000 ffe2 	bl	8003302 <read16>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	331a      	adds	r3, #26
 800234a:	4618      	mov	r0, r3
 800234c:	f000 ffd9 	bl	8003302 <read16>
 8002350:	4603      	mov	r3, r0
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	331c      	adds	r3, #28
 800235c:	4618      	mov	r0, r3
 800235e:	f000 ffd0 	bl	8003302 <read16>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	331e      	adds	r3, #30
 800236e:	4618      	mov	r0, r3
 8002370:	f000 ffdd 	bl	800332e <read32>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3316      	adds	r3, #22
 8002396:	4618      	mov	r0, r3
 8002398:	f000 ffb3 	bl	8003302 <read16>
 800239c:	4603      	mov	r3, r0
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002404 <decodeGyroscopeCalibrated+0x7c>
 80023aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	3318      	adds	r3, #24
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 ffa2 	bl	8003302 <read16>
 80023be:	4603      	mov	r3, r0
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002404 <decodeGyroscopeCalibrated+0x7c>
 80023cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	331a      	adds	r3, #26
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 ff91 	bl	8003302 <read16>
 80023e0:	4603      	mov	r3, r0
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ea:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002404 <decodeGyroscopeCalibrated+0x7c>
 80023ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	3b000000 	.word	0x3b000000

08002408 <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	3316      	adds	r3, #22
 8002416:	4618      	mov	r0, r3
 8002418:	f000 ff73 	bl	8003302 <read16>
 800241c:	4603      	mov	r3, r0
 800241e:	ee07 3a90 	vmov	s15, r3
 8002422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002426:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80024e8 <decodeGyroscopeUncal+0xe0>
 800242a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	3318      	adds	r3, #24
 8002438:	4618      	mov	r0, r3
 800243a:	f000 ff62 	bl	8003302 <read16>
 800243e:	4603      	mov	r3, r0
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002448:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80024e8 <decodeGyroscopeUncal+0xe0>
 800244c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	331a      	adds	r3, #26
 800245a:	4618      	mov	r0, r3
 800245c:	f000 ff51 	bl	8003302 <read16>
 8002460:	4603      	mov	r3, r0
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800246a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80024e8 <decodeGyroscopeUncal+0xe0>
 800246e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	331c      	adds	r3, #28
 800247c:	4618      	mov	r0, r3
 800247e:	f000 ff40 	bl	8003302 <read16>
 8002482:	4603      	mov	r3, r0
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80024e8 <decodeGyroscopeUncal+0xe0>
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	331e      	adds	r3, #30
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 ff2f 	bl	8003302 <read16>
 80024a4:	4603      	mov	r3, r0
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80024e8 <decodeGyroscopeUncal+0xe0>
 80024b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	3320      	adds	r3, #32
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 ff1e 	bl	8003302 <read16>
 80024c6:	4603      	mov	r3, r0
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80024e8 <decodeGyroscopeUncal+0xe0>
 80024d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	3b000000 	.word	0x3b000000

080024ec <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	3316      	adds	r3, #22
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 ff01 	bl	8003302 <read16>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3318      	adds	r3, #24
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fef8 	bl	8003302 <read16>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	331a      	adds	r3, #26
 800251e:	4618      	mov	r0, r3
 8002520:	f000 feef 	bl	8003302 <read16>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	331e      	adds	r3, #30
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fefc 	bl	800332e <read32>
 8002536:	4603      	mov	r3, r0
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	3316      	adds	r3, #22
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fed3 	bl	8003302 <read16>
 800255c:	4603      	mov	r3, r0
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002566:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80025c4 <decodeMagneticFieldCalibrated+0x7c>
 800256a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	3318      	adds	r3, #24
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fec2 	bl	8003302 <read16>
 800257e:	4603      	mov	r3, r0
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002588:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80025c4 <decodeMagneticFieldCalibrated+0x7c>
 800258c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	331a      	adds	r3, #26
 800259a:	4618      	mov	r0, r3
 800259c:	f000 feb1 	bl	8003302 <read16>
 80025a0:	4603      	mov	r3, r0
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80025c4 <decodeMagneticFieldCalibrated+0x7c>
 80025ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	3d800000 	.word	0x3d800000

080025c8 <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	3316      	adds	r3, #22
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fe93 	bl	8003302 <read16>
 80025dc:	4603      	mov	r3, r0
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80026a8 <decodeMagneticFieldUncal+0xe0>
 80025ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	3318      	adds	r3, #24
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fe82 	bl	8003302 <read16>
 80025fe:	4603      	mov	r3, r0
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002608:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80026a8 <decodeMagneticFieldUncal+0xe0>
 800260c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	331a      	adds	r3, #26
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fe71 	bl	8003302 <read16>
 8002620:	4603      	mov	r3, r0
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80026a8 <decodeMagneticFieldUncal+0xe0>
 800262e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	331c      	adds	r3, #28
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fe60 	bl	8003302 <read16>
 8002642:	4603      	mov	r3, r0
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800264c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80026a8 <decodeMagneticFieldUncal+0xe0>
 8002650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	331e      	adds	r3, #30
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fe4f 	bl	8003302 <read16>
 8002664:	4603      	mov	r3, r0
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800266e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80026a8 <decodeMagneticFieldUncal+0xe0>
 8002672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3320      	adds	r3, #32
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fe3e 	bl	8003302 <read16>
 8002686:	4603      	mov	r3, r0
 8002688:	ee07 3a90 	vmov	s15, r3
 800268c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002690:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80026a8 <decodeMagneticFieldUncal+0xe0>
 8002694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	3d800000 	.word	0x3d800000

080026ac <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	3316      	adds	r3, #22
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fe21 	bl	8003302 <read16>
 80026c0:	4603      	mov	r3, r0
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ca:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800276c <decodeRotationVector+0xc0>
 80026ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	3318      	adds	r3, #24
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fe10 	bl	8003302 <read16>
 80026e2:	4603      	mov	r3, r0
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ec:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800276c <decodeRotationVector+0xc0>
 80026f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	331a      	adds	r3, #26
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fdff 	bl	8003302 <read16>
 8002704:	4603      	mov	r3, r0
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800276c <decodeRotationVector+0xc0>
 8002712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	331c      	adds	r3, #28
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fdee 	bl	8003302 <read16>
 8002726:	4603      	mov	r3, r0
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002730:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800276c <decodeRotationVector+0xc0>
 8002734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	331e      	adds	r3, #30
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fddd 	bl	8003302 <read16>
 8002748:	4603      	mov	r3, r0
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002752:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002770 <decodeRotationVector+0xc4>
 8002756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	38800000 	.word	0x38800000
 8002770:	39800000 	.word	0x39800000

08002774 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	3316      	adds	r3, #22
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fdbd 	bl	8003302 <read16>
 8002788:	4603      	mov	r3, r0
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002792:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002810 <decodeGameRotationVector+0x9c>
 8002796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	3318      	adds	r3, #24
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fdac 	bl	8003302 <read16>
 80027aa:	4603      	mov	r3, r0
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002810 <decodeGameRotationVector+0x9c>
 80027b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	331a      	adds	r3, #26
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fd9b 	bl	8003302 <read16>
 80027cc:	4603      	mov	r3, r0
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002810 <decodeGameRotationVector+0x9c>
 80027da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	331c      	adds	r3, #28
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fd8a 	bl	8003302 <read16>
 80027ee:	4603      	mov	r3, r0
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002810 <decodeGameRotationVector+0x9c>
 80027fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	38800000 	.word	0x38800000

08002814 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3316      	adds	r3, #22
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fd6d 	bl	8003302 <read16>
 8002828:	4603      	mov	r3, r0
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002832:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80028d4 <decodeGeomagneticRotationVector+0xc0>
 8002836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	3318      	adds	r3, #24
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fd5c 	bl	8003302 <read16>
 800284a:	4603      	mov	r3, r0
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002854:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80028d4 <decodeGeomagneticRotationVector+0xc0>
 8002858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	331a      	adds	r3, #26
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fd4b 	bl	8003302 <read16>
 800286c:	4603      	mov	r3, r0
 800286e:	ee07 3a90 	vmov	s15, r3
 8002872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002876:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80028d4 <decodeGeomagneticRotationVector+0xc0>
 800287a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	331c      	adds	r3, #28
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fd3a 	bl	8003302 <read16>
 800288e:	4603      	mov	r3, r0
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002898:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80028d4 <decodeGeomagneticRotationVector+0xc0>
 800289c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	331e      	adds	r3, #30
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fd29 	bl	8003302 <read16>
 80028b0:	4603      	mov	r3, r0
 80028b2:	ee07 3a90 	vmov	s15, r3
 80028b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ba:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028d8 <decodeGeomagneticRotationVector+0xc4>
 80028be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	38800000 	.word	0x38800000
 80028d8:	39800000 	.word	0x39800000

080028dc <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	3316      	adds	r3, #22
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fd1f 	bl	800332e <read32>
 80028f0:	ee07 0a90 	vmov	s15, r0
 80028f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002910 <decodePressure+0x34>
 80028fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	35800000 	.word	0x35800000

08002914 <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	3316      	adds	r3, #22
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fd03 	bl	800332e <read32>
 8002928:	ee07 0a90 	vmov	s15, r0
 800292c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002930:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002948 <decodeAmbientLight+0x34>
 8002934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	3b800000 	.word	0x3b800000

0800294c <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	3316      	adds	r3, #22
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fcd1 	bl	8003302 <read16>
 8002960:	4603      	mov	r3, r0
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002984 <decodeHumidity+0x38>
 800296e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	3b800000 	.word	0x3b800000

08002988 <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	3316      	adds	r3, #22
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fcb3 	bl	8003302 <read16>
 800299c:	4603      	mov	r3, r0
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80029c0 <decodeProximity+0x38>
 80029aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	3d800000 	.word	0x3d800000

080029c4 <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	3316      	adds	r3, #22
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fc95 	bl	8003302 <read16>
 80029d8:	4603      	mov	r3, r0
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80029fc <decodeTemperature+0x38>
 80029e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	3c000000 	.word	0x3c000000

08002a00 <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	3316      	adds	r3, #22
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fc77 	bl	8003302 <read16>
 8002a14:	4603      	mov	r3, r0
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002a38 <decodeReserved+0x38>
 8002a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	3c000000 	.word	0x3c000000

08002a3c <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	7d9a      	ldrb	r2, [r3, #22]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	3316      	adds	r3, #22
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fc1c 	bl	80032a8 <readu32>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	3316      	adds	r3, #22
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fc0a 	bl	80032a8 <readu32>
 8002a94:	4602      	mov	r2, r0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	331a      	adds	r3, #26
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fc02 	bl	80032a8 <readu32>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	3316      	adds	r3, #22
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fbd9 	bl	800327c <readu16>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7d9a      	ldrb	r2, [r3, #22]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	3316      	adds	r3, #22
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fbb6 	bl	800327c <readu16>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	3316      	adds	r3, #22
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fba3 	bl	800327c <readu16>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	3316      	adds	r3, #22
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fb90 	bl	800327c <readu16>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	3316      	adds	r3, #22
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fb7d 	bl	800327c <readu16>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	7d9b      	ldrb	r3, [r3, #22]
 8002ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	7d9b      	ldrb	r3, [r3, #22]
 8002bb0:	b25b      	sxtb	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	09db      	lsrs	r3, r3, #7
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	7dda      	ldrb	r2, [r3, #23]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e00d      	b.n	8002be6 <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3306      	adds	r3, #6
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	7c99      	ldrb	r1, [r3, #18]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3317      	adds	r3, #23
 8002bdc:	460a      	mov	r2, r1
 8002bde:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3301      	adds	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	ddee      	ble.n	8002bca <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	7d9a      	ldrb	r2, [r3, #22]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	3316      	adds	r3, #22
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fb27 	bl	800327c <readu16>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	3316      	adds	r3, #22
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fb14 	bl	800327c <readu16>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461a      	mov	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3316      	adds	r3, #22
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fb01 	bl	800327c <readu16>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	3316      	adds	r3, #22
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 faee 	bl	800327c <readu16>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	3316      	adds	r3, #22
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fb1d 	bl	8003302 <read16>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cd2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002d74 <decodeArvrStabilizedRV+0xc0>
 8002cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fb0c 	bl	8003302 <read16>
 8002cea:	4603      	mov	r3, r0
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002d74 <decodeArvrStabilizedRV+0xc0>
 8002cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	331a      	adds	r3, #26
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fafb 	bl	8003302 <read16>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d16:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d74 <decodeArvrStabilizedRV+0xc0>
 8002d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	331c      	adds	r3, #28
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 faea 	bl	8003302 <read16>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	ee07 3a90 	vmov	s15, r3
 8002d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d38:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002d74 <decodeArvrStabilizedRV+0xc0>
 8002d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	331e      	adds	r3, #30
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fad9 	bl	8003302 <read16>
 8002d50:	4603      	mov	r3, r0
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d5a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002d78 <decodeArvrStabilizedRV+0xc4>
 8002d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	38800000 	.word	0x38800000
 8002d78:	39800000 	.word	0x39800000

08002d7c <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	3316      	adds	r3, #22
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fab9 	bl	8003302 <read16>
 8002d90:	4603      	mov	r3, r0
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002e18 <decodeArvrStabilizedGRV+0x9c>
 8002d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	3318      	adds	r3, #24
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 faa8 	bl	8003302 <read16>
 8002db2:	4603      	mov	r3, r0
 8002db4:	ee07 3a90 	vmov	s15, r3
 8002db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dbc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002e18 <decodeArvrStabilizedGRV+0x9c>
 8002dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	331a      	adds	r3, #26
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fa97 	bl	8003302 <read16>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dde:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002e18 <decodeArvrStabilizedGRV+0x9c>
 8002de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	331c      	adds	r3, #28
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fa86 	bl	8003302 <read16>
 8002df6:	4603      	mov	r3, r0
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e00:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002e18 <decodeArvrStabilizedGRV+0x9c>
 8002e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	38800000 	.word	0x38800000

08002e1c <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	3312      	adds	r3, #18
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fa69 	bl	8003302 <read16>
 8002e30:	4603      	mov	r3, r0
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e3a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002f20 <decodeGyroIntegratedRV+0x104>
 8002e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	3314      	adds	r3, #20
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fa58 	bl	8003302 <read16>
 8002e52:	4603      	mov	r3, r0
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e5c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002f20 <decodeGyroIntegratedRV+0x104>
 8002e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	3316      	adds	r3, #22
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fa47 	bl	8003302 <read16>
 8002e74:	4603      	mov	r3, r0
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e7e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002f20 <decodeGyroIntegratedRV+0x104>
 8002e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	3318      	adds	r3, #24
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fa36 	bl	8003302 <read16>
 8002e96:	4603      	mov	r3, r0
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002f20 <decodeGyroIntegratedRV+0x104>
 8002ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	331a      	adds	r3, #26
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fa25 	bl	8003302 <read16>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ec2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002f24 <decodeGyroIntegratedRV+0x108>
 8002ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	331c      	adds	r3, #28
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fa14 	bl	8003302 <read16>
 8002eda:	4603      	mov	r3, r0
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002f24 <decodeGyroIntegratedRV+0x108>
 8002ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	331e      	adds	r3, #30
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fa03 	bl	8003302 <read16>
 8002efc:	4603      	mov	r3, r0
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f06:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002f24 <decodeGyroIntegratedRV+0x108>
 8002f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    return SH2_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	38800000 	.word	0x38800000
 8002f24:	3a800000 	.word	0x3a800000

08002f28 <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	7d9a      	ldrb	r2, [r3, #22]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	7dda      	ldrb	r2, [r3, #23]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	3316      	adds	r3, #22
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f9cf 	bl	8003302 <read16>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461a      	mov	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	3318      	adds	r3, #24
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 f9c6 	bl	8003302 <read16>
 8002f76:	4603      	mov	r3, r0
 8002f78:	461a      	mov	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	331a      	adds	r3, #26
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f9bd 	bl	8003302 <read16>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	331c      	adds	r3, #28
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f9a5 	bl	80032e4 <read8>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	331d      	adds	r3, #29
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f99b 	bl	80032e4 <read8>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	331e      	adds	r3, #30
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f991 	bl	80032e4 <read8>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	331f      	adds	r3, #31
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f987 	bl	80032e4 <read8>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f97d 	bl	80032e4 <read8>
 8002fea:	4603      	mov	r3, r0
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	3321      	adds	r3, #33	; 0x21
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f973 	bl	80032e4 <read8>
 8002ffe:	4603      	mov	r3, r0
 8003000:	b2da      	uxtb	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	3322      	adds	r3, #34	; 0x22
 800300c:	4618      	mov	r0, r3
 800300e:	f000 f969 	bl	80032e4 <read8>
 8003012:	4603      	mov	r3, r0
 8003014:	b2da      	uxtb	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	3324      	adds	r3, #36	; 0x24
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f96e 	bl	8003302 <read16>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	3326      	adds	r3, #38	; 0x26
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f97b 	bl	800332e <read32>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	3316      	adds	r3, #22
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f967 	bl	800332e <read32>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	331a      	adds	r3, #26
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f95e 	bl	800332e <read32>
 8003072:	ee07 0a90 	vmov	s15, r0
 8003076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800307a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8003214 <decodeDeadReckoningPose+0x1c8>
 800307e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	331e      	adds	r3, #30
 800308c:	4618      	mov	r0, r3
 800308e:	f000 f94e 	bl	800332e <read32>
 8003092:	ee07 0a90 	vmov	s15, r0
 8003096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800309a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003214 <decodeDeadReckoningPose+0x1c8>
 800309e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	3322      	adds	r3, #34	; 0x22
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 f93e 	bl	800332e <read32>
 80030b2:	ee07 0a90 	vmov	s15, r0
 80030b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ba:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003214 <decodeDeadReckoningPose+0x1c8>
 80030be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	3326      	adds	r3, #38	; 0x26
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f92e 	bl	800332e <read32>
 80030d2:	ee07 0a90 	vmov	s15, r0
 80030d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030da:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003218 <decodeDeadReckoningPose+0x1cc>
 80030de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	332a      	adds	r3, #42	; 0x2a
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 f91e 	bl	800332e <read32>
 80030f2:	ee07 0a90 	vmov	s15, r0
 80030f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fa:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003218 <decodeDeadReckoningPose+0x1cc>
 80030fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	332e      	adds	r3, #46	; 0x2e
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f90e 	bl	800332e <read32>
 8003112:	ee07 0a90 	vmov	s15, r0
 8003116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800311a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003218 <decodeDeadReckoningPose+0x1cc>
 800311e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	3332      	adds	r3, #50	; 0x32
 800312c:	4618      	mov	r0, r3
 800312e:	f000 f8fe 	bl	800332e <read32>
 8003132:	ee07 0a90 	vmov	s15, r0
 8003136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800313a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003218 <decodeDeadReckoningPose+0x1cc>
 800313e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	3336      	adds	r3, #54	; 0x36
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f8ee 	bl	800332e <read32>
 8003152:	ee07 0a90 	vmov	s15, r0
 8003156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800321c <decodeDeadReckoningPose+0x1d0>
 800315e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	333a      	adds	r3, #58	; 0x3a
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f8de 	bl	800332e <read32>
 8003172:	ee07 0a90 	vmov	s15, r0
 8003176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800321c <decodeDeadReckoningPose+0x1d0>
 800317e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	333e      	adds	r3, #62	; 0x3e
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f8ce 	bl	800332e <read32>
 8003192:	ee07 0a90 	vmov	s15, r0
 8003196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800319a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800321c <decodeDeadReckoningPose+0x1d0>
 800319e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	3342      	adds	r3, #66	; 0x42
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 f8be 	bl	800332e <read32>
 80031b2:	ee07 0a90 	vmov	s15, r0
 80031b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ba:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800321c <decodeDeadReckoningPose+0x1d0>
 80031be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	3346      	adds	r3, #70	; 0x46
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f8ae 	bl	800332e <read32>
 80031d2:	ee07 0a90 	vmov	s15, r0
 80031d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800321c <decodeDeadReckoningPose+0x1d0>
 80031de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	334a      	adds	r3, #74	; 0x4a
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f89e 	bl	800332e <read32>
 80031f2:	ee07 0a90 	vmov	s15, r0
 80031f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800321c <decodeDeadReckoningPose+0x1d0>
 80031fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    return SH2_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	37000000 	.word	0x37000000
 8003218:	30800000 	.word	0x30800000
 800321c:	33000000 	.word	0x33000000

08003220 <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	3316      	adds	r3, #22
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f87d 	bl	800332e <read32>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	331a      	adds	r3, #26
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f84f 	bl	80032e4 <read8>
 8003246:	4603      	mov	r3, r0
 8003248:	b2da      	uxtb	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	331b      	adds	r3, #27
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f846 	bl	80032e4 <read8>
 8003258:	4603      	mov	r3, r0
 800325a:	b2da      	uxtb	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	331c      	adds	r3, #28
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f84c 	bl	8003302 <read16>
 800326a:	4603      	mov	r3, r0
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b21a      	sxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3301      	adds	r3, #1
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	b21b      	sxth	r3, r3
 8003294:	4313      	orrs	r3, r2
 8003296:	b21b      	sxth	r3, r3
 8003298:	81fb      	strh	r3, [r7, #14]
    return retval;
 800329a:	89fb      	ldrh	r3, [r7, #14]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3301      	adds	r3, #1
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3302      	adds	r3, #2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3303      	adds	r3, #3
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    return retval;
 80032d6:	68fb      	ldr	r3, [r7, #12]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	73fb      	strb	r3, [r7, #15]
    return retval;
 80032f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b21a      	sxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3301      	adds	r3, #1
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	b21b      	sxth	r3, r3
 800331a:	4313      	orrs	r3, r2
 800331c:	81fb      	strh	r3, [r7, #14]
    return retval;
 800331e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3302      	adds	r3, #2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3303      	adds	r3, #3
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	061b      	lsls	r3, r3, #24
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
    return retval;
 800335c:	68fb      	ldr	r3, [r7, #12]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	e00b      	b.n	8003390 <shtp_init+0x24>
        instances[n].pHal = 0;
 8003378:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <shtp_init+0x3c>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f640 1114 	movw	r1, #2324	; 0x914
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3301      	adds	r3, #1
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	ddf0      	ble.n	8003378 <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <shtp_init+0x40>)
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	20000754 	.word	0x20000754
 80033ac:	20001068 	.word	0x20001068

080033b0 <getInstance>:

static shtp_t *getInstance(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	e014      	b.n	80033e6 <getInstance+0x36>
        if (instances[n].pHal == 0) {
 80033bc:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <getInstance+0x4c>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f640 1114 	movw	r1, #2324	; 0x914
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <getInstance+0x30>
            // This instance is free
            return &instances[n];
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f640 1214 	movw	r2, #2324	; 0x914
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <getInstance+0x4c>)
 80033dc:	4413      	add	r3, r2
 80033de:	e006      	b.n	80033ee <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3301      	adds	r3, #1
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	dde7      	ble.n	80033bc <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000754 	.word	0x20000754

08003400 <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	460a      	mov	r2, r1
 800340a:	80fb      	strh	r3, [r7, #6]
 800340c:	4613      	mov	r3, r2
 800340e:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 8003410:	88fa      	ldrh	r2, [r7, #6]
 8003412:	88bb      	ldrh	r3, [r7, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	d201      	bcs.n	800341c <min_u16+0x1c>
        return a;
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	e000      	b.n	800341e <min_u16+0x1e>
    }
    else {
        return b;
 800341c:	88bb      	ldrh	r3, [r7, #4]
    }
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 800342a:	b590      	push	{r4, r7, lr}
 800342c:	b089      	sub	sp, #36	; 0x24
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	460b      	mov	r3, r1
 8003438:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 800343e:	2300      	movs	r3, #0
 8003440:	76fb      	strb	r3, [r7, #27]
    uint16_t cursor = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	833b      	strh	r3, [r7, #24]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 8003446:	2300      	movs	r3, #0
 8003448:	833b      	strh	r3, [r7, #24]
    remaining = len;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0) {
 800344e:	e079      	b.n	8003544 <txProcess+0x11a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 8003450:	8afb      	ldrh	r3, [r7, #22]
 8003452:	217c      	movs	r1, #124	; 0x7c
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ffd3 	bl	8003400 <min_u16>
 800345a:	4603      	mov	r3, r0
 800345c:	82bb      	strh	r3, [r7, #20]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 800345e:	8abb      	ldrh	r3, [r7, #20]
 8003460:	3304      	adds	r3, #4
 8003462:	827b      	strh	r3, [r7, #18]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 8003464:	8a7b      	ldrh	r3, [r7, #18]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 800346c:	8a7b      	ldrh	r3, [r7, #18]
 800346e:	0a1b      	lsrs	r3, r3, #8
 8003470:	b29b      	uxth	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 800347e:	7efb      	ldrb	r3, [r7, #27]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d006      	beq.n	8003492 <txProcess+0x68>
            pShtp->outTransfer[1] |= 0x80;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	7b5b      	ldrb	r3, [r3, #13]
 8003488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	7afa      	ldrb	r2, [r7, #11]
 8003496:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 8003498:	7afa      	ldrb	r2, [r7, #11]
 800349a:	68f9      	ldr	r1, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80034aa:	7819      	ldrb	r1, [r3, #0]
 80034ac:	1c4b      	adds	r3, r1, #1
 80034ae:	b2dc      	uxtb	r4, r3
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4403      	add	r3, r0
 80034bc:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80034c0:	4622      	mov	r2, r4
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	460a      	mov	r2, r1
 80034c8:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	330c      	adds	r3, #12
 80034ce:	1d18      	adds	r0, r3, #4
 80034d0:	8b3b      	ldrh	r3, [r7, #24]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	8aba      	ldrh	r2, [r7, #20]
 80034d8:	4619      	mov	r1, r3
 80034da:	f002 ff57 	bl	800638c <memcpy>
        remaining -= transferLen;
 80034de:	8afa      	ldrh	r2, [r7, #22]
 80034e0:	8abb      	ldrh	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	82fb      	strh	r3, [r7, #22]
        cursor += transferLen;
 80034e6:	8b3a      	ldrh	r2, [r7, #24]
 80034e8:	8abb      	ldrh	r3, [r7, #20]
 80034ea:	4413      	add	r3, r2
 80034ec:	833b      	strh	r3, [r7, #24]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	6810      	ldr	r0, [r2, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	f102 010c 	add.w	r1, r2, #12
 80034fe:	8a7a      	ldrh	r2, [r7, #18]
 8003500:	4798      	blx	r3
 8003502:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8003504:	e00d      	b.n	8003522 <txProcess+0xf8>
        {
            shtp_service(pShtp);
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fa2d 	bl	8003966 <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	6810      	ldr	r0, [r2, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	f102 010c 	add.w	r1, r2, #12
 800351c:	8a7a      	ldrh	r2, [r7, #18]
 800351e:	4798      	blx	r3
 8003520:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ee      	beq.n	8003506 <txProcess+0xdc>
        }
        
        if (status < 0)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	2b00      	cmp	r3, #0
 800352c:	da08      	bge.n	8003540 <txProcess+0x116>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
            return status;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	e005      	b.n	800354c <txProcess+0x122>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8003540:	2301      	movs	r3, #1
 8003542:	76fb      	strb	r3, [r7, #27]
    while (remaining > 0) {
 8003544:	8afb      	ldrh	r3, [r7, #22]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d182      	bne.n	8003450 <txProcess+0x26>
    }

    return SH2_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3724      	adds	r7, #36	; 0x24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd90      	pop	{r4, r7, pc}

08003554 <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d813      	bhi.n	800359a <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 813a 	beq.w	80037fe <rxAssemble+0x2aa>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	6892      	ldr	r2, [r2, #8]
 8003592:	2101      	movs	r1, #1
 8003594:	4610      	mov	r0, r2
 8003596:	4798      	blx	r3
        }
        return;
 8003598:	e131      	b.n	80037fe <rxAssemble+0x2aa>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	3301      	adds	r3, #1
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	4413      	add	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80035b4:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	3301      	adds	r3, #1
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	09db      	lsrs	r3, r3, #7
 80035c2:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	789b      	ldrb	r3, [r3, #2]
 80035c8:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 80035d0:	7dfa      	ldrb	r2, [r7, #23]
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	f603 0399 	addw	r3, r3, #2201	; 0x899
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	7dba      	ldrb	r2, [r7, #22]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d00a      	beq.n	8003600 <rxAssemble+0xac>
        if (pShtp->eventCallback) {
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <rxAssemble+0xac>
            pShtp->eventCallback(pShtp->eventCookie,
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	6892      	ldr	r2, [r2, #8]
 80035fa:	2106      	movs	r1, #6
 80035fc:	4610      	mov	r0, r2
 80035fe:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 8003600:	8abb      	ldrh	r3, [r7, #20]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d813      	bhi.n	800362e <rxAssemble+0xda>
        pShtp->rxShortFragments++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80f2 	beq.w	8003802 <rxAssemble+0x2ae>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	6892      	ldr	r2, [r2, #8]
 8003626:	2101      	movs	r1, #1
 8003628:	4610      	mov	r0, r2
 800362a:	4798      	blx	r3
        }
        return;
 800362c:	e0e9      	b.n	8003802 <rxAssemble+0x2ae>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	2b07      	cmp	r3, #7
 8003632:	d913      	bls.n	800365c <rxAssemble+0x108>
        // Invalid channel id.
        pShtp->rxBadChan++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

        if (pShtp->eventCallback) {
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80dd 	beq.w	8003806 <rxAssemble+0x2b2>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	6892      	ldr	r2, [r2, #8]
 8003654:	2103      	movs	r1, #3
 8003656:	4610      	mov	r0, r2
 8003658:	4798      	blx	r3
        }
        return;
 800365a:	e0d4      	b.n	8003806 <rxAssemble+0x2b2>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d040      	beq.n	80036e8 <rxAssemble+0x194>
        // Check this against previously received data.
        if (!continuation ||
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d119      	bne.n	80036a6 <rxAssemble+0x152>
            (chan != pShtp->inChan) ||
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
        if (!continuation ||
 8003678:	7dfa      	ldrb	r2, [r7, #23]
 800367a:	429a      	cmp	r2, r3
 800367c:	d113      	bne.n	80036a6 <rxAssemble+0x152>
            (seq != pShtp->chan[chan].nextInSeq) ||
 800367e:	7dfa      	ldrb	r2, [r7, #23]
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8003690:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8003692:	7dba      	ldrb	r2, [r7, #22]
 8003694:	429a      	cmp	r2, r3
 8003696:	d106      	bne.n	80036a6 <rxAssemble+0x152>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 8003698:	8abb      	ldrh	r3, [r7, #20]
 800369a:	3b04      	subs	r3, #4
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	f8b2 208c 	ldrh.w	r2, [r2, #140]	; 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d020      	beq.n	80036e8 <rxAssemble+0x194>
            
            if (pShtp->eventCallback) {
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d006      	beq.n	80036bc <rxAssemble+0x168>
                pShtp->eventCallback(pShtp->eventCookie,
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6892      	ldr	r2, [r2, #8]
 80036b6:	2105      	movs	r1, #5
 80036b8:	4610      	mov	r0, r2
 80036ba:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

            pShtp->rxInterruptedPayloads++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            if (pShtp->eventCallback) {
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d006      	beq.n	80036e8 <rxAssemble+0x194>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	6892      	ldr	r2, [r2, #8]
 80036e2:	2107      	movs	r1, #7
 80036e4:	4610      	mov	r0, r2
 80036e6:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 80036e8:	7dfa      	ldrb	r2, [r7, #23]
 80036ea:	7dbb      	ldrb	r3, [r7, #22]
 80036ec:	3301      	adds	r3, #1
 80036ee:	b2d8      	uxtb	r0, r3
 80036f0:	68f9      	ldr	r1, [r7, #12]
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8003700:	4602      	mov	r2, r0
 8003702:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d122      	bne.n	8003754 <rxAssemble+0x200>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 800370e:	8abb      	ldrh	r3, [r7, #20]
 8003710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003714:	d912      	bls.n	800373c <rxAssemble+0x1e8>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
            
            if (pShtp->eventCallback) {
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d06e      	beq.n	800380a <rxAssemble+0x2b6>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	6892      	ldr	r2, [r2, #8]
 8003734:	2102      	movs	r1, #2
 8003736:	4610      	mov	r0, r2
 8003738:	4798      	blx	r3
            }

            return;
 800373a:	e066      	b.n	800380a <rxAssemble+0x2b6>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
        pShtp->inChan = chan;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	7dfa      	ldrb	r2, [r7, #23]
 8003750:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	8abb      	ldrh	r3, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	d901      	bls.n	8003760 <rxAssemble+0x20c>
        // Only use the valid portion of the transfer
        len = payloadLen;
 800375c:	8abb      	ldrh	r3, [r7, #20]
 800375e:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	338f      	adds	r3, #143	; 0x8f
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	; 0x490
 800376a:	1898      	adds	r0, r3, r2
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	1d19      	adds	r1, r3, #4
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	3b04      	subs	r3, #4
 8003774:	461a      	mov	r2, r3
 8003776:	f002 fe09 	bl	800638c <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	4413      	add	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b04      	subs	r3, #4
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
    pShtp->inRemaining = payloadLen - len;
 8003790:	8aba      	ldrh	r2, [r7, #20]
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d131      	bne.n	800380c <rxAssemble+0x2b8>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 80037a8:	7dfa      	ldrb	r2, [r7, #23]
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d025      	beq.n	800380c <rxAssemble+0x2b8>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 80037c0:	7dfa      	ldrb	r2, [r7, #23]
 80037c2:	68f9      	ldr	r1, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80037d2:	681c      	ldr	r4, [r3, #0]
 80037d4:	7dfa      	ldrb	r2, [r7, #23]
 80037d6:	68f9      	ldr	r1, [r7, #12]
 80037d8:	4613      	mov	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80037e6:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f103 018f 	add.w	r1, r3, #143	; 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80037fa:	47a0      	blx	r4
 80037fc:	e006      	b.n	800380c <rxAssemble+0x2b8>
        return;
 80037fe:	bf00      	nop
 8003800:	e004      	b.n	800380c <rxAssemble+0x2b8>
        return;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <rxAssemble+0x2b8>
        return;
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <rxAssemble+0x2b8>
            return;
 800380a:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bd90      	pop	{r4, r7, pc}
	...

08003814 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <shtp_open+0x64>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f083 0301 	eor.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 800382a:	f7ff fd9f 	bl	800336c <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <shtp_open+0x24>
        // Error
        return 0;
 8003834:	2300      	movs	r3, #0
 8003836:	e01b      	b.n	8003870 <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 8003838:	f7ff fdba 	bl	80033b0 <getInstance>
 800383c:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8003844:	2300      	movs	r3, #0
 8003846:	e013      	b.n	8003870 <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 8003848:	f640 1214 	movw	r2, #2324	; 0x914
 800384c:	2100      	movs	r1, #0
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f002 fdaa 	bl	80063a8 <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <shtp_open+0x54>
        return 0;
 8003864:	2300      	movs	r3, #0
 8003866:	e003      	b.n	8003870 <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	601a      	str	r2, [r3, #0]

    return pShtp;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20001068 	.word	0x20001068

0800387c <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	460b      	mov	r3, r1
 80038b2:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 80038b8:	7afb      	ldrb	r3, [r7, #11]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <shtp_listenChan+0x20>
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	2b07      	cmp	r3, #7
 80038c2:	d902      	bls.n	80038ca <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 80038c4:	f06f 0301 	mvn.w	r3, #1
 80038c8:	e016      	b.n	80038f8 <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 80038ca:	7afa      	ldrb	r2, [r7, #11]
 80038cc:	6979      	ldr	r1, [r7, #20]
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 80038e0:	7afa      	ldrb	r2, [r7, #11]
 80038e2:	6979      	ldr	r1, [r7, #20]
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	461a      	mov	r2, r3
 8003910:	460b      	mov	r3, r1
 8003912:	72fb      	strb	r3, [r7, #11]
 8003914:	4613      	mov	r3, r2
 8003916:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	2b80      	cmp	r3, #128	; 0x80
 8003920:	d909      	bls.n	8003936 <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f8d3 3910 	ldr.w	r3, [r3, #2320]	; 0x910
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
        return SH2_ERR_BAD_PARAM;
 8003930:	f06f 0301 	mvn.w	r3, #1
 8003934:	e013      	b.n	800395e <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 8003936:	7afb      	ldrb	r3, [r7, #11]
 8003938:	2b07      	cmp	r3, #7
 800393a:	d909      	bls.n	8003950 <shtp_send+0x4c>
        pShtp->badTxChan++;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
        return SH2_ERR_BAD_PARAM;
 800394a:	f06f 0301 	mvn.w	r3, #1
 800394e:	e006      	b.n	800395e <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8003950:	893b      	ldrh	r3, [r7, #8]
 8003952:	7af9      	ldrb	r1, [r7, #11]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6978      	ldr	r0, [r7, #20]
 8003958:	f7ff fd67 	bl	800342a <txProcess>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 8003966:	b590      	push	{r4, r7, lr}
 8003968:	b087      	sub	sp, #28
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689c      	ldr	r4, [r3, #8]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8003986:	f107 030c 	add.w	r3, r7, #12
 800398a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800398e:	47a0      	blx	r4
 8003990:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	dd08      	ble.n	80039aa <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6978      	ldr	r0, [r7, #20]
 80039a6:	f7ff fdd5 	bl	8003554 <rxAssemble>
    }
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd90      	pop	{r4, r7, pc}

080039b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039bc:	2003      	movs	r0, #3
 80039be:	f000 f961 	bl	8003c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039c2:	200f      	movs	r0, #15
 80039c4:	f000 f80e 	bl	80039e4 <HAL_InitTick>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	71fb      	strb	r3, [r7, #7]
 80039d2:	e001      	b.n	80039d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039d4:	f7fd fb3c 	bl	8001050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039d8:	79fb      	ldrb	r3, [r7, #7]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <HAL_InitTick+0x6c>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d023      	beq.n	8003a40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_InitTick+0x70>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <HAL_InitTick+0x6c>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	4619      	mov	r1, r3
 8003a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f97b 	bl	8003d0a <HAL_SYSTICK_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b0f      	cmp	r3, #15
 8003a1e:	d809      	bhi.n	8003a34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a20:	2200      	movs	r2, #0
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f000 f937 	bl	8003c9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <HAL_InitTick+0x74>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e007      	b.n	8003a44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
 8003a38:	e004      	b.n	8003a44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e001      	b.n	8003a44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000008 	.word	0x20000008
 8003a54:	20000000 	.word	0x20000000
 8003a58:	20000004 	.word	0x20000004

08003a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_IncTick+0x20>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_IncTick+0x24>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_IncTick+0x24>)
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000008 	.word	0x20000008
 8003a80:	2000106c 	.word	0x2000106c

08003a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return uwTick;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_GetTick+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	2000106c 	.word	0x2000106c

08003a9c <__NVIC_SetPriorityGrouping>:
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ace:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	60d3      	str	r3, [r2, #12]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_GetPriorityGrouping>:
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <__NVIC_GetPriorityGrouping+0x18>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	f003 0307 	and.w	r3, r3, #7
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_EnableIRQ>:
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db0b      	blt.n	8003b2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	f003 021f 	and.w	r2, r3, #31
 8003b18:	4907      	ldr	r1, [pc, #28]	; (8003b38 <__NVIC_EnableIRQ+0x38>)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2001      	movs	r0, #1
 8003b22:	fa00 f202 	lsl.w	r2, r0, r2
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e100 	.word	0xe000e100

08003b3c <__NVIC_DisableIRQ>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	db12      	blt.n	8003b74 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	490a      	ldr	r1, [pc, #40]	; (8003b80 <__NVIC_DisableIRQ+0x44>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b62:	3320      	adds	r3, #32
 8003b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b68:	f3bf 8f4f 	dsb	sy
}
 8003b6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b6e:	f3bf 8f6f 	isb	sy
}
 8003b72:	bf00      	nop
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000e100 	.word	0xe000e100

08003b84 <__NVIC_SetPriority>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	6039      	str	r1, [r7, #0]
 8003b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	db0a      	blt.n	8003bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	490c      	ldr	r1, [pc, #48]	; (8003bd0 <__NVIC_SetPriority+0x4c>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	0112      	lsls	r2, r2, #4
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003bac:	e00a      	b.n	8003bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4908      	ldr	r1, [pc, #32]	; (8003bd4 <__NVIC_SetPriority+0x50>)
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	3b04      	subs	r3, #4
 8003bbc:	0112      	lsls	r2, r2, #4
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	761a      	strb	r2, [r3, #24]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000e100 	.word	0xe000e100
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <NVIC_EncodePriority>:
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f1c3 0307 	rsb	r3, r3, #7
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	bf28      	it	cs
 8003bf6:	2304      	movcs	r3, #4
 8003bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d902      	bls.n	8003c08 <NVIC_EncodePriority+0x30>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3b03      	subs	r3, #3
 8003c06:	e000      	b.n	8003c0a <NVIC_EncodePriority+0x32>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c20:	f04f 31ff 	mov.w	r1, #4294967295
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	43d9      	mvns	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c30:	4313      	orrs	r3, r2
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3724      	adds	r7, #36	; 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c50:	d301      	bcc.n	8003c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c52:	2301      	movs	r3, #1
 8003c54:	e00f      	b.n	8003c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <SysTick_Config+0x40>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c5e:	210f      	movs	r1, #15
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295
 8003c64:	f7ff ff8e 	bl	8003b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <SysTick_Config+0x40>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c6e:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <SysTick_Config+0x40>)
 8003c70:	2207      	movs	r2, #7
 8003c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	e000e010 	.word	0xe000e010

08003c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff05 	bl	8003a9c <__NVIC_SetPriorityGrouping>
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cac:	f7ff ff1a 	bl	8003ae4 <__NVIC_GetPriorityGrouping>
 8003cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68b9      	ldr	r1, [r7, #8]
 8003cb6:	6978      	ldr	r0, [r7, #20]
 8003cb8:	f7ff ff8e 	bl	8003bd8 <NVIC_EncodePriority>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff5d 	bl	8003b84 <__NVIC_SetPriority>
}
 8003cca:	bf00      	nop
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	4603      	mov	r3, r0
 8003cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff0d 	bl	8003b00 <__NVIC_EnableIRQ>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff1d 	bl	8003b3c <__NVIC_DisableIRQ>
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ff94 	bl	8003c40 <SysTick_Config>
 8003d18:	4603      	mov	r3, r0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d005      	beq.n	8003d46 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
 8003d44:	e029      	b.n	8003d9a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 020e 	bic.w	r2, r2, #14
 8003d54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f003 021c 	and.w	r2, r3, #28
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2101      	movs	r1, #1
 8003d74:	fa01 f202 	lsl.w	r2, r1, r2
 8003d78:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
    }
  }
  return status;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db2:	e17f      	b.n	80040b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2101      	movs	r1, #1
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8171 	beq.w	80040ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d005      	beq.n	8003de4 <HAL_GPIO_Init+0x40>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d130      	bne.n	8003e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	f003 0201 	and.w	r2, r3, #1
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d118      	bne.n	8003e84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003e58:	2201      	movs	r2, #1
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f003 0201 	and.w	r2, r3, #1
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d017      	beq.n	8003ec0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d123      	bne.n	8003f14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	08da      	lsrs	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3208      	adds	r2, #8
 8003ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	220f      	movs	r2, #15
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4013      	ands	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	08da      	lsrs	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3208      	adds	r2, #8
 8003f0e:	6939      	ldr	r1, [r7, #16]
 8003f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	2203      	movs	r2, #3
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0203 	and.w	r2, r3, #3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80ac 	beq.w	80040ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f56:	4b5f      	ldr	r3, [pc, #380]	; (80040d4 <HAL_GPIO_Init+0x330>)
 8003f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5a:	4a5e      	ldr	r2, [pc, #376]	; (80040d4 <HAL_GPIO_Init+0x330>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6613      	str	r3, [r2, #96]	; 0x60
 8003f62:	4b5c      	ldr	r3, [pc, #368]	; (80040d4 <HAL_GPIO_Init+0x330>)
 8003f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f6e:	4a5a      	ldr	r2, [pc, #360]	; (80040d8 <HAL_GPIO_Init+0x334>)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	3302      	adds	r3, #2
 8003f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	220f      	movs	r2, #15
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f98:	d025      	beq.n	8003fe6 <HAL_GPIO_Init+0x242>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a4f      	ldr	r2, [pc, #316]	; (80040dc <HAL_GPIO_Init+0x338>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d01f      	beq.n	8003fe2 <HAL_GPIO_Init+0x23e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a4e      	ldr	r2, [pc, #312]	; (80040e0 <HAL_GPIO_Init+0x33c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d019      	beq.n	8003fde <HAL_GPIO_Init+0x23a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a4d      	ldr	r2, [pc, #308]	; (80040e4 <HAL_GPIO_Init+0x340>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <HAL_GPIO_Init+0x236>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4c      	ldr	r2, [pc, #304]	; (80040e8 <HAL_GPIO_Init+0x344>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00d      	beq.n	8003fd6 <HAL_GPIO_Init+0x232>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a4b      	ldr	r2, [pc, #300]	; (80040ec <HAL_GPIO_Init+0x348>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <HAL_GPIO_Init+0x22e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a4a      	ldr	r2, [pc, #296]	; (80040f0 <HAL_GPIO_Init+0x34c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <HAL_GPIO_Init+0x22a>
 8003fca:	2306      	movs	r3, #6
 8003fcc:	e00c      	b.n	8003fe8 <HAL_GPIO_Init+0x244>
 8003fce:	2307      	movs	r3, #7
 8003fd0:	e00a      	b.n	8003fe8 <HAL_GPIO_Init+0x244>
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	e008      	b.n	8003fe8 <HAL_GPIO_Init+0x244>
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	e006      	b.n	8003fe8 <HAL_GPIO_Init+0x244>
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e004      	b.n	8003fe8 <HAL_GPIO_Init+0x244>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e002      	b.n	8003fe8 <HAL_GPIO_Init+0x244>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <HAL_GPIO_Init+0x244>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	f002 0203 	and.w	r2, r2, #3
 8003fee:	0092      	lsls	r2, r2, #2
 8003ff0:	4093      	lsls	r3, r2
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ff8:	4937      	ldr	r1, [pc, #220]	; (80040d8 <HAL_GPIO_Init+0x334>)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	3302      	adds	r3, #2
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004006:	4b3b      	ldr	r3, [pc, #236]	; (80040f4 <HAL_GPIO_Init+0x350>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800402a:	4a32      	ldr	r2, [pc, #200]	; (80040f4 <HAL_GPIO_Init+0x350>)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004030:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <HAL_GPIO_Init+0x350>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	43db      	mvns	r3, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004054:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <HAL_GPIO_Init+0x350>)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800405a:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <HAL_GPIO_Init+0x350>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800407e:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <HAL_GPIO_Init+0x350>)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_GPIO_Init+0x350>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	43db      	mvns	r3, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040a8:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <HAL_GPIO_Init+0x350>)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	3301      	adds	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa22 f303 	lsr.w	r3, r2, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f47f ae78 	bne.w	8003db4 <HAL_GPIO_Init+0x10>
  }
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40010000 	.word	0x40010000
 80040dc:	48000400 	.word	0x48000400
 80040e0:	48000800 	.word	0x48000800
 80040e4:	48000c00 	.word	0x48000c00
 80040e8:	48001000 	.word	0x48001000
 80040ec:	48001400 	.word	0x48001400
 80040f0:	48001800 	.word	0x48001800
 80040f4:	40010400 	.word	0x40010400

080040f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004106:	e0cd      	b.n	80042a4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004108:	2201      	movs	r2, #1
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80c0 	beq.w	800429e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800411e:	4a68      	ldr	r2, [pc, #416]	; (80042c0 <HAL_GPIO_DeInit+0x1c8>)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	089b      	lsrs	r3, r3, #2
 8004124:	3302      	adds	r3, #2
 8004126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	220f      	movs	r2, #15
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004146:	d025      	beq.n	8004194 <HAL_GPIO_DeInit+0x9c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a5e      	ldr	r2, [pc, #376]	; (80042c4 <HAL_GPIO_DeInit+0x1cc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d01f      	beq.n	8004190 <HAL_GPIO_DeInit+0x98>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a5d      	ldr	r2, [pc, #372]	; (80042c8 <HAL_GPIO_DeInit+0x1d0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d019      	beq.n	800418c <HAL_GPIO_DeInit+0x94>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a5c      	ldr	r2, [pc, #368]	; (80042cc <HAL_GPIO_DeInit+0x1d4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_GPIO_DeInit+0x90>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a5b      	ldr	r2, [pc, #364]	; (80042d0 <HAL_GPIO_DeInit+0x1d8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00d      	beq.n	8004184 <HAL_GPIO_DeInit+0x8c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a5a      	ldr	r2, [pc, #360]	; (80042d4 <HAL_GPIO_DeInit+0x1dc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <HAL_GPIO_DeInit+0x88>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a59      	ldr	r2, [pc, #356]	; (80042d8 <HAL_GPIO_DeInit+0x1e0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <HAL_GPIO_DeInit+0x84>
 8004178:	2306      	movs	r3, #6
 800417a:	e00c      	b.n	8004196 <HAL_GPIO_DeInit+0x9e>
 800417c:	2307      	movs	r3, #7
 800417e:	e00a      	b.n	8004196 <HAL_GPIO_DeInit+0x9e>
 8004180:	2305      	movs	r3, #5
 8004182:	e008      	b.n	8004196 <HAL_GPIO_DeInit+0x9e>
 8004184:	2304      	movs	r3, #4
 8004186:	e006      	b.n	8004196 <HAL_GPIO_DeInit+0x9e>
 8004188:	2303      	movs	r3, #3
 800418a:	e004      	b.n	8004196 <HAL_GPIO_DeInit+0x9e>
 800418c:	2302      	movs	r3, #2
 800418e:	e002      	b.n	8004196 <HAL_GPIO_DeInit+0x9e>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_GPIO_DeInit+0x9e>
 8004194:	2300      	movs	r3, #0
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	f002 0203 	and.w	r2, r2, #3
 800419c:	0092      	lsls	r2, r2, #2
 800419e:	4093      	lsls	r3, r2
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d132      	bne.n	800420c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80041a6:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <HAL_GPIO_DeInit+0x1e4>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	494b      	ldr	r1, [pc, #300]	; (80042dc <HAL_GPIO_DeInit+0x1e4>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80041b4:	4b49      	ldr	r3, [pc, #292]	; (80042dc <HAL_GPIO_DeInit+0x1e4>)
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	4947      	ldr	r1, [pc, #284]	; (80042dc <HAL_GPIO_DeInit+0x1e4>)
 80041be:	4013      	ands	r3, r2
 80041c0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80041c2:	4b46      	ldr	r3, [pc, #280]	; (80042dc <HAL_GPIO_DeInit+0x1e4>)
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	4944      	ldr	r1, [pc, #272]	; (80042dc <HAL_GPIO_DeInit+0x1e4>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80041d0:	4b42      	ldr	r3, [pc, #264]	; (80042dc <HAL_GPIO_DeInit+0x1e4>)
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	4940      	ldr	r1, [pc, #256]	; (80042dc <HAL_GPIO_DeInit+0x1e4>)
 80041da:	4013      	ands	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	220f      	movs	r2, #15
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80041ee:	4a34      	ldr	r2, [pc, #208]	; (80042c0 <HAL_GPIO_DeInit+0x1c8>)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	3302      	adds	r3, #2
 80041f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43da      	mvns	r2, r3
 80041fe:	4830      	ldr	r0, [pc, #192]	; (80042c0 <HAL_GPIO_DeInit+0x1c8>)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	089b      	lsrs	r3, r3, #2
 8004204:	400a      	ands	r2, r1
 8004206:	3302      	adds	r3, #2
 8004208:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	2103      	movs	r1, #3
 8004216:	fa01 f303 	lsl.w	r3, r1, r3
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	08da      	lsrs	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3208      	adds	r2, #8
 8004228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	220f      	movs	r2, #15
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	08d2      	lsrs	r2, r2, #3
 8004240:	4019      	ands	r1, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3208      	adds	r2, #8
 8004246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	2103      	movs	r1, #3
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	401a      	ands	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	2101      	movs	r1, #1
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	401a      	ands	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	2103      	movs	r1, #3
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	401a      	ands	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428e:	2101      	movs	r1, #1
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	fa01 f303 	lsl.w	r3, r1, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	401a      	ands	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	3301      	adds	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f47f af2b 	bne.w	8004108 <HAL_GPIO_DeInit+0x10>
  }
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40010000 	.word	0x40010000
 80042c4:	48000400 	.word	0x48000400
 80042c8:	48000800 	.word	0x48000800
 80042cc:	48000c00 	.word	0x48000c00
 80042d0:	48001000 	.word	0x48001000
 80042d4:	48001400 	.word	0x48001400
 80042d8:	48001800 	.word	0x48001800
 80042dc:	40010400 	.word	0x40010400

080042e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	807b      	strh	r3, [r7, #2]
 80042ec:	4613      	mov	r3, r2
 80042ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042f0:	787b      	ldrb	r3, [r7, #1]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042f6:	887a      	ldrh	r2, [r7, #2]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042fc:	e002      	b.n	8004304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042fe:	887a      	ldrh	r2, [r7, #2]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d006      	beq.n	8004334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004326:	4a05      	ldr	r2, [pc, #20]	; (800433c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800432c:	88fb      	ldrh	r3, [r7, #6]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc fce2 	bl	8000cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40010400 	.word	0x40010400

08004340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e095      	b.n	800447e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2b00      	cmp	r3, #0
 8004358:	d108      	bne.n	800436c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004362:	d009      	beq.n	8004378 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	61da      	str	r2, [r3, #28]
 800436a:	e005      	b.n	8004378 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc faf0 	bl	8000978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b8:	d902      	bls.n	80043c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e002      	b.n	80043c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80043ce:	d007      	beq.n	80043e0 <HAL_SPI_Init+0xa0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043d8:	d002      	beq.n	80043e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	ea42 0103 	orr.w	r1, r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	f003 0204 	and.w	r2, r3, #4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800445c:	ea42 0103 	orr.w	r1, r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e01a      	b.n	80044ce <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ae:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fc faab 	bl	8000a0c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b08a      	sub	sp, #40	; 0x28
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044e4:	2301      	movs	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_SPI_TransmitReceive+0x26>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e1fb      	b.n	80048f4 <HAL_SPI_TransmitReceive+0x41e>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004504:	f7ff fabe 	bl	8003a84 <HAL_GetTick>
 8004508:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004510:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004518:	887b      	ldrh	r3, [r7, #2]
 800451a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004520:	7efb      	ldrb	r3, [r7, #27]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d00e      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x6e>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800452c:	d106      	bne.n	800453c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <HAL_SPI_TransmitReceive+0x66>
 8004536:	7efb      	ldrb	r3, [r7, #27]
 8004538:	2b04      	cmp	r3, #4
 800453a:	d003      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800453c:	2302      	movs	r3, #2
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004542:	e1cd      	b.n	80048e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_SPI_TransmitReceive+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_SPI_TransmitReceive+0x80>
 8004550:	887b      	ldrh	r3, [r7, #2]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800455c:	e1c0      	b.n	80048e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b04      	cmp	r3, #4
 8004568:	d003      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2205      	movs	r2, #5
 800456e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	887a      	ldrh	r2, [r7, #2]
 8004582:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	887a      	ldrh	r2, [r7, #2]
 800459e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045b4:	d802      	bhi.n	80045bc <HAL_SPI_TransmitReceive+0xe6>
 80045b6:	8a3b      	ldrh	r3, [r7, #16]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d908      	bls.n	80045ce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	e007      	b.n	80045de <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d007      	beq.n	80045fc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004604:	d97c      	bls.n	8004700 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x13e>
 800460e:	8a7b      	ldrh	r3, [r7, #18]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d169      	bne.n	80046e8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	881a      	ldrh	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004638:	e056      	b.n	80046e8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d11b      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x1aa>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d016      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x1aa>
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	2b01      	cmp	r3, #1
 8004656:	d113      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	1c9a      	adds	r2, r3, #2
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d11c      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x1f2>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d016      	beq.n	80046c8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	b292      	uxth	r2, r2
 80046a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046c4:	2301      	movs	r3, #1
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046c8:	f7ff f9dc 	bl	8003a84 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d807      	bhi.n	80046e8 <HAL_SPI_TransmitReceive+0x212>
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	d003      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046e6:	e0fb      	b.n	80048e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1a3      	bne.n	800463a <HAL_SPI_TransmitReceive+0x164>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d19d      	bne.n	800463a <HAL_SPI_TransmitReceive+0x164>
 80046fe:	e0df      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_SPI_TransmitReceive+0x23a>
 8004708:	8a7b      	ldrh	r3, [r7, #18]
 800470a:	2b01      	cmp	r3, #1
 800470c:	f040 80cb 	bne.w	80048a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	d912      	bls.n	8004740 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	881a      	ldrh	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	1c9a      	adds	r2, r3, #2
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b02      	subs	r3, #2
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800473e:	e0b2      	b.n	80048a6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	330c      	adds	r3, #12
 800474a:	7812      	ldrb	r2, [r2, #0]
 800474c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475c:	b29b      	uxth	r3, r3
 800475e:	3b01      	subs	r3, #1
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004766:	e09e      	b.n	80048a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b02      	cmp	r3, #2
 8004774:	d134      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x30a>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d02f      	beq.n	80047e0 <HAL_SPI_TransmitReceive+0x30a>
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	2b01      	cmp	r3, #1
 8004784:	d12c      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d912      	bls.n	80047b6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	881a      	ldrh	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	1c9a      	adds	r2, r3, #2
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b02      	subs	r3, #2
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047b4:	e012      	b.n	80047dc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	7812      	ldrb	r2, [r2, #0]
 80047c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d148      	bne.n	8004880 <HAL_SPI_TransmitReceive+0x3aa>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d042      	beq.n	8004880 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d923      	bls.n	800484e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	b292      	uxth	r2, r2
 8004812:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b02      	subs	r3, #2
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d81f      	bhi.n	800487c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	e016      	b.n	800487c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f103 020c 	add.w	r2, r3, #12
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	7812      	ldrb	r2, [r2, #0]
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800487c:	2301      	movs	r3, #1
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004880:	f7ff f900 	bl	8003a84 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488c:	429a      	cmp	r2, r3
 800488e:	d803      	bhi.n	8004898 <HAL_SPI_TransmitReceive+0x3c2>
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d102      	bne.n	800489e <HAL_SPI_TransmitReceive+0x3c8>
 8004898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489a:	2b00      	cmp	r3, #0
 800489c:	d103      	bne.n	80048a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048a4:	e01c      	b.n	80048e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f47f af5b 	bne.w	8004768 <HAL_SPI_TransmitReceive+0x292>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f47f af54 	bne.w	8004768 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fc11 	bl	80050ec <SPI_EndRxTxTransaction>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	661a      	str	r2, [r3, #96]	; 0x60
 80048dc:	e000      	b.n	80048e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80048de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3728      	adds	r7, #40	; 0x28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_SPI_TransmitReceive_IT+0x20>
 8004918:	2302      	movs	r3, #2
 800491a:	e091      	b.n	8004a40 <HAL_SPI_TransmitReceive_IT+0x144>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800492a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004932:	7dbb      	ldrb	r3, [r7, #22]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d00d      	beq.n	8004954 <HAL_SPI_TransmitReceive_IT+0x58>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493e:	d106      	bne.n	800494e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <HAL_SPI_TransmitReceive_IT+0x52>
 8004948:	7dbb      	ldrb	r3, [r7, #22]
 800494a:	2b04      	cmp	r3, #4
 800494c:	d002      	beq.n	8004954 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800494e:	2302      	movs	r3, #2
 8004950:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004952:	e070      	b.n	8004a36 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_SPI_TransmitReceive_IT+0x6a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004960:	887b      	ldrh	r3, [r7, #2]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d102      	bne.n	800496c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	75fb      	strb	r3, [r7, #23]
    goto error;
 800496a:	e064      	b.n	8004a36 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b04      	cmp	r3, #4
 8004976:	d003      	beq.n	8004980 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2205      	movs	r2, #5
 800497c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	887a      	ldrh	r2, [r7, #2]
 8004990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	887a      	ldrh	r2, [r7, #2]
 8004996:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	887a      	ldrh	r2, [r7, #2]
 80049a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	887a      	ldrh	r2, [r7, #2]
 80049aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b6:	d906      	bls.n	80049c6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <HAL_SPI_TransmitReceive_IT+0x150>)
 80049bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a23      	ldr	r2, [pc, #140]	; (8004a50 <HAL_SPI_TransmitReceive_IT+0x154>)
 80049c2:	651a      	str	r2, [r3, #80]	; 0x50
 80049c4:	e005      	b.n	80049d2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4a22      	ldr	r2, [pc, #136]	; (8004a54 <HAL_SPI_TransmitReceive_IT+0x158>)
 80049ca:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80049d0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049da:	d802      	bhi.n	80049e2 <HAL_SPI_TransmitReceive_IT+0xe6>
 80049dc:	887b      	ldrh	r3, [r7, #2]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d908      	bls.n	80049f4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	e007      	b.n	8004a04 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a02:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004a12:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d008      	beq.n	8004a34 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e000      	b.n	8004a36 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8004a34:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	08004deb 	.word	0x08004deb
 8004a50:	08004e51 	.word	0x08004e51
 8004a54:	08004c9b 	.word	0x08004c9b
 8004a58:	08004d59 	.word	0x08004d59

08004a5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10f      	bne.n	8004aa0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	099b      	lsrs	r3, r3, #6
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
    return;
 8004a9e:	e0d7      	b.n	8004c50 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <HAL_SPI_IRQHandler+0x66>
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	09db      	lsrs	r3, r3, #7
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d004      	beq.n	8004ac2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
    return;
 8004ac0:	e0c6      	b.n	8004c50 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10c      	bne.n	8004ae8 <HAL_SPI_IRQHandler+0x8c>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	099b      	lsrs	r3, r3, #6
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	0a1b      	lsrs	r3, r3, #8
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80b4 	beq.w	8004c50 <HAL_SPI_IRQHandler+0x1f4>
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80ad 	beq.w	8004c50 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	099b      	lsrs	r3, r3, #6
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d023      	beq.n	8004b4a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d011      	beq.n	8004b32 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b12:	f043 0204 	orr.w	r2, r3, #4
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	e00b      	b.n	8004b4a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	693b      	ldr	r3, [r7, #16]
        return;
 8004b48:	e082      	b.n	8004c50 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d014      	beq.n	8004b80 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5a:	f043 0201 	orr.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00c      	beq.n	8004ba6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b90:	f043 0208 	orr.w	r2, r3, #8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d04f      	beq.n	8004c4e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bbc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d104      	bne.n	8004bda <HAL_SPI_IRQHandler+0x17e>
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d034      	beq.n	8004c44 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0203 	bic.w	r2, r2, #3
 8004be8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d011      	beq.n	8004c16 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <HAL_SPI_IRQHandler+0x1fc>)
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff f88f 	bl	8003d22 <HAL_DMA_Abort_IT>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d016      	beq.n	8004c4c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	4a0d      	ldr	r2, [pc, #52]	; (8004c58 <HAL_SPI_IRQHandler+0x1fc>)
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff f879 	bl	8003d22 <HAL_DMA_Abort_IT>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004c42:	e003      	b.n	8004c4c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fc f88b 	bl	8000d60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c4a:	e000      	b.n	8004c4e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004c4c:	bf00      	nop
    return;
 8004c4e:	bf00      	nop
  }
}
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	08004c71 	.word	0x08004c71

08004c5c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7fc f867 	bl	8000d60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d923      	bls.n	8004cf6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68da      	ldr	r2, [r3, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	b292      	uxth	r2, r2
 8004cba:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	1c9a      	adds	r2, r3, #2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b02      	subs	r3, #2
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d11f      	bne.n	8004d24 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cf2:	605a      	str	r2, [r3, #4]
 8004cf4:	e016      	b.n	8004d24 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f103 020c 	add.w	r2, r3, #12
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	7812      	ldrb	r2, [r2, #0]
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10f      	bne.n	8004d50 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d3e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fa14 	bl	8005178 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d912      	bls.n	8004d90 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b02      	subs	r3, #2
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d8e:	e012      	b.n	8004db6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	7812      	ldrb	r2, [r2, #0]
 8004d9c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d110      	bne.n	8004de2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f9cb 	bl	8005178 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	b292      	uxth	r2, r2
 8004dfe:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	1c9a      	adds	r2, r3, #2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10f      	bne.n	8004e48 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e36:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f998 	bl	8005178 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	881a      	ldrh	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	1c9a      	adds	r2, r3, #2
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d110      	bne.n	8004ea8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e94:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f968 	bl	8005178 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ec0:	f7fe fde0 	bl	8003a84 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	4413      	add	r3, r2
 8004ece:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ed0:	f7fe fdd8 	bl	8003a84 <HAL_GetTick>
 8004ed4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	015b      	lsls	r3, r3, #5
 8004edc:	0d1b      	lsrs	r3, r3, #20
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee6:	e054      	b.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d050      	beq.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ef0:	f7fe fdc8 	bl	8003a84 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d902      	bls.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d13d      	bne.n	8004f82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1e:	d111      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	d004      	beq.n	8004f34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f32:	d107      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4c:	d10f      	bne.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e017      	b.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d19b      	bne.n	8004ee8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000000 	.word	0x20000000

08004fc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fd2:	f7fe fd57 	bl	8003a84 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	4413      	add	r3, r2
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fe2:	f7fe fd4f 	bl	8003a84 <HAL_GetTick>
 8004fe6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ff0:	4b3d      	ldr	r3, [pc, #244]	; (80050e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00da      	lsls	r2, r3, #3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	0d1b      	lsrs	r3, r3, #20
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005008:	e060      	b.n	80050cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005010:	d107      	bne.n	8005022 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005020:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d050      	beq.n	80050cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800502a:	f7fe fd2b 	bl	8003a84 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005036:	429a      	cmp	r2, r3
 8005038:	d902      	bls.n	8005040 <SPI_WaitFifoStateUntilTimeout+0x80>
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d13d      	bne.n	80050bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800504e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005058:	d111      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005062:	d004      	beq.n	800506e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506c:	d107      	bne.n	800507e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005086:	d10f      	bne.n	80050a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e010      	b.n	80050de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d196      	bne.n	800500a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3728      	adds	r7, #40	; 0x28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000000 	.word	0x20000000

080050ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2200      	movs	r2, #0
 8005100:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ff5b 	bl	8004fc0 <SPI_WaitFifoStateUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e027      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	2180      	movs	r1, #128	; 0x80
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff fec0 	bl	8004eb0 <SPI_WaitFlagStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e014      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff ff34 	bl	8004fc0 <SPI_WaitFifoStateUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e000      	b.n	8005170 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005180:	f7fe fc80 	bl	8003a84 <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0220 	bic.w	r2, r2, #32
 8005194:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	2164      	movs	r1, #100	; 0x64
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff ffa6 	bl	80050ec <SPI_EndRxTxTransaction>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051aa:	f043 0220 	orr.w	r2, r3, #32
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d115      	bne.n	80051e6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d107      	bne.n	80051d6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fd44 	bl	8004c5c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80051d4:	e00e      	b.n	80051f4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fb fdae 	bl	8000d40 <HAL_SPI_TxRxCpltCallback>
}
 80051e4:	e006      	b.n	80051f4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fb fdb6 	bl	8000d60 <HAL_SPI_ErrorCallback>
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e049      	b.n	80052a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc f844 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f000 fab8 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d001      	beq.n	80052c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e047      	b.n	8005354 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a23      	ldr	r2, [pc, #140]	; (8005360 <HAL_TIM_Base_Start+0xb4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01d      	beq.n	8005312 <HAL_TIM_Base_Start+0x66>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052de:	d018      	beq.n	8005312 <HAL_TIM_Base_Start+0x66>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <HAL_TIM_Base_Start+0xb8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <HAL_TIM_Base_Start+0x66>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <HAL_TIM_Base_Start+0xbc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00e      	beq.n	8005312 <HAL_TIM_Base_Start+0x66>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	; (800536c <HAL_TIM_Base_Start+0xc0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d009      	beq.n	8005312 <HAL_TIM_Base_Start+0x66>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <HAL_TIM_Base_Start+0xc4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <HAL_TIM_Base_Start+0x66>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a19      	ldr	r2, [pc, #100]	; (8005374 <HAL_TIM_Base_Start+0xc8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d115      	bne.n	800533e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	4b17      	ldr	r3, [pc, #92]	; (8005378 <HAL_TIM_Base_Start+0xcc>)
 800531a:	4013      	ands	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b06      	cmp	r3, #6
 8005322:	d015      	beq.n	8005350 <HAL_TIM_Base_Start+0xa4>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532a:	d011      	beq.n	8005350 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533c:	e008      	b.n	8005350 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e000      	b.n	8005352 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005350:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40012c00 	.word	0x40012c00
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40013400 	.word	0x40013400
 8005374:	40014000 	.word	0x40014000
 8005378:	00010007 	.word	0x00010007

0800537c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d122      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b02      	cmp	r3, #2
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0202 	mvn.w	r2, #2
 80053a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9d8 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f9ca 	bl	8005760 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f9db 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d122      	bne.n	800542c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d11b      	bne.n	800542c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0204 	mvn.w	r2, #4
 80053fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f9ae 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f9a0 	bl	8005760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f9b1 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b08      	cmp	r3, #8
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b08      	cmp	r3, #8
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0208 	mvn.w	r2, #8
 8005450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2204      	movs	r2, #4
 8005456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f984 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f976 	bl	8005760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f987 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0310 	and.w	r3, r3, #16
 800548a:	2b10      	cmp	r3, #16
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b10      	cmp	r3, #16
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0210 	mvn.w	r2, #16
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2208      	movs	r2, #8
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f95a 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f94c 	bl	8005760 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f95d 	bl	8005788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0201 	mvn.w	r2, #1
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f926 	bl	800574c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b80      	cmp	r3, #128	; 0x80
 800550c:	d10e      	bne.n	800552c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d107      	bne.n	800552c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fb08 	bl	8005b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553a:	d10e      	bne.n	800555a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b80      	cmp	r3, #128	; 0x80
 8005548:	d107      	bne.n	800555a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fafb 	bl	8005b50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d10e      	bne.n	8005586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d107      	bne.n	8005586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800557e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f90b 	bl	800579c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b20      	cmp	r3, #32
 8005592:	d10e      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d107      	bne.n	80055b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f06f 0220 	mvn.w	r2, #32
 80055aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fabb 	bl	8005b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055c4:	2300      	movs	r3, #0
 80055c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_TIM_ConfigClockSource+0x1c>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e0b6      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x18a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2202      	movs	r2, #2
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005600:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005612:	d03e      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0xd8>
 8005614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005618:	f200 8087 	bhi.w	800572a <HAL_TIM_ConfigClockSource+0x170>
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005620:	f000 8086 	beq.w	8005730 <HAL_TIM_ConfigClockSource+0x176>
 8005624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005628:	d87f      	bhi.n	800572a <HAL_TIM_ConfigClockSource+0x170>
 800562a:	2b70      	cmp	r3, #112	; 0x70
 800562c:	d01a      	beq.n	8005664 <HAL_TIM_ConfigClockSource+0xaa>
 800562e:	2b70      	cmp	r3, #112	; 0x70
 8005630:	d87b      	bhi.n	800572a <HAL_TIM_ConfigClockSource+0x170>
 8005632:	2b60      	cmp	r3, #96	; 0x60
 8005634:	d050      	beq.n	80056d8 <HAL_TIM_ConfigClockSource+0x11e>
 8005636:	2b60      	cmp	r3, #96	; 0x60
 8005638:	d877      	bhi.n	800572a <HAL_TIM_ConfigClockSource+0x170>
 800563a:	2b50      	cmp	r3, #80	; 0x50
 800563c:	d03c      	beq.n	80056b8 <HAL_TIM_ConfigClockSource+0xfe>
 800563e:	2b50      	cmp	r3, #80	; 0x50
 8005640:	d873      	bhi.n	800572a <HAL_TIM_ConfigClockSource+0x170>
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d058      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x13e>
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d86f      	bhi.n	800572a <HAL_TIM_ConfigClockSource+0x170>
 800564a:	2b30      	cmp	r3, #48	; 0x30
 800564c:	d064      	beq.n	8005718 <HAL_TIM_ConfigClockSource+0x15e>
 800564e:	2b30      	cmp	r3, #48	; 0x30
 8005650:	d86b      	bhi.n	800572a <HAL_TIM_ConfigClockSource+0x170>
 8005652:	2b20      	cmp	r3, #32
 8005654:	d060      	beq.n	8005718 <HAL_TIM_ConfigClockSource+0x15e>
 8005656:	2b20      	cmp	r3, #32
 8005658:	d867      	bhi.n	800572a <HAL_TIM_ConfigClockSource+0x170>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d05c      	beq.n	8005718 <HAL_TIM_ConfigClockSource+0x15e>
 800565e:	2b10      	cmp	r3, #16
 8005660:	d05a      	beq.n	8005718 <HAL_TIM_ConfigClockSource+0x15e>
 8005662:	e062      	b.n	800572a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6899      	ldr	r1, [r3, #8]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f000 f9b0 	bl	80059d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005686:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	609a      	str	r2, [r3, #8]
      break;
 8005690:	e04f      	b.n	8005732 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6899      	ldr	r1, [r3, #8]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f000 f999 	bl	80059d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056b4:	609a      	str	r2, [r3, #8]
      break;
 80056b6:	e03c      	b.n	8005732 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6859      	ldr	r1, [r3, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	461a      	mov	r2, r3
 80056c6:	f000 f90d 	bl	80058e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2150      	movs	r1, #80	; 0x50
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f966 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 80056d6:	e02c      	b.n	8005732 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	461a      	mov	r2, r3
 80056e6:	f000 f92c 	bl	8005942 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2160      	movs	r1, #96	; 0x60
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 f956 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 80056f6:	e01c      	b.n	8005732 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	6859      	ldr	r1, [r3, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	461a      	mov	r2, r3
 8005706:	f000 f8ed 	bl	80058e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2140      	movs	r1, #64	; 0x40
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f946 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 8005716:	e00c      	b.n	8005732 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f000 f93d 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 8005728:	e003      	b.n	8005732 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
      break;
 800572e:	e000      	b.n	8005732 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005730:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a40      	ldr	r2, [pc, #256]	; (80058c4 <TIM_Base_SetConfig+0x114>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d013      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ce:	d00f      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a3d      	ldr	r2, [pc, #244]	; (80058c8 <TIM_Base_SetConfig+0x118>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00b      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a3c      	ldr	r2, [pc, #240]	; (80058cc <TIM_Base_SetConfig+0x11c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d007      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a3b      	ldr	r2, [pc, #236]	; (80058d0 <TIM_Base_SetConfig+0x120>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a3a      	ldr	r2, [pc, #232]	; (80058d4 <TIM_Base_SetConfig+0x124>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d108      	bne.n	8005802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2f      	ldr	r2, [pc, #188]	; (80058c4 <TIM_Base_SetConfig+0x114>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01f      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005810:	d01b      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <TIM_Base_SetConfig+0x118>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d017      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2b      	ldr	r2, [pc, #172]	; (80058cc <TIM_Base_SetConfig+0x11c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2a      	ldr	r2, [pc, #168]	; (80058d0 <TIM_Base_SetConfig+0x120>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00f      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <TIM_Base_SetConfig+0x124>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00b      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a28      	ldr	r2, [pc, #160]	; (80058d8 <TIM_Base_SetConfig+0x128>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d007      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a27      	ldr	r2, [pc, #156]	; (80058dc <TIM_Base_SetConfig+0x12c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a26      	ldr	r2, [pc, #152]	; (80058e0 <TIM_Base_SetConfig+0x130>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d108      	bne.n	800585c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a10      	ldr	r2, [pc, #64]	; (80058c4 <TIM_Base_SetConfig+0x114>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00f      	beq.n	80058a8 <TIM_Base_SetConfig+0xf8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a12      	ldr	r2, [pc, #72]	; (80058d4 <TIM_Base_SetConfig+0x124>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00b      	beq.n	80058a8 <TIM_Base_SetConfig+0xf8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a11      	ldr	r2, [pc, #68]	; (80058d8 <TIM_Base_SetConfig+0x128>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <TIM_Base_SetConfig+0xf8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a10      	ldr	r2, [pc, #64]	; (80058dc <TIM_Base_SetConfig+0x12c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_Base_SetConfig+0xf8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a0f      	ldr	r2, [pc, #60]	; (80058e0 <TIM_Base_SetConfig+0x130>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d103      	bne.n	80058b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	615a      	str	r2, [r3, #20]
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40012c00 	.word	0x40012c00
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40013400 	.word	0x40013400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400
 80058e0:	40014800 	.word	0x40014800

080058e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f023 0201 	bic.w	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800590e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 030a 	bic.w	r3, r3, #10
 8005920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005942:	b480      	push	{r7}
 8005944:	b087      	sub	sp, #28
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f023 0210 	bic.w	r2, r3, #16
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800596c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	031b      	lsls	r3, r3, #12
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800597e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	f043 0307 	orr.w	r3, r3, #7
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	609a      	str	r2, [r3, #8]
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e068      	b.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2e      	ldr	r2, [pc, #184]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d108      	bne.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1e      	ldr	r2, [pc, #120]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01d      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d018      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d009      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d10c      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40013400 	.word	0x40013400
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800
 8005b20:	40000c00 	.word	0x40000c00
 8005b24:	40014000 	.word	0x40014000

08005b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <LL_EXTI_EnableIT_0_31>:
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <LL_EXTI_EnableIT_0_31+0x20>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4904      	ldr	r1, [pc, #16]	; (8005b84 <LL_EXTI_EnableIT_0_31+0x20>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40010400 	.word	0x40010400

08005b88 <LL_EXTI_EnableIT_32_63>:
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <LL_EXTI_EnableIT_32_63+0x20>)
 8005b92:	6a1a      	ldr	r2, [r3, #32]
 8005b94:	4904      	ldr	r1, [pc, #16]	; (8005ba8 <LL_EXTI_EnableIT_32_63+0x20>)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	620b      	str	r3, [r1, #32]
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	40010400 	.word	0x40010400

08005bac <LL_EXTI_DisableIT_0_31>:
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <LL_EXTI_DisableIT_0_31+0x24>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	4904      	ldr	r1, [pc, #16]	; (8005bd0 <LL_EXTI_DisableIT_0_31+0x24>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <LL_EXTI_DisableIT_32_63>:
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005bdc:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <LL_EXTI_DisableIT_32_63+0x24>)
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	4904      	ldr	r1, [pc, #16]	; (8005bf8 <LL_EXTI_DisableIT_32_63+0x24>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	620b      	str	r3, [r1, #32]
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40010400 	.word	0x40010400

08005bfc <LL_EXTI_EnableEvent_0_31>:
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <LL_EXTI_EnableEvent_0_31+0x20>)
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	4904      	ldr	r1, [pc, #16]	; (8005c1c <LL_EXTI_EnableEvent_0_31+0x20>)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	40010400 	.word	0x40010400

08005c20 <LL_EXTI_EnableEvent_32_63>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c2c:	4904      	ldr	r1, [pc, #16]	; (8005c40 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40010400 	.word	0x40010400

08005c44 <LL_EXTI_DisableEvent_0_31>:
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005c4c:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	4904      	ldr	r1, [pc, #16]	; (8005c68 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	604b      	str	r3, [r1, #4]
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40010400 	.word	0x40010400

08005c6c <LL_EXTI_DisableEvent_32_63>:
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	4904      	ldr	r1, [pc, #16]	; (8005c90 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005c7e:	4013      	ands	r3, r2
 8005c80:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40010400 	.word	0x40010400

08005c94 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	4904      	ldr	r1, [pc, #16]	; (8005cb4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	608b      	str	r3, [r1, #8]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40010400 	.word	0x40010400

08005cb8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cc4:	4904      	ldr	r1, [pc, #16]	; (8005cd8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40010400 	.word	0x40010400

08005cdc <LL_EXTI_DisableRisingTrig_0_31>:
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	43db      	mvns	r3, r3
 8005cec:	4904      	ldr	r1, [pc, #16]	; (8005d00 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010400 	.word	0x40010400

08005d04 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	43db      	mvns	r3, r3
 8005d14:	4904      	ldr	r1, [pc, #16]	; (8005d28 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40010400 	.word	0x40010400

08005d2c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	4904      	ldr	r1, [pc, #16]	; (8005d4c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60cb      	str	r3, [r1, #12]
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	40010400 	.word	0x40010400

08005d50 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5c:	4904      	ldr	r1, [pc, #16]	; (8005d70 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	40010400 	.word	0x40010400

08005d74 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	43db      	mvns	r3, r3
 8005d84:	4904      	ldr	r1, [pc, #16]	; (8005d98 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	60cb      	str	r3, [r1, #12]
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40010400 	.word	0x40010400

08005d9c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	43db      	mvns	r3, r3
 8005dac:	4904      	ldr	r1, [pc, #16]	; (8005dc0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40010400 	.word	0x40010400

08005dc4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	7a1b      	ldrb	r3, [r3, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80d1 	beq.w	8005f7c <LL_EXTI_Init+0x1b8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d063      	beq.n	8005eaa <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7a5b      	ldrb	r3, [r3, #9]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d01c      	beq.n	8005e24 <LL_EXTI_Init+0x60>
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	dc25      	bgt.n	8005e3a <LL_EXTI_Init+0x76>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <LL_EXTI_Init+0x34>
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d00b      	beq.n	8005e0e <LL_EXTI_Init+0x4a>
 8005df6:	e020      	b.n	8005e3a <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ff21 	bl	8005c44 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff feac 	bl	8005b64 <LL_EXTI_EnableIT_0_31>
          break;
 8005e0c:	e018      	b.n	8005e40 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff feca 	bl	8005bac <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff feed 	bl	8005bfc <LL_EXTI_EnableEvent_0_31>
          break;
 8005e22:	e00d      	b.n	8005e40 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fe9b 	bl	8005b64 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fee2 	bl	8005bfc <LL_EXTI_EnableEvent_0_31>
          break;
 8005e38:	e002      	b.n	8005e40 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
          break;
 8005e3e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	7a9b      	ldrb	r3, [r3, #10]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d030      	beq.n	8005eaa <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7a9b      	ldrb	r3, [r3, #10]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d01c      	beq.n	8005e8a <LL_EXTI_Init+0xc6>
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	dc25      	bgt.n	8005ea0 <LL_EXTI_Init+0xdc>
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d002      	beq.n	8005e5e <LL_EXTI_Init+0x9a>
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d00b      	beq.n	8005e74 <LL_EXTI_Init+0xb0>
 8005e5c:	e020      	b.n	8005ea0 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff ff86 	bl	8005d74 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff ff11 	bl	8005c94 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005e72:	e01b      	b.n	8005eac <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff ff2f 	bl	8005cdc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff ff52 	bl	8005d2c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005e88:	e010      	b.n	8005eac <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff ff00 	bl	8005c94 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff ff47 	bl	8005d2c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005e9e:	e005      	b.n	8005eac <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f043 0302 	orr.w	r3, r3, #2
 8005ea6:	60fb      	str	r3, [r7, #12]
            break;
 8005ea8:	e000      	b.n	8005eac <LL_EXTI_Init+0xe8>
        }
      }
 8005eaa:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d078      	beq.n	8005fa6 <LL_EXTI_Init+0x1e2>
    {
      switch (EXTI_InitStruct->Mode)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	7a5b      	ldrb	r3, [r3, #9]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d01c      	beq.n	8005ef6 <LL_EXTI_Init+0x132>
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	dc25      	bgt.n	8005f0c <LL_EXTI_Init+0x148>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <LL_EXTI_Init+0x106>
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d00b      	beq.n	8005ee0 <LL_EXTI_Init+0x11c>
 8005ec8:	e020      	b.n	8005f0c <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff fecc 	bl	8005c6c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fe55 	bl	8005b88 <LL_EXTI_EnableIT_32_63>
          break;
 8005ede:	e01a      	b.n	8005f16 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff fe75 	bl	8005bd4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff fe96 	bl	8005c20 <LL_EXTI_EnableEvent_32_63>
          break;
 8005ef4:	e00f      	b.n	8005f16 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fe44 	bl	8005b88 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fe8b 	bl	8005c20 <LL_EXTI_EnableEvent_32_63>
          break;
 8005f0a:	e004      	b.n	8005f16 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f043 0304 	orr.w	r3, r3, #4
 8005f12:	60fb      	str	r3, [r7, #12]
          break;
 8005f14:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	7a9b      	ldrb	r3, [r3, #10]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d043      	beq.n	8005fa6 <LL_EXTI_Init+0x1e2>
      {
        switch (EXTI_InitStruct->Trigger)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	7a9b      	ldrb	r3, [r3, #10]
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d01c      	beq.n	8005f60 <LL_EXTI_Init+0x19c>
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	dc25      	bgt.n	8005f76 <LL_EXTI_Init+0x1b2>
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d002      	beq.n	8005f34 <LL_EXTI_Init+0x170>
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d00b      	beq.n	8005f4a <LL_EXTI_Init+0x186>
 8005f32:	e020      	b.n	8005f76 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ff2f 	bl	8005d9c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff feb8 	bl	8005cb8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8005f48:	e02e      	b.n	8005fa8 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fed8 	bl	8005d04 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fef9 	bl	8005d50 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005f5e:	e023      	b.n	8005fa8 <LL_EXTI_Init+0x1e4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fea7 	bl	8005cb8 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff feee 	bl	8005d50 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005f74:	e018      	b.n	8005fa8 <LL_EXTI_Init+0x1e4>
          default:
            status = ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]
            break;
 8005f7a:	e015      	b.n	8005fa8 <LL_EXTI_Init+0x1e4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fe13 	bl	8005bac <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fe5a 	bl	8005c44 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff fe1d 	bl	8005bd4 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fe64 	bl	8005c6c <LL_EXTI_DisableEvent_32_63>
 8005fa4:	e000      	b.n	8005fa8 <LL_EXTI_Init+0x1e4>
      }
 8005fa6:	bf00      	nop
  }

  return status;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <LL_GPIO_SetPinMode>:
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b08b      	sub	sp, #44	; 0x2c
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	fa93 f3a3 	rbit	r3, r3
 8005fcc:	613b      	str	r3, [r7, #16]
  return result;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005fd8:	2320      	movs	r3, #32
 8005fda:	e003      	b.n	8005fe4 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	fab3 f383 	clz	r3, r3
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	2103      	movs	r1, #3
 8005fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fec:	43db      	mvns	r3, r3
 8005fee:	401a      	ands	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	fa93 f3a3 	rbit	r3, r3
 8005ffa:	61fb      	str	r3, [r7, #28]
  return result;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006006:	2320      	movs	r3, #32
 8006008:	e003      	b.n	8006012 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	fab3 f383 	clz	r3, r3
 8006010:	b2db      	uxtb	r3, r3
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	fa01 f303 	lsl.w	r3, r1, r3
 800601a:	431a      	orrs	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	bf00      	nop
 8006022:	372c      	adds	r7, #44	; 0x2c
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <LL_GPIO_SetPinOutputType>:
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	43db      	mvns	r3, r3
 8006040:	401a      	ands	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	fb01 f303 	mul.w	r3, r1, r3
 800604a:	431a      	orrs	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	605a      	str	r2, [r3, #4]
}
 8006050:	bf00      	nop
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <LL_GPIO_SetPinSpeed>:
{
 800605c:	b480      	push	{r7}
 800605e:	b08b      	sub	sp, #44	; 0x2c
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	fa93 f3a3 	rbit	r3, r3
 8006076:	613b      	str	r3, [r7, #16]
  return result;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006082:	2320      	movs	r3, #32
 8006084:	e003      	b.n	800608e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	fab3 f383 	clz	r3, r3
 800608c:	b2db      	uxtb	r3, r3
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	2103      	movs	r1, #3
 8006092:	fa01 f303 	lsl.w	r3, r1, r3
 8006096:	43db      	mvns	r3, r3
 8006098:	401a      	ands	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	fa93 f3a3 	rbit	r3, r3
 80060a4:	61fb      	str	r3, [r7, #28]
  return result;
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80060b0:	2320      	movs	r3, #32
 80060b2:	e003      	b.n	80060bc <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	fab3 f383 	clz	r3, r3
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	fa01 f303 	lsl.w	r3, r1, r3
 80060c4:	431a      	orrs	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	609a      	str	r2, [r3, #8]
}
 80060ca:	bf00      	nop
 80060cc:	372c      	adds	r7, #44	; 0x2c
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <LL_GPIO_SetPinPull>:
{
 80060d6:	b480      	push	{r7}
 80060d8:	b08b      	sub	sp, #44	; 0x2c
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	fa93 f3a3 	rbit	r3, r3
 80060f0:	613b      	str	r3, [r7, #16]
  return result;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80060fc:	2320      	movs	r3, #32
 80060fe:	e003      	b.n	8006108 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	fab3 f383 	clz	r3, r3
 8006106:	b2db      	uxtb	r3, r3
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	2103      	movs	r1, #3
 800610c:	fa01 f303 	lsl.w	r3, r1, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	401a      	ands	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	fa93 f3a3 	rbit	r3, r3
 800611e:	61fb      	str	r3, [r7, #28]
  return result;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800612a:	2320      	movs	r3, #32
 800612c:	e003      	b.n	8006136 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	fab3 f383 	clz	r3, r3
 8006134:	b2db      	uxtb	r3, r3
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	fa01 f303 	lsl.w	r3, r1, r3
 800613e:	431a      	orrs	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	60da      	str	r2, [r3, #12]
}
 8006144:	bf00      	nop
 8006146:	372c      	adds	r7, #44	; 0x2c
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <LL_GPIO_SetAFPin_0_7>:
{
 8006150:	b480      	push	{r7}
 8006152:	b08b      	sub	sp, #44	; 0x2c
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1a      	ldr	r2, [r3, #32]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	fa93 f3a3 	rbit	r3, r3
 800616a:	613b      	str	r3, [r7, #16]
  return result;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006176:	2320      	movs	r3, #32
 8006178:	e003      	b.n	8006182 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	fab3 f383 	clz	r3, r3
 8006180:	b2db      	uxtb	r3, r3
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	210f      	movs	r1, #15
 8006186:	fa01 f303 	lsl.w	r3, r1, r3
 800618a:	43db      	mvns	r3, r3
 800618c:	401a      	ands	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	fa93 f3a3 	rbit	r3, r3
 8006198:	61fb      	str	r3, [r7, #28]
  return result;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80061a4:	2320      	movs	r3, #32
 80061a6:	e003      	b.n	80061b0 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	fab3 f383 	clz	r3, r3
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	fa01 f303 	lsl.w	r3, r1, r3
 80061b8:	431a      	orrs	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	372c      	adds	r7, #44	; 0x2c
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <LL_GPIO_SetAFPin_8_15>:
{
 80061ca:	b480      	push	{r7}
 80061cc:	b08b      	sub	sp, #44	; 0x2c
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	0a1b      	lsrs	r3, r3, #8
 80061de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	fa93 f3a3 	rbit	r3, r3
 80061e6:	613b      	str	r3, [r7, #16]
  return result;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80061f2:	2320      	movs	r3, #32
 80061f4:	e003      	b.n	80061fe <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	fab3 f383 	clz	r3, r3
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	210f      	movs	r1, #15
 8006202:	fa01 f303 	lsl.w	r3, r1, r3
 8006206:	43db      	mvns	r3, r3
 8006208:	401a      	ands	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	0a1b      	lsrs	r3, r3, #8
 800620e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	fa93 f3a3 	rbit	r3, r3
 8006216:	61fb      	str	r3, [r7, #28]
  return result;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006222:	2320      	movs	r3, #32
 8006224:	e003      	b.n	800622e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	fab3 f383 	clz	r3, r3
 800622c:	b2db      	uxtb	r3, r3
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	fa01 f303 	lsl.w	r3, r1, r3
 8006236:	431a      	orrs	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800623c:	bf00      	nop
 800623e:	372c      	adds	r7, #44	; 0x2c
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	fa93 f3a3 	rbit	r3, r3
 800625e:	60fb      	str	r3, [r7, #12]
  return result;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <LL_GPIO_Init+0x26>
    return 32U;
 800626a:	2320      	movs	r3, #32
 800626c:	e003      	b.n	8006276 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	fab3 f383 	clz	r3, r3
 8006274:	b2db      	uxtb	r3, r3
 8006276:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006278:	e048      	b.n	800630c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	2101      	movs	r1, #1
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	fa01 f303 	lsl.w	r3, r1, r3
 8006286:	4013      	ands	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d03a      	beq.n	8006306 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d003      	beq.n	80062a0 <LL_GPIO_Init+0x58>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2b02      	cmp	r3, #2
 800629e:	d10e      	bne.n	80062be <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	461a      	mov	r2, r3
 80062a6:	69b9      	ldr	r1, [r7, #24]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff fed7 	bl	800605c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6819      	ldr	r1, [r3, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	461a      	mov	r2, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff feb7 	bl	800602c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	461a      	mov	r2, r3
 80062c4:	69b9      	ldr	r1, [r7, #24]
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff ff05 	bl	80060d6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d111      	bne.n	80062f8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2bff      	cmp	r3, #255	; 0xff
 80062d8:	d807      	bhi.n	80062ea <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	461a      	mov	r2, r3
 80062e0:	69b9      	ldr	r1, [r7, #24]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff ff34 	bl	8006150 <LL_GPIO_SetAFPin_0_7>
 80062e8:	e006      	b.n	80062f8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	461a      	mov	r2, r3
 80062f0:	69b9      	ldr	r1, [r7, #24]
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff ff69 	bl	80061ca <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	461a      	mov	r2, r3
 80062fe:	69b9      	ldr	r1, [r7, #24]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff fe56 	bl	8005fb2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3301      	adds	r3, #1
 800630a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	fa22 f303 	lsr.w	r3, r2, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1af      	bne.n	800627a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3720      	adds	r7, #32
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800632c:	4a04      	ldr	r2, [pc, #16]	; (8006340 <LL_SetSystemCoreClock+0x1c>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6013      	str	r3, [r2, #0]
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	20000000 	.word	0x20000000

08006344 <__libc_init_array>:
 8006344:	b570      	push	{r4, r5, r6, lr}
 8006346:	4d0d      	ldr	r5, [pc, #52]	; (800637c <__libc_init_array+0x38>)
 8006348:	4c0d      	ldr	r4, [pc, #52]	; (8006380 <__libc_init_array+0x3c>)
 800634a:	1b64      	subs	r4, r4, r5
 800634c:	10a4      	asrs	r4, r4, #2
 800634e:	2600      	movs	r6, #0
 8006350:	42a6      	cmp	r6, r4
 8006352:	d109      	bne.n	8006368 <__libc_init_array+0x24>
 8006354:	4d0b      	ldr	r5, [pc, #44]	; (8006384 <__libc_init_array+0x40>)
 8006356:	4c0c      	ldr	r4, [pc, #48]	; (8006388 <__libc_init_array+0x44>)
 8006358:	f000 f82e 	bl	80063b8 <_init>
 800635c:	1b64      	subs	r4, r4, r5
 800635e:	10a4      	asrs	r4, r4, #2
 8006360:	2600      	movs	r6, #0
 8006362:	42a6      	cmp	r6, r4
 8006364:	d105      	bne.n	8006372 <__libc_init_array+0x2e>
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	f855 3b04 	ldr.w	r3, [r5], #4
 800636c:	4798      	blx	r3
 800636e:	3601      	adds	r6, #1
 8006370:	e7ee      	b.n	8006350 <__libc_init_array+0xc>
 8006372:	f855 3b04 	ldr.w	r3, [r5], #4
 8006376:	4798      	blx	r3
 8006378:	3601      	adds	r6, #1
 800637a:	e7f2      	b.n	8006362 <__libc_init_array+0x1e>
 800637c:	08006888 	.word	0x08006888
 8006380:	08006888 	.word	0x08006888
 8006384:	08006888 	.word	0x08006888
 8006388:	0800688c 	.word	0x0800688c

0800638c <memcpy>:
 800638c:	440a      	add	r2, r1
 800638e:	4291      	cmp	r1, r2
 8006390:	f100 33ff 	add.w	r3, r0, #4294967295
 8006394:	d100      	bne.n	8006398 <memcpy+0xc>
 8006396:	4770      	bx	lr
 8006398:	b510      	push	{r4, lr}
 800639a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a2:	4291      	cmp	r1, r2
 80063a4:	d1f9      	bne.n	800639a <memcpy+0xe>
 80063a6:	bd10      	pop	{r4, pc}

080063a8 <memset>:
 80063a8:	4402      	add	r2, r0
 80063aa:	4603      	mov	r3, r0
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d100      	bne.n	80063b2 <memset+0xa>
 80063b0:	4770      	bx	lr
 80063b2:	f803 1b01 	strb.w	r1, [r3], #1
 80063b6:	e7f9      	b.n	80063ac <memset+0x4>

080063b8 <_init>:
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	bf00      	nop
 80063bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063be:	bc08      	pop	{r3}
 80063c0:	469e      	mov	lr, r3
 80063c2:	4770      	bx	lr

080063c4 <_fini>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr
