
prosthesis_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d10  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08007e98  08007e98  00017e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c0  080083c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080083c0  080083c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083c0  080083c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083c4  080083c4  000183c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080083c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c4  20000070  08008438  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001134  08008438  00021134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001963a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003776  00000000  00000000  000396da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0003ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  0003e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c86e  00000000  00000000  0003fb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e56  00000000  00000000  0006c3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010dd05  00000000  00000000  0008424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00191f51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006540  00000000  00000000  00191fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007e80 	.word	0x08007e80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08007e80 	.word	0x08007e80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	4413      	add	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	211f      	movs	r1, #31
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0e9b      	lsrs	r3, r3, #26
 8000b9e:	f003 011f 	and.w	r1, r3, #31
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3314      	adds	r3, #20
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	0e5b      	lsrs	r3, r3, #25
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0d1b      	lsrs	r3, r3, #20
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	2107      	movs	r1, #7
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	0d1b      	lsrs	r3, r3, #20
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0318 	and.w	r3, r3, #24
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c38:	40d9      	lsrs	r1, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c42:	431a      	orrs	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	0007ffff 	.word	0x0007ffff

08000c5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6093      	str	r3, [r2, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000cba:	4905      	ldr	r1, [pc, #20]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000

08000d04 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLLSAI1);
 8000d6a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000d6e:	f7ff ff9b 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000d72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d76:	f7ff ffad 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	f7ff ffaa 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000d80:	2301      	movs	r3, #1
 8000d82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d84:	2303      	movs	r3, #3
 8000d86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4831      	ldr	r0, [pc, #196]	; (8000e58 <MX_ADC1_Init+0x130>)
 8000d92:	f006 fc62 	bl	800765a <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_0);
 8000d96:	2101      	movs	r1, #1
 8000d98:	482f      	ldr	r0, [pc, #188]	; (8000e58 <MX_ADC1_Init+0x130>)
 8000d9a:	f7ff ffb3 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4619      	mov	r1, r3
 8000db0:	482a      	ldr	r0, [pc, #168]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000db2:	f006 fa97 	bl	80072e4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4821      	ldr	r0, [pc, #132]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000dd6:	f006 faab 	bl	8007330 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	4619      	mov	r1, r3
 8000de8:	481d      	ldr	r0, [pc, #116]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dea:	f006 fa33 	bl	8007254 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000dee:	2100      	movs	r1, #0
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000df2:	f7ff fea5 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000df6:	4819      	ldr	r0, [pc, #100]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000df8:	f7ff ff30 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000dfc:	4817      	ldr	r0, [pc, #92]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000dfe:	f7ff ff3f 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_ADC1_Init+0x140>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	099a      	lsrs	r2, r3, #6
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_ADC1_Init+0x144>)
 8000e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e24:	e002      	b.n	8000e2c <MX_ADC1_Init+0x104>
  {
    wait_loop_index--;
 8000e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f9      	bne.n	8000e26 <MX_ADC1_Init+0xfe>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e34:	2106      	movs	r1, #6
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e38:	f7ff fe95 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	490c      	ldr	r1, [pc, #48]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e42:	f7ff febc 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000e46:	227f      	movs	r2, #127	; 0x7f
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e4a:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000e4c:	f7ff fee2 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3750      	adds	r7, #80	; 0x50
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	50040000 	.word	0x50040000
 8000e60:	50040300 	.word	0x50040300
 8000e64:	20000000 	.word	0x20000000
 8000e68:	053e2d63 	.word	0x053e2d63
 8000e6c:	cccccccd 	.word	0xcccccccd
 8000e70:	04300002 	.word	0x04300002

08000e74 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000e7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLLSAI1);
 8000eb6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000eba:	f7ff fef5 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000ebe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec2:	f7ff ff07 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f7ff ff04 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4830      	ldr	r0, [pc, #192]	; (8000fa0 <MX_ADC2_Init+0x12c>)
 8000ede:	f006 fbbc 	bl	800765a <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_1);
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	482e      	ldr	r0, [pc, #184]	; (8000fa0 <MX_ADC2_Init+0x12c>)
 8000ee6:	f7ff ff0d 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000eea:	2300      	movs	r3, #0
 8000eec:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000ef6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efa:	4619      	mov	r1, r3
 8000efc:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000efe:	f006 f9f1 	bl	80072e4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4820      	ldr	r0, [pc, #128]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f22:	f006 fa05 	bl	8007330 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481d      	ldr	r0, [pc, #116]	; (8000fa8 <MX_ADC2_Init+0x134>)
 8000f32:	f006 f98f 	bl	8007254 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000f36:	2100      	movs	r1, #0
 8000f38:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <MX_ADC2_Init+0x134>)
 8000f3a:	f7ff fe01 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000f3e:	4819      	ldr	r0, [pc, #100]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f40:	f7ff fe8c 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f46:	f7ff fe9b 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_ADC2_Init+0x138>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	099b      	lsrs	r3, r3, #6
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <MX_ADC2_Init+0x13c>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	099a      	lsrs	r2, r3, #6
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC2_Init+0x140>)
 8000f64:	fba3 2302 	umull	r2, r3, r3, r2
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f6c:	e002      	b.n	8000f74 <MX_ADC2_Init+0x100>
  {
    wait_loop_index--;
 8000f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f70:	3b01      	subs	r3, #1
 8000f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <MX_ADC2_Init+0xfa>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f7c:	2106      	movs	r1, #6
 8000f7e:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f80:	f7ff fdf1 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000f84:	2200      	movs	r2, #0
 8000f86:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f8a:	f7ff fe18 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000f8e:	227f      	movs	r2, #127	; 0x7f
 8000f90:	4909      	ldr	r1, [pc, #36]	; (8000fb8 <MX_ADC2_Init+0x144>)
 8000f92:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_ADC2_Init+0x130>)
 8000f94:	f7ff fe3e 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3750      	adds	r7, #80	; 0x50
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	50040100 	.word	0x50040100
 8000fa8:	50040300 	.word	0x50040300
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	053e2d63 	.word	0x053e2d63
 8000fb4:	cccccccd 	.word	0xcccccccd
 8000fb8:	08600004 	.word	0x08600004

08000fbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <MX_GPIO_Init+0xd0>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a27      	ldr	r2, [pc, #156]	; (800108c <MX_GPIO_Init+0xd0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <MX_GPIO_Init+0xd0>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSCOPE_GPIO_Port, OSCOPE_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	4821      	ldr	r0, [pc, #132]	; (8001090 <MX_GPIO_Init+0xd4>)
 800100a:	f004 fcbb 	bl	8005984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANKLE_IMU_BT_Pin|ANKLE_IMU_P0_Pin|ANKLE_IMU_P1_Pin|ANKLE_IMU_RST_Pin
 800100e:	2200      	movs	r2, #0
 8001010:	211f      	movs	r1, #31
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f004 fcb5 	bl	8005984 <HAL_GPIO_WritePin>
                          |ANKLE_IMU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OSCOPE_Pin;
 800101a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OSCOPE_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4619      	mov	r1, r3
 8001032:	4817      	ldr	r0, [pc, #92]	; (8001090 <MX_GPIO_Init+0xd4>)
 8001034:	f004 fa08 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ANKLE_IMU_BT_Pin|ANKLE_IMU_P0_Pin|ANKLE_IMU_P1_Pin|ANKLE_IMU_RST_Pin
 8001038:	231f      	movs	r3, #31
 800103a:	60fb      	str	r3, [r7, #12]
                          |ANKLE_IMU_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f004 f9f9 	bl	8005448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANKLE_IMU_INT_Pin;
 8001056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800105c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001062:	2301      	movs	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ANKLE_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f004 f9ea 	bl	8005448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2100      	movs	r1, #0
 8001078:	2017      	movs	r0, #23
 800107a:	f004 f960 	bl	800533e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800107e:	2017      	movs	r0, #23
 8001080:	f004 f979 	bl	8005376 <HAL_NVIC_EnableIRQ>

}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	48000800 	.word	0x48000800

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	60da      	str	r2, [r3, #12]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60da      	str	r2, [r3, #12]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	60da      	str	r2, [r3, #12]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60da      	str	r2, [r3, #12]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	f023 0203 	bic.w	r2, r3, #3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	621a      	str	r2, [r3, #32]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	60da      	str	r2, [r3, #12]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	f023 0201 	bic.w	r2, r3, #1
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60da      	str	r2, [r3, #12]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <LL_RCC_SetLPTIMClockSource>:
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <LL_RCC_SetLPTIMClockSource+0x30>)
 80012b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	0c1b      	lsrs	r3, r3, #16
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	43db      	mvns	r3, r3
 80012c2:	401a      	ands	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	041b      	lsls	r3, r3, #16
 80012c8:	4904      	ldr	r1, [pc, #16]	; (80012dc <LL_RCC_SetLPTIMClockSource+0x30>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000

080012e0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <LL_APB1_GRP2_EnableClock+0x2c>)
 80012ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <LL_APB1_GRP2_EnableClock+0x2c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <LL_APB1_GRP2_EnableClock+0x2c>)
 80012f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4013      	ands	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	40021000 	.word	0x40021000

08001310 <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSI);
 8001314:	4819      	ldr	r0, [pc, #100]	; (800137c <MX_LPTIM2_Init+0x6c>)
 8001316:	f7ff ffc9 	bl	80012ac <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 800131a:	2020      	movs	r0, #32
 800131c:	f7ff ffe0 	bl	80012e0 <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001320:	f7ff feb8 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001324:	4603      	mov	r3, r0
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff08 	bl	8001140 <NVIC_EncodePriority>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	2042      	movs	r0, #66	; 0x42
 8001336:	f7ff fed9 	bl	80010ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 800133a:	2042      	movs	r0, #66	; 0x42
 800133c:	f7ff feb8 	bl	80010b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8001340:	2100      	movs	r1, #0
 8001342:	480f      	ldr	r0, [pc, #60]	; (8001380 <MX_LPTIM2_Init+0x70>)
 8001344:	f7ff ff9e 	bl	8001284 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8001348:	2100      	movs	r1, #0
 800134a:	480d      	ldr	r0, [pc, #52]	; (8001380 <MX_LPTIM2_Init+0x70>)
 800134c:	f7ff ff64 	bl	8001218 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8001350:	2100      	movs	r1, #0
 8001352:	480b      	ldr	r0, [pc, #44]	; (8001380 <MX_LPTIM2_Init+0x70>)
 8001354:	f7ff ff4d 	bl	80011f2 <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001358:	2100      	movs	r1, #0
 800135a:	4809      	ldr	r0, [pc, #36]	; (8001380 <MX_LPTIM2_Init+0x70>)
 800135c:	f7ff ff23 	bl	80011a6 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8001360:	2100      	movs	r1, #0
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_LPTIM2_Init+0x70>)
 8001364:	f7ff ff32 	bl	80011cc <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_LPTIM2_Init+0x70>)
 800136a:	f7ff ff7b 	bl	8001264 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 800136e:	2100      	movs	r1, #0
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_LPTIM2_Init+0x70>)
 8001372:	f7ff ff64 	bl	800123e <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	00300010 	.word	0x00300010
 8001380:	40009400 	.word	0x40009400

08001384 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001398:	f043 0201 	orr.w	r2, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_LPTIM_Enable>:
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	611a      	str	r2, [r3, #16]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_LPTIM_StartCounter>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	f023 0206 	bic.w	r2, r3, #6
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	611a      	str	r2, [r3, #16]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_LPTIM_SetAutoReload>:
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	0c1b      	lsrs	r3, r3, #16
 8001402:	041b      	lsls	r3, r3, #16
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f043 0202 	orr.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_RCC_HSI_Enable>:
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <LL_RCC_HSI_Enable+0x1c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <LL_RCC_HSI_Enable+0x1c>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <LL_RCC_HSI_IsReady>:
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <LL_RCC_HSI_IsReady+0x24>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001468:	d101      	bne.n	800146e <LL_RCC_HSI_IsReady+0x16>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <LL_RCC_HSI_IsReady+0x18>
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	061b      	lsls	r3, r3, #24
 8001494:	4904      	ldr	r1, [pc, #16]	; (80014a8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000

080014ac <LL_RCC_LSI_Enable>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <LL_RCC_LSI_Enable+0x20>)
 80014b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <LL_RCC_LSI_Enable+0x20>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <LL_RCC_LSI_IsReady>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <LL_RCC_LSI_IsReady+0x24>)
 80014d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d101      	bne.n	80014e6 <LL_RCC_LSI_IsReady+0x16>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <LL_RCC_LSI_IsReady+0x18>
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000

080014f8 <LL_RCC_SetSysClkSource>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <LL_RCC_SetSysClkSource+0x24>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 0203 	bic.w	r2, r3, #3
 8001508:	4904      	ldr	r1, [pc, #16]	; (800151c <LL_RCC_SetSysClkSource+0x24>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000

08001520 <LL_RCC_GetSysClkSource>:
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <LL_RCC_GetSysClkSource+0x18>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 030c 	and.w	r3, r3, #12
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <LL_RCC_SetAHBPrescaler>:
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <LL_RCC_SetAHBPrescaler+0x24>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800154c:	4904      	ldr	r1, [pc, #16]	; (8001560 <LL_RCC_SetAHBPrescaler+0x24>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000

08001564 <LL_RCC_SetAPB1Prescaler>:
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <LL_RCC_SetAPB1Prescaler+0x24>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001574:	4904      	ldr	r1, [pc, #16]	; (8001588 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000

0800158c <LL_RCC_SetAPB2Prescaler>:
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800159c:	4904      	ldr	r1, [pc, #16]	; (80015b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000

080015b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_RCC_PLL_Enable+0x1c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <LL_RCC_PLL_Enable+0x1c>)
 80015be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000

080015d4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80015d8:	4b07      	ldr	r3, [pc, #28]	; (80015f8 <LL_RCC_PLL_IsReady+0x24>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015e4:	d101      	bne.n	80015ea <LL_RCC_PLL_IsReady+0x16>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <LL_RCC_PLL_IsReady+0x18>
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000

080015fc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001610:	4013      	ands	r3, r2
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	4311      	orrs	r1, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	0212      	lsls	r2, r2, #8
 800161c:	4311      	orrs	r1, r2
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	4904      	ldr	r1, [pc, #16]	; (8001634 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001624:	4313      	orrs	r3, r2
 8001626:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000
 8001638:	f9ff808c 	.word	0xf9ff808c

0800163c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000

0800165c <LL_RCC_PLLSAI1_Enable>:
  * @brief  Enable PLLSAI1
  * @rmtoll CR           PLLSAI1ON     LL_RCC_PLLSAI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_Enable(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <LL_RCC_PLLSAI1_Enable+0x1c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <LL_RCC_PLLSAI1_Enable+0x1c>)
 8001666:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <LL_RCC_PLLSAI1_IsReady>:
  * @brief  Check if PLLSAI1 Ready
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <LL_RCC_PLLSAI1_IsReady+0x24>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800168c:	d101      	bne.n	8001692 <LL_RCC_PLLSAI1_IsReady+0x16>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <LL_RCC_PLLSAI1_IsReady+0x18>
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <LL_RCC_PLLSAI1_ConfigDomain_ADC>:
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_6
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80016ba:	68f9      	ldr	r1, [r7, #12]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	430b      	orrs	r3, r1
 80016c0:	490a      	ldr	r1, [pc, #40]	; (80016ec <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLR);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80016ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	0211      	lsls	r1, r2, #8
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	4904      	ldr	r1, [pc, #16]	; (80016ec <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	610b      	str	r3, [r1, #16]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000

080016f0 <LL_RCC_PLLSAI1_EnableDomain_ADC>:
  * @brief  Enable PLLSAI1 output mapped on ADC domain clock
  * @rmtoll PLLSAI1CFGR  PLLSAI1REN    LL_RCC_PLLSAI1_EnableDomain_ADC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_ADC(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1REN);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 80016fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fe:	6113      	str	r3, [r2, #16]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <LL_FLASH_SetLatency+0x24>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 0207 	bic.w	r2, r3, #7
 8001720:	4904      	ldr	r1, [pc, #16]	; (8001734 <LL_FLASH_SetLatency+0x24>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40022000 	.word	0x40022000

08001738 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <LL_FLASH_GetLatency+0x18>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40022000 	.word	0x40022000

08001754 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001764:	4904      	ldr	r1, [pc, #16]	; (8001778 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40007000 	.word	0x40007000

0800177c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	4013      	ands	r3, r2
 8001792:	041a      	lsls	r2, r3, #16
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43d9      	mvns	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	400b      	ands	r3, r1
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b6:	f003 fc4e 	bl	8005056 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ba:	f000 f84b 	bl	8001854 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017be:	f000 f89d 	bl	80018fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c2:	f7ff fbfb 	bl	8000fbc <MX_GPIO_Init>
  MX_SPI1_Init();
 80017c6:	f000 faf9 	bl	8001dbc <MX_SPI1_Init>
  MX_TIM2_Init();
 80017ca:	f000 ff55 	bl	8002678 <MX_TIM2_Init>
  MX_LPTIM2_Init();
 80017ce:	f7ff fd9f 	bl	8001310 <MX_LPTIM2_Init>
  MX_ADC1_Init();
 80017d2:	f7ff faa9 	bl	8000d28 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017d6:	f7ff fb4d 	bl	8000e74 <MX_ADC2_Init>
/*******************************************************************************
* USER ADDED DEFINITIONS
*******************************************************************************/

  	Prosthesis_Init_t Prosthesis_Init;
	Prosthesis_Init.Joint = Combined;
 80017da:	2301      	movs	r3, #1
 80017dc:	717b      	strb	r3, [r7, #5]
	Prosthesis_Init.Side = Left;
 80017de:	2300      	movs	r3, #0
 80017e0:	713b      	strb	r3, [r7, #4]
* USER ADDED INITIALIZATIONS
*******************************************************************************/

//	LL_SYSTICK_EnableIT(); do i actually need this?

	LL_LPTIM_Enable(LPTIM2);
 80017e2:	4817      	ldr	r0, [pc, #92]	; (8001840 <main+0x90>)
 80017e4:	f7ff fde2 	bl	80013ac <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 80017e8:	4815      	ldr	r0, [pc, #84]	; (8001840 <main+0x90>)
 80017ea:	f7ff fe15 	bl	8001418 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 80017ee:	213f      	movs	r1, #63	; 0x3f
 80017f0:	4813      	ldr	r0, [pc, #76]	; (8001840 <main+0x90>)
 80017f2:	f7ff fdfe 	bl	80013f2 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 80017f6:	2104      	movs	r1, #4
 80017f8:	4811      	ldr	r0, [pc, #68]	; (8001840 <main+0x90>)
 80017fa:	f7ff fde7 	bl	80013cc <LL_LPTIM_StartCounter>

	LL_ADC_Enable(ADC1);
 80017fe:	4811      	ldr	r0, [pc, #68]	; (8001844 <main+0x94>)
 8001800:	f7ff fdc0 	bl	8001384 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001804:	4810      	ldr	r0, [pc, #64]	; (8001848 <main+0x98>)
 8001806:	f7ff fdbd 	bl	8001384 <LL_ADC_Enable>

  	if(BNO08x_Init(0))
 800180a:	2000      	movs	r0, #0
 800180c:	f001 f8d6 	bl	80029bc <BNO08x_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <main+0x6a>
  		Error_Handler();
 8001816:	f000 f886 	bl	8001926 <Error_Handler>

	InitProsthesisControl(&Prosthesis_Init);
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f8bb 	bl	8001998 <InitProsthesisControl>
* USER ADDED MAIN LOOP
*******************************************************************************/

  while (1)
  {
	  if(isProsthesisControlRequired)
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <main+0x9c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0fb      	beq.n	8001822 <main+0x72>
	  {
		  LL_GPIO_TogglePin(OSCOPE_GPIO_Port, OSCOPE_Pin);
 800182a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182e:	4808      	ldr	r0, [pc, #32]	; (8001850 <main+0xa0>)
 8001830:	f7ff ffa4 	bl	800177c <LL_GPIO_TogglePin>
		  RunProsthesisControl();
 8001834:	f000 f8c2 	bl	80019bc <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <main+0x9c>)
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 800183e:	e7f0      	b.n	8001822 <main+0x72>
 8001840:	40009400 	.word	0x40009400
 8001844:	50040000 	.word	0x50040000
 8001848:	50040100 	.word	0x50040100
 800184c:	2000008c 	.word	0x2000008c
 8001850:	48000800 	.word	0x48000800

08001854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001858:	2004      	movs	r0, #4
 800185a:	f7ff ff59 	bl	8001710 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 800185e:	bf00      	nop
 8001860:	f7ff ff6a 	bl	8001738 <LL_FLASH_GetLatency>
 8001864:	4603      	mov	r3, r0
 8001866:	2b04      	cmp	r3, #4
 8001868:	d1fa      	bne.n	8001860 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800186a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800186e:	f7ff ff71 	bl	8001754 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8001872:	f7ff fde1 	bl	8001438 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001876:	bf00      	nop
 8001878:	f7ff fdee 	bl	8001458 <LL_RCC_HSI_IsReady>
 800187c:	4603      	mov	r3, r0
 800187e:	2b01      	cmp	r3, #1
 8001880:	d1fa      	bne.n	8001878 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001882:	2010      	movs	r0, #16
 8001884:	f7ff fdfc 	bl	8001480 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_LSI_Enable();
 8001888:	f7ff fe10 	bl	80014ac <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 800188c:	bf00      	nop
 800188e:	f7ff fe1f 	bl	80014d0 <LL_RCC_LSI_IsReady>
 8001892:	4603      	mov	r3, r0
 8001894:	2b01      	cmp	r3, #1
 8001896:	d1fa      	bne.n	800188e <SystemClock_Config+0x3a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 8001898:	2300      	movs	r3, #0
 800189a:	220a      	movs	r2, #10
 800189c:	2100      	movs	r1, #0
 800189e:	2002      	movs	r0, #2
 80018a0:	f7ff feac 	bl	80015fc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80018a4:	f7ff feca 	bl	800163c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80018a8:	f7ff fe84 	bl	80015b4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80018ac:	bf00      	nop
 80018ae:	f7ff fe91 	bl	80015d4 <LL_RCC_PLL_IsReady>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d1fa      	bne.n	80018ae <SystemClock_Config+0x5a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f7ff fe1d 	bl	80014f8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80018be:	bf00      	nop
 80018c0:	f7ff fe2e 	bl	8001520 <LL_RCC_GetSysClkSource>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d1fa      	bne.n	80018c0 <SystemClock_Config+0x6c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fe36 	bl	800153c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff fe47 	bl	8001564 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff fe58 	bl	800158c <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <SystemClock_Config+0xa4>)
 80018de:	f005 ff2b 	bl	8007738 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80018e2:	200f      	movs	r0, #15
 80018e4:	f003 fbd0 	bl	8005088 <HAL_InitTick>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80018ee:	f000 f81a 	bl	8001926 <Error_Handler>
  }
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	04c4b400 	.word	0x04c4b400

080018fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  LL_RCC_PLLSAI1_ConfigDomain_ADC(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLSAI1R_DIV_2);
 8001900:	2300      	movs	r3, #0
 8001902:	2208      	movs	r2, #8
 8001904:	2100      	movs	r1, #0
 8001906:	2002      	movs	r0, #2
 8001908:	f7ff fecc 	bl	80016a4 <LL_RCC_PLLSAI1_ConfigDomain_ADC>
  LL_RCC_PLLSAI1_EnableDomain_ADC();
 800190c:	f7ff fef0 	bl	80016f0 <LL_RCC_PLLSAI1_EnableDomain_ADC>
  LL_RCC_PLLSAI1_Enable();
 8001910:	f7ff fea4 	bl	800165c <LL_RCC_PLLSAI1_Enable>

   /* Wait till PLLSAI1 is ready */
  while(LL_RCC_PLLSAI1_IsReady() != 1)
 8001914:	bf00      	nop
 8001916:	f7ff feb1 	bl	800167c <LL_RCC_PLLSAI1_IsReady>
 800191a:	4603      	mov	r3, r0
 800191c:	2b01      	cmp	r3, #1
 800191e:	d1fa      	bne.n	8001916 <PeriphCommonClock_Config+0x1a>
  {

  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}

08001926 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192a:	b672      	cpsid	i
}
 800192c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192e:	e7fe      	b.n	800192e <Error_Handler+0x8>

08001930 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001940:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001944:	f043 0204 	orr.w	r2, r3, #4
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	b29b      	uxth	r3, r3
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b04      	cmp	r3, #4
 8001984:	d101      	bne.n	800198a <LL_ADC_IsActiveFlag_EOC+0x18>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <LL_ADC_IsActiveFlag_EOC+0x1a>
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <InitProsthesisControl>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void InitProsthesisControl(Prosthesis_Init_t *Device_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b29a      	uxth	r2, r3
	memcpy(&Device, Device_Init, sizeof(Device));
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <InitProsthesisControl+0x20>)
 80019a8:	801a      	strh	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000090 	.word	0x20000090

080019bc <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	GetInputs();
 80019c0:	f000 f81a 	bl	80019f8 <GetInputs>
	ProcessInputs();
 80019c4:	f000 f85c 	bl	8001a80 <ProcessInputs>

	// Check for first and second executions, needed for derivatives, filters, etc.
	if(isFirst)
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <RunProsthesisControl+0x34>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <RunProsthesisControl+0x22>
	{
		isFirst = 0;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <RunProsthesisControl+0x34>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <RunProsthesisControl+0x38>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 80019dc:	e006      	b.n	80019ec <RunProsthesisControl+0x30>
	else if(isSecond)
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <RunProsthesisControl+0x38>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <RunProsthesisControl+0x30>
		isSecond = 0;
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <RunProsthesisControl+0x38>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000092 	.word	0x20000092
 80019f4:	20000093 	.word	0x20000093

080019f8 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	if (BNO08x_resetOccurred)
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <GetInputs+0x4c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <GetInputs+0x16>
	{
		BNO08x_resetOccurred = 0;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <GetInputs+0x4c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
		if(BNO08x_StartReports())
 8001a0a:	f000 ffff 	bl	8002a0c <BNO08x_StartReports>
		{
			// User may add error handling for this if desired
		}
	}

	BNO08x_ReadSensors();
 8001a0e:	f001 f82d 	bl	8002a6c <BNO08x_ReadSensors>

	CM_LoadCell.Raw.bot[0] = ReadLoadCell(ADC1);
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <GetInputs+0x50>)
 8001a14:	f000 f81e 	bl	8001a54 <ReadLoadCell>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <GetInputs+0x54>)
 8001a24:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell.Raw.top[0] = ReadLoadCell(ADC2);
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <GetInputs+0x58>)
 8001a2a:	f000 f813 	bl	8001a54 <ReadLoadCell>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <GetInputs+0x54>)
 8001a3a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000678 	.word	0x20000678
 8001a48:	50040000 	.word	0x50040000
 8001a4c:	200000b8 	.word	0x200000b8
 8001a50:	50040100 	.word	0x50040100

08001a54 <ReadLoadCell>:

static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff67 	bl	8001930 <LL_ADC_REG_StartConversion>
	while (!LL_ADC_IsActiveFlag_EOC(ADCx));
 8001a62:	bf00      	nop
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff84 	bl	8001972 <LL_ADC_IsActiveFlag_EOC>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f9      	beq.n	8001a64 <ReadLoadCell+0x10>
	return LL_ADC_REG_ReadConversionData12(ADCx);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff71 	bl	8001958 <LL_ADC_REG_ReadConversionData12>
 8001a76:	4603      	mov	r3, r0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <ProcessInputs>:

static void ProcessInputs(void)
{
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
	// Get accel and gyro data
	for(uint8_t i = 0; i < 6; i++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
 8001a8a:	e00c      	b.n	8001aa6 <ProcessInputs+0x26>
		CM_IMU_Data.array[i] = BNO08x_IMU_Data[i];
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	4944      	ldr	r1, [pc, #272]	; (8001ba4 <ProcessInputs+0x124>)
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	440a      	add	r2, r1
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	4943      	ldr	r1, [pc, #268]	; (8001ba8 <ProcessInputs+0x128>)
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	d9ef      	bls.n	8001a8c <ProcessInputs+0xc>

	float yaw, pitch, roll;
	QuaternionsToYPR(BNO08x_IMU_Data[6], BNO08x_IMU_Data[7], BNO08x_IMU_Data[8], BNO08x_IMU_Data[9], &yaw, &pitch, &roll);
 8001aac:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <ProcessInputs+0x124>)
 8001aae:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <ProcessInputs+0x124>)
 8001ab4:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <ProcessInputs+0x124>)
 8001aba:	edd3 6a08 	vldr	s13, [r3, #32]
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <ProcessInputs+0x124>)
 8001ac0:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8001ac4:	463a      	mov	r2, r7
 8001ac6:	1d39      	adds	r1, r7, #4
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	4618      	mov	r0, r3
 8001ace:	eef0 1a46 	vmov.f32	s3, s12
 8001ad2:	eeb0 1a66 	vmov.f32	s2, s13
 8001ad6:	eef0 0a47 	vmov.f32	s1, s14
 8001ada:	eeb0 0a67 	vmov.f32	s0, s15
 8001ade:	f000 fe3f 	bl	8002760 <QuaternionsToYPR>
	CM_IMU_Data.Struct.yaw = yaw * RAD_TO_DEG;
 8001ae2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001bac <ProcessInputs+0x12c>
 8001aea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aee:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001bb0 <ProcessInputs+0x130>
 8001af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <ProcessInputs+0x128>)
 8001af8:	edc3 7a06 	vstr	s15, [r3, #24]
	CM_IMU_Data.Struct.pitch = pitch * RAD_TO_DEG;
 8001afc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b00:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001bac <ProcessInputs+0x12c>
 8001b04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b08:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001bb0 <ProcessInputs+0x130>
 8001b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <ProcessInputs+0x128>)
 8001b12:	edc3 7a07 	vstr	s15, [r3, #28]
	CM_IMU_Data.Struct.roll = roll * RAD_TO_DEG;
 8001b16:	edd7 7a00 	vldr	s15, [r7]
 8001b1a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001bac <ProcessInputs+0x12c>
 8001b1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b22:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001bb0 <ProcessInputs+0x130>
 8001b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <ProcessInputs+0x128>)
 8001b2c:	edc3 7a08 	vstr	s15, [r3, #32]

	// Filtering of load cells
	if(isFirst)
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <ProcessInputs+0x134>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d018      	beq.n	8001b6a <ProcessInputs+0xea>
	{
		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[0];
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <ProcessInputs+0x138>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <ProcessInputs+0x138>)
 8001b3e:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[0];
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <ProcessInputs+0x138>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <ProcessInputs+0x138>)
 8001b46:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <ProcessInputs+0x138>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <ProcessInputs+0x138>)
 8001b4e:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <ProcessInputs+0x138>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <ProcessInputs+0x138>)
 8001b56:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[0];
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <ProcessInputs+0x138>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <ProcessInputs+0x138>)
 8001b5e:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[0];
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <ProcessInputs+0x138>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <ProcessInputs+0x138>)
 8001b66:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[1];
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[1];
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
	}
}
 8001b68:	e110      	b.n	8001d8c <ProcessInputs+0x30c>
	else if(isSecond)
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <ProcessInputs+0x13c>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d026      	beq.n	8001bc0 <ProcessInputs+0x140>
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <ProcessInputs+0x138>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <ProcessInputs+0x138>)
 8001b78:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <ProcessInputs+0x138>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <ProcessInputs+0x138>)
 8001b80:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <ProcessInputs+0x138>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <ProcessInputs+0x138>)
 8001b88:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <ProcessInputs+0x138>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <ProcessInputs+0x138>)
 8001b90:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <ProcessInputs+0x138>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <ProcessInputs+0x138>)
 8001b98:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <ProcessInputs+0x138>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <ProcessInputs+0x138>)
 8001ba0:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001ba2:	e0f3      	b.n	8001d8c <ProcessInputs+0x30c>
 8001ba4:	20000650 	.word	0x20000650
 8001ba8:	20000094 	.word	0x20000094
 8001bac:	43340000 	.word	0x43340000
 8001bb0:	40490ff9 	.word	0x40490ff9
 8001bb4:	20000092 	.word	0x20000092
 8001bb8:	200000b8 	.word	0x200000b8
 8001bbc:	20000093 	.word	0x20000093
		CM_LoadCell.Filtered.bot[0] =   1.6556 * CM_LoadCell.Filtered.bot[1] - 0.7068 * CM_LoadCell.Filtered.bot[2]
 8001bc0:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <ProcessInputs+0x338>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fc63 	bl	8000490 <__aeabi_f2d>
 8001bca:	a373      	add	r3, pc, #460	; (adr r3, 8001d98 <ProcessInputs+0x318>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fcb6 	bl	8000540 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	461d      	mov	r5, r3
 8001bdc:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <ProcessInputs+0x338>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fc55 	bl	8000490 <__aeabi_f2d>
 8001be6:	a36e      	add	r3, pc, #440	; (adr r3, 8001da0 <ProcessInputs+0x320>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fca8 	bl	8000540 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	f7fe faea 	bl	80001d0 <__aeabi_dsub>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4614      	mov	r4, r2
 8001c02:	461d      	mov	r5, r3
									  + 0.0128 * CM_LoadCell.Raw.bot[0] + 0.0256 * CM_LoadCell.Raw.bot[1] + 0.0128 * CM_LoadCell.Raw.bot[2];
 8001c04:	4b6c      	ldr	r3, [pc, #432]	; (8001db8 <ProcessInputs+0x338>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fc41 	bl	8000490 <__aeabi_f2d>
 8001c0e:	a366      	add	r3, pc, #408	; (adr r3, 8001da8 <ProcessInputs+0x328>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fc94 	bl	8000540 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	4629      	mov	r1, r5
 8001c20:	f7fe fad8 	bl	80001d4 <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4614      	mov	r4, r2
 8001c2a:	461d      	mov	r5, r3
 8001c2c:	4b62      	ldr	r3, [pc, #392]	; (8001db8 <ProcessInputs+0x338>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc2d 	bl	8000490 <__aeabi_f2d>
 8001c36:	a35e      	add	r3, pc, #376	; (adr r3, 8001db0 <ProcessInputs+0x330>)
 8001c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3c:	f7fe fc80 	bl	8000540 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4620      	mov	r0, r4
 8001c46:	4629      	mov	r1, r5
 8001c48:	f7fe fac4 	bl	80001d4 <__adddf3>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4614      	mov	r4, r2
 8001c52:	461d      	mov	r5, r3
 8001c54:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <ProcessInputs+0x338>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc19 	bl	8000490 <__aeabi_f2d>
 8001c5e:	a352      	add	r3, pc, #328	; (adr r3, 8001da8 <ProcessInputs+0x328>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	f7fe fc6c 	bl	8000540 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	4629      	mov	r1, r5
 8001c70:	f7fe fab0 	bl	80001d4 <__adddf3>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7fe ff10 	bl	8000aa0 <__aeabi_d2f>
 8001c80:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.bot[0] =   1.6556 * CM_LoadCell.Filtered.bot[1] - 0.7068 * CM_LoadCell.Filtered.bot[2]
 8001c82:	4a4d      	ldr	r2, [pc, #308]	; (8001db8 <ProcessInputs+0x338>)
 8001c84:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] =   1.6556 * CM_LoadCell.Filtered.top[1] - 0.7068 * CM_LoadCell.Filtered.top[2]
 8001c86:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <ProcessInputs+0x338>)
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fc00 	bl	8000490 <__aeabi_f2d>
 8001c90:	a341      	add	r3, pc, #260	; (adr r3, 8001d98 <ProcessInputs+0x318>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fc53 	bl	8000540 <__aeabi_dmul>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4614      	mov	r4, r2
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <ProcessInputs+0x338>)
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fbf2 	bl	8000490 <__aeabi_f2d>
 8001cac:	a33c      	add	r3, pc, #240	; (adr r3, 8001da0 <ProcessInputs+0x320>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	f7fe fc45 	bl	8000540 <__aeabi_dmul>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4620      	mov	r0, r4
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	f7fe fa87 	bl	80001d0 <__aeabi_dsub>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4614      	mov	r4, r2
 8001cc8:	461d      	mov	r5, r3
									  + 0.0128 * CM_LoadCell.Raw.top[0] + 0.0256 * CM_LoadCell.Raw.top[1] + 0.0128 * CM_LoadCell.Raw.top[2];
 8001cca:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <ProcessInputs+0x338>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fbde 	bl	8000490 <__aeabi_f2d>
 8001cd4:	a334      	add	r3, pc, #208	; (adr r3, 8001da8 <ProcessInputs+0x328>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fc31 	bl	8000540 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f7fe fa75 	bl	80001d4 <__adddf3>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4614      	mov	r4, r2
 8001cf0:	461d      	mov	r5, r3
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <ProcessInputs+0x338>)
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fbca 	bl	8000490 <__aeabi_f2d>
 8001cfc:	a32c      	add	r3, pc, #176	; (adr r3, 8001db0 <ProcessInputs+0x330>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fc1d 	bl	8000540 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fa61 	bl	80001d4 <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4614      	mov	r4, r2
 8001d18:	461d      	mov	r5, r3
 8001d1a:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <ProcessInputs+0x338>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fbb6 	bl	8000490 <__aeabi_f2d>
 8001d24:	a320      	add	r3, pc, #128	; (adr r3, 8001da8 <ProcessInputs+0x328>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	f7fe fc09 	bl	8000540 <__aeabi_dmul>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4620      	mov	r0, r4
 8001d34:	4629      	mov	r1, r5
 8001d36:	f7fe fa4d 	bl	80001d4 <__adddf3>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe fead 	bl	8000aa0 <__aeabi_d2f>
 8001d46:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.top[0] =   1.6556 * CM_LoadCell.Filtered.top[1] - 0.7068 * CM_LoadCell.Filtered.top[2]
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <ProcessInputs+0x338>)
 8001d4a:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[1];
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <ProcessInputs+0x338>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <ProcessInputs+0x338>)
 8001d52:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <ProcessInputs+0x338>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <ProcessInputs+0x338>)
 8001d5a:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[1];
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <ProcessInputs+0x338>)
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <ProcessInputs+0x338>)
 8001d62:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <ProcessInputs+0x338>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4a13      	ldr	r2, [pc, #76]	; (8001db8 <ProcessInputs+0x338>)
 8001d6a:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[1];
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <ProcessInputs+0x338>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <ProcessInputs+0x338>)
 8001d72:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <ProcessInputs+0x338>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <ProcessInputs+0x338>)
 8001d7a:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[1];
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <ProcessInputs+0x338>)
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <ProcessInputs+0x338>)
 8001d82:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <ProcessInputs+0x338>)
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <ProcessInputs+0x338>)
 8001d8a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bdb0      	pop	{r4, r5, r7, pc}
 8001d94:	f3af 8000 	nop.w
 8001d98:	6cf41f21 	.word	0x6cf41f21
 8001d9c:	3ffa7d56 	.word	0x3ffa7d56
 8001da0:	089a0275 	.word	0x089a0275
 8001da4:	3fe69e1b 	.word	0x3fe69e1b
 8001da8:	eb1c432d 	.word	0xeb1c432d
 8001dac:	3f8a36e2 	.word	0x3f8a36e2
 8001db0:	eb1c432d 	.word	0xeb1c432d
 8001db4:	3f9a36e2 	.word	0x3f9a36e2
 8001db8:	200000b8 	.word	0x200000b8

08001dbc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <MX_SPI1_Init+0x78>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001dc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001dd6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001dda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001df2:	2220      	movs	r2, #32
 8001df4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001e16:	2208      	movs	r2, #8
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_SPI1_Init+0x74>)
 8001e1c:	f003 fde2 	bl	80059e4 <HAL_SPI_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e26:	f7ff fd7e 	bl	8001926 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200000f0 	.word	0x200000f0
 8001e34:	40013000 	.word	0x40013000

08001e38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_SPI_MspInit+0x8c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d130      	bne.n	8001ebc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5e:	4a1a      	ldr	r2, [pc, #104]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e64:	6613      	str	r3, [r2, #96]	; 0x60
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_SPI_MspInit+0x90>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8001e8a:	23e0      	movs	r3, #224	; 0xe0
 8001e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea8:	f003 face 	bl	8005448 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2023      	movs	r0, #35	; 0x23
 8001eb2:	f003 fa44 	bl	800533e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001eb6:	2023      	movs	r0, #35	; 0x23
 8001eb8:	f003 fa5d 	bl	8005376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	3728      	adds	r7, #40	; 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40013000 	.word	0x40013000
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_SPI_MspDeInit+0x38>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10d      	bne.n	8001efa <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_SPI_MspDeInit+0x3c>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_SPI_MspDeInit+0x3c>)
 8001ee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ee8:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, IMU_SCL_Pin|IMU_MISO_Pin|IMU_MOSI_Pin);
 8001eea:	21e0      	movs	r1, #224	; 0xe0
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f003 fc54 	bl	800579c <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001ef4:	2023      	movs	r0, #35	; 0x23
 8001ef6:	f003 fa4c 	bl	8005392 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40013000 	.word	0x40013000
 8001f08:	40021000 	.word	0x40021000

08001f0c <bootn>:

// ------------------------------------------------------------------------
// Private methods

static void bootn(bool state)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_BT_GPIO_Port, ANKLE_IMU_BT_Pin,
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f003 fd30 	bl	8005984 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <rstn>:

static void rstn(bool state)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_RST_GPIO_Port, ANKLE_IMU_RST_Pin,
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f003 fd20 	bl	8005984 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <ps0_waken>:

static void ps0_waken(bool state)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_P0_GPIO_Port, ANKLE_IMU_P0_Pin,
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f60:	f003 fd10 	bl	8005984 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <ps1>:

static void ps1(bool state)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_P1_GPIO_Port, ANKLE_IMU_P1_Pin,
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f003 fd00 	bl	8005984 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <csn>:

static void csn(bool state)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_CS_GPIO_Port, ANKLE_IMU_CS_Pin,
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2110      	movs	r1, #16
 8001f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa0:	f003 fcf0 	bl	8005984 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <timeNowUs>:

static uint32_t timeNowUs(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <timeNowUs+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	20000604 	.word	0x20000604

08001fc4 <hal_init_timer>:

static void hal_init_timer(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0

    HAL_TIM_Base_Start(&htim2);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <hal_init_timer+0x10>)
 8001fca:	f004 fcc1 	bl	8006950 <HAL_TIM_Base_Start>
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000604 	.word	0x20000604

08001fd8 <spiDummyOp>:



static void spiDummyOp(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	23aa      	movs	r3, #170	; 0xaa
 8001fe0:	713b      	strb	r3, [r7, #4]
    uint8_t dummyTx[1];
    uint8_t dummyRx[1];

    memset(dummyTx, 0xAA, sizeof(dummyTx));

    HAL_SPI_TransmitReceive(&hspi1, dummyTx, dummyRx, sizeof(dummyTx), 2);
 8001fe2:	463a      	mov	r2, r7
 8001fe4:	1d39      	adds	r1, r7, #4
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <spiDummyOp+0x24>)
 8001fee:	f003 fdc4 	bl	8005b7a <HAL_SPI_TransmitReceive>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200000f0 	.word	0x200000f0

08002000 <hal_init_hw>:



static void hal_init_hw(bool dfu)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
    hal_init_timer();
 800200a:	f7ff ffdb 	bl	8001fc4 <hal_init_timer>

}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <enableInts>:

static void enableInts(void)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800201a:	2017      	movs	r0, #23
 800201c:	f003 f9ab 	bl	8005376 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002020:	2023      	movs	r0, #35	; 0x23
 8002022:	f003 f9a8 	bl	8005376 <HAL_NVIC_EnableIRQ>
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <disableInts>:

static void disableInts()
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800202e:	2023      	movs	r0, #35	; 0x23
 8002030:	f003 f9af 	bl	8005392 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002034:	2017      	movs	r0, #23
 8002036:	f003 f9ac 	bl	8005392 <HAL_NVIC_DisableIRQ>
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <spiActivate>:
// Attempt to start a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// If SPI periph is not in use and there is data to send or receive,
// this will start a SPI operation.
static void spiActivate(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
    if ((spiState == SPI_IDLE) && (rxBufLen == 0))
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <spiActivate+0x68>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d12a      	bne.n	80020a2 <spiActivate+0x62>
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <spiActivate+0x6c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d126      	bne.n	80020a2 <spiActivate+0x62>
    {
        if (rxReady)
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <spiActivate+0x70>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d021      	beq.n	80020a2 <spiActivate+0x62>
        {
            // reset flag that was set with INTN
            rxReady = false;
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <spiActivate+0x70>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]

            // assert CSN
            csn(false);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff ff91 	bl	8001f8c <csn>

            if (txBufLen > 0)
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <spiActivate+0x74>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00e      	beq.n	8002090 <spiActivate+0x50>
            {
                spiState = SPI_WRITE;
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <spiActivate+0x68>)
 8002074:	2206      	movs	r2, #6
 8002076:	701a      	strb	r2, [r3, #0]

                // Start operation to write (and, incidentally, read)
                HAL_SPI_TransmitReceive_IT(&hspi1, txBuf, rxBuf, txBufLen);
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <spiActivate+0x74>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <spiActivate+0x78>)
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <spiActivate+0x7c>)
 8002082:	480f      	ldr	r0, [pc, #60]	; (80020c0 <spiActivate+0x80>)
 8002084:	f003 ff8c 	bl	8005fa0 <HAL_SPI_TransmitReceive_IT>

                // Deassert Wake
                ps0_waken(true);
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff ff5f 	bl	8001f4c <ps0_waken>
                // Start SPI operation to read header (writing zeros)
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
            }
        }
    }
}
 800208e:	e008      	b.n	80020a2 <spiActivate+0x62>
                spiState = SPI_RD_HDR;
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <spiActivate+0x68>)
 8002092:	2204      	movs	r2, #4
 8002094:	701a      	strb	r2, [r3, #0]
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
 8002096:	2304      	movs	r3, #4
 8002098:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <spiActivate+0x78>)
 800209a:	490a      	ldr	r1, [pc, #40]	; (80020c4 <spiActivate+0x84>)
 800209c:	4808      	ldr	r0, [pc, #32]	; (80020c0 <spiActivate+0x80>)
 800209e:	f003 ff7f 	bl	8005fa0 <HAL_SPI_TransmitReceive_IT>
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000154 	.word	0x20000154
 80020ac:	20000560 	.word	0x20000560
 80020b0:	2000015d 	.word	0x2000015d
 80020b4:	200005e8 	.word	0x200005e8
 80020b8:	20000160 	.word	0x20000160
 80020bc:	20000568 	.word	0x20000568
 80020c0:	200000f0 	.word	0x200000f0
 80020c4:	08007e98 	.word	0x08007e98

080020c8 <spiCompleted>:
// Handle the end of a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// Depending on spiState, it may start a follow-up operation or transition
// to idle.  In the latter case, it will call spiActivate
static void spiCompleted(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
    // Get length of payload available
    uint16_t rxLen = (rxBuf[0] + (rxBuf[1] << 8)) & ~0x8000;
 80020ce:	4b33      	ldr	r3, [pc, #204]	; (800219c <spiCompleted+0xd4>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <spiCompleted+0xd4>)
 80020d6:	785b      	ldrb	r3, [r3, #1]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4413      	add	r3, r2
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020e6:	80fb      	strh	r3, [r7, #6]

    // Truncate that to max len we can read
    if (rxLen > sizeof(rxBuf))
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ee:	d902      	bls.n	80020f6 <spiCompleted+0x2e>
    {
        rxLen = sizeof(rxBuf);
 80020f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f4:	80fb      	strh	r3, [r7, #6]
    }

    if (spiState == SPI_DUMMY)
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <spiCompleted+0xd8>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d103      	bne.n	8002106 <spiCompleted+0x3e>
    {
        // SPI Dummy operation completed, transition now to idle
        spiState = SPI_IDLE;
 80020fe:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <spiCompleted+0xd8>)
 8002100:	2203      	movs	r2, #3
 8002102:	701a      	strb	r2, [r3, #0]
        spiState = SPI_IDLE;

        // Activate the next operation, if any.
        spiActivate();
    }
}
 8002104:	e045      	b.n	8002192 <spiCompleted+0xca>
    else if (spiState == SPI_RD_HDR)
 8002106:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <spiCompleted+0xd8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b04      	cmp	r3, #4
 800210c:	d11a      	bne.n	8002144 <spiCompleted+0x7c>
        if (rxLen > READ_LEN) {
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	2b04      	cmp	r3, #4
 8002112:	d90b      	bls.n	800212c <spiCompleted+0x64>
            spiState = SPI_RD_BODY;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <spiCompleted+0xd8>)
 8002116:	2205      	movs	r2, #5
 8002118:	701a      	strb	r2, [r3, #0]
            HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf+READ_LEN, rxLen-READ_LEN);
 800211a:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <spiCompleted+0xdc>)
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	3b04      	subs	r3, #4
 8002120:	b29b      	uxth	r3, r3
 8002122:	4921      	ldr	r1, [pc, #132]	; (80021a8 <spiCompleted+0xe0>)
 8002124:	4821      	ldr	r0, [pc, #132]	; (80021ac <spiCompleted+0xe4>)
 8002126:	f003 ff3b 	bl	8005fa0 <HAL_SPI_TransmitReceive_IT>
}
 800212a:	e032      	b.n	8002192 <spiCompleted+0xca>
            csn(true);            // deassert CSN
 800212c:	2001      	movs	r0, #1
 800212e:	f7ff ff2d 	bl	8001f8c <csn>
            rxBufLen = 0;         // no rx data available
 8002132:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <spiCompleted+0xe8>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
            spiState = SPI_IDLE;  // back to idle state
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <spiCompleted+0xd8>)
 800213a:	2203      	movs	r2, #3
 800213c:	701a      	strb	r2, [r3, #0]
            spiActivate();        // activate next operation, if any.
 800213e:	f7ff ff7f 	bl	8002040 <spiActivate>
}
 8002142:	e026      	b.n	8002192 <spiCompleted+0xca>
    else if (spiState == SPI_RD_BODY)
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <spiCompleted+0xd8>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d10b      	bne.n	8002164 <spiCompleted+0x9c>
        csn(true);
 800214c:	2001      	movs	r0, #1
 800214e:	f7ff ff1d 	bl	8001f8c <csn>
        rxBufLen = rxLen;
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <spiCompleted+0xe8>)
 8002156:	6013      	str	r3, [r2, #0]
        spiState = SPI_IDLE;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <spiCompleted+0xd8>)
 800215a:	2203      	movs	r2, #3
 800215c:	701a      	strb	r2, [r3, #0]
        spiActivate();
 800215e:	f7ff ff6f 	bl	8002040 <spiActivate>
}
 8002162:	e016      	b.n	8002192 <spiCompleted+0xca>
    else if (spiState == SPI_WRITE)
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <spiCompleted+0xd8>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b06      	cmp	r3, #6
 800216a:	d112      	bne.n	8002192 <spiCompleted+0xca>
        csn(true);
 800216c:	2001      	movs	r0, #1
 800216e:	f7ff ff0d 	bl	8001f8c <csn>
        rxBufLen = (txBufLen < rxLen) ? txBufLen : rxLen;
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <spiCompleted+0xec>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4293      	cmp	r3, r2
 800217a:	bf28      	it	cs
 800217c:	4613      	movcs	r3, r2
 800217e:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <spiCompleted+0xe8>)
 8002180:	6013      	str	r3, [r2, #0]
        txBufLen = 0;
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <spiCompleted+0xec>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
        spiState = SPI_IDLE;
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <spiCompleted+0xd8>)
 800218a:	2203      	movs	r2, #3
 800218c:	701a      	strb	r2, [r3, #0]
        spiActivate();
 800218e:	f7ff ff57 	bl	8002040 <spiActivate>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000160 	.word	0x20000160
 80021a0:	20000154 	.word	0x20000154
 80021a4:	20000164 	.word	0x20000164
 80021a8:	08007e98 	.word	0x08007e98
 80021ac:	200000f0 	.word	0x200000f0
 80021b0:	20000560 	.word	0x20000560
 80021b4:	200005e8 	.word	0x200005e8

080021b8 <HAL_GPIO_EXTI_Callback>:


// Interrupt handlers and SPI operation callbacks

void HAL_GPIO_EXTI_Callback(uint16_t n)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
    rxTimestamp_us = timeNowUs();
 80021c2:	f7ff fef3 	bl	8001fac <timeNowUs>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80021ca:	6013      	str	r3, [r2, #0]

    inReset = false;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_GPIO_EXTI_Callback+0x30>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
    rxReady = true;
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_GPIO_EXTI_Callback+0x34>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]

    // Start read, if possible
    spiActivate();
 80021d8:	f7ff ff32 	bl	8002040 <spiActivate>
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000158 	.word	0x20000158
 80021e8:	2000015c 	.word	0x2000015c
 80021ec:	2000015d 	.word	0x2000015d

080021f0 <EXTI15_10_IRQHandler>:

// Handle INTN Interrupt through STM32 HAL
// (It, in turn, calls HAL_GPIO_EXTI_Callback, above)
void EXTI15_10_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80021f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021f8:	f003 fbdc 	bl	80059b4 <HAL_GPIO_EXTI_IRQHandler>
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi1)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    if (isOpen)
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_SPI_TxRxCpltCallback+0x1c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_SPI_TxRxCpltCallback+0x14>
    {
        spiCompleted();
 8002210:	f7ff ff5a 	bl	80020c8 <spiCompleted>
    }
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000600 	.word	0x20000600

08002220 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi1)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    // Shouldn't happen
    while (1);
 8002228:	e7fe      	b.n	8002228 <HAL_SPI_ErrorCallback+0x8>

0800222a <delayUs>:
//{
//    HAL_SPI_IRQHandler(&hspi1);
//}

void delayUs(uint32_t delay)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 8002232:	f7ff febb 	bl	8001fac <timeNowUs>
 8002236:	4603      	mov	r3, r0
 8002238:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	60fb      	str	r3, [r7, #12]
    while ((now - start) < delay) {
 800223e:	e003      	b.n	8002248 <delayUs+0x1e>
        now = timeNowUs();
 8002240:	f7ff feb4 	bl	8001fac <timeNowUs>
 8002244:	4603      	mov	r3, r0
 8002246:	60bb      	str	r3, [r7, #8]
    while ((now - start) < delay) {
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	d8f5      	bhi.n	8002240 <delayUs+0x16>
    }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <resetDelayUs>:

void resetDelayUs(uint32_t delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 8002268:	f7ff fea0 	bl	8001fac <timeNowUs>
 800226c:	4603      	mov	r3, r0
 800226e:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60fb      	str	r3, [r7, #12]
    while (((now - start) < delay) && (inReset))
 8002274:	e003      	b.n	800227e <resetDelayUs+0x1e>
    {
        now = timeNowUs();
 8002276:	f7ff fe99 	bl	8001fac <timeNowUs>
 800227a:	4603      	mov	r3, r0
 800227c:	60bb      	str	r3, [r7, #8]
    while (((now - start) < delay) && (inReset))
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	d904      	bls.n	8002294 <resetDelayUs+0x34>
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <resetDelayUs+0x3c>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <resetDelayUs+0x16>
    }
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2000015c 	.word	0x2000015c

080022a0 <sh2_spi_hal_open>:

// ------------------------------------------------------------------------
// SH2 SPI Hal Methods

static int sh2_spi_hal_open(sh2_Hal_t *self)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    int retval = SH2_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]

    if (isOpen)
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <sh2_spi_hal_open+0x94>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <sh2_spi_hal_open+0x1a>
    {
        // Can't open if another instance is already open
        return SH2_ERR;
 80022b4:	f04f 33ff 	mov.w	r3, #4294967295
 80022b8:	e038      	b.n	800232c <sh2_spi_hal_open+0x8c>
    }

    isOpen = true;
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <sh2_spi_hal_open+0x94>)
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]

    // Init hardware (false -> non-DFU config)
    hal_init_hw(false);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff fe9d 	bl	8002000 <hal_init_hw>

    // Hold in reset
    rstn(false);
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7ff fe30 	bl	8001f2c <rstn>

    // deassert CSN
    csn(true);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f7ff fe5d 	bl	8001f8c <csn>

    // Clear rx, tx buffers
    rxBufLen = 0;
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <sh2_spi_hal_open+0x98>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
    txBufLen = 0;
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <sh2_spi_hal_open+0x9c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
    rxDataReady = false;
 80022de:	4b18      	ldr	r3, [pc, #96]	; (8002340 <sh2_spi_hal_open+0xa0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
    rxReady = false;
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <sh2_spi_hal_open+0xa4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]

    inReset = true;  // will change back to false when INTN serviced
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <sh2_spi_hal_open+0xa8>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]

    // Do dummy SPI operation
    // (First SPI op after reconfig has bad initial state of signals
    // so this is a throwaway operation.  Afterward, all is well.)
    spiState = SPI_DUMMY;
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <sh2_spi_hal_open+0xac>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
    spiDummyOp();
 80022f6:	f7ff fe6f 	bl	8001fd8 <spiDummyOp>
    spiState = SPI_IDLE;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <sh2_spi_hal_open+0xac>)
 80022fc:	2203      	movs	r2, #3
 80022fe:	701a      	strb	r2, [r3, #0]

    // Delay for RESET_DELAY_US to ensure reset takes effect
    delayUs(RESET_DELAY_US);
 8002300:	f242 7010 	movw	r0, #10000	; 0x2710
 8002304:	f7ff ff91 	bl	800222a <delayUs>

    // To boot in SHTP-SPI mode, must have PS1=1, PS0=1.
    // PS1 is set via jumper.
    // PS0 will be 1 PS1 jumper is 1 AND PS0_WAKEN sig is 1.
    // So we set PS0_WAKEN signal to 1
    ps0_waken(true);
 8002308:	2001      	movs	r0, #1
 800230a:	f7ff fe1f 	bl	8001f4c <ps0_waken>
    ps1(true);
 800230e:	2001      	movs	r0, #1
 8002310:	f7ff fe2c 	bl	8001f6c <ps1>

    // Deassert reset, boot in non-DFU mode
    bootn(true);
 8002314:	2001      	movs	r0, #1
 8002316:	f7ff fdf9 	bl	8001f0c <bootn>
    rstn(true);
 800231a:	2001      	movs	r0, #1
 800231c:	f7ff fe06 	bl	8001f2c <rstn>

    // enable interrupts
    enableInts();
 8002320:	f7ff fe79 	bl	8002016 <enableInts>

    // Wait for INTN to be asserted
    resetDelayUs(START_DELAY_US);
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <sh2_spi_hal_open+0xb0>)
 8002326:	f7ff ff9b 	bl	8002260 <resetDelayUs>

    return retval;
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000600 	.word	0x20000600
 8002338:	20000560 	.word	0x20000560
 800233c:	200005e8 	.word	0x200005e8
 8002340:	20000564 	.word	0x20000564
 8002344:	2000015d 	.word	0x2000015d
 8002348:	2000015c 	.word	0x2000015c
 800234c:	20000154 	.word	0x20000154
 8002350:	001e8480 	.word	0x001e8480

08002354 <sh2_spi_hal_close>:

static void sh2_spi_hal_close(sh2_Hal_t *self)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
    // Disable interrupts
    disableInts();
 800235c:	f7ff fe65 	bl	800202a <disableInts>

    // Set state machine to INIT state
    spiState = SPI_INIT;
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <sh2_spi_hal_close+0x64>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]

    // Hold sensor hub in reset
    rstn(false);
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff fde0 	bl	8001f2c <rstn>

    // deassert CSN
    csn(true);
 800236c:	2001      	movs	r0, #1
 800236e:	f7ff fe0d 	bl	8001f8c <csn>

    // Deinit SPI peripheral
    HAL_SPI_DeInit(&hspi1);
 8002372:	4812      	ldr	r0, [pc, #72]	; (80023bc <sh2_spi_hal_close+0x68>)
 8002374:	f003 fbd9 	bl	8005b2a <HAL_SPI_DeInit>

    // Deinit timer
    __HAL_TIM_DISABLE(&htim2);
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <sh2_spi_hal_close+0x6c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6a1a      	ldr	r2, [r3, #32]
 800237e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10f      	bne.n	80023a8 <sh2_spi_hal_close+0x54>
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <sh2_spi_hal_close+0x6c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6a1a      	ldr	r2, [r3, #32]
 800238e:	f240 4344 	movw	r3, #1092	; 0x444
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d107      	bne.n	80023a8 <sh2_spi_hal_close+0x54>
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <sh2_spi_hal_close+0x6c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <sh2_spi_hal_close+0x6c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

    // No longer open
    isOpen = false;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <sh2_spi_hal_close+0x70>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000154 	.word	0x20000154
 80023bc:	200000f0 	.word	0x200000f0
 80023c0:	20000604 	.word	0x20000604
 80023c4:	20000600 	.word	0x20000600

080023c8 <sh2_spi_hal_read>:

static int sh2_spi_hal_read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
    int retval = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]

    // If there is received data available...
    if (rxBufLen > 0)
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <sh2_spi_hal_read+0x6c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d022      	beq.n	8002428 <sh2_spi_hal_read+0x60>
    {
        // And if the data will fit in this buffer...
        if (len >= rxBufLen)
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <sh2_spi_hal_read+0x6c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d311      	bcc.n	8002410 <sh2_spi_hal_read+0x48>
        {
            // Copy data to the client buffer
            memcpy(pBuffer, rxBuf, rxBufLen);
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <sh2_spi_hal_read+0x6c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4911      	ldr	r1, [pc, #68]	; (8002438 <sh2_spi_hal_read+0x70>)
 80023f4:	68b8      	ldr	r0, [r7, #8]
 80023f6:	f005 f9d9 	bl	80077ac <memcpy>
            retval = rxBufLen;
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <sh2_spi_hal_read+0x6c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	617b      	str	r3, [r7, #20]

            // Set timestamp of that data
            *t = rxTimestamp_us;
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <sh2_spi_hal_read+0x74>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	601a      	str	r2, [r3, #0]

            // Clear rxBuf so we can receive again
            rxBufLen = 0;
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <sh2_spi_hal_read+0x6c>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e005      	b.n	800241c <sh2_spi_hal_read+0x54>
        }
        else
        {
            // Discard what was read and return error because buffer was too small.
            retval = SH2_ERR_BAD_PARAM;
 8002410:	f06f 0301 	mvn.w	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
            rxBufLen = 0;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <sh2_spi_hal_read+0x6c>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
        }

        // Now that rxBuf is empty, activate SPI processing to send any
        // potential write that was blocked.
        disableInts();
 800241c:	f7ff fe05 	bl	800202a <disableInts>
        spiActivate();
 8002420:	f7ff fe0e 	bl	8002040 <spiActivate>
        enableInts();
 8002424:	f7ff fdf7 	bl	8002016 <enableInts>
    }

    return retval;
 8002428:	697b      	ldr	r3, [r7, #20]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000560 	.word	0x20000560
 8002438:	20000160 	.word	0x20000160
 800243c:	20000158 	.word	0x20000158

08002440 <sh2_spi_hal_write>:

static int sh2_spi_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
    int retval = SH2_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

    // Validate parameters
    if ((self == 0) || (len > sizeof(txBuf)) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <sh2_spi_hal_write+0x28>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d805      	bhi.n	8002468 <sh2_spi_hal_write+0x28>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <sh2_spi_hal_write+0x2e>
        ((len > 0) && (pBuffer == 0)))
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <sh2_spi_hal_write+0x2e>
    {
        return SH2_ERR_BAD_PARAM;
 8002468:	f06f 0301 	mvn.w	r3, #1
 800246c:	e017      	b.n	800249e <sh2_spi_hal_write+0x5e>
    }

    // If tx buffer is not empty, return 0
    if (txBufLen != 0)
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <sh2_spi_hal_write+0x68>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <sh2_spi_hal_write+0x3a>
    {
        return 0;
 8002476:	2300      	movs	r3, #0
 8002478:	e011      	b.n	800249e <sh2_spi_hal_write+0x5e>
    }

    // Copy data to tx buffer
    memcpy(txBuf, pBuffer, len);
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	480b      	ldr	r0, [pc, #44]	; (80024ac <sh2_spi_hal_write+0x6c>)
 8002480:	f005 f994 	bl	80077ac <memcpy>
    txBufLen = len;
 8002484:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <sh2_spi_hal_write+0x68>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6013      	str	r3, [r2, #0]
    retval = len;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	617b      	str	r3, [r7, #20]

    // disable SH2 interrupts for a moment
    disableInts();
 800248e:	f7ff fdcc 	bl	800202a <disableInts>

    // Assert Wake
    ps0_waken(false);
 8002492:	2000      	movs	r0, #0
 8002494:	f7ff fd5a 	bl	8001f4c <ps0_waken>

    // re-enable SH2 interrupts.
    enableInts();
 8002498:	f7ff fdbd 	bl	8002016 <enableInts>

    return retval;
 800249c:	697b      	ldr	r3, [r7, #20]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200005e8 	.word	0x200005e8
 80024ac:	20000568 	.word	0x20000568

080024b0 <sh2_spi_hal_getTimeUs>:

static uint32_t sh2_spi_hal_getTimeUs(sh2_Hal_t *self)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
    return timeNowUs();
 80024b8:	f7ff fd78 	bl	8001fac <timeNowUs>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <sh2_hal_init>:

// ------------------------------------------------------------------------
// Public methods

sh2_Hal_t *sh2_hal_init(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
    // Set up the HAL reference object for the client
    sh2Hal.open = sh2_spi_hal_open;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <sh2_hal_init+0x30>)
 80024ce:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <sh2_hal_init+0x34>)
 80024d0:	601a      	str	r2, [r3, #0]
    sh2Hal.close = sh2_spi_hal_close;
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <sh2_hal_init+0x30>)
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <sh2_hal_init+0x38>)
 80024d6:	605a      	str	r2, [r3, #4]
    sh2Hal.read = sh2_spi_hal_read;
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <sh2_hal_init+0x30>)
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <sh2_hal_init+0x3c>)
 80024dc:	609a      	str	r2, [r3, #8]
    sh2Hal.write = sh2_spi_hal_write;
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <sh2_hal_init+0x30>)
 80024e0:	4a09      	ldr	r2, [pc, #36]	; (8002508 <sh2_hal_init+0x40>)
 80024e2:	60da      	str	r2, [r3, #12]
    sh2Hal.getTimeUs = sh2_spi_hal_getTimeUs;
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <sh2_hal_init+0x30>)
 80024e6:	4a09      	ldr	r2, [pc, #36]	; (800250c <sh2_hal_init+0x44>)
 80024e8:	611a      	str	r2, [r3, #16]

    return &sh2Hal;
 80024ea:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <sh2_hal_init+0x30>)
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	200005ec 	.word	0x200005ec
 80024fc:	080022a1 	.word	0x080022a1
 8002500:	08002355 	.word	0x08002355
 8002504:	080023c9 	.word	0x080023c9
 8002508:	08002441 	.word	0x08002441
 800250c:	080024b1 	.word	0x080024b1

08002510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_MspInit+0x44>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_MspInit+0x44>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6613      	str	r3, [r2, #96]	; 0x60
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_MspInit+0x44>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_MspInit+0x44>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	4a08      	ldr	r2, [pc, #32]	; (8002554 <HAL_MspInit+0x44>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	6593      	str	r3, [r2, #88]	; 0x58
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_MspInit+0x44>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000

08002558 <LL_LPTIM_ClearFLAG_ARRM>:
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f043 0202 	orr.w	r2, r3, #2
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	605a      	str	r2, [r3, #4]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_LPTIM_IsActiveFlag_ARRM>:
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b02      	cmp	r3, #2
 800258a:	d101      	bne.n	8002590 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025a2:	e7fe      	b.n	80025a2 <NMI_Handler+0x4>

080025a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <HardFault_Handler+0x4>

080025aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ae:	e7fe      	b.n	80025ae <MemManage_Handler+0x4>

080025b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <BusFault_Handler+0x4>

080025b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ba:	e7fe      	b.n	80025ba <UsageFault_Handler+0x4>

080025bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ea:	f002 fd89 	bl	8005100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ANKLE_IMU_INT_Pin);
 80025f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025fa:	f003 f9db 	bl	80059b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM2_IRQHandler+0x10>)
 800260a:	f004 fa09 	bl	8006a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000604 	.word	0x20000604

08002618 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <SPI1_IRQHandler+0x10>)
 800261e:	f003 fd6f 	bl	8006100 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200000f0 	.word	0x200000f0

0800262c <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0

/******************************************************************************
* USER ADDED LPTIM2_IRQHANDLER
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 8002630:	4806      	ldr	r0, [pc, #24]	; (800264c <LPTIM2_IRQHandler+0x20>)
 8002632:	f7ff ffa1 	bl	8002578 <LL_LPTIM_IsActiveFlag_ARRM>
 8002636:	4603      	mov	r3, r0
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <LPTIM2_IRQHandler+0x24>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 8002642:	4802      	ldr	r0, [pc, #8]	; (800264c <LPTIM2_IRQHandler+0x20>)
 8002644:	f7ff ff88 	bl	8002558 <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40009400 	.word	0x40009400
 8002650:	2000008c 	.word	0x2000008c

08002654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <SystemInit+0x20>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <SystemInit+0x20>)
 8002660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_TIM2_Init+0x98>)
 8002698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800269c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_TIM2_Init+0x98>)
 80026a0:	224f      	movs	r2, #79	; 0x4f
 80026a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a4:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_TIM2_Init+0x98>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80026aa:	4b19      	ldr	r3, [pc, #100]	; (8002710 <MX_TIM2_Init+0x98>)
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <MX_TIM2_Init+0x98>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b8:	4b15      	ldr	r3, [pc, #84]	; (8002710 <MX_TIM2_Init+0x98>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026be:	4814      	ldr	r0, [pc, #80]	; (8002710 <MX_TIM2_Init+0x98>)
 80026c0:	f004 f8ee 	bl	80068a0 <HAL_TIM_Base_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026ca:	f7ff f92c 	bl	8001926 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	4619      	mov	r1, r3
 80026da:	480d      	ldr	r0, [pc, #52]	; (8002710 <MX_TIM2_Init+0x98>)
 80026dc:	f004 fabf 	bl	8006c5e <HAL_TIM_ConfigClockSource>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026e6:	f7ff f91e 	bl	8001926 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4806      	ldr	r0, [pc, #24]	; (8002710 <MX_TIM2_Init+0x98>)
 80026f8:	f004 fce0 	bl	80070bc <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002702:	f7ff f910 	bl	8001926 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000604 	.word	0x20000604

08002714 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d113      	bne.n	800274e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_TIM_Base_MspInit+0x44>)
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_TIM_Base_MspInit+0x44>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6593      	str	r3, [r2, #88]	; 0x58
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_TIM_Base_MspInit+0x44>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2102      	movs	r1, #2
 8002742:	201c      	movs	r0, #28
 8002744:	f002 fdfb 	bl	800533e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002748:	201c      	movs	r0, #28
 800274a:	f002 fe14 	bl	8005376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	00000000 	.word	0x00000000

08002760 <QuaternionsToYPR>:

	return globalAngle;
}

void QuaternionsToYPR(float r, float i, float j, float k, float *yaw, float *pitch, float *roll)
{
 8002760:	b5b0      	push	{r4, r5, r7, lr}
 8002762:	b08e      	sub	sp, #56	; 0x38
 8002764:	af00      	add	r7, sp, #0
 8002766:	ed87 0a07 	vstr	s0, [r7, #28]
 800276a:	edc7 0a06 	vstr	s1, [r7, #24]
 800276e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002772:	edc7 1a04 	vstr	s3, [r7, #16]
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
	float siny_cosp = 2 * (r * k + i * j);
 800277c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002780:	edd7 7a04 	vldr	s15, [r7, #16]
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	edd7 6a06 	vldr	s13, [r7, #24]
 800278c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002798:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800279c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float cosy_cosp = 1 - 2 * (j * j + k * k);
 80027a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80027b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80027b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	*yaw = atan2(siny_cosp, cosy_cosp);
 80027c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027c6:	f7fd fe63 	bl	8000490 <__aeabi_f2d>
 80027ca:	4604      	mov	r4, r0
 80027cc:	460d      	mov	r5, r1
 80027ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d0:	f7fd fe5e 	bl	8000490 <__aeabi_f2d>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	ec43 2b11 	vmov	d1, r2, r3
 80027dc:	ec45 4b10 	vmov	d0, r4, r5
 80027e0:	f005 f9a3 	bl	8007b2a <atan2>
 80027e4:	ec53 2b10 	vmov	r2, r3, d0
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f7fe f958 	bl	8000aa0 <__aeabi_d2f>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	601a      	str	r2, [r3, #0]

	float sinp = sqrt(1 + 2 * (r * j - i * k));
 80027f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80027fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80027fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002802:	edd7 6a06 	vldr	s13, [r7, #24]
 8002806:	edd7 7a04 	vldr	s15, [r7, #16]
 800280a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002812:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002816:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800281a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800281e:	ee17 0a90 	vmov	r0, s15
 8002822:	f7fd fe35 	bl	8000490 <__aeabi_f2d>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	ec43 2b10 	vmov	d0, r2, r3
 800282e:	f005 f97e 	bl	8007b2e <sqrt>
 8002832:	ec53 2b10 	vmov	r2, r3, d0
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f7fe f931 	bl	8000aa0 <__aeabi_d2f>
 800283e:	4603      	mov	r3, r0
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
	float cosp = sqrt(1 - 2 * (r * j - i * k));
 8002842:	ed97 7a07 	vldr	s14, [r7, #28]
 8002846:	edd7 7a05 	vldr	s15, [r7, #20]
 800284a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800284e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002852:	edd7 7a04 	vldr	s15, [r7, #16]
 8002856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800285e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800286a:	ee17 0a90 	vmov	r0, s15
 800286e:	f7fd fe0f 	bl	8000490 <__aeabi_f2d>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	ec43 2b10 	vmov	d0, r2, r3
 800287a:	f005 f958 	bl	8007b2e <sqrt>
 800287e:	ec53 2b10 	vmov	r2, r3, d0
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	f7fe f90b 	bl	8000aa0 <__aeabi_d2f>
 800288a:	4603      	mov	r3, r0
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
    *pitch = 2 * atan2(sinp, cosp) - M_PI / 2;
 800288e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002890:	f7fd fdfe 	bl	8000490 <__aeabi_f2d>
 8002894:	4604      	mov	r4, r0
 8002896:	460d      	mov	r5, r1
 8002898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289a:	f7fd fdf9 	bl	8000490 <__aeabi_f2d>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	ec43 2b11 	vmov	d1, r2, r3
 80028a6:	ec45 4b10 	vmov	d0, r4, r5
 80028aa:	f005 f93e 	bl	8007b2a <atan2>
 80028ae:	ec51 0b10 	vmov	r0, r1, d0
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	f7fd fc8d 	bl	80001d4 <__adddf3>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	a327      	add	r3, pc, #156	; (adr r3, 8002960 <QuaternionsToYPR+0x200>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd fc82 	bl	80001d0 <__aeabi_dsub>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7fe f8e4 	bl	8000aa0 <__aeabi_d2f>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	601a      	str	r2, [r3, #0]

    float sinr_cosp = 2 * (r * i + j * k);
 80028de:	ed97 7a07 	vldr	s14, [r7, #28]
 80028e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80028e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ea:	edd7 6a05 	vldr	s13, [r7, #20]
 80028ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80028f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosr_cosp = 1 - 2 * (i * i + j * j);
 8002902:	edd7 7a06 	vldr	s15, [r7, #24]
 8002906:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800290a:	edd7 7a05 	vldr	s15, [r7, #20]
 800290e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002916:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800291a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800291e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002922:	edc7 7a08 	vstr	s15, [r7, #32]
    *roll = atan2(sinr_cosp, cosr_cosp);
 8002926:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002928:	f7fd fdb2 	bl	8000490 <__aeabi_f2d>
 800292c:	4604      	mov	r4, r0
 800292e:	460d      	mov	r5, r1
 8002930:	6a38      	ldr	r0, [r7, #32]
 8002932:	f7fd fdad 	bl	8000490 <__aeabi_f2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	ec43 2b11 	vmov	d1, r2, r3
 800293e:	ec45 4b10 	vmov	d0, r4, r5
 8002942:	f005 f8f2 	bl	8007b2a <atan2>
 8002946:	ec53 2b10 	vmov	r2, r3, d0
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	f7fe f8a7 	bl	8000aa0 <__aeabi_d2f>
 8002952:	4602      	mov	r2, r0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	601a      	str	r2, [r3, #0]
}
 8002958:	bf00      	nop
 800295a:	3738      	adds	r7, #56	; 0x38
 800295c:	46bd      	mov	sp, r7
 800295e:	bdb0      	pop	{r4, r5, r7, pc}
 8002960:	54442d18 	.word	0x54442d18
 8002964:	3ff921fb 	.word	0x3ff921fb

08002968 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800296c:	f7ff fe72 	bl	8002654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002970:	480c      	ldr	r0, [pc, #48]	; (80029a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002972:	490d      	ldr	r1, [pc, #52]	; (80029a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <LoopForever+0xe>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002988:	4c0a      	ldr	r4, [pc, #40]	; (80029b4 <LoopForever+0x16>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002996:	f004 fee5 	bl	8007764 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800299a:	f7fe ff09 	bl	80017b0 <main>

0800299e <LoopForever>:

LoopForever:
    b LoopForever
 800299e:	e7fe      	b.n	800299e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80029ac:	080083c8 	.word	0x080083c8
  ldr r2, =_sbss
 80029b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80029b4:	20001134 	.word	0x20001134

080029b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC1_2_IRQHandler>
	...

080029bc <BNO08x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

BNO08x_Error_e BNO08x_Init(uint8_t deviceIndex)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex + 1 > BNO08X_NUMBER_OF_DEVICES)
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d000      	beq.n	80029ce <BNO08x_Init+0x12>
		while(1);
 80029cc:	e7fe      	b.n	80029cc <BNO08x_Init+0x10>

	sh2_Hal_t *pSh2Hal = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
	pSh2Hal = sh2_hal_init();
 80029d2:	f7ff fd79 	bl	80024c8 <sh2_hal_init>
 80029d6:	60f8      	str	r0, [r7, #12]
	int status = sh2_open(pSh2Hal, EventHandler, NULL);
 80029d8:	2200      	movs	r2, #0
 80029da:	490a      	ldr	r1, [pc, #40]	; (8002a04 <BNO08x_Init+0x48>)
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fc85 	bl	80032ec <sh2_open>
 80029e2:	60b8      	str	r0, [r7, #8]
	if(status != SH2_OK)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <BNO08x_Init+0x32>
		return BNO08x_InitError;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e006      	b.n	80029fc <BNO08x_Init+0x40>

	sh2_setSensorCallback(ReadEvent, NULL); // incompatible??
 80029ee:	2100      	movs	r1, #0
 80029f0:	4805      	ldr	r0, [pc, #20]	; (8002a08 <BNO08x_Init+0x4c>)
 80029f2:	f000 fd29 	bl	8003448 <sh2_setSensorCallback>

  	BNO08x_StartReports();
 80029f6:	f000 f809 	bl	8002a0c <BNO08x_StartReports>

	return BNO08x_NoError;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	08002a79 	.word	0x08002a79
 8002a08:	08002aa1 	.word	0x08002aa1

08002a0c <BNO08x_StartReports>:

BNO08x_Error_e BNO08x_StartReports(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
		{SH2_ACCELEROMETER, {.reportInterval_us = 2000}},			// Max interval = 500 Hz = 2000 us
		{SH2_GYROSCOPE_CALIBRATED, {.reportInterval_us = 2500}},	// Max interval = 400 Hz = 2500 us
        {SH2_GAME_ROTATION_VECTOR, {.reportInterval_us = 2500}},	// Max interval = 400 Hz = 2500 us
    };

    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e01e      	b.n	8002a56 <BNO08x_StartReports+0x4a>
    {
        int sensorId = sensorConfig[n].sensorId;
 8002a18:	4913      	ldr	r1, [pc, #76]	; (8002a68 <BNO08x_StartReports+0x5c>)
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60bb      	str	r3, [r7, #8]

        int status = sh2_setSensorConfig(sensorId, &sensorConfig[n].config);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	b2d8      	uxtb	r0, r3
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <BNO08x_StartReports+0x5c>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f000 fd18 	bl	8003474 <sh2_setSensorConfig>
 8002a44:	6078      	str	r0, [r7, #4]
        if (status != 0)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <BNO08x_StartReports+0x44>
        	return BNO08x_StartReportError;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e006      	b.n	8002a5e <BNO08x_StartReports+0x52>
    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d9dd      	bls.n	8002a18 <BNO08x_StartReports+0xc>
    }

    return BNO08x_NoError;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	08008298 	.word	0x08008298

08002a6c <BNO08x_ReadSensors>:


void BNO08x_ReadSensors(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	sh2_service();
 8002a70:	f000 fcd6 	bl	8003420 <sh2_service>
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <EventHandler>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void EventHandler(void * cookie, sh2_AsyncEvent_t *pEvent)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
    if (pEvent->eventId == SH2_RESET)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <EventHandler+0x18>
        BNO08x_resetOccurred = 1;
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <EventHandler+0x24>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	20000678 	.word	0x20000678

08002aa0 <ReadEvent>:

static void ReadEvent(void * cookie, sh2_SensorEvent_t * event, int16_t *data)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b09a      	sub	sp, #104	; 0x68
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
    int rc;
    sh2_SensorValue_t value;

    rc = sh2_decodeSensorEvent(&value, event);
 8002aac:	f107 0310 	add.w	r3, r7, #16
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fd08 	bl	80034c8 <sh2_decodeSensorEvent>
 8002ab8:	6678      	str	r0, [r7, #100]	; 0x64
    if (rc != SH2_OK)
 8002aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d12a      	bne.n	8002b16 <ReadEvent+0x76>
        return;

    switch(value.sensorId)
 8002ac0:	7c3b      	ldrb	r3, [r7, #16]
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	d01a      	beq.n	8002afc <ReadEvent+0x5c>
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	dc26      	bgt.n	8002b18 <ReadEvent+0x78>
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d002      	beq.n	8002ad4 <ReadEvent+0x34>
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d00a      	beq.n	8002ae8 <ReadEvent+0x48>
 8002ad2:	e021      	b.n	8002b18 <ReadEvent+0x78>
    {
        case SH2_ACCELEROMETER:
        	BNO08x_IMU_Data[0] = value.un.accelerometer.x;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <ReadEvent+0x80>)
 8002ad8:	6013      	str	r3, [r2, #0]
        	BNO08x_IMU_Data[1] = value.un.accelerometer.y;
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <ReadEvent+0x80>)
 8002ade:	6053      	str	r3, [r2, #4]
        	BNO08x_IMU_Data[2] = value.un.accelerometer.z;
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <ReadEvent+0x80>)
 8002ae4:	6093      	str	r3, [r2, #8]
            break;
 8002ae6:	e017      	b.n	8002b18 <ReadEvent+0x78>

        case SH2_GYROSCOPE_CALIBRATED:
        	BNO08x_IMU_Data[3] = value.un.gyroscope.x;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <ReadEvent+0x80>)
 8002aec:	60d3      	str	r3, [r2, #12]
        	BNO08x_IMU_Data[4] = value.un.gyroscope.y;
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <ReadEvent+0x80>)
 8002af2:	6113      	str	r3, [r2, #16]
        	BNO08x_IMU_Data[5] = value.un.gyroscope.z;
 8002af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <ReadEvent+0x80>)
 8002af8:	6153      	str	r3, [r2, #20]
            break;
 8002afa:	e00d      	b.n	8002b18 <ReadEvent+0x78>

        case SH2_GAME_ROTATION_VECTOR:
        	BNO08x_IMU_Data[6] = value.un.gameRotationVector.real;
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <ReadEvent+0x80>)
 8002b00:	6193      	str	r3, [r2, #24]
        	BNO08x_IMU_Data[7] = value.un.gameRotationVector.i;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	4a06      	ldr	r2, [pc, #24]	; (8002b20 <ReadEvent+0x80>)
 8002b06:	61d3      	str	r3, [r2, #28]
        	BNO08x_IMU_Data[8] = value.un.gameRotationVector.j;
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <ReadEvent+0x80>)
 8002b0c:	6213      	str	r3, [r2, #32]
        	BNO08x_IMU_Data[9] = value.un.gameRotationVector.k;
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <ReadEvent+0x80>)
 8002b12:	6253      	str	r3, [r2, #36]	; 0x24
            break;
 8002b14:	e000      	b.n	8002b18 <ReadEvent+0x78>
        return;
 8002b16:	bf00      	nop
    }
}
 8002b18:	3768      	adds	r7, #104	; 0x68
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000650 	.word	0x20000650

08002b24 <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <opStart+0x18>
 8002b36:	f06f 0302 	mvn.w	r3, #2
 8002b3a:	e014      	b.n	8002b66 <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
 8002b50:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	61da      	str	r2, [r3, #28]
    }

    return rc;
 8002b64:	68fb      	ldr	r3, [r7, #12]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00b      	beq.n	8002b9c <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	88fa      	ldrh	r2, [r7, #6]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	4798      	blx	r3
    }
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00f      	beq.n	8002bf8 <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 8002bec:	e004      	b.n	8002bf8 <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 8002bee:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ffd6 	bl	8002ba4 <opCompleted>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e00f      	b.n	8002c30 <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 8002c10:	4a0c      	ldr	r2, [pc, #48]	; (8002c44 <getReportLen+0x44>)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002c18:	79fa      	ldrb	r2, [r7, #7]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d105      	bne.n	8002c2a <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <getReportLen+0x44>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	785b      	ldrb	r3, [r3, #1]
 8002c28:	e006      	b.n	8002c38 <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b2f      	cmp	r3, #47	; 0x2f
 8002c34:	d9ec      	bls.n	8002c10 <getReportLen+0x10>
        }
    }

    return 0;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	080082e0 	.word	0x080082e0

08002c48 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8094 	bne.w	8002d98 <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        return;
 8002c7e:	e090      	b.n	8002da2 <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	3301      	adds	r3, #1
 8002c84:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 8002c86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ffb4 	bl	8002c00 <getReportLen>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 8002c9c:	7dbb      	ldrb	r3, [r7, #22]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d107      	bne.n	8002cb2 <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
            return;
 8002cb0:	e077      	b.n	8002da2 <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
 8002cb4:	2bf1      	cmp	r3, #241	; 0xf1
 8002cb6:	d107      	bne.n	8002cc8 <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 8002cb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	789b      	ldrb	r3, [r3, #2]
 8002cc4:	2b84      	cmp	r3, #132	; 0x84
 8002cc6:	e059      	b.n	8002d7c <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2bfc      	cmp	r3, #252	; 0xfc
 8002ccc:	d156      	bne.n	8002d7c <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d052      	beq.n	8002d7c <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 8002cd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	4413      	add	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 8002cde:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	785a      	ldrb	r2, [r3, #1]
 8002ce8:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002cea:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	789b      	ldrb	r3, [r3, #2]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002d00:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	789b      	ldrb	r3, [r3, #2]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf14      	ite	ne
 8002d0e:	2301      	movne	r3, #1
 8002d10:	2300      	moveq	r3, #0
 8002d12:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002d16:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	789b      	ldrb	r3, [r3, #2]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf14      	ite	ne
 8002d24:	2301      	movne	r3, #1
 8002d26:	2300      	moveq	r3, #0
 8002d28:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002d2c:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	789b      	ldrb	r3, [r3, #2]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002d42:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8002d4a:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 8002d4c:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002d4e:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 8002d56:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002d58:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 8002d60:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002d62:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 8002d6a:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002d6c:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d76:	490c      	ldr	r1, [pc, #48]	; (8002da8 <sensorhubControlHdlr+0x160>)
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 8002d7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	4413      	add	r3, r2
 8002d82:	7dba      	ldrb	r2, [r7, #22]
 8002d84:	b292      	uxth	r2, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	69f8      	ldr	r0, [r7, #28]
 8002d8a:	f7ff fef0 	bl	8002b6e <opRx>
            cursor += reportLen;
 8002d8e:	7dbb      	ldrb	r3, [r7, #22]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d94:	4413      	add	r3, r2
 8002d96:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cursor < len) {
 8002d98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f4ff af6f 	bcc.w	8002c80 <sensorhubControlHdlr+0x38>
        }
    }
}
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	200007f4 	.word	0x200007f4

08002dac <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4798      	blx	r3
 8002dcc:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 8002dce:	6839      	ldr	r1, [r7, #0]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff fea7 	bl	8002b24 <opStart>
 8002dd6:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <opProcess+0x36>
        return status;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	e034      	b.n	8002e4c <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 8002de6:	e015      	b.n	8002e14 <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d104      	bne.n	8002dfa <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f04f 32ff 	mov.w	r2, #4294967295
 8002df6:	621a      	str	r2, [r3, #32]
            break;
 8002df8:	e01b      	b.n	8002e32 <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f002 f903 	bl	800500a <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4798      	blx	r3
 8002e12:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0e1      	beq.n	8002de8 <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad2      	subs	r2, r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d3da      	bcc.n	8002de8 <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d006      	beq.n	8002e48 <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f06f 0205 	mvn.w	r2, #5
 8002e46:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 8002e54:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	4613      	mov	r3, r2
 8002e62:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <touSTimestamp+0x80>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d204      	bcs.n	8002e78 <touSTimestamp+0x24>
        rollovers++;
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <touSTimestamp+0x84>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <touSTimestamp+0x84>)
 8002e76:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 8002e78:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <touSTimestamp+0x80>)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <touSTimestamp+0x84>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2200      	movs	r2, #0
 8002e84:	469a      	mov	sl, r3
 8002e86:	4693      	mov	fp, r2
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	4653      	mov	r3, sl
 8002e92:	2200      	movs	r2, #0
 8002e94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	2264      	movs	r2, #100	; 0x64
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	2200      	movs	r2, #0
 8002eac:	461c      	mov	r4, r3
 8002eae:	4615      	mov	r5, r2
 8002eb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002eb4:	eb12 0804 	adds.w	r8, r2, r4
 8002eb8:	eb43 0905 	adc.w	r9, r3, r5
 8002ebc:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 8002ec0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000810 	.word	0x20000810
 8002ed8:	20000814 	.word	0x20000814

08002edc <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8002edc:	b5b0      	push	{r4, r5, r7, lr}
 8002ede:	b0a0      	sub	sp, #128	; 0x80
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    int32_t referenceDelta = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	67bb      	str	r3, [r7, #120]	; 0x78

    while (cursor < len) {
 8002ef6:	e099      	b.n	800302c <sensorhubInputHdlr+0x150>
        // Get next report id
        uint8_t reportId = payload[cursor];
 8002ef8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	4413      	add	r3, r2
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8002f06:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fe78 	bl	8002c00 <getReportLen>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        if (reportLen == 0) {
 8002f16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8002f2c:	e084      	b.n	8003038 <sensorhubInputHdlr+0x15c>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 8002f2e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002f32:	2bfb      	cmp	r3, #251	; 0xfb
 8002f34:	d10a      	bne.n	8002f4c <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 8002f36:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	667b      	str	r3, [r7, #100]	; 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 8002f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f42:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002f46:	425b      	negs	r3, r3
 8002f48:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f4a:	e067      	b.n	800301c <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 8002f4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002f50:	2bfa      	cmp	r3, #250	; 0xfa
 8002f52:	d10b      	bne.n	8002f6c <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 8002f54:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	66bb      	str	r3, [r7, #104]	; 0x68

                referenceDelta += rpt->timebase;
 8002f5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f60:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002f64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f66:	4413      	add	r3, r2
 8002f68:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f6a:	e057      	b.n	800301c <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 8002f6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002f70:	2bef      	cmp	r3, #239	; 0xef
 8002f72:	d10b      	bne.n	8002f8c <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 8002f74:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8002f80:	b292      	uxth	r2, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff fdf2 	bl	8002b6e <opRx>
 8002f8a:	e047      	b.n	800301c <sensorhubInputHdlr+0x140>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 8002f8c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	4413      	add	r3, r2
 8002f94:	673b      	str	r3, [r7, #112]	; 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 8002f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f98:	3302      	adds	r3, #2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa8:	3303      	adds	r3, #3
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 8002fb4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002fbc:	6838      	ldr	r0, [r7, #0]
 8002fbe:	f7ff ff49 	bl	8002e54 <touSTimestamp>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 8002fca:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8002fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fd0:	4413      	add	r3, r2
 8002fd2:	2264      	movs	r2, #100	; 0x64
 8002fd4:	fb02 f303 	mul.w	r3, r2, r3
 8002fd8:	17da      	asrs	r2, r3, #31
 8002fda:	461c      	mov	r4, r3
 8002fdc:	4615      	mov	r5, r2
 8002fde:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 8002fe2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002fe6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                memcpy(event.report, pReport, reportLen);
 8002fea:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8002fee:	f107 0310 	add.w	r3, r7, #16
 8002ff2:	3312      	adds	r3, #18
 8002ff4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f004 fbd8 	bl	80077ac <memcpy>
                event.len = reportLen;
 8002ffc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003000:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <sensorhubInputHdlr+0x140>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003014:	f107 0110 	add.w	r1, r7, #16
 8003018:	4610      	mov	r0, r2
 800301a:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 800301c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003020:	b29a      	uxth	r2, r3
 8003022:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003026:	4413      	add	r3, r2
 8003028:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    while (cursor < len) {
 800302c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	429a      	cmp	r2, r3
 8003034:	f4ff af60 	bcc.w	8002ef8 <sensorhubInputHdlr+0x1c>
        }
    }
}
 8003038:	3780      	adds	r7, #128	; 0x80
 800303a:	46bd      	mov	sp, r7
 800303c:	bdb0      	pop	{r4, r5, r7, pc}

0800303e <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4613      	mov	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8003052:	88fa      	ldrh	r2, [r7, #6]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	6978      	ldr	r0, [r7, #20]
 800305a:	f7ff ff3f 	bl	8002edc <sensorhubInputHdlr>
}
 800305e:	bf00      	nop
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	4613      	mov	r3, r2
 8003074:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	6978      	ldr	r0, [r7, #20]
 8003082:	f7ff ff2b 	bl	8002edc <sensorhubInputHdlr>
}
 8003086:	bf00      	nop
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 800308e:	b5b0      	push	{r4, r5, r7, lr}
 8003090:	b09c      	sub	sp, #112	; 0x70
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	66bb      	str	r3, [r7, #104]	; 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 80030a8:	232a      	movs	r3, #42	; 0x2a
 80030aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t reportLen = getReportLen(reportId);
 80030ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fda4 	bl	8002c00 <getReportLen>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    while (cursor < len) {
 80030be:	e02d      	b.n	800311c <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2200      	movs	r2, #0
 80030c4:	461c      	mov	r4, r3
 80030c6:	4615      	mov	r5, r2
 80030c8:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 80030cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030d0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        memcpy(event.report, payload+cursor, reportLen);
 80030d4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	18d1      	adds	r1, r2, r3
 80030dc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	3312      	adds	r3, #18
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 fb60 	bl	80077ac <memcpy>
        event.len = reportLen;
 80030ec:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80030f0:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 80030f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 80030fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003102:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003104:	f107 0110 	add.w	r1, r7, #16
 8003108:	4610      	mov	r0, r2
 800310a:	4798      	blx	r3
        }

        cursor += reportLen;
 800310c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003110:	b29a      	uxth	r2, r3
 8003112:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003116:	4413      	add	r3, r2
 8003118:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    while (cursor < len) {
 800311c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	429a      	cmp	r2, r3
 8003124:	d3cc      	bcc.n	80030c0 <sensorhubInputGyroRvHdlr+0x32>
    }
}
 8003126:	bf00      	nop
 8003128:	bf00      	nop
 800312a:	3770      	adds	r7, #112	; 0x70
 800312c:	46bd      	mov	sp, r7
 800312e:	bdb0      	pop	{r4, r5, r7, pc}

08003130 <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d007      	beq.n	800315a <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        return;
 8003158:	e021      	b.n	800319e <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d114      	bne.n	800318c <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2201      	movs	r2, #1
 8003166:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 8003168:	6978      	ldr	r0, [r7, #20]
 800316a:	f7ff fd2d 	bl	8002bc8 <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <executableDeviceHdlr+0x74>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00f      	beq.n	800319c <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003184:	4907      	ldr	r1, [pc, #28]	; (80031a4 <executableDeviceHdlr+0x74>)
 8003186:	4610      	mov	r0, r2
 8003188:	4798      	blx	r3
            }
            break;
 800318a:	e007      	b.n	800319c <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
            break;
 800319a:	e000      	b.n	800319e <executableDeviceHdlr+0x6e>
            break;
 800319c:	bf00      	nop
    }
}
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200007f4 	.word	0x200007f4

080031a8 <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6858      	ldr	r0, [r3, #4]
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	2102      	movs	r1, #2
 80031c0:	f001 fef2 	bl	8004fa8 <shtp_send>
 80031c4:	4603      	mov	r3, r0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b08a      	sub	sp, #40	; 0x28
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <setSensorConfigStart+0x28>
 80031ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <setSensorConfigStart+0x3c>
 80031fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	789b      	ldrb	r3, [r3, #2]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <setSensorConfigStart+0x50>
 8003212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	78db      	ldrb	r3, [r3, #3]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <setSensorConfigStart+0x64>
 8003226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800322a:	f043 0308 	orr.w	r3, r3, #8
 800322e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	791b      	ldrb	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <setSensorConfigStart+0x78>
 800323a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800323e:	f043 0310 	orr.w	r3, r3, #16
 8003242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    memset(&req, 0, sizeof(req));
 8003246:	f107 0308 	add.w	r3, r7, #8
 800324a:	2211      	movs	r2, #17
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f004 faba 	bl	80077c8 <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 8003254:	23fd      	movs	r3, #253	; 0xfd
 8003256:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800325e:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 8003260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003264:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	88db      	ldrh	r3, [r3, #6]
 800326a:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8003286:	f107 0308 	add.w	r3, r7, #8
 800328a:	2211      	movs	r2, #17
 800328c:	4619      	mov	r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ff8a 	bl	80031a8 <sendCtrl>
 8003294:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 8003296:	69f9      	ldr	r1, [r7, #28]
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff fc83 	bl	8002ba4 <opCompleted>

    return rc;
 800329e:	69fb      	ldr	r3, [r7, #28]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3728      	adds	r7, #40	; 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <shtpEventCallback+0x3c>)
 80032b6:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <shtpEventCallback+0x40>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <shtpEventCallback+0x40>)
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032d4:	4904      	ldr	r1, [pc, #16]	; (80032e8 <shtpEventCallback+0x40>)
 80032d6:	4610      	mov	r0, r2
 80032d8:	4798      	blx	r3
    }
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	2000067c 	.word	0x2000067c
 80032e8:	200007f4 	.word	0x200007f4

080032ec <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 80032f8:	4b41      	ldr	r3, [pc, #260]	; (8003400 <sh2_open+0x114>)
 80032fa:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <sh2_open+0x1c>
 8003302:	f06f 0301 	mvn.w	r3, #1
 8003306:	e077      	b.n	80033f8 <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 8003308:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800330c:	2100      	movs	r1, #0
 800330e:	69b8      	ldr	r0, [r7, #24]
 8003310:	f004 fa5a 	bl	80077c8 <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2200      	movs	r2, #0
 8003318:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	639a      	str	r2, [r3, #56]	; 0x38
    pSh2->eventCookie = eventCookie;
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	63da      	str	r2, [r3, #60]	; 0x3c
    pSh2->sensorCallback = 0;
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2200      	movs	r2, #0
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = 0;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2200      	movs	r2, #0
 8003336:	645a      	str	r2, [r3, #68]	; 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f001 fdbb 	bl	8004eb8 <shtp_open>
 8003342:	4602      	mov	r2, r0
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 8003350:	f04f 33ff 	mov.w	r3, #4294967295
 8003354:	e050      	b.n	80033f8 <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4929      	ldr	r1, [pc, #164]	; (8003404 <sh2_open+0x118>)
 800335e:	4618      	mov	r0, r3
 8003360:	f001 fdde 	bl	8004f20 <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6858      	ldr	r0, [r3, #4]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4a27      	ldr	r2, [pc, #156]	; (8003408 <sh2_open+0x11c>)
 800336c:	2102      	movs	r1, #2
 800336e:	f001 fdeb 	bl	8004f48 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	6858      	ldr	r0, [r3, #4]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <sh2_open+0x120>)
 800337a:	2103      	movs	r1, #3
 800337c:	f001 fde4 	bl	8004f48 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6858      	ldr	r0, [r3, #4]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4a22      	ldr	r2, [pc, #136]	; (8003410 <sh2_open+0x124>)
 8003388:	2104      	movs	r1, #4
 800338a:	f001 fddd 	bl	8004f48 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	6858      	ldr	r0, [r3, #4]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <sh2_open+0x128>)
 8003396:	2105      	movs	r1, #5
 8003398:	f001 fdd6 	bl	8004f48 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	6858      	ldr	r0, [r3, #4]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <sh2_open+0x12c>)
 80033a4:	2101      	movs	r1, #1
 80033a6:	f001 fdcf 	bl	8004f48 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	4610      	mov	r0, r2
 80033b6:	4798      	blx	r3
 80033b8:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80033be:	e00c      	b.n	80033da <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f001 fe20 	bl	800500a <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	4610      	mov	r0, r2
 80033d6:	4798      	blx	r3
 80033d8:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	4a0e      	ldr	r2, [pc, #56]	; (800341c <sh2_open+0x130>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d807      	bhi.n	80033f6 <sh2_open+0x10a>
           (!pSh2->resetComplete))
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	7a1b      	ldrb	r3, [r3, #8]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f083 0301 	eor.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e4      	bne.n	80033c0 <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	2000067c 	.word	0x2000067c
 8003404:	080032a9 	.word	0x080032a9
 8003408:	08002c49 	.word	0x08002c49
 800340c:	0800303f 	.word	0x0800303f
 8003410:	08003067 	.word	0x08003067
 8003414:	0800308f 	.word	0x0800308f
 8003418:	08003131 	.word	0x08003131
 800341c:	00030d3f 	.word	0x00030d3f

08003420 <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <sh2_service+0x24>)
 8003428:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d004      	beq.n	800343c <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4618      	mov	r0, r3
 8003438:	f001 fde7 	bl	800500a <shtp_service>
    }
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	2000067c 	.word	0x2000067c

08003448 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <sh2_setSensorCallback+0x28>)
 8003454:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = cookie;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44

    return SH2_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	2000067c 	.word	0x2000067c

08003474 <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	6039      	str	r1, [r7, #0]
 800347e:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <sh2_setSensorConfig+0x4c>)
 8003482:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 800348c:	f04f 33ff 	mov.w	r3, #4294967295
 8003490:	e012      	b.n	80034b8 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3324      	adds	r3, #36	; 0x24
 8003496:	2210      	movs	r2, #16
 8003498:	2100      	movs	r1, #0
 800349a:	4618      	mov	r0, r3
 800349c:	f004 f994 	bl	80077c8 <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	79fa      	ldrb	r2, [r7, #7]
 80034a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 80034ae:	4905      	ldr	r1, [pc, #20]	; (80034c4 <sh2_setSensorConfig+0x50>)
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff fc7b 	bl	8002dac <opProcess>
 80034b6:	4603      	mov	r3, r0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	2000067c 	.word	0x2000067c
 80034c4:	08008340 	.word	0x08008340

080034c8 <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	7c5a      	ldrb	r2, [r3, #17]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b2a      	cmp	r3, #42	; 0x2a
 80034f0:	d00b      	beq.n	800350a <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	7cda      	ldrb	r2, [r3, #19]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	7d1b      	ldrb	r3, [r3, #20]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	b2da      	uxtb	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	709a      	strb	r2, [r3, #2]
 8003508:	e005      	b.n	8003516 <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	3b01      	subs	r3, #1
 800351c:	2b2d      	cmp	r3, #45	; 0x2d
 800351e:	f200 8155 	bhi.w	80037cc <sh2_decodeSensorEvent+0x304>
 8003522:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <sh2_decodeSensorEvent+0x60>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	080035ed 	.word	0x080035ed
 800352c:	0800361d 	.word	0x0800361d
 8003530:	08003641 	.word	0x08003641
 8003534:	080035f9 	.word	0x080035f9
 8003538:	08003659 	.word	0x08003659
 800353c:	08003605 	.word	0x08003605
 8003540:	08003629 	.word	0x08003629
 8003544:	08003665 	.word	0x08003665
 8003548:	08003671 	.word	0x08003671
 800354c:	0800367d 	.word	0x0800367d
 8003550:	08003689 	.word	0x08003689
 8003554:	08003695 	.word	0x08003695
 8003558:	080036a1 	.word	0x080036a1
 800355c:	080036ad 	.word	0x080036ad
 8003560:	0800364d 	.word	0x0800364d
 8003564:	080036c5 	.word	0x080036c5
 8003568:	080036dd 	.word	0x080036dd
 800356c:	080036e9 	.word	0x080036e9
 8003570:	080036f5 	.word	0x080036f5
 8003574:	080035e1 	.word	0x080035e1
 8003578:	08003611 	.word	0x08003611
 800357c:	08003635 	.word	0x08003635
 8003580:	080036b9 	.word	0x080036b9
 8003584:	080036d1 	.word	0x080036d1
 8003588:	08003701 	.word	0x08003701
 800358c:	0800370d 	.word	0x0800370d
 8003590:	08003719 	.word	0x08003719
 8003594:	08003725 	.word	0x08003725
 8003598:	080037cd 	.word	0x080037cd
 800359c:	08003731 	.word	0x08003731
 80035a0:	0800373d 	.word	0x0800373d
 80035a4:	08003749 	.word	0x08003749
 80035a8:	08003755 	.word	0x08003755
 80035ac:	08003761 	.word	0x08003761
 80035b0:	0800376d 	.word	0x0800376d
 80035b4:	080037cd 	.word	0x080037cd
 80035b8:	080037cd 	.word	0x080037cd
 80035bc:	080037cd 	.word	0x080037cd
 80035c0:	080037cd 	.word	0x080037cd
 80035c4:	08003779 	.word	0x08003779
 80035c8:	08003785 	.word	0x08003785
 80035cc:	08003791 	.word	0x08003791
 80035d0:	0800379d 	.word	0x0800379d
 80035d4:	080037a9 	.word	0x080037a9
 80035d8:	080037b5 	.word	0x080037b5
 80035dc:	080037c1 	.word	0x080037c1
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8fc 	bl	80037e0 <decodeRawAccelerometer>
 80035e8:	60f8      	str	r0, [r7, #12]
            break;
 80035ea:	e0f3      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f924 	bl	800383c <decodeAccelerometer>
 80035f4:	60f8      	str	r0, [r7, #12]
            break;
 80035f6:	e0ed      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f95e 	bl	80038bc <decodeLinearAcceleration>
 8003600:	60f8      	str	r0, [r7, #12]
            break;
 8003602:	e0e7      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 8003604:	6839      	ldr	r1, [r7, #0]
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f998 	bl	800393c <decodeGravity>
 800360c:	60f8      	str	r0, [r7, #12]
            break;
 800360e:	e0e1      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f9d2 	bl	80039bc <decodeRawGyroscope>
 8003618:	60f8      	str	r0, [r7, #12]
            break;
 800361a:	e0db      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 800361c:	6839      	ldr	r1, [r7, #0]
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa04 	bl	8003a2c <decodeGyroscopeCalibrated>
 8003624:	60f8      	str	r0, [r7, #12]
            break;
 8003626:	e0d5      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fa3e 	bl	8003aac <decodeGyroscopeUncal>
 8003630:	60f8      	str	r0, [r7, #12]
            break;
 8003632:	e0cf      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 8003634:	6839      	ldr	r1, [r7, #0]
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 faaa 	bl	8003b90 <decodeRawMagnetometer>
 800363c:	60f8      	str	r0, [r7, #12]
            break;
 800363e:	e0c9      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fad2 	bl	8003bec <decodeMagneticFieldCalibrated>
 8003648:	60f8      	str	r0, [r7, #12]
            break;
 800364a:	e0c3      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fb0c 	bl	8003c6c <decodeMagneticFieldUncal>
 8003654:	60f8      	str	r0, [r7, #12]
            break;
 8003656:	e0bd      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 8003658:	6839      	ldr	r1, [r7, #0]
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fb78 	bl	8003d50 <decodeRotationVector>
 8003660:	60f8      	str	r0, [r7, #12]
            break;
 8003662:	e0b7      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fbd6 	bl	8003e18 <decodeGameRotationVector>
 800366c:	60f8      	str	r0, [r7, #12]
            break;
 800366e:	e0b1      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fc20 	bl	8003eb8 <decodeGeomagneticRotationVector>
 8003678:	60f8      	str	r0, [r7, #12]
            break;
 800367a:	e0ab      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fc7e 	bl	8003f80 <decodePressure>
 8003684:	60f8      	str	r0, [r7, #12]
            break;
 8003686:	e0a5      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 8003688:	6839      	ldr	r1, [r7, #0]
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fc94 	bl	8003fb8 <decodeAmbientLight>
 8003690:	60f8      	str	r0, [r7, #12]
            break;
 8003692:	e09f      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fcaa 	bl	8003ff0 <decodeHumidity>
 800369c:	60f8      	str	r0, [r7, #12]
            break;
 800369e:	e099      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fcc2 	bl	800402c <decodeProximity>
 80036a8:	60f8      	str	r0, [r7, #12]
            break;
 80036aa:	e093      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 80036ac:	6839      	ldr	r1, [r7, #0]
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fcda 	bl	8004068 <decodeTemperature>
 80036b4:	60f8      	str	r0, [r7, #12]
            break;
 80036b6:	e08d      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fcf2 	bl	80040a4 <decodeReserved>
 80036c0:	60f8      	str	r0, [r7, #12]
            break;
 80036c2:	e087      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 80036c4:	6839      	ldr	r1, [r7, #0]
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fd0a 	bl	80040e0 <decodeTapDetector>
 80036cc:	60f8      	str	r0, [r7, #12]
            break;
 80036ce:	e081      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 80036d0:	6839      	ldr	r1, [r7, #0]
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fd14 	bl	8004100 <decodeStepDetector>
 80036d8:	60f8      	str	r0, [r7, #12]
            break;
 80036da:	e07b      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fd20 	bl	8004124 <decodeStepCounter>
 80036e4:	60f8      	str	r0, [r7, #12]
            break;
 80036e6:	e075      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 80036e8:	6839      	ldr	r1, [r7, #0]
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fd35 	bl	800415a <decodeSignificantMotion>
 80036f0:	60f8      	str	r0, [r7, #12]
            break;
 80036f2:	e06f      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 80036f4:	6839      	ldr	r1, [r7, #0]
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fd42 	bl	8004180 <decodeStabilityClassifier>
 80036fc:	60f8      	str	r0, [r7, #12]
            break;
 80036fe:	e069      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 8003700:	6839      	ldr	r1, [r7, #0]
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fd4c 	bl	80041a0 <decodeShakeDetector>
 8003708:	60f8      	str	r0, [r7, #12]
            break;
 800370a:	e063      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fd59 	bl	80041c6 <decodeFlipDetector>
 8003714:	60f8      	str	r0, [r7, #12]
            break;
 8003716:	e05d      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fd66 	bl	80041ec <decodePickupDetector>
 8003720:	60f8      	str	r0, [r7, #12]
            break;
 8003722:	e057      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fd73 	bl	8004212 <decodeStabilityDetector>
 800372c:	60f8      	str	r0, [r7, #12]
            break;
 800372e:	e051      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fd80 	bl	8004238 <decodePersonalActivityClassifier>
 8003738:	60f8      	str	r0, [r7, #12]
            break;
 800373a:	e04b      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fdad 	bl	800429e <decodeSleepDetector>
 8003744:	60f8      	str	r0, [r7, #12]
            break;
 8003746:	e045      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 8003748:	6839      	ldr	r1, [r7, #0]
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fdb7 	bl	80042be <decodeTiltDetector>
 8003750:	60f8      	str	r0, [r7, #12]
            break;
 8003752:	e03f      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fdc4 	bl	80042e4 <decodePocketDetector>
 800375c:	60f8      	str	r0, [r7, #12]
            break;
 800375e:	e039      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fdd1 	bl	800430a <decodeCircleDetector>
 8003768:	60f8      	str	r0, [r7, #12]
            break;
 800376a:	e033      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fdde 	bl	8004330 <decodeHeartRateMonitor>
 8003774:	60f8      	str	r0, [r7, #12]
            break;
 8003776:	e02d      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 8003778:	6839      	ldr	r1, [r7, #0]
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fdec 	bl	8004358 <decodeArvrStabilizedRV>
 8003780:	60f8      	str	r0, [r7, #12]
            break;
 8003782:	e027      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 8003784:	6839      	ldr	r1, [r7, #0]
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fe4a 	bl	8004420 <decodeArvrStabilizedGRV>
 800378c:	60f8      	str	r0, [r7, #12]
            break;
 800378e:	e021      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fe94 	bl	80044c0 <decodeGyroIntegratedRV>
 8003798:	60f8      	str	r0, [r7, #12]
            break;
 800379a:	e01b      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 800379c:	6839      	ldr	r1, [r7, #0]
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 ff14 	bl	80045cc <decodeIZroRequest>
 80037a4:	60f8      	str	r0, [r7, #12]
            break;
 80037a6:	e015      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 80037a8:	6839      	ldr	r1, [r7, #0]
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 ff22 	bl	80045f4 <decodeRawOptFlow>
 80037b0:	60f8      	str	r0, [r7, #12]
            break;
 80037b2:	e00f      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 80037b4:	6839      	ldr	r1, [r7, #0]
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 ff9a 	bl	80046f0 <decodeDeadReckoningPose>
 80037bc:	60f8      	str	r0, [r7, #12]
            break;
 80037be:	e009      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 80037c0:	6839      	ldr	r1, [r7, #0]
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f001 f87e 	bl	80048c4 <decodeWheelEncoder>
 80037c8:	60f8      	str	r0, [r7, #12]
            break;
 80037ca:	e003      	b.n	80037d4 <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 80037cc:	f04f 33ff 	mov.w	r3, #4294967295
 80037d0:	60fb      	str	r3, [r7, #12]
            break;
 80037d2:	bf00      	nop
    }

    return rc;
 80037d4:	68fb      	ldr	r3, [r7, #12]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop

080037e0 <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	3316      	adds	r3, #22
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 f8d9 	bl	80049a6 <read16>
 80037f4:	4603      	mov	r3, r0
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	3318      	adds	r3, #24
 8003800:	4618      	mov	r0, r3
 8003802:	f001 f8d0 	bl	80049a6 <read16>
 8003806:	4603      	mov	r3, r0
 8003808:	461a      	mov	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	331a      	adds	r3, #26
 8003812:	4618      	mov	r0, r3
 8003814:	f001 f8c7 	bl	80049a6 <read16>
 8003818:	4603      	mov	r3, r0
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	331e      	adds	r3, #30
 8003824:	4618      	mov	r0, r3
 8003826:	f001 f8d4 	bl	80049d2 <read32>
 800382a:	4603      	mov	r3, r0
 800382c:	461a      	mov	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	3316      	adds	r3, #22
 800384a:	4618      	mov	r0, r3
 800384c:	f001 f8ab 	bl	80049a6 <read16>
 8003850:	4603      	mov	r3, r0
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800385a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80038b8 <decodeAccelerometer+0x7c>
 800385e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	3318      	adds	r3, #24
 800386c:	4618      	mov	r0, r3
 800386e:	f001 f89a 	bl	80049a6 <read16>
 8003872:	4603      	mov	r3, r0
 8003874:	ee07 3a90 	vmov	s15, r3
 8003878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80038b8 <decodeAccelerometer+0x7c>
 8003880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	331a      	adds	r3, #26
 800388e:	4618      	mov	r0, r3
 8003890:	f001 f889 	bl	80049a6 <read16>
 8003894:	4603      	mov	r3, r0
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800389e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80038b8 <decodeAccelerometer+0x7c>
 80038a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	3b800000 	.word	0x3b800000

080038bc <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	3316      	adds	r3, #22
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 f86b 	bl	80049a6 <read16>
 80038d0:	4603      	mov	r3, r0
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038da:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003938 <decodeLinearAcceleration+0x7c>
 80038de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	3318      	adds	r3, #24
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 f85a 	bl	80049a6 <read16>
 80038f2:	4603      	mov	r3, r0
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038fc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003938 <decodeLinearAcceleration+0x7c>
 8003900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	331a      	adds	r3, #26
 800390e:	4618      	mov	r0, r3
 8003910:	f001 f849 	bl	80049a6 <read16>
 8003914:	4603      	mov	r3, r0
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800391e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003938 <decodeLinearAcceleration+0x7c>
 8003922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	3b800000 	.word	0x3b800000

0800393c <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	3316      	adds	r3, #22
 800394a:	4618      	mov	r0, r3
 800394c:	f001 f82b 	bl	80049a6 <read16>
 8003950:	4603      	mov	r3, r0
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800395a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80039b8 <decodeGravity+0x7c>
 800395e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	3318      	adds	r3, #24
 800396c:	4618      	mov	r0, r3
 800396e:	f001 f81a 	bl	80049a6 <read16>
 8003972:	4603      	mov	r3, r0
 8003974:	ee07 3a90 	vmov	s15, r3
 8003978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800397c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80039b8 <decodeGravity+0x7c>
 8003980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	331a      	adds	r3, #26
 800398e:	4618      	mov	r0, r3
 8003990:	f001 f809 	bl	80049a6 <read16>
 8003994:	4603      	mov	r3, r0
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800399e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80039b8 <decodeGravity+0x7c>
 80039a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	3b800000 	.word	0x3b800000

080039bc <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	3316      	adds	r3, #22
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 ffeb 	bl	80049a6 <read16>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	3318      	adds	r3, #24
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 ffe2 	bl	80049a6 <read16>
 80039e2:	4603      	mov	r3, r0
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	331a      	adds	r3, #26
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 ffd9 	bl	80049a6 <read16>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	331c      	adds	r3, #28
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 ffd0 	bl	80049a6 <read16>
 8003a06:	4603      	mov	r3, r0
 8003a08:	461a      	mov	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	331e      	adds	r3, #30
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 ffdd 	bl	80049d2 <read32>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	3316      	adds	r3, #22
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 ffb3 	bl	80049a6 <read16>
 8003a40:	4603      	mov	r3, r0
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a4a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003aa8 <decodeGyroscopeCalibrated+0x7c>
 8003a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	3318      	adds	r3, #24
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 ffa2 	bl	80049a6 <read16>
 8003a62:	4603      	mov	r3, r0
 8003a64:	ee07 3a90 	vmov	s15, r3
 8003a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003aa8 <decodeGyroscopeCalibrated+0x7c>
 8003a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	331a      	adds	r3, #26
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 ff91 	bl	80049a6 <read16>
 8003a84:	4603      	mov	r3, r0
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a8e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003aa8 <decodeGyroscopeCalibrated+0x7c>
 8003a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	3b000000 	.word	0x3b000000

08003aac <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	3316      	adds	r3, #22
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 ff73 	bl	80049a6 <read16>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aca:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003b8c <decodeGyroscopeUncal+0xe0>
 8003ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	3318      	adds	r3, #24
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 ff62 	bl	80049a6 <read16>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	ee07 3a90 	vmov	s15, r3
 8003ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aec:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003b8c <decodeGyroscopeUncal+0xe0>
 8003af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	331a      	adds	r3, #26
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 ff51 	bl	80049a6 <read16>
 8003b04:	4603      	mov	r3, r0
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b0e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003b8c <decodeGyroscopeUncal+0xe0>
 8003b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	331c      	adds	r3, #28
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 ff40 	bl	80049a6 <read16>
 8003b26:	4603      	mov	r3, r0
 8003b28:	ee07 3a90 	vmov	s15, r3
 8003b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b30:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003b8c <decodeGyroscopeUncal+0xe0>
 8003b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	331e      	adds	r3, #30
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 ff2f 	bl	80049a6 <read16>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b52:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003b8c <decodeGyroscopeUncal+0xe0>
 8003b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	3320      	adds	r3, #32
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 ff1e 	bl	80049a6 <read16>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	ee07 3a90 	vmov	s15, r3
 8003b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b74:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003b8c <decodeGyroscopeUncal+0xe0>
 8003b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	3b000000 	.word	0x3b000000

08003b90 <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	3316      	adds	r3, #22
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 ff01 	bl	80049a6 <read16>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	3318      	adds	r3, #24
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fef8 	bl	80049a6 <read16>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	331a      	adds	r3, #26
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 feef 	bl	80049a6 <read16>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	331e      	adds	r3, #30
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fefc 	bl	80049d2 <read32>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	3316      	adds	r3, #22
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fed3 	bl	80049a6 <read16>
 8003c00:	4603      	mov	r3, r0
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c0a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003c68 <decodeMagneticFieldCalibrated+0x7c>
 8003c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	3318      	adds	r3, #24
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fec2 	bl	80049a6 <read16>
 8003c22:	4603      	mov	r3, r0
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c2c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003c68 <decodeMagneticFieldCalibrated+0x7c>
 8003c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	331a      	adds	r3, #26
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 feb1 	bl	80049a6 <read16>
 8003c44:	4603      	mov	r3, r0
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003c68 <decodeMagneticFieldCalibrated+0x7c>
 8003c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	3d800000 	.word	0x3d800000

08003c6c <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	3316      	adds	r3, #22
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fe93 	bl	80049a6 <read16>
 8003c80:	4603      	mov	r3, r0
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c8a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003d4c <decodeMagneticFieldUncal+0xe0>
 8003c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fe82 	bl	80049a6 <read16>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cac:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003d4c <decodeMagneticFieldUncal+0xe0>
 8003cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	331a      	adds	r3, #26
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fe71 	bl	80049a6 <read16>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003d4c <decodeMagneticFieldUncal+0xe0>
 8003cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	331c      	adds	r3, #28
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fe60 	bl	80049a6 <read16>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003d4c <decodeMagneticFieldUncal+0xe0>
 8003cf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	331e      	adds	r3, #30
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fe4f 	bl	80049a6 <read16>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d12:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003d4c <decodeMagneticFieldUncal+0xe0>
 8003d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	3320      	adds	r3, #32
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fe3e 	bl	80049a6 <read16>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d34:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003d4c <decodeMagneticFieldUncal+0xe0>
 8003d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	3d800000 	.word	0x3d800000

08003d50 <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	3316      	adds	r3, #22
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fe21 	bl	80049a6 <read16>
 8003d64:	4603      	mov	r3, r0
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d6e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003e10 <decodeRotationVector+0xc0>
 8003d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	3318      	adds	r3, #24
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fe10 	bl	80049a6 <read16>
 8003d86:	4603      	mov	r3, r0
 8003d88:	ee07 3a90 	vmov	s15, r3
 8003d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d90:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003e10 <decodeRotationVector+0xc0>
 8003d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	331a      	adds	r3, #26
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fdff 	bl	80049a6 <read16>
 8003da8:	4603      	mov	r3, r0
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003db2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003e10 <decodeRotationVector+0xc0>
 8003db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	331c      	adds	r3, #28
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fdee 	bl	80049a6 <read16>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003e10 <decodeRotationVector+0xc0>
 8003dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	331e      	adds	r3, #30
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fddd 	bl	80049a6 <read16>
 8003dec:	4603      	mov	r3, r0
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003df6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003e14 <decodeRotationVector+0xc4>
 8003dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	38800000 	.word	0x38800000
 8003e14:	39800000 	.word	0x39800000

08003e18 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	3316      	adds	r3, #22
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fdbd 	bl	80049a6 <read16>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e36:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003eb4 <decodeGameRotationVector+0x9c>
 8003e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	3318      	adds	r3, #24
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fdac 	bl	80049a6 <read16>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e58:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003eb4 <decodeGameRotationVector+0x9c>
 8003e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	331a      	adds	r3, #26
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fd9b 	bl	80049a6 <read16>
 8003e70:	4603      	mov	r3, r0
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e7a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003eb4 <decodeGameRotationVector+0x9c>
 8003e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	331c      	adds	r3, #28
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fd8a 	bl	80049a6 <read16>
 8003e92:	4603      	mov	r3, r0
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e9c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003eb4 <decodeGameRotationVector+0x9c>
 8003ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	38800000 	.word	0x38800000

08003eb8 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	3316      	adds	r3, #22
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fd6d 	bl	80049a6 <read16>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003f78 <decodeGeomagneticRotationVector+0xc0>
 8003eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	3318      	adds	r3, #24
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fd5c 	bl	80049a6 <read16>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	ee07 3a90 	vmov	s15, r3
 8003ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003f78 <decodeGeomagneticRotationVector+0xc0>
 8003efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	331a      	adds	r3, #26
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fd4b 	bl	80049a6 <read16>
 8003f10:	4603      	mov	r3, r0
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f1a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003f78 <decodeGeomagneticRotationVector+0xc0>
 8003f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	331c      	adds	r3, #28
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fd3a 	bl	80049a6 <read16>
 8003f32:	4603      	mov	r3, r0
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f3c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003f78 <decodeGeomagneticRotationVector+0xc0>
 8003f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	331e      	adds	r3, #30
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fd29 	bl	80049a6 <read16>
 8003f54:	4603      	mov	r3, r0
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f5e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003f7c <decodeGeomagneticRotationVector+0xc4>
 8003f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	38800000 	.word	0x38800000
 8003f7c:	39800000 	.word	0x39800000

08003f80 <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	3316      	adds	r3, #22
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fd1f 	bl	80049d2 <read32>
 8003f94:	ee07 0a90 	vmov	s15, r0
 8003f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f9c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003fb4 <decodePressure+0x34>
 8003fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	35800000 	.word	0x35800000

08003fb8 <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	3316      	adds	r3, #22
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fd03 	bl	80049d2 <read32>
 8003fcc:	ee07 0a90 	vmov	s15, r0
 8003fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003fec <decodeAmbientLight+0x34>
 8003fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	3b800000 	.word	0x3b800000

08003ff0 <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	3316      	adds	r3, #22
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fcd1 	bl	80049a6 <read16>
 8004004:	4603      	mov	r3, r0
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800400e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004028 <decodeHumidity+0x38>
 8004012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	3b800000 	.word	0x3b800000

0800402c <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	3316      	adds	r3, #22
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fcb3 	bl	80049a6 <read16>
 8004040:	4603      	mov	r3, r0
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800404a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004064 <decodeProximity+0x38>
 800404e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	3d800000 	.word	0x3d800000

08004068 <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	3316      	adds	r3, #22
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fc95 	bl	80049a6 <read16>
 800407c:	4603      	mov	r3, r0
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004086:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80040a0 <decodeTemperature+0x38>
 800408a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	3c000000 	.word	0x3c000000

080040a4 <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	3316      	adds	r3, #22
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fc77 	bl	80049a6 <read16>
 80040b8:	4603      	mov	r3, r0
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040c2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80040dc <decodeReserved+0x38>
 80040c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	3c000000 	.word	0x3c000000

080040e0 <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	7d9a      	ldrb	r2, [r3, #22]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	3316      	adds	r3, #22
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fc1c 	bl	800494c <readu32>
 8004114:	4602      	mov	r2, r0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	3316      	adds	r3, #22
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fc0a 	bl	800494c <readu32>
 8004138:	4602      	mov	r2, r0
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	331a      	adds	r3, #26
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fc02 	bl	800494c <readu32>
 8004148:	4603      	mov	r3, r0
 800414a:	b29a      	uxth	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	3316      	adds	r3, #22
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fbd9 	bl	8004920 <readu16>
 800416e:	4603      	mov	r3, r0
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	7d9a      	ldrb	r2, [r3, #22]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	3316      	adds	r3, #22
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fbb6 	bl	8004920 <readu16>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461a      	mov	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	3316      	adds	r3, #22
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fba3 	bl	8004920 <readu16>
 80041da:	4603      	mov	r3, r0
 80041dc:	461a      	mov	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	3316      	adds	r3, #22
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fb90 	bl	8004920 <readu16>
 8004200:	4603      	mov	r3, r0
 8004202:	461a      	mov	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	3316      	adds	r3, #22
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fb7d 	bl	8004920 <readu16>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	7d9b      	ldrb	r3, [r3, #22]
 8004246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800424a:	b2da      	uxtb	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	7d9b      	ldrb	r3, [r3, #22]
 8004254:	b25b      	sxtb	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	09db      	lsrs	r3, r3, #7
 800425a:	b2da      	uxtb	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	7dda      	ldrb	r2, [r3, #23]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e00d      	b.n	800428a <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3306      	adds	r3, #6
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	4413      	add	r3, r2
 8004276:	7c99      	ldrb	r1, [r3, #18]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4413      	add	r3, r2
 800427e:	3317      	adds	r3, #23
 8004280:	460a      	mov	r2, r1
 8004282:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3301      	adds	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b09      	cmp	r3, #9
 800428e:	ddee      	ble.n	800426e <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	7d9a      	ldrb	r2, [r3, #22]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	3316      	adds	r3, #22
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fb27 	bl	8004920 <readu16>
 80042d2:	4603      	mov	r3, r0
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	3316      	adds	r3, #22
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fb14 	bl	8004920 <readu16>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	3316      	adds	r3, #22
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fb01 	bl	8004920 <readu16>
 800431e:	4603      	mov	r3, r0
 8004320:	461a      	mov	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	3316      	adds	r3, #22
 800433e:	4618      	mov	r0, r3
 8004340:	f000 faee 	bl	8004920 <readu16>
 8004344:	4603      	mov	r3, r0
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	3316      	adds	r3, #22
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fb1d 	bl	80049a6 <read16>
 800436c:	4603      	mov	r3, r0
 800436e:	ee07 3a90 	vmov	s15, r3
 8004372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004376:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004418 <decodeArvrStabilizedRV+0xc0>
 800437a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	3318      	adds	r3, #24
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fb0c 	bl	80049a6 <read16>
 800438e:	4603      	mov	r3, r0
 8004390:	ee07 3a90 	vmov	s15, r3
 8004394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004398:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004418 <decodeArvrStabilizedRV+0xc0>
 800439c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	331a      	adds	r3, #26
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fafb 	bl	80049a6 <read16>
 80043b0:	4603      	mov	r3, r0
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ba:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004418 <decodeArvrStabilizedRV+0xc0>
 80043be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	331c      	adds	r3, #28
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 faea 	bl	80049a6 <read16>
 80043d2:	4603      	mov	r3, r0
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043dc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004418 <decodeArvrStabilizedRV+0xc0>
 80043e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	331e      	adds	r3, #30
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fad9 	bl	80049a6 <read16>
 80043f4:	4603      	mov	r3, r0
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043fe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800441c <decodeArvrStabilizedRV+0xc4>
 8004402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	38800000 	.word	0x38800000
 800441c:	39800000 	.word	0x39800000

08004420 <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	3316      	adds	r3, #22
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fab9 	bl	80049a6 <read16>
 8004434:	4603      	mov	r3, r0
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800443e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80044bc <decodeArvrStabilizedGRV+0x9c>
 8004442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	3318      	adds	r3, #24
 8004450:	4618      	mov	r0, r3
 8004452:	f000 faa8 	bl	80049a6 <read16>
 8004456:	4603      	mov	r3, r0
 8004458:	ee07 3a90 	vmov	s15, r3
 800445c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004460:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80044bc <decodeArvrStabilizedGRV+0x9c>
 8004464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	331a      	adds	r3, #26
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fa97 	bl	80049a6 <read16>
 8004478:	4603      	mov	r3, r0
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004482:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80044bc <decodeArvrStabilizedGRV+0x9c>
 8004486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	331c      	adds	r3, #28
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fa86 	bl	80049a6 <read16>
 800449a:	4603      	mov	r3, r0
 800449c:	ee07 3a90 	vmov	s15, r3
 80044a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80044bc <decodeArvrStabilizedGRV+0x9c>
 80044a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	38800000 	.word	0x38800000

080044c0 <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	3312      	adds	r3, #18
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fa69 	bl	80049a6 <read16>
 80044d4:	4603      	mov	r3, r0
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044de:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80045c4 <decodeGyroIntegratedRV+0x104>
 80044e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fa58 	bl	80049a6 <read16>
 80044f6:	4603      	mov	r3, r0
 80044f8:	ee07 3a90 	vmov	s15, r3
 80044fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004500:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80045c4 <decodeGyroIntegratedRV+0x104>
 8004504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	3316      	adds	r3, #22
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fa47 	bl	80049a6 <read16>
 8004518:	4603      	mov	r3, r0
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004522:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80045c4 <decodeGyroIntegratedRV+0x104>
 8004526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	3318      	adds	r3, #24
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fa36 	bl	80049a6 <read16>
 800453a:	4603      	mov	r3, r0
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004544:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80045c4 <decodeGyroIntegratedRV+0x104>
 8004548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	331a      	adds	r3, #26
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fa25 	bl	80049a6 <read16>
 800455c:	4603      	mov	r3, r0
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004566:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80045c8 <decodeGyroIntegratedRV+0x108>
 800456a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	331c      	adds	r3, #28
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fa14 	bl	80049a6 <read16>
 800457e:	4603      	mov	r3, r0
 8004580:	ee07 3a90 	vmov	s15, r3
 8004584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004588:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80045c8 <decodeGyroIntegratedRV+0x108>
 800458c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	331e      	adds	r3, #30
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fa03 	bl	80049a6 <read16>
 80045a0:	4603      	mov	r3, r0
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045aa:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80045c8 <decodeGyroIntegratedRV+0x108>
 80045ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    return SH2_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	38800000 	.word	0x38800000
 80045c8:	3a800000 	.word	0x3a800000

080045cc <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	7d9a      	ldrb	r2, [r3, #22]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	7dda      	ldrb	r2, [r3, #23]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	3316      	adds	r3, #22
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f9cf 	bl	80049a6 <read16>
 8004608:	4603      	mov	r3, r0
 800460a:	461a      	mov	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	3318      	adds	r3, #24
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f9c6 	bl	80049a6 <read16>
 800461a:	4603      	mov	r3, r0
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	331a      	adds	r3, #26
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f9bd 	bl	80049a6 <read16>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	331c      	adds	r3, #28
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f9a5 	bl	8004988 <read8>
 800463e:	4603      	mov	r3, r0
 8004640:	b2da      	uxtb	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	331d      	adds	r3, #29
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f99b 	bl	8004988 <read8>
 8004652:	4603      	mov	r3, r0
 8004654:	b2da      	uxtb	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	331e      	adds	r3, #30
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f991 	bl	8004988 <read8>
 8004666:	4603      	mov	r3, r0
 8004668:	b2da      	uxtb	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	331f      	adds	r3, #31
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f987 	bl	8004988 <read8>
 800467a:	4603      	mov	r3, r0
 800467c:	b2da      	uxtb	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	3320      	adds	r3, #32
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f97d 	bl	8004988 <read8>
 800468e:	4603      	mov	r3, r0
 8004690:	b2da      	uxtb	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	3321      	adds	r3, #33	; 0x21
 800469c:	4618      	mov	r0, r3
 800469e:	f000 f973 	bl	8004988 <read8>
 80046a2:	4603      	mov	r3, r0
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	3322      	adds	r3, #34	; 0x22
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f969 	bl	8004988 <read8>
 80046b6:	4603      	mov	r3, r0
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	3324      	adds	r3, #36	; 0x24
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 f96e 	bl	80049a6 <read16>
 80046ca:	4603      	mov	r3, r0
 80046cc:	461a      	mov	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	3326      	adds	r3, #38	; 0x26
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f97b 	bl	80049d2 <read32>
 80046dc:	4603      	mov	r3, r0
 80046de:	461a      	mov	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	3316      	adds	r3, #22
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 f967 	bl	80049d2 <read32>
 8004704:	4603      	mov	r3, r0
 8004706:	461a      	mov	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	331a      	adds	r3, #26
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f95e 	bl	80049d2 <read32>
 8004716:	ee07 0a90 	vmov	s15, r0
 800471a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800471e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80048b8 <decodeDeadReckoningPose+0x1c8>
 8004722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	331e      	adds	r3, #30
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f94e 	bl	80049d2 <read32>
 8004736:	ee07 0a90 	vmov	s15, r0
 800473a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800473e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80048b8 <decodeDeadReckoningPose+0x1c8>
 8004742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	3322      	adds	r3, #34	; 0x22
 8004750:	4618      	mov	r0, r3
 8004752:	f000 f93e 	bl	80049d2 <read32>
 8004756:	ee07 0a90 	vmov	s15, r0
 800475a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800475e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80048b8 <decodeDeadReckoningPose+0x1c8>
 8004762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	3326      	adds	r3, #38	; 0x26
 8004770:	4618      	mov	r0, r3
 8004772:	f000 f92e 	bl	80049d2 <read32>
 8004776:	ee07 0a90 	vmov	s15, r0
 800477a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800477e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80048bc <decodeDeadReckoningPose+0x1cc>
 8004782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	332a      	adds	r3, #42	; 0x2a
 8004790:	4618      	mov	r0, r3
 8004792:	f000 f91e 	bl	80049d2 <read32>
 8004796:	ee07 0a90 	vmov	s15, r0
 800479a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800479e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80048bc <decodeDeadReckoningPose+0x1cc>
 80047a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	332e      	adds	r3, #46	; 0x2e
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 f90e 	bl	80049d2 <read32>
 80047b6:	ee07 0a90 	vmov	s15, r0
 80047ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047be:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80048bc <decodeDeadReckoningPose+0x1cc>
 80047c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	3332      	adds	r3, #50	; 0x32
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f8fe 	bl	80049d2 <read32>
 80047d6:	ee07 0a90 	vmov	s15, r0
 80047da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047de:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80048bc <decodeDeadReckoningPose+0x1cc>
 80047e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	3336      	adds	r3, #54	; 0x36
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f8ee 	bl	80049d2 <read32>
 80047f6:	ee07 0a90 	vmov	s15, r0
 80047fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047fe:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80048c0 <decodeDeadReckoningPose+0x1d0>
 8004802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	333a      	adds	r3, #58	; 0x3a
 8004810:	4618      	mov	r0, r3
 8004812:	f000 f8de 	bl	80049d2 <read32>
 8004816:	ee07 0a90 	vmov	s15, r0
 800481a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800481e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80048c0 <decodeDeadReckoningPose+0x1d0>
 8004822:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	333e      	adds	r3, #62	; 0x3e
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f8ce 	bl	80049d2 <read32>
 8004836:	ee07 0a90 	vmov	s15, r0
 800483a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800483e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80048c0 <decodeDeadReckoningPose+0x1d0>
 8004842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	3342      	adds	r3, #66	; 0x42
 8004850:	4618      	mov	r0, r3
 8004852:	f000 f8be 	bl	80049d2 <read32>
 8004856:	ee07 0a90 	vmov	s15, r0
 800485a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800485e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80048c0 <decodeDeadReckoningPose+0x1d0>
 8004862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	3346      	adds	r3, #70	; 0x46
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f8ae 	bl	80049d2 <read32>
 8004876:	ee07 0a90 	vmov	s15, r0
 800487a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800487e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80048c0 <decodeDeadReckoningPose+0x1d0>
 8004882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	334a      	adds	r3, #74	; 0x4a
 8004890:	4618      	mov	r0, r3
 8004892:	f000 f89e 	bl	80049d2 <read32>
 8004896:	ee07 0a90 	vmov	s15, r0
 800489a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800489e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80048c0 <decodeDeadReckoningPose+0x1d0>
 80048a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    return SH2_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	37000000 	.word	0x37000000
 80048bc:	30800000 	.word	0x30800000
 80048c0:	33000000 	.word	0x33000000

080048c4 <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	3316      	adds	r3, #22
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f87d 	bl	80049d2 <read32>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	331a      	adds	r3, #26
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 f84f 	bl	8004988 <read8>
 80048ea:	4603      	mov	r3, r0
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	331b      	adds	r3, #27
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 f846 	bl	8004988 <read8>
 80048fc:	4603      	mov	r3, r0
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	331c      	adds	r3, #28
 8004908:	4618      	mov	r0, r3
 800490a:	f000 f84c 	bl	80049a6 <read16>
 800490e:	4603      	mov	r3, r0
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b21a      	sxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3301      	adds	r3, #1
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	b21b      	sxth	r3, r3
 8004938:	4313      	orrs	r3, r2
 800493a:	b21b      	sxth	r3, r3
 800493c:	81fb      	strh	r3, [r7, #14]
    return retval;
 800493e:	89fb      	ldrh	r3, [r7, #14]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3301      	adds	r3, #1
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3302      	adds	r3, #2
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	041b      	lsls	r3, r3, #16
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3303      	adds	r3, #3
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	061b      	lsls	r3, r3, #24
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
    return retval;
 800497a:	68fb      	ldr	r3, [r7, #12]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	73fb      	strb	r3, [r7, #15]
    return retval;
 8004996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b085      	sub	sp, #20
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b21a      	sxth	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3301      	adds	r3, #1
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	b21b      	sxth	r3, r3
 80049be:	4313      	orrs	r3, r2
 80049c0:	81fb      	strh	r3, [r7, #14]
    return retval;
 80049c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3301      	adds	r3, #1
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3302      	adds	r3, #2
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3303      	adds	r3, #3
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	061b      	lsls	r3, r3, #24
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
    return retval;
 8004a00:	68fb      	ldr	r3, [r7, #12]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	e00b      	b.n	8004a34 <shtp_init+0x24>
        instances[n].pHal = 0;
 8004a1c:	4a0b      	ldr	r2, [pc, #44]	; (8004a4c <shtp_init+0x3c>)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f640 1114 	movw	r1, #2324	; 0x914
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3301      	adds	r3, #1
 8004a32:	607b      	str	r3, [r7, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	ddf0      	ble.n	8004a1c <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <shtp_init+0x40>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20000818 	.word	0x20000818
 8004a50:	2000112c 	.word	0x2000112c

08004a54 <getInstance>:

static shtp_t *getInstance(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	e014      	b.n	8004a8a <getInstance+0x36>
        if (instances[n].pHal == 0) {
 8004a60:	4a0f      	ldr	r2, [pc, #60]	; (8004aa0 <getInstance+0x4c>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f640 1114 	movw	r1, #2324	; 0x914
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d107      	bne.n	8004a84 <getInstance+0x30>
            // This instance is free
            return &instances[n];
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f640 1214 	movw	r2, #2324	; 0x914
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <getInstance+0x4c>)
 8004a80:	4413      	add	r3, r2
 8004a82:	e006      	b.n	8004a92 <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3301      	adds	r3, #1
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	dde7      	ble.n	8004a60 <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000818 	.word	0x20000818

08004aa4 <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	460a      	mov	r2, r1
 8004aae:	80fb      	strh	r3, [r7, #6]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 8004ab4:	88fa      	ldrh	r2, [r7, #6]
 8004ab6:	88bb      	ldrh	r3, [r7, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d201      	bcs.n	8004ac0 <min_u16+0x1c>
        return a;
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	e000      	b.n	8004ac2 <min_u16+0x1e>
    }
    else {
        return b;
 8004ac0:	88bb      	ldrh	r3, [r7, #4]
    }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 8004ace:	b590      	push	{r4, r7, lr}
 8004ad0:	b089      	sub	sp, #36	; 0x24
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	460b      	mov	r3, r1
 8004adc:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	76fb      	strb	r3, [r7, #27]
    uint16_t cursor = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	833b      	strh	r3, [r7, #24]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	833b      	strh	r3, [r7, #24]
    remaining = len;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0) {
 8004af2:	e079      	b.n	8004be8 <txProcess+0x11a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 8004af4:	8afb      	ldrh	r3, [r7, #22]
 8004af6:	217c      	movs	r1, #124	; 0x7c
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ffd3 	bl	8004aa4 <min_u16>
 8004afe:	4603      	mov	r3, r0
 8004b00:	82bb      	strh	r3, [r7, #20]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 8004b02:	8abb      	ldrh	r3, [r7, #20]
 8004b04:	3304      	adds	r3, #4
 8004b06:	827b      	strh	r3, [r7, #18]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 8004b08:	8a7b      	ldrh	r3, [r7, #18]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 8004b10:	8a7b      	ldrh	r3, [r7, #18]
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 8004b22:	7efb      	ldrb	r3, [r7, #27]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d006      	beq.n	8004b36 <txProcess+0x68>
            pShtp->outTransfer[1] |= 0x80;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	7b5b      	ldrb	r3, [r3, #13]
 8004b2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	7afa      	ldrb	r2, [r7, #11]
 8004b3a:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 8004b3c:	7afa      	ldrb	r2, [r7, #11]
 8004b3e:	68f9      	ldr	r1, [r7, #12]
 8004b40:	4613      	mov	r3, r2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8004b4e:	7819      	ldrb	r1, [r3, #0]
 8004b50:	1c4b      	adds	r3, r1, #1
 8004b52:	b2dc      	uxtb	r4, r3
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	4613      	mov	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4403      	add	r3, r0
 8004b60:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8004b64:	4622      	mov	r2, r4
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	330c      	adds	r3, #12
 8004b72:	1d18      	adds	r0, r3, #4
 8004b74:	8b3b      	ldrh	r3, [r7, #24]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	8aba      	ldrh	r2, [r7, #20]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f002 fe15 	bl	80077ac <memcpy>
        remaining -= transferLen;
 8004b82:	8afa      	ldrh	r2, [r7, #22]
 8004b84:	8abb      	ldrh	r3, [r7, #20]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	82fb      	strh	r3, [r7, #22]
        cursor += transferLen;
 8004b8a:	8b3a      	ldrh	r2, [r7, #24]
 8004b8c:	8abb      	ldrh	r3, [r7, #20]
 8004b8e:	4413      	add	r3, r2
 8004b90:	833b      	strh	r3, [r7, #24]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	6810      	ldr	r0, [r2, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	f102 010c 	add.w	r1, r2, #12
 8004ba2:	8a7a      	ldrh	r2, [r7, #18]
 8004ba4:	4798      	blx	r3
 8004ba6:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8004ba8:	e00d      	b.n	8004bc6 <txProcess+0xf8>
        {
            shtp_service(pShtp);
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fa2d 	bl	800500a <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	6810      	ldr	r0, [r2, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	f102 010c 	add.w	r1, r2, #12
 8004bc0:	8a7a      	ldrh	r2, [r7, #18]
 8004bc2:	4798      	blx	r3
 8004bc4:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ee      	beq.n	8004baa <txProcess+0xdc>
        }
        
        if (status < 0)
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	da08      	bge.n	8004be4 <txProcess+0x116>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
            return status;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	e005      	b.n	8004bf0 <txProcess+0x122>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8004be4:	2301      	movs	r3, #1
 8004be6:	76fb      	strb	r3, [r7, #27]
    while (remaining > 0) {
 8004be8:	8afb      	ldrh	r3, [r7, #22]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d182      	bne.n	8004af4 <txProcess+0x26>
    }

    return SH2_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3724      	adds	r7, #36	; 0x24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd90      	pop	{r4, r7, pc}

08004bf8 <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 8004bf8:	b590      	push	{r4, r7, lr}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	4613      	mov	r3, r2
 8004c06:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d813      	bhi.n	8004c3e <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 813a 	beq.w	8004ea2 <rxAssemble+0x2aa>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	6892      	ldr	r2, [r2, #8]
 8004c36:	2101      	movs	r1, #1
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4798      	blx	r3
        }
        return;
 8004c3c:	e131      	b.n	8004ea2 <rxAssemble+0x2aa>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	3301      	adds	r3, #1
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	4413      	add	r3, r2
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004c58:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	09db      	lsrs	r3, r3, #7
 8004c66:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	789b      	ldrb	r3, [r3, #2]
 8004c6c:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	78db      	ldrb	r3, [r3, #3]
 8004c72:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 8004c74:	7dfa      	ldrb	r2, [r7, #23]
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	7dba      	ldrb	r2, [r7, #22]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d00a      	beq.n	8004ca4 <rxAssemble+0xac>
        if (pShtp->eventCallback) {
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d006      	beq.n	8004ca4 <rxAssemble+0xac>
            pShtp->eventCallback(pShtp->eventCookie,
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	6892      	ldr	r2, [r2, #8]
 8004c9e:	2106      	movs	r1, #6
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 8004ca4:	8abb      	ldrh	r3, [r7, #20]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d813      	bhi.n	8004cd2 <rxAssemble+0xda>
        pShtp->rxShortFragments++;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80f2 	beq.w	8004ea6 <rxAssemble+0x2ae>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	6892      	ldr	r2, [r2, #8]
 8004cca:	2101      	movs	r1, #1
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
        }
        return;
 8004cd0:	e0e9      	b.n	8004ea6 <rxAssemble+0x2ae>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 8004cd2:	7dfb      	ldrb	r3, [r7, #23]
 8004cd4:	2b07      	cmp	r3, #7
 8004cd6:	d913      	bls.n	8004d00 <rxAssemble+0x108>
        // Invalid channel id.
        pShtp->rxBadChan++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

        if (pShtp->eventCallback) {
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80dd 	beq.w	8004eaa <rxAssemble+0x2b2>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	6892      	ldr	r2, [r2, #8]
 8004cf8:	2103      	movs	r1, #3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4798      	blx	r3
        }
        return;
 8004cfe:	e0d4      	b.n	8004eaa <rxAssemble+0x2b2>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d040      	beq.n	8004d8c <rxAssemble+0x194>
        // Check this against previously received data.
        if (!continuation ||
 8004d0a:	7cfb      	ldrb	r3, [r7, #19]
 8004d0c:	f083 0301 	eor.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d119      	bne.n	8004d4a <rxAssemble+0x152>
            (chan != pShtp->inChan) ||
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
        if (!continuation ||
 8004d1c:	7dfa      	ldrb	r2, [r7, #23]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d113      	bne.n	8004d4a <rxAssemble+0x152>
            (seq != pShtp->chan[chan].nextInSeq) ||
 8004d22:	7dfa      	ldrb	r2, [r7, #23]
 8004d24:	68f9      	ldr	r1, [r7, #12]
 8004d26:	4613      	mov	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8004d34:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8004d36:	7dba      	ldrb	r2, [r7, #22]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d106      	bne.n	8004d4a <rxAssemble+0x152>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 8004d3c:	8abb      	ldrh	r3, [r7, #20]
 8004d3e:	3b04      	subs	r3, #4
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	f8b2 208c 	ldrh.w	r2, [r2, #140]	; 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d020      	beq.n	8004d8c <rxAssemble+0x194>
            
            if (pShtp->eventCallback) {
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d006      	beq.n	8004d60 <rxAssemble+0x168>
                pShtp->eventCallback(pShtp->eventCookie,
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	6892      	ldr	r2, [r2, #8]
 8004d5a:	2105      	movs	r1, #5
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

            pShtp->rxInterruptedPayloads++;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            if (pShtp->eventCallback) {
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d006      	beq.n	8004d8c <rxAssemble+0x194>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	6892      	ldr	r2, [r2, #8]
 8004d86:	2107      	movs	r1, #7
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 8004d8c:	7dfa      	ldrb	r2, [r7, #23]
 8004d8e:	7dbb      	ldrb	r3, [r7, #22]
 8004d90:	3301      	adds	r3, #1
 8004d92:	b2d8      	uxtb	r0, r3
 8004d94:	68f9      	ldr	r1, [r7, #12]
 8004d96:	4613      	mov	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8004da4:	4602      	mov	r2, r0
 8004da6:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d122      	bne.n	8004df8 <rxAssemble+0x200>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 8004db2:	8abb      	ldrh	r3, [r7, #20]
 8004db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db8:	d912      	bls.n	8004de0 <rxAssemble+0x1e8>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
            
            if (pShtp->eventCallback) {
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d06e      	beq.n	8004eae <rxAssemble+0x2b6>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	6892      	ldr	r2, [r2, #8]
 8004dd8:	2102      	movs	r1, #2
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4798      	blx	r3
            }

            return;
 8004dde:	e066      	b.n	8004eae <rxAssemble+0x2b6>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
        pShtp->inChan = chan;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	7dfa      	ldrb	r2, [r7, #23]
 8004df4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	8abb      	ldrh	r3, [r7, #20]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d901      	bls.n	8004e04 <rxAssemble+0x20c>
        // Only use the valid portion of the transfer
        len = payloadLen;
 8004e00:	8abb      	ldrh	r3, [r7, #20]
 8004e02:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	338f      	adds	r3, #143	; 0x8f
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	; 0x490
 8004e0e:	1898      	adds	r0, r3, r2
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1d19      	adds	r1, r3, #4
 8004e14:	88fb      	ldrh	r3, [r7, #6]
 8004e16:	3b04      	subs	r3, #4
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f002 fcc7 	bl	80077ac <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	4413      	add	r3, r2
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b04      	subs	r3, #4
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
    pShtp->inRemaining = payloadLen - len;
 8004e34:	8aba      	ldrh	r2, [r7, #20]
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d131      	bne.n	8004eb0 <rxAssemble+0x2b8>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 8004e4c:	7dfa      	ldrb	r2, [r7, #23]
 8004e4e:	68f9      	ldr	r1, [r7, #12]
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d025      	beq.n	8004eb0 <rxAssemble+0x2b8>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8004e64:	7dfa      	ldrb	r2, [r7, #23]
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8004e76:	681c      	ldr	r4, [r3, #0]
 8004e78:	7dfa      	ldrb	r2, [r7, #23]
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8004e8a:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f103 018f 	add.w	r1, r3, #143	; 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8004e9e:	47a0      	blx	r4
 8004ea0:	e006      	b.n	8004eb0 <rxAssemble+0x2b8>
        return;
 8004ea2:	bf00      	nop
 8004ea4:	e004      	b.n	8004eb0 <rxAssemble+0x2b8>
        return;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <rxAssemble+0x2b8>
        return;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <rxAssemble+0x2b8>
            return;
 8004eae:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd90      	pop	{r4, r7, pc}
	...

08004eb8 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 8004ec0:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <shtp_open+0x64>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f083 0301 	eor.w	r3, r3, #1
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 8004ece:	f7ff fd9f 	bl	8004a10 <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <shtp_open+0x24>
        // Error
        return 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e01b      	b.n	8004f14 <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 8004edc:	f7ff fdba 	bl	8004a54 <getInstance>
 8004ee0:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e013      	b.n	8004f14 <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 8004eec:	f640 1214 	movw	r2, #2324	; 0x914
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f002 fc68 	bl	80077c8 <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
 8004f00:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <shtp_open+0x54>
        return 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e003      	b.n	8004f14 <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	601a      	str	r2, [r3, #0]

    return pShtp;
 8004f12:	68fb      	ldr	r3, [r7, #12]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	2000112c 	.word	0x2000112c

08004f20 <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	460b      	mov	r3, r1
 8004f56:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 8004f5c:	7afb      	ldrb	r3, [r7, #11]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <shtp_listenChan+0x20>
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	2b07      	cmp	r3, #7
 8004f66:	d902      	bls.n	8004f6e <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 8004f68:	f06f 0301 	mvn.w	r3, #1
 8004f6c:	e016      	b.n	8004f9c <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 8004f6e:	7afa      	ldrb	r2, [r7, #11]
 8004f70:	6979      	ldr	r1, [r7, #20]
 8004f72:	4613      	mov	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 8004f84:	7afa      	ldrb	r2, [r7, #11]
 8004f86:	6979      	ldr	r1, [r7, #20]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	72fb      	strb	r3, [r7, #11]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 8004fc0:	893b      	ldrh	r3, [r7, #8]
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	d909      	bls.n	8004fda <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f8d3 3910 	ldr.w	r3, [r3, #2320]	; 0x910
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
        return SH2_ERR_BAD_PARAM;
 8004fd4:	f06f 0301 	mvn.w	r3, #1
 8004fd8:	e013      	b.n	8005002 <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 8004fda:	7afb      	ldrb	r3, [r7, #11]
 8004fdc:	2b07      	cmp	r3, #7
 8004fde:	d909      	bls.n	8004ff4 <shtp_send+0x4c>
        pShtp->badTxChan++;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
        return SH2_ERR_BAD_PARAM;
 8004fee:	f06f 0301 	mvn.w	r3, #1
 8004ff2:	e006      	b.n	8005002 <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8004ff4:	893b      	ldrh	r3, [r7, #8]
 8004ff6:	7af9      	ldrb	r1, [r7, #11]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f7ff fd67 	bl	8004ace <txProcess>
 8005000:	4603      	mov	r3, r0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 800500a:	b590      	push	{r4, r7, lr}
 800500c:	b087      	sub	sp, #28
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689c      	ldr	r4, [r3, #8]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 800502a:	f107 030c 	add.w	r3, r7, #12
 800502e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005032:	47a0      	blx	r4
 8005034:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	dd08      	ble.n	800504e <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6978      	ldr	r0, [r7, #20]
 800504a:	f7ff fdd5 	bl	8004bf8 <rxAssemble>
    }
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	bd90      	pop	{r4, r7, pc}

08005056 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005060:	2003      	movs	r0, #3
 8005062:	f000 f961 	bl	8005328 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005066:	200f      	movs	r0, #15
 8005068:	f000 f80e 	bl	8005088 <HAL_InitTick>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	71fb      	strb	r3, [r7, #7]
 8005076:	e001      	b.n	800507c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005078:	f7fd fa4a 	bl	8002510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800507c:	79fb      	ldrb	r3, [r7, #7]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005094:	4b17      	ldr	r3, [pc, #92]	; (80050f4 <HAL_InitTick+0x6c>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d023      	beq.n	80050e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800509c:	4b16      	ldr	r3, [pc, #88]	; (80050f8 <HAL_InitTick+0x70>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <HAL_InitTick+0x6c>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	4619      	mov	r1, r3
 80050a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f97b 	bl	80053ae <HAL_SYSTICK_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b0f      	cmp	r3, #15
 80050c2:	d809      	bhi.n	80050d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050c4:	2200      	movs	r2, #0
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	f04f 30ff 	mov.w	r0, #4294967295
 80050cc:	f000 f937 	bl	800533e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80050d0:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <HAL_InitTick+0x74>)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	e007      	b.n	80050e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
 80050dc:	e004      	b.n	80050e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	73fb      	strb	r3, [r7, #15]
 80050e2:	e001      	b.n	80050e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000008 	.word	0x20000008
 80050f8:	20000000 	.word	0x20000000
 80050fc:	20000004 	.word	0x20000004

08005100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_IncTick+0x20>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_IncTick+0x24>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4413      	add	r3, r2
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <HAL_IncTick+0x24>)
 8005112:	6013      	str	r3, [r2, #0]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20000008 	.word	0x20000008
 8005124:	20001130 	.word	0x20001130

08005128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return uwTick;
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_GetTick+0x14>)
 800512e:	681b      	ldr	r3, [r3, #0]
}
 8005130:	4618      	mov	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20001130 	.word	0x20001130

08005140 <__NVIC_SetPriorityGrouping>:
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005150:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <__NVIC_SetPriorityGrouping+0x44>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800515c:	4013      	ands	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800516c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005172:	4a04      	ldr	r2, [pc, #16]	; (8005184 <__NVIC_SetPriorityGrouping+0x44>)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	60d3      	str	r3, [r2, #12]
}
 8005178:	bf00      	nop
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	e000ed00 	.word	0xe000ed00

08005188 <__NVIC_GetPriorityGrouping>:
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800518c:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <__NVIC_GetPriorityGrouping+0x18>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	0a1b      	lsrs	r3, r3, #8
 8005192:	f003 0307 	and.w	r3, r3, #7
}
 8005196:	4618      	mov	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	e000ed00 	.word	0xe000ed00

080051a4 <__NVIC_EnableIRQ>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	db0b      	blt.n	80051ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	f003 021f 	and.w	r2, r3, #31
 80051bc:	4907      	ldr	r1, [pc, #28]	; (80051dc <__NVIC_EnableIRQ+0x38>)
 80051be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	2001      	movs	r0, #1
 80051c6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	e000e100 	.word	0xe000e100

080051e0 <__NVIC_DisableIRQ>:
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	db12      	blt.n	8005218 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	f003 021f 	and.w	r2, r3, #31
 80051f8:	490a      	ldr	r1, [pc, #40]	; (8005224 <__NVIC_DisableIRQ+0x44>)
 80051fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	2001      	movs	r0, #1
 8005202:	fa00 f202 	lsl.w	r2, r0, r2
 8005206:	3320      	adds	r3, #32
 8005208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800520c:	f3bf 8f4f 	dsb	sy
}
 8005210:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005212:	f3bf 8f6f 	isb	sy
}
 8005216:	bf00      	nop
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	e000e100 	.word	0xe000e100

08005228 <__NVIC_SetPriority>:
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	6039      	str	r1, [r7, #0]
 8005232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005238:	2b00      	cmp	r3, #0
 800523a:	db0a      	blt.n	8005252 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	490c      	ldr	r1, [pc, #48]	; (8005274 <__NVIC_SetPriority+0x4c>)
 8005242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005246:	0112      	lsls	r2, r2, #4
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	440b      	add	r3, r1
 800524c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005250:	e00a      	b.n	8005268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	4908      	ldr	r1, [pc, #32]	; (8005278 <__NVIC_SetPriority+0x50>)
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	3b04      	subs	r3, #4
 8005260:	0112      	lsls	r2, r2, #4
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	440b      	add	r3, r1
 8005266:	761a      	strb	r2, [r3, #24]
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	e000e100 	.word	0xe000e100
 8005278:	e000ed00 	.word	0xe000ed00

0800527c <NVIC_EncodePriority>:
{
 800527c:	b480      	push	{r7}
 800527e:	b089      	sub	sp, #36	; 0x24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f1c3 0307 	rsb	r3, r3, #7
 8005296:	2b04      	cmp	r3, #4
 8005298:	bf28      	it	cs
 800529a:	2304      	movcs	r3, #4
 800529c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3304      	adds	r3, #4
 80052a2:	2b06      	cmp	r3, #6
 80052a4:	d902      	bls.n	80052ac <NVIC_EncodePriority+0x30>
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	3b03      	subs	r3, #3
 80052aa:	e000      	b.n	80052ae <NVIC_EncodePriority+0x32>
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b0:	f04f 32ff 	mov.w	r2, #4294967295
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	43da      	mvns	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	401a      	ands	r2, r3
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052c4:	f04f 31ff 	mov.w	r1, #4294967295
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	fa01 f303 	lsl.w	r3, r1, r3
 80052ce:	43d9      	mvns	r1, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052d4:	4313      	orrs	r3, r2
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3724      	adds	r7, #36	; 0x24
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052f4:	d301      	bcc.n	80052fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052f6:	2301      	movs	r3, #1
 80052f8:	e00f      	b.n	800531a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052fa:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <SysTick_Config+0x40>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3b01      	subs	r3, #1
 8005300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005302:	210f      	movs	r1, #15
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	f7ff ff8e 	bl	8005228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <SysTick_Config+0x40>)
 800530e:	2200      	movs	r2, #0
 8005310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005312:	4b04      	ldr	r3, [pc, #16]	; (8005324 <SysTick_Config+0x40>)
 8005314:	2207      	movs	r2, #7
 8005316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	e000e010 	.word	0xe000e010

08005328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ff05 	bl	8005140 <__NVIC_SetPriorityGrouping>
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b086      	sub	sp, #24
 8005342:	af00      	add	r7, sp, #0
 8005344:	4603      	mov	r3, r0
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005350:	f7ff ff1a 	bl	8005188 <__NVIC_GetPriorityGrouping>
 8005354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	6978      	ldr	r0, [r7, #20]
 800535c:	f7ff ff8e 	bl	800527c <NVIC_EncodePriority>
 8005360:	4602      	mov	r2, r0
 8005362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ff5d 	bl	8005228 <__NVIC_SetPriority>
}
 800536e:	bf00      	nop
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	4603      	mov	r3, r0
 800537e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff ff0d 	bl	80051a4 <__NVIC_EnableIRQ>
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	4603      	mov	r3, r0
 800539a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800539c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff ff1d 	bl	80051e0 <__NVIC_DisableIRQ>
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff ff94 	bl	80052e4 <SysTick_Config>
 80053bc:	4603      	mov	r3, r0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d005      	beq.n	80053ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2204      	movs	r2, #4
 80053e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
 80053e8:	e029      	b.n	800543e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 020e 	bic.w	r2, r2, #14
 80053f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	f003 021c 	and.w	r2, r3, #28
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2101      	movs	r1, #1
 8005418:	fa01 f202 	lsl.w	r2, r1, r2
 800541c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	4798      	blx	r3
    }
  }
  return status;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005452:	2300      	movs	r3, #0
 8005454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005456:	e17f      	b.n	8005758 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	2101      	movs	r1, #1
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	4013      	ands	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8171 	beq.w	8005752 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	2b01      	cmp	r3, #1
 800547a:	d005      	beq.n	8005488 <HAL_GPIO_Init+0x40>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d130      	bne.n	80054ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	2203      	movs	r2, #3
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	43db      	mvns	r3, r3
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4013      	ands	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054be:	2201      	movs	r2, #1
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43db      	mvns	r3, r3
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4013      	ands	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	091b      	lsrs	r3, r3, #4
 80054d4:	f003 0201 	and.w	r2, r3, #1
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d118      	bne.n	8005528 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80054fc:	2201      	movs	r2, #1
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4013      	ands	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	08db      	lsrs	r3, r3, #3
 8005512:	f003 0201 	and.w	r2, r3, #1
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 0303 	and.w	r3, r3, #3
 8005530:	2b03      	cmp	r3, #3
 8005532:	d017      	beq.n	8005564 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	2203      	movs	r2, #3
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43db      	mvns	r3, r3
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4013      	ands	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d123      	bne.n	80055b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	08da      	lsrs	r2, r3, #3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3208      	adds	r2, #8
 8005578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	220f      	movs	r2, #15
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4013      	ands	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	08da      	lsrs	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3208      	adds	r2, #8
 80055b2:	6939      	ldr	r1, [r7, #16]
 80055b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	2203      	movs	r2, #3
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	43db      	mvns	r3, r3
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4013      	ands	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 0203 	and.w	r2, r3, #3
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80ac 	beq.w	8005752 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055fa:	4b5f      	ldr	r3, [pc, #380]	; (8005778 <HAL_GPIO_Init+0x330>)
 80055fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fe:	4a5e      	ldr	r2, [pc, #376]	; (8005778 <HAL_GPIO_Init+0x330>)
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	6613      	str	r3, [r2, #96]	; 0x60
 8005606:	4b5c      	ldr	r3, [pc, #368]	; (8005778 <HAL_GPIO_Init+0x330>)
 8005608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005612:	4a5a      	ldr	r2, [pc, #360]	; (800577c <HAL_GPIO_Init+0x334>)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	3302      	adds	r3, #2
 800561a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800561e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	220f      	movs	r2, #15
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4013      	ands	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800563c:	d025      	beq.n	800568a <HAL_GPIO_Init+0x242>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a4f      	ldr	r2, [pc, #316]	; (8005780 <HAL_GPIO_Init+0x338>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d01f      	beq.n	8005686 <HAL_GPIO_Init+0x23e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a4e      	ldr	r2, [pc, #312]	; (8005784 <HAL_GPIO_Init+0x33c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d019      	beq.n	8005682 <HAL_GPIO_Init+0x23a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a4d      	ldr	r2, [pc, #308]	; (8005788 <HAL_GPIO_Init+0x340>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <HAL_GPIO_Init+0x236>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a4c      	ldr	r2, [pc, #304]	; (800578c <HAL_GPIO_Init+0x344>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00d      	beq.n	800567a <HAL_GPIO_Init+0x232>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a4b      	ldr	r2, [pc, #300]	; (8005790 <HAL_GPIO_Init+0x348>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d007      	beq.n	8005676 <HAL_GPIO_Init+0x22e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a4a      	ldr	r2, [pc, #296]	; (8005794 <HAL_GPIO_Init+0x34c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d101      	bne.n	8005672 <HAL_GPIO_Init+0x22a>
 800566e:	2306      	movs	r3, #6
 8005670:	e00c      	b.n	800568c <HAL_GPIO_Init+0x244>
 8005672:	2307      	movs	r3, #7
 8005674:	e00a      	b.n	800568c <HAL_GPIO_Init+0x244>
 8005676:	2305      	movs	r3, #5
 8005678:	e008      	b.n	800568c <HAL_GPIO_Init+0x244>
 800567a:	2304      	movs	r3, #4
 800567c:	e006      	b.n	800568c <HAL_GPIO_Init+0x244>
 800567e:	2303      	movs	r3, #3
 8005680:	e004      	b.n	800568c <HAL_GPIO_Init+0x244>
 8005682:	2302      	movs	r3, #2
 8005684:	e002      	b.n	800568c <HAL_GPIO_Init+0x244>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <HAL_GPIO_Init+0x244>
 800568a:	2300      	movs	r3, #0
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	f002 0203 	and.w	r2, r2, #3
 8005692:	0092      	lsls	r2, r2, #2
 8005694:	4093      	lsls	r3, r2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800569c:	4937      	ldr	r1, [pc, #220]	; (800577c <HAL_GPIO_Init+0x334>)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	089b      	lsrs	r3, r3, #2
 80056a2:	3302      	adds	r3, #2
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_GPIO_Init+0x350>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	43db      	mvns	r3, r3
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4013      	ands	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056ce:	4a32      	ldr	r2, [pc, #200]	; (8005798 <HAL_GPIO_Init+0x350>)
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80056d4:	4b30      	ldr	r3, [pc, #192]	; (8005798 <HAL_GPIO_Init+0x350>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	43db      	mvns	r3, r3
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4013      	ands	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056f8:	4a27      	ldr	r2, [pc, #156]	; (8005798 <HAL_GPIO_Init+0x350>)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80056fe:	4b26      	ldr	r3, [pc, #152]	; (8005798 <HAL_GPIO_Init+0x350>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	43db      	mvns	r3, r3
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4013      	ands	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005722:	4a1d      	ldr	r2, [pc, #116]	; (8005798 <HAL_GPIO_Init+0x350>)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <HAL_GPIO_Init+0x350>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	43db      	mvns	r3, r3
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4013      	ands	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800574c:	4a12      	ldr	r2, [pc, #72]	; (8005798 <HAL_GPIO_Init+0x350>)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	3301      	adds	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	fa22 f303 	lsr.w	r3, r2, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	f47f ae78 	bne.w	8005458 <HAL_GPIO_Init+0x10>
  }
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40021000 	.word	0x40021000
 800577c:	40010000 	.word	0x40010000
 8005780:	48000400 	.word	0x48000400
 8005784:	48000800 	.word	0x48000800
 8005788:	48000c00 	.word	0x48000c00
 800578c:	48001000 	.word	0x48001000
 8005790:	48001400 	.word	0x48001400
 8005794:	48001800 	.word	0x48001800
 8005798:	40010400 	.word	0x40010400

0800579c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057a6:	2300      	movs	r3, #0
 80057a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80057aa:	e0cd      	b.n	8005948 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80057ac:	2201      	movs	r2, #1
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	4013      	ands	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80c0 	beq.w	8005942 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80057c2:	4a68      	ldr	r2, [pc, #416]	; (8005964 <HAL_GPIO_DeInit+0x1c8>)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	089b      	lsrs	r3, r3, #2
 80057c8:	3302      	adds	r3, #2
 80057ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	220f      	movs	r2, #15
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4013      	ands	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80057ea:	d025      	beq.n	8005838 <HAL_GPIO_DeInit+0x9c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a5e      	ldr	r2, [pc, #376]	; (8005968 <HAL_GPIO_DeInit+0x1cc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d01f      	beq.n	8005834 <HAL_GPIO_DeInit+0x98>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a5d      	ldr	r2, [pc, #372]	; (800596c <HAL_GPIO_DeInit+0x1d0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d019      	beq.n	8005830 <HAL_GPIO_DeInit+0x94>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a5c      	ldr	r2, [pc, #368]	; (8005970 <HAL_GPIO_DeInit+0x1d4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d013      	beq.n	800582c <HAL_GPIO_DeInit+0x90>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a5b      	ldr	r2, [pc, #364]	; (8005974 <HAL_GPIO_DeInit+0x1d8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00d      	beq.n	8005828 <HAL_GPIO_DeInit+0x8c>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a5a      	ldr	r2, [pc, #360]	; (8005978 <HAL_GPIO_DeInit+0x1dc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d007      	beq.n	8005824 <HAL_GPIO_DeInit+0x88>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a59      	ldr	r2, [pc, #356]	; (800597c <HAL_GPIO_DeInit+0x1e0>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d101      	bne.n	8005820 <HAL_GPIO_DeInit+0x84>
 800581c:	2306      	movs	r3, #6
 800581e:	e00c      	b.n	800583a <HAL_GPIO_DeInit+0x9e>
 8005820:	2307      	movs	r3, #7
 8005822:	e00a      	b.n	800583a <HAL_GPIO_DeInit+0x9e>
 8005824:	2305      	movs	r3, #5
 8005826:	e008      	b.n	800583a <HAL_GPIO_DeInit+0x9e>
 8005828:	2304      	movs	r3, #4
 800582a:	e006      	b.n	800583a <HAL_GPIO_DeInit+0x9e>
 800582c:	2303      	movs	r3, #3
 800582e:	e004      	b.n	800583a <HAL_GPIO_DeInit+0x9e>
 8005830:	2302      	movs	r3, #2
 8005832:	e002      	b.n	800583a <HAL_GPIO_DeInit+0x9e>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <HAL_GPIO_DeInit+0x9e>
 8005838:	2300      	movs	r3, #0
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	f002 0203 	and.w	r2, r2, #3
 8005840:	0092      	lsls	r2, r2, #2
 8005842:	4093      	lsls	r3, r2
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	429a      	cmp	r2, r3
 8005848:	d132      	bne.n	80058b0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800584a:	4b4d      	ldr	r3, [pc, #308]	; (8005980 <HAL_GPIO_DeInit+0x1e4>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	43db      	mvns	r3, r3
 8005852:	494b      	ldr	r1, [pc, #300]	; (8005980 <HAL_GPIO_DeInit+0x1e4>)
 8005854:	4013      	ands	r3, r2
 8005856:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005858:	4b49      	ldr	r3, [pc, #292]	; (8005980 <HAL_GPIO_DeInit+0x1e4>)
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	43db      	mvns	r3, r3
 8005860:	4947      	ldr	r1, [pc, #284]	; (8005980 <HAL_GPIO_DeInit+0x1e4>)
 8005862:	4013      	ands	r3, r2
 8005864:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005866:	4b46      	ldr	r3, [pc, #280]	; (8005980 <HAL_GPIO_DeInit+0x1e4>)
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	43db      	mvns	r3, r3
 800586e:	4944      	ldr	r1, [pc, #272]	; (8005980 <HAL_GPIO_DeInit+0x1e4>)
 8005870:	4013      	ands	r3, r2
 8005872:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005874:	4b42      	ldr	r3, [pc, #264]	; (8005980 <HAL_GPIO_DeInit+0x1e4>)
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	43db      	mvns	r3, r3
 800587c:	4940      	ldr	r1, [pc, #256]	; (8005980 <HAL_GPIO_DeInit+0x1e4>)
 800587e:	4013      	ands	r3, r2
 8005880:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	220f      	movs	r2, #15
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005892:	4a34      	ldr	r2, [pc, #208]	; (8005964 <HAL_GPIO_DeInit+0x1c8>)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	089b      	lsrs	r3, r3, #2
 8005898:	3302      	adds	r3, #2
 800589a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	43da      	mvns	r2, r3
 80058a2:	4830      	ldr	r0, [pc, #192]	; (8005964 <HAL_GPIO_DeInit+0x1c8>)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	089b      	lsrs	r3, r3, #2
 80058a8:	400a      	ands	r2, r1
 80058aa:	3302      	adds	r3, #2
 80058ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	2103      	movs	r1, #3
 80058ba:	fa01 f303 	lsl.w	r3, r1, r3
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	08da      	lsrs	r2, r3, #3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3208      	adds	r2, #8
 80058cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	220f      	movs	r2, #15
 80058da:	fa02 f303 	lsl.w	r3, r2, r3
 80058de:	43db      	mvns	r3, r3
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	08d2      	lsrs	r2, r2, #3
 80058e4:	4019      	ands	r1, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3208      	adds	r2, #8
 80058ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	2103      	movs	r1, #3
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	401a      	ands	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	2101      	movs	r1, #1
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	43db      	mvns	r3, r3
 8005912:	401a      	ands	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	2103      	movs	r1, #3
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	401a      	ands	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	2101      	movs	r1, #1
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	fa01 f303 	lsl.w	r3, r1, r3
 800593a:	43db      	mvns	r3, r3
 800593c:	401a      	ands	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	3301      	adds	r3, #1
 8005946:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	f47f af2b 	bne.w	80057ac <HAL_GPIO_DeInit+0x10>
  }
}
 8005956:	bf00      	nop
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40010000 	.word	0x40010000
 8005968:	48000400 	.word	0x48000400
 800596c:	48000800 	.word	0x48000800
 8005970:	48000c00 	.word	0x48000c00
 8005974:	48001000 	.word	0x48001000
 8005978:	48001400 	.word	0x48001400
 800597c:	48001800 	.word	0x48001800
 8005980:	40010400 	.word	0x40010400

08005984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	807b      	strh	r3, [r7, #2]
 8005990:	4613      	mov	r3, r2
 8005992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005994:	787b      	ldrb	r3, [r7, #1]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800599a:	887a      	ldrh	r2, [r7, #2]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059a0:	e002      	b.n	80059a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059a2:	887a      	ldrh	r2, [r7, #2]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ca:	4a05      	ldr	r2, [pc, #20]	; (80059e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fc fbf0 	bl	80021b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40010400 	.word	0x40010400

080059e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e095      	b.n	8005b22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d108      	bne.n	8005a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a06:	d009      	beq.n	8005a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	61da      	str	r2, [r3, #28]
 8005a0e:	e005      	b.n	8005a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fc f9fe 	bl	8001e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a5c:	d902      	bls.n	8005a64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e002      	b.n	8005a6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a72:	d007      	beq.n	8005a84 <HAL_SPI_Init+0xa0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a7c:	d002      	beq.n	8005a84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	ea42 0103 	orr.w	r1, r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	0c1b      	lsrs	r3, r3, #16
 8005ae0:	f003 0204 	and.w	r2, r3, #4
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b00:	ea42 0103 	orr.w	r1, r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e01a      	b.n	8005b72 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b52:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7fc f9b9 	bl	8001ecc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b08a      	sub	sp, #40	; 0x28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_SPI_TransmitReceive+0x26>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e1fb      	b.n	8005f98 <HAL_SPI_TransmitReceive+0x41e>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ba8:	f7ff fabe 	bl	8005128 <HAL_GetTick>
 8005bac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bb4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005bbc:	887b      	ldrh	r3, [r7, #2]
 8005bbe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005bc0:	887b      	ldrh	r3, [r7, #2]
 8005bc2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bc4:	7efb      	ldrb	r3, [r7, #27]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d00e      	beq.n	8005be8 <HAL_SPI_TransmitReceive+0x6e>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd0:	d106      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <HAL_SPI_TransmitReceive+0x66>
 8005bda:	7efb      	ldrb	r3, [r7, #27]
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d003      	beq.n	8005be8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005be6:	e1cd      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <HAL_SPI_TransmitReceive+0x80>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_SPI_TransmitReceive+0x80>
 8005bf4:	887b      	ldrh	r3, [r7, #2]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c00:	e1c0      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d003      	beq.n	8005c16 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2205      	movs	r2, #5
 8005c12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	887a      	ldrh	r2, [r7, #2]
 8005c26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	887a      	ldrh	r2, [r7, #2]
 8005c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	887a      	ldrh	r2, [r7, #2]
 8005c42:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c58:	d802      	bhi.n	8005c60 <HAL_SPI_TransmitReceive+0xe6>
 8005c5a:	8a3b      	ldrh	r3, [r7, #16]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d908      	bls.n	8005c72 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	e007      	b.n	8005c82 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c80:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d007      	beq.n	8005ca0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ca8:	d97c      	bls.n	8005da4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SPI_TransmitReceive+0x13e>
 8005cb2:	8a7b      	ldrh	r3, [r7, #18]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d169      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	881a      	ldrh	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	1c9a      	adds	r2, r3, #2
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cdc:	e056      	b.n	8005d8c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d11b      	bne.n	8005d24 <HAL_SPI_TransmitReceive+0x1aa>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d016      	beq.n	8005d24 <HAL_SPI_TransmitReceive+0x1aa>
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d113      	bne.n	8005d24 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	881a      	ldrh	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	1c9a      	adds	r2, r3, #2
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d11c      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x1f2>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	b292      	uxth	r2, r2
 8005d4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	1c9a      	adds	r2, r3, #2
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d6c:	f7ff f9dc 	bl	8005128 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d807      	bhi.n	8005d8c <HAL_SPI_TransmitReceive+0x212>
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d003      	beq.n	8005d8c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005d8a:	e0fb      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1a3      	bne.n	8005cde <HAL_SPI_TransmitReceive+0x164>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d19d      	bne.n	8005cde <HAL_SPI_TransmitReceive+0x164>
 8005da2:	e0df      	b.n	8005f64 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_SPI_TransmitReceive+0x23a>
 8005dac:	8a7b      	ldrh	r3, [r7, #18]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	f040 80cb 	bne.w	8005f4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d912      	bls.n	8005de4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	881a      	ldrh	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	1c9a      	adds	r2, r3, #2
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b02      	subs	r3, #2
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005de2:	e0b2      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e0a:	e09e      	b.n	8005f4a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d134      	bne.n	8005e84 <HAL_SPI_TransmitReceive+0x30a>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d02f      	beq.n	8005e84 <HAL_SPI_TransmitReceive+0x30a>
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d12c      	bne.n	8005e84 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d912      	bls.n	8005e5a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	881a      	ldrh	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	1c9a      	adds	r2, r3, #2
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b02      	subs	r3, #2
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e58:	e012      	b.n	8005e80 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	330c      	adds	r3, #12
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d148      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x3aa>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d042      	beq.n	8005f24 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d923      	bls.n	8005ef2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	b292      	uxth	r2, r2
 8005eb6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	1c9a      	adds	r2, r3, #2
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b02      	subs	r3, #2
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d81f      	bhi.n	8005f20 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005eee:	605a      	str	r2, [r3, #4]
 8005ef0:	e016      	b.n	8005f20 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f103 020c 	add.w	r2, r3, #12
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	7812      	ldrb	r2, [r2, #0]
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f20:	2301      	movs	r3, #1
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f24:	f7ff f900 	bl	8005128 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d803      	bhi.n	8005f3c <HAL_SPI_TransmitReceive+0x3c2>
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d102      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x3c8>
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f48:	e01c      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f47f af5b 	bne.w	8005e0c <HAL_SPI_TransmitReceive+0x292>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f47f af54 	bne.w	8005e0c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fc11 	bl	8006790 <SPI_EndRxTxTransaction>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	661a      	str	r2, [r3, #96]	; 0x60
 8005f80:	e000      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005f82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3728      	adds	r7, #40	; 0x28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_SPI_TransmitReceive_IT+0x20>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e091      	b.n	80060e4 <HAL_SPI_TransmitReceive_IT+0x144>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fce:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fd6:	7dbb      	ldrb	r3, [r7, #22]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d00d      	beq.n	8005ff8 <HAL_SPI_TransmitReceive_IT+0x58>
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe2:	d106      	bne.n	8005ff2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <HAL_SPI_TransmitReceive_IT+0x52>
 8005fec:	7dbb      	ldrb	r3, [r7, #22]
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d002      	beq.n	8005ff8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ff6:	e070      	b.n	80060da <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d005      	beq.n	800600a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_SPI_TransmitReceive_IT+0x6a>
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d102      	bne.n	8006010 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800600e:	e064      	b.n	80060da <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b04      	cmp	r3, #4
 800601a:	d003      	beq.n	8006024 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2205      	movs	r2, #5
 8006020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	887a      	ldrh	r2, [r7, #2]
 8006034:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	887a      	ldrh	r2, [r7, #2]
 800603a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	887a      	ldrh	r2, [r7, #2]
 8006046:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	887a      	ldrh	r2, [r7, #2]
 800604e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800605a:	d906      	bls.n	800606a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4a24      	ldr	r2, [pc, #144]	; (80060f0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8006060:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a23      	ldr	r2, [pc, #140]	; (80060f4 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006066:	651a      	str	r2, [r3, #80]	; 0x50
 8006068:	e005      	b.n	8006076 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4a22      	ldr	r2, [pc, #136]	; (80060f8 <HAL_SPI_TransmitReceive_IT+0x158>)
 800606e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a22      	ldr	r2, [pc, #136]	; (80060fc <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006074:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800607e:	d802      	bhi.n	8006086 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006080:	887b      	ldrh	r3, [r7, #2]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d908      	bls.n	8006098 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006094:	605a      	str	r2, [r3, #4]
 8006096:	e007      	b.n	80060a8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060a6:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80060b6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c2:	2b40      	cmp	r3, #64	; 0x40
 80060c4:	d008      	beq.n	80060d8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	e000      	b.n	80060da <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80060d8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	0800648f 	.word	0x0800648f
 80060f4:	080064f5 	.word	0x080064f5
 80060f8:	0800633f 	.word	0x0800633f
 80060fc:	080063fd 	.word	0x080063fd

08006100 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	099b      	lsrs	r3, r3, #6
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10f      	bne.n	8006144 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	099b      	lsrs	r3, r3, #6
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
    return;
 8006142:	e0d7      	b.n	80062f4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <HAL_SPI_IRQHandler+0x66>
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	09db      	lsrs	r3, r3, #7
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
    return;
 8006164:	e0c6      	b.n	80062f4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10c      	bne.n	800618c <HAL_SPI_IRQHandler+0x8c>
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	099b      	lsrs	r3, r3, #6
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 80b4 	beq.w	80062f4 <HAL_SPI_IRQHandler+0x1f4>
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80ad 	beq.w	80062f4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	099b      	lsrs	r3, r3, #6
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d023      	beq.n	80061ee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d011      	beq.n	80061d6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b6:	f043 0204 	orr.w	r2, r3, #4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	e00b      	b.n	80061ee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	693b      	ldr	r3, [r7, #16]
        return;
 80061ec:	e082      	b.n	80062f4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d014      	beq.n	8006224 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	f043 0201 	orr.w	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	0a1b      	lsrs	r3, r3, #8
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00c      	beq.n	800624a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006234:	f043 0208 	orr.w	r2, r3, #8
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800623c:	2300      	movs	r3, #0
 800623e:	60bb      	str	r3, [r7, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	60bb      	str	r3, [r7, #8]
 8006248:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624e:	2b00      	cmp	r3, #0
 8006250:	d04f      	beq.n	80062f2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006260:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <HAL_SPI_IRQHandler+0x17e>
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d034      	beq.n	80062e8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0203 	bic.w	r2, r2, #3
 800628c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006292:	2b00      	cmp	r3, #0
 8006294:	d011      	beq.n	80062ba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	4a18      	ldr	r2, [pc, #96]	; (80062fc <HAL_SPI_IRQHandler+0x1fc>)
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff f88f 	bl	80053c6 <HAL_DMA_Abort_IT>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d016      	beq.n	80062f0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	4a0d      	ldr	r2, [pc, #52]	; (80062fc <HAL_SPI_IRQHandler+0x1fc>)
 80062c8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff f879 	bl	80053c6 <HAL_DMA_Abort_IT>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80062e6:	e003      	b.n	80062f0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fb ff99 	bl	8002220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80062ee:	e000      	b.n	80062f2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80062f0:	bf00      	nop
    return;
 80062f2:	bf00      	nop
  }
}
 80062f4:	3720      	adds	r7, #32
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	08006315 	.word	0x08006315

08006300 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7fb ff75 	bl	8002220 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b01      	cmp	r3, #1
 8006350:	d923      	bls.n	800639a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	b292      	uxth	r2, r2
 800635e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b02      	subs	r3, #2
 8006374:	b29a      	uxth	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b01      	cmp	r3, #1
 8006386:	d11f      	bne.n	80063c8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006396:	605a      	str	r2, [r3, #4]
 8006398:	e016      	b.n	80063c8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f103 020c 	add.w	r2, r3, #12
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	7812      	ldrb	r2, [r2, #0]
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10f      	bne.n	80063f4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063e2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fa14 	bl	800681c <SPI_CloseRxTx_ISR>
    }
  }
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d912      	bls.n	8006434 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	881a      	ldrh	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	1c9a      	adds	r2, r3, #2
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b02      	subs	r3, #2
 800642c:	b29a      	uxth	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006432:	e012      	b.n	800645a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d110      	bne.n	8006486 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006472:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f9cb 	bl	800681c <SPI_CloseRxTx_ISR>
    }
  }
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	b292      	uxth	r2, r2
 80064a2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	1c9a      	adds	r2, r3, #2
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10f      	bne.n	80064ec <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f998 	bl	800681c <SPI_CloseRxTx_ISR>
    }
  }
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	881a      	ldrh	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	1c9a      	adds	r2, r3, #2
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d110      	bne.n	800654c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006538:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d102      	bne.n	800654c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f968 	bl	800681c <SPI_CloseRxTx_ISR>
    }
  }
}
 800654c:	bf00      	nop
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	4613      	mov	r3, r2
 8006562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006564:	f7fe fde0 	bl	8005128 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	4413      	add	r3, r2
 8006572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006574:	f7fe fdd8 	bl	8005128 <HAL_GetTick>
 8006578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800657a:	4b39      	ldr	r3, [pc, #228]	; (8006660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	015b      	lsls	r3, r3, #5
 8006580:	0d1b      	lsrs	r3, r3, #20
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	fb02 f303 	mul.w	r3, r2, r3
 8006588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800658a:	e054      	b.n	8006636 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006592:	d050      	beq.n	8006636 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006594:	f7fe fdc8 	bl	8005128 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d902      	bls.n	80065aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d13d      	bne.n	8006626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c2:	d111      	bne.n	80065e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065cc:	d004      	beq.n	80065d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d6:	d107      	bne.n	80065e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f0:	d10f      	bne.n	8006612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e017      	b.n	8006656 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	3b01      	subs	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4013      	ands	r3, r2
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	429a      	cmp	r2, r3
 8006644:	bf0c      	ite	eq
 8006646:	2301      	moveq	r3, #1
 8006648:	2300      	movne	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	429a      	cmp	r2, r3
 8006652:	d19b      	bne.n	800658c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000000 	.word	0x20000000

08006664 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006676:	f7fe fd57 	bl	8005128 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	4413      	add	r3, r2
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006686:	f7fe fd4f 	bl	8005128 <HAL_GetTick>
 800668a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	330c      	adds	r3, #12
 8006692:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006694:	4b3d      	ldr	r3, [pc, #244]	; (800678c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	00da      	lsls	r2, r3, #3
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	0d1b      	lsrs	r3, r3, #20
 80066a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80066ac:	e060      	b.n	8006770 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066b4:	d107      	bne.n	80066c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d050      	beq.n	8006770 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066ce:	f7fe fd2b 	bl	8005128 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	429a      	cmp	r2, r3
 80066dc:	d902      	bls.n	80066e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d13d      	bne.n	8006760 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066fc:	d111      	bne.n	8006722 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006706:	d004      	beq.n	8006712 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006710:	d107      	bne.n	8006722 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006720:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800672a:	d10f      	bne.n	800674c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800674a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e010      	b.n	8006782 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	3b01      	subs	r3, #1
 800676e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	4013      	ands	r3, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	429a      	cmp	r2, r3
 800677e:	d196      	bne.n	80066ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3728      	adds	r7, #40	; 0x28
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000000 	.word	0x20000000

08006790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff ff5b 	bl	8006664 <SPI_WaitFifoStateUntilTimeout>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d007      	beq.n	80067c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b8:	f043 0220 	orr.w	r2, r3, #32
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e027      	b.n	8006814 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	2180      	movs	r1, #128	; 0x80
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f7ff fec0 	bl	8006554 <SPI_WaitFlagStateUntilTimeout>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067de:	f043 0220 	orr.w	r2, r3, #32
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e014      	b.n	8006814 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f7ff ff34 	bl	8006664 <SPI_WaitFifoStateUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d007      	beq.n	8006812 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006806:	f043 0220 	orr.w	r2, r3, #32
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e000      	b.n	8006814 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006824:	f7fe fc80 	bl	8005128 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0220 	bic.w	r2, r2, #32
 8006838:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	2164      	movs	r1, #100	; 0x64
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff ffa6 	bl	8006790 <SPI_EndRxTxTransaction>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684e:	f043 0220 	orr.w	r2, r3, #32
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800685a:	2b00      	cmp	r3, #0
 800685c:	d115      	bne.n	800688a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b04      	cmp	r3, #4
 8006868:	d107      	bne.n	800687a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff fd44 	bl	8006300 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006878:	e00e      	b.n	8006898 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fb fcbc 	bl	8002200 <HAL_SPI_TxRxCpltCallback>
}
 8006888:	e006      	b.n	8006898 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fb fcc4 	bl	8002220 <HAL_SPI_ErrorCallback>
}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e049      	b.n	8006946 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fb ff24 	bl	8002714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3304      	adds	r3, #4
 80068dc:	4619      	mov	r1, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f000 fab8 	bl	8006e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	d001      	beq.n	8006968 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e047      	b.n	80069f8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a23      	ldr	r2, [pc, #140]	; (8006a04 <HAL_TIM_Base_Start+0xb4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d01d      	beq.n	80069b6 <HAL_TIM_Base_Start+0x66>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006982:	d018      	beq.n	80069b6 <HAL_TIM_Base_Start+0x66>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1f      	ldr	r2, [pc, #124]	; (8006a08 <HAL_TIM_Base_Start+0xb8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d013      	beq.n	80069b6 <HAL_TIM_Base_Start+0x66>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1e      	ldr	r2, [pc, #120]	; (8006a0c <HAL_TIM_Base_Start+0xbc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00e      	beq.n	80069b6 <HAL_TIM_Base_Start+0x66>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <HAL_TIM_Base_Start+0xc0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d009      	beq.n	80069b6 <HAL_TIM_Base_Start+0x66>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1b      	ldr	r2, [pc, #108]	; (8006a14 <HAL_TIM_Base_Start+0xc4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d004      	beq.n	80069b6 <HAL_TIM_Base_Start+0x66>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a19      	ldr	r2, [pc, #100]	; (8006a18 <HAL_TIM_Base_Start+0xc8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d115      	bne.n	80069e2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	4b17      	ldr	r3, [pc, #92]	; (8006a1c <HAL_TIM_Base_Start+0xcc>)
 80069be:	4013      	ands	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b06      	cmp	r3, #6
 80069c6:	d015      	beq.n	80069f4 <HAL_TIM_Base_Start+0xa4>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ce:	d011      	beq.n	80069f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e0:	e008      	b.n	80069f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0201 	orr.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e000      	b.n	80069f6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	40012c00 	.word	0x40012c00
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40000800 	.word	0x40000800
 8006a10:	40000c00 	.word	0x40000c00
 8006a14:	40013400 	.word	0x40013400
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	00010007 	.word	0x00010007

08006a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d122      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d11b      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0202 	mvn.w	r2, #2
 8006a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f9d8 	bl	8006e18 <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f9ca 	bl	8006e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f9db 	bl	8006e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d122      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d11b      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0204 	mvn.w	r2, #4
 8006aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f9ae 	bl	8006e18 <HAL_TIM_IC_CaptureCallback>
 8006abc:	e005      	b.n	8006aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9a0 	bl	8006e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f9b1 	bl	8006e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d122      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d11b      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0208 	mvn.w	r2, #8
 8006af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2204      	movs	r2, #4
 8006afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f984 	bl	8006e18 <HAL_TIM_IC_CaptureCallback>
 8006b10:	e005      	b.n	8006b1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f976 	bl	8006e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f987 	bl	8006e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0310 	and.w	r3, r3, #16
 8006b2e:	2b10      	cmp	r3, #16
 8006b30:	d122      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0310 	and.w	r3, r3, #16
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d11b      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0210 	mvn.w	r2, #16
 8006b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f95a 	bl	8006e18 <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f94c 	bl	8006e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f95d 	bl	8006e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d10e      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d107      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0201 	mvn.w	r2, #1
 8006b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f926 	bl	8006df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bae:	2b80      	cmp	r3, #128	; 0x80
 8006bb0:	d10e      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbc:	2b80      	cmp	r3, #128	; 0x80
 8006bbe:	d107      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fb08 	bl	80071e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bde:	d10e      	bne.n	8006bfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bea:	2b80      	cmp	r3, #128	; 0x80
 8006bec:	d107      	bne.n	8006bfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fafb 	bl	80071f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d10e      	bne.n	8006c2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c16:	2b40      	cmp	r3, #64	; 0x40
 8006c18:	d107      	bne.n	8006c2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f90b 	bl	8006e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d10e      	bne.n	8006c56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	d107      	bne.n	8006c56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f06f 0220 	mvn.w	r2, #32
 8006c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fabb 	bl	80071cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_TIM_ConfigClockSource+0x1c>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e0b6      	b.n	8006de8 <HAL_TIM_ConfigClockSource+0x18a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c98:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ca4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb6:	d03e      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0xd8>
 8006cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cbc:	f200 8087 	bhi.w	8006dce <HAL_TIM_ConfigClockSource+0x170>
 8006cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc4:	f000 8086 	beq.w	8006dd4 <HAL_TIM_ConfigClockSource+0x176>
 8006cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ccc:	d87f      	bhi.n	8006dce <HAL_TIM_ConfigClockSource+0x170>
 8006cce:	2b70      	cmp	r3, #112	; 0x70
 8006cd0:	d01a      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0xaa>
 8006cd2:	2b70      	cmp	r3, #112	; 0x70
 8006cd4:	d87b      	bhi.n	8006dce <HAL_TIM_ConfigClockSource+0x170>
 8006cd6:	2b60      	cmp	r3, #96	; 0x60
 8006cd8:	d050      	beq.n	8006d7c <HAL_TIM_ConfigClockSource+0x11e>
 8006cda:	2b60      	cmp	r3, #96	; 0x60
 8006cdc:	d877      	bhi.n	8006dce <HAL_TIM_ConfigClockSource+0x170>
 8006cde:	2b50      	cmp	r3, #80	; 0x50
 8006ce0:	d03c      	beq.n	8006d5c <HAL_TIM_ConfigClockSource+0xfe>
 8006ce2:	2b50      	cmp	r3, #80	; 0x50
 8006ce4:	d873      	bhi.n	8006dce <HAL_TIM_ConfigClockSource+0x170>
 8006ce6:	2b40      	cmp	r3, #64	; 0x40
 8006ce8:	d058      	beq.n	8006d9c <HAL_TIM_ConfigClockSource+0x13e>
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d86f      	bhi.n	8006dce <HAL_TIM_ConfigClockSource+0x170>
 8006cee:	2b30      	cmp	r3, #48	; 0x30
 8006cf0:	d064      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x15e>
 8006cf2:	2b30      	cmp	r3, #48	; 0x30
 8006cf4:	d86b      	bhi.n	8006dce <HAL_TIM_ConfigClockSource+0x170>
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d060      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x15e>
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d867      	bhi.n	8006dce <HAL_TIM_ConfigClockSource+0x170>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d05c      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x15e>
 8006d02:	2b10      	cmp	r3, #16
 8006d04:	d05a      	beq.n	8006dbc <HAL_TIM_ConfigClockSource+0x15e>
 8006d06:	e062      	b.n	8006dce <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	6899      	ldr	r1, [r3, #8]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f000 f9b0 	bl	800707c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	609a      	str	r2, [r3, #8]
      break;
 8006d34:	e04f      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6899      	ldr	r1, [r3, #8]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f000 f999 	bl	800707c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d58:	609a      	str	r2, [r3, #8]
      break;
 8006d5a:	e03c      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6859      	ldr	r1, [r3, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	f000 f90d 	bl	8006f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2150      	movs	r1, #80	; 0x50
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 f966 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 8006d7a:	e02c      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	6859      	ldr	r1, [r3, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f000 f92c 	bl	8006fe6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2160      	movs	r1, #96	; 0x60
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 f956 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 8006d9a:	e01c      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	6859      	ldr	r1, [r3, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	461a      	mov	r2, r3
 8006daa:	f000 f8ed 	bl	8006f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2140      	movs	r1, #64	; 0x40
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 f946 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 8006dba:	e00c      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f000 f93d 	bl	8007046 <TIM_ITRx_SetConfig>
      break;
 8006dcc:	e003      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd2:	e000      	b.n	8006dd6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006dd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a40      	ldr	r2, [pc, #256]	; (8006f68 <TIM_Base_SetConfig+0x114>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d013      	beq.n	8006e94 <TIM_Base_SetConfig+0x40>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e72:	d00f      	beq.n	8006e94 <TIM_Base_SetConfig+0x40>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a3d      	ldr	r2, [pc, #244]	; (8006f6c <TIM_Base_SetConfig+0x118>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00b      	beq.n	8006e94 <TIM_Base_SetConfig+0x40>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a3c      	ldr	r2, [pc, #240]	; (8006f70 <TIM_Base_SetConfig+0x11c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d007      	beq.n	8006e94 <TIM_Base_SetConfig+0x40>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a3b      	ldr	r2, [pc, #236]	; (8006f74 <TIM_Base_SetConfig+0x120>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_Base_SetConfig+0x40>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a3a      	ldr	r2, [pc, #232]	; (8006f78 <TIM_Base_SetConfig+0x124>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d108      	bne.n	8006ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2f      	ldr	r2, [pc, #188]	; (8006f68 <TIM_Base_SetConfig+0x114>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d01f      	beq.n	8006eee <TIM_Base_SetConfig+0x9a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb4:	d01b      	beq.n	8006eee <TIM_Base_SetConfig+0x9a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a2c      	ldr	r2, [pc, #176]	; (8006f6c <TIM_Base_SetConfig+0x118>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d017      	beq.n	8006eee <TIM_Base_SetConfig+0x9a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a2b      	ldr	r2, [pc, #172]	; (8006f70 <TIM_Base_SetConfig+0x11c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <TIM_Base_SetConfig+0x9a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a2a      	ldr	r2, [pc, #168]	; (8006f74 <TIM_Base_SetConfig+0x120>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d00f      	beq.n	8006eee <TIM_Base_SetConfig+0x9a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a29      	ldr	r2, [pc, #164]	; (8006f78 <TIM_Base_SetConfig+0x124>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00b      	beq.n	8006eee <TIM_Base_SetConfig+0x9a>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a28      	ldr	r2, [pc, #160]	; (8006f7c <TIM_Base_SetConfig+0x128>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d007      	beq.n	8006eee <TIM_Base_SetConfig+0x9a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a27      	ldr	r2, [pc, #156]	; (8006f80 <TIM_Base_SetConfig+0x12c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d003      	beq.n	8006eee <TIM_Base_SetConfig+0x9a>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a26      	ldr	r2, [pc, #152]	; (8006f84 <TIM_Base_SetConfig+0x130>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d108      	bne.n	8006f00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a10      	ldr	r2, [pc, #64]	; (8006f68 <TIM_Base_SetConfig+0x114>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00f      	beq.n	8006f4c <TIM_Base_SetConfig+0xf8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a12      	ldr	r2, [pc, #72]	; (8006f78 <TIM_Base_SetConfig+0x124>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00b      	beq.n	8006f4c <TIM_Base_SetConfig+0xf8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a11      	ldr	r2, [pc, #68]	; (8006f7c <TIM_Base_SetConfig+0x128>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d007      	beq.n	8006f4c <TIM_Base_SetConfig+0xf8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <TIM_Base_SetConfig+0x12c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_Base_SetConfig+0xf8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a0f      	ldr	r2, [pc, #60]	; (8006f84 <TIM_Base_SetConfig+0x130>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d103      	bne.n	8006f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	691a      	ldr	r2, [r3, #16]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	615a      	str	r2, [r3, #20]
}
 8006f5a:	bf00      	nop
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40000400 	.word	0x40000400
 8006f70:	40000800 	.word	0x40000800
 8006f74:	40000c00 	.word	0x40000c00
 8006f78:	40013400 	.word	0x40013400
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40014400 	.word	0x40014400
 8006f84:	40014800 	.word	0x40014800

08006f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f023 0201 	bic.w	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f023 030a 	bic.w	r3, r3, #10
 8006fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b087      	sub	sp, #28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	f023 0210 	bic.w	r2, r3, #16
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	031b      	lsls	r3, r3, #12
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	4313      	orrs	r3, r2
 800701a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007022:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007046:	b480      	push	{r7}
 8007048:	b085      	sub	sp, #20
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	f043 0307 	orr.w	r3, r3, #7
 8007068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	609a      	str	r2, [r3, #8]
}
 8007070:	bf00      	nop
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	021a      	lsls	r2, r3, #8
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	431a      	orrs	r2, r3
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	609a      	str	r2, [r3, #8]
}
 80070b0:	bf00      	nop
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e068      	b.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2e      	ldr	r2, [pc, #184]	; (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d004      	beq.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2d      	ldr	r2, [pc, #180]	; (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d108      	bne.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800710e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1e      	ldr	r2, [pc, #120]	; (80071b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01d      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007146:	d018      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1b      	ldr	r2, [pc, #108]	; (80071bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a1a      	ldr	r2, [pc, #104]	; (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00e      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a18      	ldr	r2, [pc, #96]	; (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d009      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d004      	beq.n	800717a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a14      	ldr	r2, [pc, #80]	; (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d10c      	bne.n	8007194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	4313      	orrs	r3, r2
 800718a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40012c00 	.word	0x40012c00
 80071b8:	40013400 	.word	0x40013400
 80071bc:	40000400 	.word	0x40000400
 80071c0:	40000800 	.word	0x40000800
 80071c4:	40000c00 	.word	0x40000c00
 80071c8:	40014000 	.word	0x40014000

080071cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <LL_ADC_REG_SetSequencerLength>:
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f023 020f 	bic.w	r2, r3, #15
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	431a      	orrs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <LL_ADC_IsEnabled>:
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <LL_ADC_IsEnabled+0x18>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <LL_ADC_IsEnabled+0x1a>
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8007254:	b590      	push	{r4, r7, lr}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8007262:	481c      	ldr	r0, [pc, #112]	; (80072d4 <LL_ADC_CommonInit+0x80>)
 8007264:	f7ff ffe3 	bl	800722e <LL_ADC_IsEnabled>
 8007268:	4604      	mov	r4, r0
 800726a:	481b      	ldr	r0, [pc, #108]	; (80072d8 <LL_ADC_CommonInit+0x84>)
 800726c:	f7ff ffdf 	bl	800722e <LL_ADC_IsEnabled>
 8007270:	4603      	mov	r3, r0
 8007272:	431c      	orrs	r4, r3
 8007274:	4819      	ldr	r0, [pc, #100]	; (80072dc <LL_ADC_CommonInit+0x88>)
 8007276:	f7ff ffda 	bl	800722e <LL_ADC_IsEnabled>
 800727a:	4603      	mov	r3, r0
 800727c:	4323      	orrs	r3, r4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d120      	bne.n	80072c4 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d012      	beq.n	80072b0 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	4b14      	ldr	r3, [pc, #80]	; (80072e0 <LL_ADC_CommonInit+0x8c>)
 8007290:	4013      	ands	r3, r2
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	6811      	ldr	r1, [r2, #0]
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	6852      	ldr	r2, [r2, #4]
 800729a:	4311      	orrs	r1, r2
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	6892      	ldr	r2, [r2, #8]
 80072a0:	4311      	orrs	r1, r2
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	68d2      	ldr	r2, [r2, #12]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	609a      	str	r2, [r3, #8]
 80072ae:	e00b      	b.n	80072c8 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	4b0a      	ldr	r3, [pc, #40]	; (80072e0 <LL_ADC_CommonInit+0x8c>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	609a      	str	r2, [r3, #8]
 80072c2:	e001      	b.n	80072c8 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd90      	pop	{r4, r7, pc}
 80072d2:	bf00      	nop
 80072d4:	50040000 	.word	0x50040000
 80072d8:	50040100 	.word	0x50040100
 80072dc:	50040200 	.word	0x50040200
 80072e0:	ffc030e0 	.word	0xffc030e0

080072e4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff ff9b 	bl	800722e <LL_ADC_IsEnabled>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d111      	bne.n	8007322 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007306:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	6811      	ldr	r1, [r2, #0]
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	6852      	ldr	r2, [r2, #4]
 8007312:	4311      	orrs	r1, r2
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	6892      	ldr	r2, [r2, #8]
 8007318:	430a      	orrs	r2, r1
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	60da      	str	r2, [r3, #12]
 8007320:	e001      	b.n	8007326 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff ff75 	bl	800722e <LL_ADC_IsEnabled>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d132      	bne.n	80073b0 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d015      	beq.n	800737e <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	4b1a      	ldr	r3, [pc, #104]	; (80073c0 <LL_ADC_REG_Init+0x90>)
 8007358:	4013      	ands	r3, r2
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	6811      	ldr	r1, [r2, #0]
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	6892      	ldr	r2, [r2, #8]
 8007362:	4311      	orrs	r1, r2
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	68d2      	ldr	r2, [r2, #12]
 8007368:	4311      	orrs	r1, r2
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	6912      	ldr	r2, [r2, #16]
 800736e:	4311      	orrs	r1, r2
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	6952      	ldr	r2, [r2, #20]
 8007374:	430a      	orrs	r2, r1
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]
 800737c:	e011      	b.n	80073a2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	4b0f      	ldr	r3, [pc, #60]	; (80073c0 <LL_ADC_REG_Init+0x90>)
 8007384:	4013      	ands	r3, r2
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	6811      	ldr	r1, [r2, #0]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	68d2      	ldr	r2, [r2, #12]
 800738e:	4311      	orrs	r1, r2
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	6912      	ldr	r2, [r2, #16]
 8007394:	4311      	orrs	r1, r2
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	6952      	ldr	r2, [r2, #20]
 800739a:	430a      	orrs	r2, r1
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff ff2d 	bl	8007208 <LL_ADC_REG_SetSequencerLength>
 80073ae:	e001      	b.n	80073b4 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	fff0c03c 	.word	0xfff0c03c

080073c4 <LL_GPIO_SetPinMode>:
{
 80073c4:	b480      	push	{r7}
 80073c6:	b08b      	sub	sp, #44	; 0x2c
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	fa93 f3a3 	rbit	r3, r3
 80073de:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80073ea:	2320      	movs	r3, #32
 80073ec:	e003      	b.n	80073f6 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	fab3 f383 	clz	r3, r3
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	2103      	movs	r1, #3
 80073fa:	fa01 f303 	lsl.w	r3, r1, r3
 80073fe:	43db      	mvns	r3, r3
 8007400:	401a      	ands	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	fa93 f3a3 	rbit	r3, r3
 800740c:	61fb      	str	r3, [r7, #28]
  return result;
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007418:	2320      	movs	r3, #32
 800741a:	e003      	b.n	8007424 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	fab3 f383 	clz	r3, r3
 8007422:	b2db      	uxtb	r3, r3
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	fa01 f303 	lsl.w	r3, r1, r3
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	601a      	str	r2, [r3, #0]
}
 8007432:	bf00      	nop
 8007434:	372c      	adds	r7, #44	; 0x2c
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <LL_GPIO_SetPinOutputType>:
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	43db      	mvns	r3, r3
 8007452:	401a      	ands	r2, r3
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	fb01 f303 	mul.w	r3, r1, r3
 800745c:	431a      	orrs	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	605a      	str	r2, [r3, #4]
}
 8007462:	bf00      	nop
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <LL_GPIO_SetPinSpeed>:
{
 800746e:	b480      	push	{r7}
 8007470:	b08b      	sub	sp, #44	; 0x2c
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	fa93 f3a3 	rbit	r3, r3
 8007488:	613b      	str	r3, [r7, #16]
  return result;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007494:	2320      	movs	r3, #32
 8007496:	e003      	b.n	80074a0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	fab3 f383 	clz	r3, r3
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	2103      	movs	r1, #3
 80074a4:	fa01 f303 	lsl.w	r3, r1, r3
 80074a8:	43db      	mvns	r3, r3
 80074aa:	401a      	ands	r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	fa93 f3a3 	rbit	r3, r3
 80074b6:	61fb      	str	r3, [r7, #28]
  return result;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80074c2:	2320      	movs	r3, #32
 80074c4:	e003      	b.n	80074ce <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	fab3 f383 	clz	r3, r3
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	fa01 f303 	lsl.w	r3, r1, r3
 80074d6:	431a      	orrs	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	609a      	str	r2, [r3, #8]
}
 80074dc:	bf00      	nop
 80074de:	372c      	adds	r7, #44	; 0x2c
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <LL_GPIO_SetPinPull>:
{
 80074e8:	b480      	push	{r7}
 80074ea:	b08b      	sub	sp, #44	; 0x2c
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	fa93 f3a3 	rbit	r3, r3
 8007502:	613b      	str	r3, [r7, #16]
  return result;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800750e:	2320      	movs	r3, #32
 8007510:	e003      	b.n	800751a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	fab3 f383 	clz	r3, r3
 8007518:	b2db      	uxtb	r3, r3
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	2103      	movs	r1, #3
 800751e:	fa01 f303 	lsl.w	r3, r1, r3
 8007522:	43db      	mvns	r3, r3
 8007524:	401a      	ands	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	fa93 f3a3 	rbit	r3, r3
 8007530:	61fb      	str	r3, [r7, #28]
  return result;
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800753c:	2320      	movs	r3, #32
 800753e:	e003      	b.n	8007548 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	fab3 f383 	clz	r3, r3
 8007546:	b2db      	uxtb	r3, r3
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	fa01 f303 	lsl.w	r3, r1, r3
 8007550:	431a      	orrs	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	60da      	str	r2, [r3, #12]
}
 8007556:	bf00      	nop
 8007558:	372c      	adds	r7, #44	; 0x2c
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <LL_GPIO_SetAFPin_0_7>:
{
 8007562:	b480      	push	{r7}
 8007564:	b08b      	sub	sp, #44	; 0x2c
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a1a      	ldr	r2, [r3, #32]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	fa93 f3a3 	rbit	r3, r3
 800757c:	613b      	str	r3, [r7, #16]
  return result;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007588:	2320      	movs	r3, #32
 800758a:	e003      	b.n	8007594 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	fab3 f383 	clz	r3, r3
 8007592:	b2db      	uxtb	r3, r3
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	210f      	movs	r1, #15
 8007598:	fa01 f303 	lsl.w	r3, r1, r3
 800759c:	43db      	mvns	r3, r3
 800759e:	401a      	ands	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	fa93 f3a3 	rbit	r3, r3
 80075aa:	61fb      	str	r3, [r7, #28]
  return result;
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80075b6:	2320      	movs	r3, #32
 80075b8:	e003      	b.n	80075c2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	fab3 f383 	clz	r3, r3
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ca:	431a      	orrs	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	621a      	str	r2, [r3, #32]
}
 80075d0:	bf00      	nop
 80075d2:	372c      	adds	r7, #44	; 0x2c
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <LL_GPIO_SetAFPin_8_15>:
{
 80075dc:	b480      	push	{r7}
 80075de:	b08b      	sub	sp, #44	; 0x2c
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	fa93 f3a3 	rbit	r3, r3
 80075f8:	613b      	str	r3, [r7, #16]
  return result;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007604:	2320      	movs	r3, #32
 8007606:	e003      	b.n	8007610 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	fab3 f383 	clz	r3, r3
 800760e:	b2db      	uxtb	r3, r3
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	210f      	movs	r1, #15
 8007614:	fa01 f303 	lsl.w	r3, r1, r3
 8007618:	43db      	mvns	r3, r3
 800761a:	401a      	ands	r2, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	0a1b      	lsrs	r3, r3, #8
 8007620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	fa93 f3a3 	rbit	r3, r3
 8007628:	61fb      	str	r3, [r7, #28]
  return result;
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007634:	2320      	movs	r3, #32
 8007636:	e003      	b.n	8007640 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	fab3 f383 	clz	r3, r3
 800763e:	b2db      	uxtb	r3, r3
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	fa01 f303 	lsl.w	r3, r1, r3
 8007648:	431a      	orrs	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800764e:	bf00      	nop
 8007650:	372c      	adds	r7, #44	; 0x2c
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b088      	sub	sp, #32
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	fa93 f3a3 	rbit	r3, r3
 8007670:	60fb      	str	r3, [r7, #12]
  return result;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <LL_GPIO_Init+0x26>
    return 32U;
 800767c:	2320      	movs	r3, #32
 800767e:	e003      	b.n	8007688 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	fab3 f383 	clz	r3, r3
 8007686:	b2db      	uxtb	r3, r3
 8007688:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800768a:	e048      	b.n	800771e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	2101      	movs	r1, #1
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	fa01 f303 	lsl.w	r3, r1, r3
 8007698:	4013      	ands	r3, r2
 800769a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d03a      	beq.n	8007718 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d003      	beq.n	80076b2 <LL_GPIO_Init+0x58>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d10e      	bne.n	80076d0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	461a      	mov	r2, r3
 80076b8:	69b9      	ldr	r1, [r7, #24]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff fed7 	bl	800746e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	6819      	ldr	r1, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff feb7 	bl	800743e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	461a      	mov	r2, r3
 80076d6:	69b9      	ldr	r1, [r7, #24]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ff05 	bl	80074e8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d111      	bne.n	800770a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2bff      	cmp	r3, #255	; 0xff
 80076ea:	d807      	bhi.n	80076fc <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	461a      	mov	r2, r3
 80076f2:	69b9      	ldr	r1, [r7, #24]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff ff34 	bl	8007562 <LL_GPIO_SetAFPin_0_7>
 80076fa:	e006      	b.n	800770a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	461a      	mov	r2, r3
 8007702:	69b9      	ldr	r1, [r7, #24]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff ff69 	bl	80075dc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	461a      	mov	r2, r3
 8007710:	69b9      	ldr	r1, [r7, #24]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff fe56 	bl	80073c4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3301      	adds	r3, #1
 800771c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1af      	bne.n	800768c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8007740:	4a04      	ldr	r2, [pc, #16]	; (8007754 <LL_SetSystemCoreClock+0x1c>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6013      	str	r3, [r2, #0]
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20000000 	.word	0x20000000

08007758 <__errno>:
 8007758:	4b01      	ldr	r3, [pc, #4]	; (8007760 <__errno+0x8>)
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	2000000c 	.word	0x2000000c

08007764 <__libc_init_array>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	4d0d      	ldr	r5, [pc, #52]	; (800779c <__libc_init_array+0x38>)
 8007768:	4c0d      	ldr	r4, [pc, #52]	; (80077a0 <__libc_init_array+0x3c>)
 800776a:	1b64      	subs	r4, r4, r5
 800776c:	10a4      	asrs	r4, r4, #2
 800776e:	2600      	movs	r6, #0
 8007770:	42a6      	cmp	r6, r4
 8007772:	d109      	bne.n	8007788 <__libc_init_array+0x24>
 8007774:	4d0b      	ldr	r5, [pc, #44]	; (80077a4 <__libc_init_array+0x40>)
 8007776:	4c0c      	ldr	r4, [pc, #48]	; (80077a8 <__libc_init_array+0x44>)
 8007778:	f000 fb82 	bl	8007e80 <_init>
 800777c:	1b64      	subs	r4, r4, r5
 800777e:	10a4      	asrs	r4, r4, #2
 8007780:	2600      	movs	r6, #0
 8007782:	42a6      	cmp	r6, r4
 8007784:	d105      	bne.n	8007792 <__libc_init_array+0x2e>
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	f855 3b04 	ldr.w	r3, [r5], #4
 800778c:	4798      	blx	r3
 800778e:	3601      	adds	r6, #1
 8007790:	e7ee      	b.n	8007770 <__libc_init_array+0xc>
 8007792:	f855 3b04 	ldr.w	r3, [r5], #4
 8007796:	4798      	blx	r3
 8007798:	3601      	adds	r6, #1
 800779a:	e7f2      	b.n	8007782 <__libc_init_array+0x1e>
 800779c:	080083c0 	.word	0x080083c0
 80077a0:	080083c0 	.word	0x080083c0
 80077a4:	080083c0 	.word	0x080083c0
 80077a8:	080083c4 	.word	0x080083c4

080077ac <memcpy>:
 80077ac:	440a      	add	r2, r1
 80077ae:	4291      	cmp	r1, r2
 80077b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b4:	d100      	bne.n	80077b8 <memcpy+0xc>
 80077b6:	4770      	bx	lr
 80077b8:	b510      	push	{r4, lr}
 80077ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077c2:	4291      	cmp	r1, r2
 80077c4:	d1f9      	bne.n	80077ba <memcpy+0xe>
 80077c6:	bd10      	pop	{r4, pc}

080077c8 <memset>:
 80077c8:	4402      	add	r2, r0
 80077ca:	4603      	mov	r3, r0
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d100      	bne.n	80077d2 <memset+0xa>
 80077d0:	4770      	bx	lr
 80077d2:	f803 1b01 	strb.w	r1, [r3], #1
 80077d6:	e7f9      	b.n	80077cc <memset+0x4>

080077d8 <atan>:
 80077d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	ec55 4b10 	vmov	r4, r5, d0
 80077e0:	4bc3      	ldr	r3, [pc, #780]	; (8007af0 <atan+0x318>)
 80077e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80077e6:	429e      	cmp	r6, r3
 80077e8:	46ab      	mov	fp, r5
 80077ea:	dd18      	ble.n	800781e <atan+0x46>
 80077ec:	4bc1      	ldr	r3, [pc, #772]	; (8007af4 <atan+0x31c>)
 80077ee:	429e      	cmp	r6, r3
 80077f0:	dc01      	bgt.n	80077f6 <atan+0x1e>
 80077f2:	d109      	bne.n	8007808 <atan+0x30>
 80077f4:	b144      	cbz	r4, 8007808 <atan+0x30>
 80077f6:	4622      	mov	r2, r4
 80077f8:	462b      	mov	r3, r5
 80077fa:	4620      	mov	r0, r4
 80077fc:	4629      	mov	r1, r5
 80077fe:	f7f8 fce9 	bl	80001d4 <__adddf3>
 8007802:	4604      	mov	r4, r0
 8007804:	460d      	mov	r5, r1
 8007806:	e006      	b.n	8007816 <atan+0x3e>
 8007808:	f1bb 0f00 	cmp.w	fp, #0
 800780c:	f300 8131 	bgt.w	8007a72 <atan+0x29a>
 8007810:	a59b      	add	r5, pc, #620	; (adr r5, 8007a80 <atan+0x2a8>)
 8007812:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007816:	ec45 4b10 	vmov	d0, r4, r5
 800781a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781e:	4bb6      	ldr	r3, [pc, #728]	; (8007af8 <atan+0x320>)
 8007820:	429e      	cmp	r6, r3
 8007822:	dc14      	bgt.n	800784e <atan+0x76>
 8007824:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007828:	429e      	cmp	r6, r3
 800782a:	dc0d      	bgt.n	8007848 <atan+0x70>
 800782c:	a396      	add	r3, pc, #600	; (adr r3, 8007a88 <atan+0x2b0>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	ee10 0a10 	vmov	r0, s0
 8007836:	4629      	mov	r1, r5
 8007838:	f7f8 fccc 	bl	80001d4 <__adddf3>
 800783c:	4baf      	ldr	r3, [pc, #700]	; (8007afc <atan+0x324>)
 800783e:	2200      	movs	r2, #0
 8007840:	f7f9 f90e 	bl	8000a60 <__aeabi_dcmpgt>
 8007844:	2800      	cmp	r0, #0
 8007846:	d1e6      	bne.n	8007816 <atan+0x3e>
 8007848:	f04f 3aff 	mov.w	sl, #4294967295
 800784c:	e02b      	b.n	80078a6 <atan+0xce>
 800784e:	f000 f963 	bl	8007b18 <fabs>
 8007852:	4bab      	ldr	r3, [pc, #684]	; (8007b00 <atan+0x328>)
 8007854:	429e      	cmp	r6, r3
 8007856:	ec55 4b10 	vmov	r4, r5, d0
 800785a:	f300 80bf 	bgt.w	80079dc <atan+0x204>
 800785e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007862:	429e      	cmp	r6, r3
 8007864:	f300 80a0 	bgt.w	80079a8 <atan+0x1d0>
 8007868:	ee10 2a10 	vmov	r2, s0
 800786c:	ee10 0a10 	vmov	r0, s0
 8007870:	462b      	mov	r3, r5
 8007872:	4629      	mov	r1, r5
 8007874:	f7f8 fcae 	bl	80001d4 <__adddf3>
 8007878:	4ba0      	ldr	r3, [pc, #640]	; (8007afc <atan+0x324>)
 800787a:	2200      	movs	r2, #0
 800787c:	f7f8 fca8 	bl	80001d0 <__aeabi_dsub>
 8007880:	2200      	movs	r2, #0
 8007882:	4606      	mov	r6, r0
 8007884:	460f      	mov	r7, r1
 8007886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800788a:	4620      	mov	r0, r4
 800788c:	4629      	mov	r1, r5
 800788e:	f7f8 fca1 	bl	80001d4 <__adddf3>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4630      	mov	r0, r6
 8007898:	4639      	mov	r1, r7
 800789a:	f7f8 ff7b 	bl	8000794 <__aeabi_ddiv>
 800789e:	f04f 0a00 	mov.w	sl, #0
 80078a2:	4604      	mov	r4, r0
 80078a4:	460d      	mov	r5, r1
 80078a6:	4622      	mov	r2, r4
 80078a8:	462b      	mov	r3, r5
 80078aa:	4620      	mov	r0, r4
 80078ac:	4629      	mov	r1, r5
 80078ae:	f7f8 fe47 	bl	8000540 <__aeabi_dmul>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4680      	mov	r8, r0
 80078b8:	4689      	mov	r9, r1
 80078ba:	f7f8 fe41 	bl	8000540 <__aeabi_dmul>
 80078be:	a374      	add	r3, pc, #464	; (adr r3, 8007a90 <atan+0x2b8>)
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	4606      	mov	r6, r0
 80078c6:	460f      	mov	r7, r1
 80078c8:	f7f8 fe3a 	bl	8000540 <__aeabi_dmul>
 80078cc:	a372      	add	r3, pc, #456	; (adr r3, 8007a98 <atan+0x2c0>)
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	f7f8 fc7f 	bl	80001d4 <__adddf3>
 80078d6:	4632      	mov	r2, r6
 80078d8:	463b      	mov	r3, r7
 80078da:	f7f8 fe31 	bl	8000540 <__aeabi_dmul>
 80078de:	a370      	add	r3, pc, #448	; (adr r3, 8007aa0 <atan+0x2c8>)
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	f7f8 fc76 	bl	80001d4 <__adddf3>
 80078e8:	4632      	mov	r2, r6
 80078ea:	463b      	mov	r3, r7
 80078ec:	f7f8 fe28 	bl	8000540 <__aeabi_dmul>
 80078f0:	a36d      	add	r3, pc, #436	; (adr r3, 8007aa8 <atan+0x2d0>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f7f8 fc6d 	bl	80001d4 <__adddf3>
 80078fa:	4632      	mov	r2, r6
 80078fc:	463b      	mov	r3, r7
 80078fe:	f7f8 fe1f 	bl	8000540 <__aeabi_dmul>
 8007902:	a36b      	add	r3, pc, #428	; (adr r3, 8007ab0 <atan+0x2d8>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	f7f8 fc64 	bl	80001d4 <__adddf3>
 800790c:	4632      	mov	r2, r6
 800790e:	463b      	mov	r3, r7
 8007910:	f7f8 fe16 	bl	8000540 <__aeabi_dmul>
 8007914:	a368      	add	r3, pc, #416	; (adr r3, 8007ab8 <atan+0x2e0>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	f7f8 fc5b 	bl	80001d4 <__adddf3>
 800791e:	4642      	mov	r2, r8
 8007920:	464b      	mov	r3, r9
 8007922:	f7f8 fe0d 	bl	8000540 <__aeabi_dmul>
 8007926:	a366      	add	r3, pc, #408	; (adr r3, 8007ac0 <atan+0x2e8>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	4680      	mov	r8, r0
 800792e:	4689      	mov	r9, r1
 8007930:	4630      	mov	r0, r6
 8007932:	4639      	mov	r1, r7
 8007934:	f7f8 fe04 	bl	8000540 <__aeabi_dmul>
 8007938:	a363      	add	r3, pc, #396	; (adr r3, 8007ac8 <atan+0x2f0>)
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	f7f8 fc47 	bl	80001d0 <__aeabi_dsub>
 8007942:	4632      	mov	r2, r6
 8007944:	463b      	mov	r3, r7
 8007946:	f7f8 fdfb 	bl	8000540 <__aeabi_dmul>
 800794a:	a361      	add	r3, pc, #388	; (adr r3, 8007ad0 <atan+0x2f8>)
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	f7f8 fc3e 	bl	80001d0 <__aeabi_dsub>
 8007954:	4632      	mov	r2, r6
 8007956:	463b      	mov	r3, r7
 8007958:	f7f8 fdf2 	bl	8000540 <__aeabi_dmul>
 800795c:	a35e      	add	r3, pc, #376	; (adr r3, 8007ad8 <atan+0x300>)
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	f7f8 fc35 	bl	80001d0 <__aeabi_dsub>
 8007966:	4632      	mov	r2, r6
 8007968:	463b      	mov	r3, r7
 800796a:	f7f8 fde9 	bl	8000540 <__aeabi_dmul>
 800796e:	a35c      	add	r3, pc, #368	; (adr r3, 8007ae0 <atan+0x308>)
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f7f8 fc2c 	bl	80001d0 <__aeabi_dsub>
 8007978:	4632      	mov	r2, r6
 800797a:	463b      	mov	r3, r7
 800797c:	f7f8 fde0 	bl	8000540 <__aeabi_dmul>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4640      	mov	r0, r8
 8007986:	4649      	mov	r1, r9
 8007988:	f7f8 fc24 	bl	80001d4 <__adddf3>
 800798c:	4622      	mov	r2, r4
 800798e:	462b      	mov	r3, r5
 8007990:	f7f8 fdd6 	bl	8000540 <__aeabi_dmul>
 8007994:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	d14b      	bne.n	8007a36 <atan+0x25e>
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	f7f8 fc15 	bl	80001d0 <__aeabi_dsub>
 80079a6:	e72c      	b.n	8007802 <atan+0x2a>
 80079a8:	ee10 0a10 	vmov	r0, s0
 80079ac:	4b53      	ldr	r3, [pc, #332]	; (8007afc <atan+0x324>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	4629      	mov	r1, r5
 80079b2:	f7f8 fc0d 	bl	80001d0 <__aeabi_dsub>
 80079b6:	4b51      	ldr	r3, [pc, #324]	; (8007afc <atan+0x324>)
 80079b8:	4606      	mov	r6, r0
 80079ba:	460f      	mov	r7, r1
 80079bc:	2200      	movs	r2, #0
 80079be:	4620      	mov	r0, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7f8 fc07 	bl	80001d4 <__adddf3>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4630      	mov	r0, r6
 80079cc:	4639      	mov	r1, r7
 80079ce:	f7f8 fee1 	bl	8000794 <__aeabi_ddiv>
 80079d2:	f04f 0a01 	mov.w	sl, #1
 80079d6:	4604      	mov	r4, r0
 80079d8:	460d      	mov	r5, r1
 80079da:	e764      	b.n	80078a6 <atan+0xce>
 80079dc:	4b49      	ldr	r3, [pc, #292]	; (8007b04 <atan+0x32c>)
 80079de:	429e      	cmp	r6, r3
 80079e0:	da1d      	bge.n	8007a1e <atan+0x246>
 80079e2:	ee10 0a10 	vmov	r0, s0
 80079e6:	4b48      	ldr	r3, [pc, #288]	; (8007b08 <atan+0x330>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fbf0 	bl	80001d0 <__aeabi_dsub>
 80079f0:	4b45      	ldr	r3, [pc, #276]	; (8007b08 <atan+0x330>)
 80079f2:	4606      	mov	r6, r0
 80079f4:	460f      	mov	r7, r1
 80079f6:	2200      	movs	r2, #0
 80079f8:	4620      	mov	r0, r4
 80079fa:	4629      	mov	r1, r5
 80079fc:	f7f8 fda0 	bl	8000540 <__aeabi_dmul>
 8007a00:	4b3e      	ldr	r3, [pc, #248]	; (8007afc <atan+0x324>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	f7f8 fbe6 	bl	80001d4 <__adddf3>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f8 fec0 	bl	8000794 <__aeabi_ddiv>
 8007a14:	f04f 0a02 	mov.w	sl, #2
 8007a18:	4604      	mov	r4, r0
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	e743      	b.n	80078a6 <atan+0xce>
 8007a1e:	462b      	mov	r3, r5
 8007a20:	ee10 2a10 	vmov	r2, s0
 8007a24:	4939      	ldr	r1, [pc, #228]	; (8007b0c <atan+0x334>)
 8007a26:	2000      	movs	r0, #0
 8007a28:	f7f8 feb4 	bl	8000794 <__aeabi_ddiv>
 8007a2c:	f04f 0a03 	mov.w	sl, #3
 8007a30:	4604      	mov	r4, r0
 8007a32:	460d      	mov	r5, r1
 8007a34:	e737      	b.n	80078a6 <atan+0xce>
 8007a36:	4b36      	ldr	r3, [pc, #216]	; (8007b10 <atan+0x338>)
 8007a38:	4e36      	ldr	r6, [pc, #216]	; (8007b14 <atan+0x33c>)
 8007a3a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007a3e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007a42:	e9da 2300 	ldrd	r2, r3, [sl]
 8007a46:	f7f8 fbc3 	bl	80001d0 <__aeabi_dsub>
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	f7f8 fbbf 	bl	80001d0 <__aeabi_dsub>
 8007a52:	4602      	mov	r2, r0
 8007a54:	460b      	mov	r3, r1
 8007a56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007a5a:	f7f8 fbb9 	bl	80001d0 <__aeabi_dsub>
 8007a5e:	f1bb 0f00 	cmp.w	fp, #0
 8007a62:	4604      	mov	r4, r0
 8007a64:	460d      	mov	r5, r1
 8007a66:	f6bf aed6 	bge.w	8007816 <atan+0x3e>
 8007a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a6e:	461d      	mov	r5, r3
 8007a70:	e6d1      	b.n	8007816 <atan+0x3e>
 8007a72:	a51d      	add	r5, pc, #116	; (adr r5, 8007ae8 <atan+0x310>)
 8007a74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a78:	e6cd      	b.n	8007816 <atan+0x3e>
 8007a7a:	bf00      	nop
 8007a7c:	f3af 8000 	nop.w
 8007a80:	54442d18 	.word	0x54442d18
 8007a84:	bff921fb 	.word	0xbff921fb
 8007a88:	8800759c 	.word	0x8800759c
 8007a8c:	7e37e43c 	.word	0x7e37e43c
 8007a90:	e322da11 	.word	0xe322da11
 8007a94:	3f90ad3a 	.word	0x3f90ad3a
 8007a98:	24760deb 	.word	0x24760deb
 8007a9c:	3fa97b4b 	.word	0x3fa97b4b
 8007aa0:	a0d03d51 	.word	0xa0d03d51
 8007aa4:	3fb10d66 	.word	0x3fb10d66
 8007aa8:	c54c206e 	.word	0xc54c206e
 8007aac:	3fb745cd 	.word	0x3fb745cd
 8007ab0:	920083ff 	.word	0x920083ff
 8007ab4:	3fc24924 	.word	0x3fc24924
 8007ab8:	5555550d 	.word	0x5555550d
 8007abc:	3fd55555 	.word	0x3fd55555
 8007ac0:	2c6a6c2f 	.word	0x2c6a6c2f
 8007ac4:	bfa2b444 	.word	0xbfa2b444
 8007ac8:	52defd9a 	.word	0x52defd9a
 8007acc:	3fadde2d 	.word	0x3fadde2d
 8007ad0:	af749a6d 	.word	0xaf749a6d
 8007ad4:	3fb3b0f2 	.word	0x3fb3b0f2
 8007ad8:	fe231671 	.word	0xfe231671
 8007adc:	3fbc71c6 	.word	0x3fbc71c6
 8007ae0:	9998ebc4 	.word	0x9998ebc4
 8007ae4:	3fc99999 	.word	0x3fc99999
 8007ae8:	54442d18 	.word	0x54442d18
 8007aec:	3ff921fb 	.word	0x3ff921fb
 8007af0:	440fffff 	.word	0x440fffff
 8007af4:	7ff00000 	.word	0x7ff00000
 8007af8:	3fdbffff 	.word	0x3fdbffff
 8007afc:	3ff00000 	.word	0x3ff00000
 8007b00:	3ff2ffff 	.word	0x3ff2ffff
 8007b04:	40038000 	.word	0x40038000
 8007b08:	3ff80000 	.word	0x3ff80000
 8007b0c:	bff00000 	.word	0xbff00000
 8007b10:	08008370 	.word	0x08008370
 8007b14:	08008350 	.word	0x08008350

08007b18 <fabs>:
 8007b18:	ec51 0b10 	vmov	r0, r1, d0
 8007b1c:	ee10 2a10 	vmov	r2, s0
 8007b20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b24:	ec43 2b10 	vmov	d0, r2, r3
 8007b28:	4770      	bx	lr

08007b2a <atan2>:
 8007b2a:	f000 b82d 	b.w	8007b88 <__ieee754_atan2>

08007b2e <sqrt>:
 8007b2e:	b538      	push	{r3, r4, r5, lr}
 8007b30:	ed2d 8b02 	vpush	{d8}
 8007b34:	ec55 4b10 	vmov	r4, r5, d0
 8007b38:	f000 f8f0 	bl	8007d1c <__ieee754_sqrt>
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	462b      	mov	r3, r5
 8007b40:	4620      	mov	r0, r4
 8007b42:	4629      	mov	r1, r5
 8007b44:	eeb0 8a40 	vmov.f32	s16, s0
 8007b48:	eef0 8a60 	vmov.f32	s17, s1
 8007b4c:	f7f8 ff92 	bl	8000a74 <__aeabi_dcmpun>
 8007b50:	b990      	cbnz	r0, 8007b78 <sqrt+0x4a>
 8007b52:	2200      	movs	r2, #0
 8007b54:	2300      	movs	r3, #0
 8007b56:	4620      	mov	r0, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7f8 ff63 	bl	8000a24 <__aeabi_dcmplt>
 8007b5e:	b158      	cbz	r0, 8007b78 <sqrt+0x4a>
 8007b60:	f7ff fdfa 	bl	8007758 <__errno>
 8007b64:	2321      	movs	r3, #33	; 0x21
 8007b66:	6003      	str	r3, [r0, #0]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4619      	mov	r1, r3
 8007b70:	f7f8 fe10 	bl	8000794 <__aeabi_ddiv>
 8007b74:	ec41 0b18 	vmov	d8, r0, r1
 8007b78:	eeb0 0a48 	vmov.f32	s0, s16
 8007b7c:	eef0 0a68 	vmov.f32	s1, s17
 8007b80:	ecbd 8b02 	vpop	{d8}
 8007b84:	bd38      	pop	{r3, r4, r5, pc}
	...

08007b88 <__ieee754_atan2>:
 8007b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	ec57 6b11 	vmov	r6, r7, d1
 8007b90:	4273      	negs	r3, r6
 8007b92:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007d18 <__ieee754_atan2+0x190>
 8007b96:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007b9a:	4333      	orrs	r3, r6
 8007b9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007ba0:	4573      	cmp	r3, lr
 8007ba2:	ec51 0b10 	vmov	r0, r1, d0
 8007ba6:	ee11 8a10 	vmov	r8, s2
 8007baa:	d80a      	bhi.n	8007bc2 <__ieee754_atan2+0x3a>
 8007bac:	4244      	negs	r4, r0
 8007bae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bb2:	4304      	orrs	r4, r0
 8007bb4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007bb8:	4574      	cmp	r4, lr
 8007bba:	ee10 9a10 	vmov	r9, s0
 8007bbe:	468c      	mov	ip, r1
 8007bc0:	d907      	bls.n	8007bd2 <__ieee754_atan2+0x4a>
 8007bc2:	4632      	mov	r2, r6
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	f7f8 fb05 	bl	80001d4 <__adddf3>
 8007bca:	ec41 0b10 	vmov	d0, r0, r1
 8007bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007bd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007bda:	4334      	orrs	r4, r6
 8007bdc:	d103      	bne.n	8007be6 <__ieee754_atan2+0x5e>
 8007bde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be2:	f7ff bdf9 	b.w	80077d8 <atan>
 8007be6:	17bc      	asrs	r4, r7, #30
 8007be8:	f004 0402 	and.w	r4, r4, #2
 8007bec:	ea53 0909 	orrs.w	r9, r3, r9
 8007bf0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007bf4:	d107      	bne.n	8007c06 <__ieee754_atan2+0x7e>
 8007bf6:	2c02      	cmp	r4, #2
 8007bf8:	d060      	beq.n	8007cbc <__ieee754_atan2+0x134>
 8007bfa:	2c03      	cmp	r4, #3
 8007bfc:	d1e5      	bne.n	8007bca <__ieee754_atan2+0x42>
 8007bfe:	a142      	add	r1, pc, #264	; (adr r1, 8007d08 <__ieee754_atan2+0x180>)
 8007c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c04:	e7e1      	b.n	8007bca <__ieee754_atan2+0x42>
 8007c06:	ea52 0808 	orrs.w	r8, r2, r8
 8007c0a:	d106      	bne.n	8007c1a <__ieee754_atan2+0x92>
 8007c0c:	f1bc 0f00 	cmp.w	ip, #0
 8007c10:	da5f      	bge.n	8007cd2 <__ieee754_atan2+0x14a>
 8007c12:	a13f      	add	r1, pc, #252	; (adr r1, 8007d10 <__ieee754_atan2+0x188>)
 8007c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c18:	e7d7      	b.n	8007bca <__ieee754_atan2+0x42>
 8007c1a:	4572      	cmp	r2, lr
 8007c1c:	d10f      	bne.n	8007c3e <__ieee754_atan2+0xb6>
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c24:	d107      	bne.n	8007c36 <__ieee754_atan2+0xae>
 8007c26:	2c02      	cmp	r4, #2
 8007c28:	d84c      	bhi.n	8007cc4 <__ieee754_atan2+0x13c>
 8007c2a:	4b35      	ldr	r3, [pc, #212]	; (8007d00 <__ieee754_atan2+0x178>)
 8007c2c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007c30:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007c34:	e7c9      	b.n	8007bca <__ieee754_atan2+0x42>
 8007c36:	2c02      	cmp	r4, #2
 8007c38:	d848      	bhi.n	8007ccc <__ieee754_atan2+0x144>
 8007c3a:	4b32      	ldr	r3, [pc, #200]	; (8007d04 <__ieee754_atan2+0x17c>)
 8007c3c:	e7f6      	b.n	8007c2c <__ieee754_atan2+0xa4>
 8007c3e:	4573      	cmp	r3, lr
 8007c40:	d0e4      	beq.n	8007c0c <__ieee754_atan2+0x84>
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007c48:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007c4c:	da1e      	bge.n	8007c8c <__ieee754_atan2+0x104>
 8007c4e:	2f00      	cmp	r7, #0
 8007c50:	da01      	bge.n	8007c56 <__ieee754_atan2+0xce>
 8007c52:	323c      	adds	r2, #60	; 0x3c
 8007c54:	db1e      	blt.n	8007c94 <__ieee754_atan2+0x10c>
 8007c56:	4632      	mov	r2, r6
 8007c58:	463b      	mov	r3, r7
 8007c5a:	f7f8 fd9b 	bl	8000794 <__aeabi_ddiv>
 8007c5e:	ec41 0b10 	vmov	d0, r0, r1
 8007c62:	f7ff ff59 	bl	8007b18 <fabs>
 8007c66:	f7ff fdb7 	bl	80077d8 <atan>
 8007c6a:	ec51 0b10 	vmov	r0, r1, d0
 8007c6e:	2c01      	cmp	r4, #1
 8007c70:	d013      	beq.n	8007c9a <__ieee754_atan2+0x112>
 8007c72:	2c02      	cmp	r4, #2
 8007c74:	d015      	beq.n	8007ca2 <__ieee754_atan2+0x11a>
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	d0a7      	beq.n	8007bca <__ieee754_atan2+0x42>
 8007c7a:	a319      	add	r3, pc, #100	; (adr r3, 8007ce0 <__ieee754_atan2+0x158>)
 8007c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c80:	f7f8 faa6 	bl	80001d0 <__aeabi_dsub>
 8007c84:	a318      	add	r3, pc, #96	; (adr r3, 8007ce8 <__ieee754_atan2+0x160>)
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	e014      	b.n	8007cb6 <__ieee754_atan2+0x12e>
 8007c8c:	a118      	add	r1, pc, #96	; (adr r1, 8007cf0 <__ieee754_atan2+0x168>)
 8007c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c92:	e7ec      	b.n	8007c6e <__ieee754_atan2+0xe6>
 8007c94:	2000      	movs	r0, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	e7e9      	b.n	8007c6e <__ieee754_atan2+0xe6>
 8007c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	e793      	b.n	8007bca <__ieee754_atan2+0x42>
 8007ca2:	a30f      	add	r3, pc, #60	; (adr r3, 8007ce0 <__ieee754_atan2+0x158>)
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	f7f8 fa92 	bl	80001d0 <__aeabi_dsub>
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	a10d      	add	r1, pc, #52	; (adr r1, 8007ce8 <__ieee754_atan2+0x160>)
 8007cb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb6:	f7f8 fa8b 	bl	80001d0 <__aeabi_dsub>
 8007cba:	e786      	b.n	8007bca <__ieee754_atan2+0x42>
 8007cbc:	a10a      	add	r1, pc, #40	; (adr r1, 8007ce8 <__ieee754_atan2+0x160>)
 8007cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cc2:	e782      	b.n	8007bca <__ieee754_atan2+0x42>
 8007cc4:	a10c      	add	r1, pc, #48	; (adr r1, 8007cf8 <__ieee754_atan2+0x170>)
 8007cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cca:	e77e      	b.n	8007bca <__ieee754_atan2+0x42>
 8007ccc:	2000      	movs	r0, #0
 8007cce:	2100      	movs	r1, #0
 8007cd0:	e77b      	b.n	8007bca <__ieee754_atan2+0x42>
 8007cd2:	a107      	add	r1, pc, #28	; (adr r1, 8007cf0 <__ieee754_atan2+0x168>)
 8007cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd8:	e777      	b.n	8007bca <__ieee754_atan2+0x42>
 8007cda:	bf00      	nop
 8007cdc:	f3af 8000 	nop.w
 8007ce0:	33145c07 	.word	0x33145c07
 8007ce4:	3ca1a626 	.word	0x3ca1a626
 8007ce8:	54442d18 	.word	0x54442d18
 8007cec:	400921fb 	.word	0x400921fb
 8007cf0:	54442d18 	.word	0x54442d18
 8007cf4:	3ff921fb 	.word	0x3ff921fb
 8007cf8:	54442d18 	.word	0x54442d18
 8007cfc:	3fe921fb 	.word	0x3fe921fb
 8007d00:	08008390 	.word	0x08008390
 8007d04:	080083a8 	.word	0x080083a8
 8007d08:	54442d18 	.word	0x54442d18
 8007d0c:	c00921fb 	.word	0xc00921fb
 8007d10:	54442d18 	.word	0x54442d18
 8007d14:	bff921fb 	.word	0xbff921fb
 8007d18:	7ff00000 	.word	0x7ff00000

08007d1c <__ieee754_sqrt>:
 8007d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d20:	ec55 4b10 	vmov	r4, r5, d0
 8007d24:	4e55      	ldr	r6, [pc, #340]	; (8007e7c <__ieee754_sqrt+0x160>)
 8007d26:	43ae      	bics	r6, r5
 8007d28:	ee10 0a10 	vmov	r0, s0
 8007d2c:	ee10 3a10 	vmov	r3, s0
 8007d30:	462a      	mov	r2, r5
 8007d32:	4629      	mov	r1, r5
 8007d34:	d110      	bne.n	8007d58 <__ieee754_sqrt+0x3c>
 8007d36:	ee10 2a10 	vmov	r2, s0
 8007d3a:	462b      	mov	r3, r5
 8007d3c:	f7f8 fc00 	bl	8000540 <__aeabi_dmul>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4620      	mov	r0, r4
 8007d46:	4629      	mov	r1, r5
 8007d48:	f7f8 fa44 	bl	80001d4 <__adddf3>
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	460d      	mov	r5, r1
 8007d50:	ec45 4b10 	vmov	d0, r4, r5
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	2d00      	cmp	r5, #0
 8007d5a:	dc10      	bgt.n	8007d7e <__ieee754_sqrt+0x62>
 8007d5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007d60:	4330      	orrs	r0, r6
 8007d62:	d0f5      	beq.n	8007d50 <__ieee754_sqrt+0x34>
 8007d64:	b15d      	cbz	r5, 8007d7e <__ieee754_sqrt+0x62>
 8007d66:	ee10 2a10 	vmov	r2, s0
 8007d6a:	462b      	mov	r3, r5
 8007d6c:	ee10 0a10 	vmov	r0, s0
 8007d70:	f7f8 fa2e 	bl	80001d0 <__aeabi_dsub>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	f7f8 fd0c 	bl	8000794 <__aeabi_ddiv>
 8007d7c:	e7e6      	b.n	8007d4c <__ieee754_sqrt+0x30>
 8007d7e:	1512      	asrs	r2, r2, #20
 8007d80:	d074      	beq.n	8007e6c <__ieee754_sqrt+0x150>
 8007d82:	07d4      	lsls	r4, r2, #31
 8007d84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007d88:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007d8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007d90:	bf5e      	ittt	pl
 8007d92:	0fda      	lsrpl	r2, r3, #31
 8007d94:	005b      	lslpl	r3, r3, #1
 8007d96:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007d9a:	2400      	movs	r4, #0
 8007d9c:	0fda      	lsrs	r2, r3, #31
 8007d9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007da2:	107f      	asrs	r7, r7, #1
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	2516      	movs	r5, #22
 8007da8:	4620      	mov	r0, r4
 8007daa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007dae:	1886      	adds	r6, r0, r2
 8007db0:	428e      	cmp	r6, r1
 8007db2:	bfde      	ittt	le
 8007db4:	1b89      	suble	r1, r1, r6
 8007db6:	18b0      	addle	r0, r6, r2
 8007db8:	18a4      	addle	r4, r4, r2
 8007dba:	0049      	lsls	r1, r1, #1
 8007dbc:	3d01      	subs	r5, #1
 8007dbe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007dc2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007dc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007dca:	d1f0      	bne.n	8007dae <__ieee754_sqrt+0x92>
 8007dcc:	462a      	mov	r2, r5
 8007dce:	f04f 0e20 	mov.w	lr, #32
 8007dd2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007dd6:	4281      	cmp	r1, r0
 8007dd8:	eb06 0c05 	add.w	ip, r6, r5
 8007ddc:	dc02      	bgt.n	8007de4 <__ieee754_sqrt+0xc8>
 8007dde:	d113      	bne.n	8007e08 <__ieee754_sqrt+0xec>
 8007de0:	459c      	cmp	ip, r3
 8007de2:	d811      	bhi.n	8007e08 <__ieee754_sqrt+0xec>
 8007de4:	f1bc 0f00 	cmp.w	ip, #0
 8007de8:	eb0c 0506 	add.w	r5, ip, r6
 8007dec:	da43      	bge.n	8007e76 <__ieee754_sqrt+0x15a>
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	db41      	blt.n	8007e76 <__ieee754_sqrt+0x15a>
 8007df2:	f100 0801 	add.w	r8, r0, #1
 8007df6:	1a09      	subs	r1, r1, r0
 8007df8:	459c      	cmp	ip, r3
 8007dfa:	bf88      	it	hi
 8007dfc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007e00:	eba3 030c 	sub.w	r3, r3, ip
 8007e04:	4432      	add	r2, r6
 8007e06:	4640      	mov	r0, r8
 8007e08:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007e0c:	f1be 0e01 	subs.w	lr, lr, #1
 8007e10:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007e14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007e1c:	d1db      	bne.n	8007dd6 <__ieee754_sqrt+0xba>
 8007e1e:	430b      	orrs	r3, r1
 8007e20:	d006      	beq.n	8007e30 <__ieee754_sqrt+0x114>
 8007e22:	1c50      	adds	r0, r2, #1
 8007e24:	bf13      	iteet	ne
 8007e26:	3201      	addne	r2, #1
 8007e28:	3401      	addeq	r4, #1
 8007e2a:	4672      	moveq	r2, lr
 8007e2c:	f022 0201 	bicne.w	r2, r2, #1
 8007e30:	1063      	asrs	r3, r4, #1
 8007e32:	0852      	lsrs	r2, r2, #1
 8007e34:	07e1      	lsls	r1, r4, #31
 8007e36:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007e3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007e3e:	bf48      	it	mi
 8007e40:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007e44:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007e48:	4614      	mov	r4, r2
 8007e4a:	e781      	b.n	8007d50 <__ieee754_sqrt+0x34>
 8007e4c:	0ad9      	lsrs	r1, r3, #11
 8007e4e:	3815      	subs	r0, #21
 8007e50:	055b      	lsls	r3, r3, #21
 8007e52:	2900      	cmp	r1, #0
 8007e54:	d0fa      	beq.n	8007e4c <__ieee754_sqrt+0x130>
 8007e56:	02cd      	lsls	r5, r1, #11
 8007e58:	d50a      	bpl.n	8007e70 <__ieee754_sqrt+0x154>
 8007e5a:	f1c2 0420 	rsb	r4, r2, #32
 8007e5e:	fa23 f404 	lsr.w	r4, r3, r4
 8007e62:	1e55      	subs	r5, r2, #1
 8007e64:	4093      	lsls	r3, r2
 8007e66:	4321      	orrs	r1, r4
 8007e68:	1b42      	subs	r2, r0, r5
 8007e6a:	e78a      	b.n	8007d82 <__ieee754_sqrt+0x66>
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	e7f0      	b.n	8007e52 <__ieee754_sqrt+0x136>
 8007e70:	0049      	lsls	r1, r1, #1
 8007e72:	3201      	adds	r2, #1
 8007e74:	e7ef      	b.n	8007e56 <__ieee754_sqrt+0x13a>
 8007e76:	4680      	mov	r8, r0
 8007e78:	e7bd      	b.n	8007df6 <__ieee754_sqrt+0xda>
 8007e7a:	bf00      	nop
 8007e7c:	7ff00000 	.word	0x7ff00000

08007e80 <_init>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	bf00      	nop
 8007e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e86:	bc08      	pop	{r3}
 8007e88:	469e      	mov	lr, r3
 8007e8a:	4770      	bx	lr

08007e8c <_fini>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr
