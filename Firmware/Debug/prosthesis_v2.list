
prosthesis_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009910  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08009a98  08009a98  00019a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fd8  08009fd8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009fd8  08009fd8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fd8  08009fd8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd8  08009fd8  00019fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fdc  08009fdc  00019fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f0  20000074  0800a054  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001264  0800a054  00021264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4a7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000410a  00000000  00000000  0003d54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b8  00000000  00000000  00041658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  00043010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d7e6  00000000  00000000  000447d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2c6  00000000  00000000  00071fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110c3d  00000000  00000000  0008d27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019deb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e50  00000000  00000000  0019df0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a80 	.word	0x08009a80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08009a80 	.word	0x08009a80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	431a      	orrs	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	609a      	str	r2, [r3, #8]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3330      	adds	r3, #48	; 0x30
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	4413      	add	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	211f      	movs	r1, #31
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0e9b      	lsrs	r3, r3, #26
 8000b9e:	f003 011f 	and.w	r1, r3, #31
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	431a      	orrs	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3314      	adds	r3, #20
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	0e5b      	lsrs	r3, r3, #25
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0d1b      	lsrs	r3, r3, #20
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	2107      	movs	r1, #7
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	0d1b      	lsrs	r3, r3, #20
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	401a      	ands	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0318 	and.w	r3, r3, #24
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000c38:	40d9      	lsrs	r1, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c42:	431a      	orrs	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	0007ffff 	.word	0x0007ffff

08000c5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6093      	str	r3, [r2, #8]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000c90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8000cba:	4905      	ldr	r1, [pc, #20]	; (8000cd0 <LL_RCC_SetADCClockSource+0x28>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000

08000d04 <LL_GPIO_EnablePinAnalogControl>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_EnablePinAnalogControl(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000d6a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000d6e:	f7ff ff9b 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000d72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d76:	f7ff ffad 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	f7ff ffaa 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000d80:	2301      	movs	r3, #1
 8000d82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d84:	2303      	movs	r3, #3
 8000d86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4832      	ldr	r0, [pc, #200]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000d92:	f008 fa60 	bl	8009256 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_0);
 8000d96:	2101      	movs	r1, #1
 8000d98:	4830      	ldr	r0, [pc, #192]	; (8000e5c <MX_ADC1_Init+0x134>)
 8000d9a:	f7ff ffb3 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4619      	mov	r1, r3
 8000db0:	482b      	ldr	r0, [pc, #172]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000db2:	f008 f895 	bl	8008ee0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4822      	ldr	r0, [pc, #136]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dd6:	f008 f8a9 	bl	8008f2c <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 8000dda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000dde:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4619      	mov	r1, r3
 8000dea:	481e      	ldr	r0, [pc, #120]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000dec:	f008 f830 	bl	8008e50 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_NONE);
 8000df0:	2100      	movs	r1, #0
 8000df2:	481c      	ldr	r0, [pc, #112]	; (8000e64 <MX_ADC1_Init+0x13c>)
 8000df4:	f7ff fea4 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000df8:	4819      	ldr	r0, [pc, #100]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000dfa:	f7ff ff2f 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e00:	f7ff ff3e 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_ADC1_Init+0x140>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	099b      	lsrs	r3, r3, #6
 8000e0a:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <MX_ADC1_Init+0x144>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	099a      	lsrs	r2, r3, #6
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_ADC1_Init+0x148>)
 8000e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e26:	e002      	b.n	8000e2e <MX_ADC1_Init+0x106>
  {
    wait_loop_index--;
 8000e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f9      	bne.n	8000e28 <MX_ADC1_Init+0x100>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <MX_ADC1_Init+0x14c>)
 8000e36:	2106      	movs	r1, #6
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e3a:	f7ff fe94 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	490c      	ldr	r1, [pc, #48]	; (8000e74 <MX_ADC1_Init+0x14c>)
 8000e42:	4807      	ldr	r0, [pc, #28]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e44:	f7ff febb 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000e48:	227f      	movs	r2, #127	; 0x7f
 8000e4a:	490a      	ldr	r1, [pc, #40]	; (8000e74 <MX_ADC1_Init+0x14c>)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_ADC1_Init+0x138>)
 8000e4e:	f7ff fee1 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3750      	adds	r7, #80	; 0x50
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	48000800 	.word	0x48000800
 8000e60:	50040000 	.word	0x50040000
 8000e64:	50040300 	.word	0x50040300
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	053e2d63 	.word	0x053e2d63
 8000e70:	cccccccd 	.word	0xcccccccd
 8000e74:	04300002 	.word	0x04300002

08000e78 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	; 0x50
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000e7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_SYSCLK);
 8000eba:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 8000ebe:	f7ff fef3 	bl	8000ca8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8000ec2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec6:	f7ff ff05 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f7ff ff02 	bl	8000cd4 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4831      	ldr	r0, [pc, #196]	; (8000fa8 <MX_ADC2_Init+0x130>)
 8000ee2:	f008 f9b8 	bl	8009256 <LL_GPIO_Init>

  LL_GPIO_EnablePinAnalogControl(GPIOC, LL_GPIO_PIN_1);
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	482f      	ldr	r0, [pc, #188]	; (8000fa8 <MX_ADC2_Init+0x130>)
 8000eea:	f7ff ff0b 	bl	8000d04 <LL_GPIO_EnablePinAnalogControl>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efe:	4619      	mov	r1, r3
 8000f00:	482a      	ldr	r0, [pc, #168]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f02:	f007 ffed 	bl	8008ee0 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4821      	ldr	r0, [pc, #132]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f26:	f008 f801 	bl	8008f2c <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV4;
 8000f2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f2e:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC2), &ADC_CommonInitStruct);
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	4619      	mov	r1, r3
 8000f36:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <MX_ADC2_Init+0x138>)
 8000f38:	f007 ff8a 	bl	8008e50 <LL_ADC_CommonInit>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC2), LL_ADC_PATH_INTERNAL_NONE);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <MX_ADC2_Init+0x138>)
 8000f40:	f7ff fdfe 	bl	8000b40 <LL_ADC_SetCommonPathInternalCh>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000f44:	4819      	ldr	r0, [pc, #100]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f46:	f7ff fe89 	bl	8000c5c <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000f4a:	4818      	ldr	r0, [pc, #96]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f4c:	f7ff fe98 	bl	8000c80 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_ADC2_Init+0x13c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	099b      	lsrs	r3, r3, #6
 8000f56:	4a18      	ldr	r2, [pc, #96]	; (8000fb8 <MX_ADC2_Init+0x140>)
 8000f58:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5c:	099a      	lsrs	r2, r3, #6
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_ADC2_Init+0x144>)
 8000f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f72:	e002      	b.n	8000f7a <MX_ADC2_Init+0x102>
  {
    wait_loop_index--;
 8000f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f76:	3b01      	subs	r3, #1
 8000f78:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 8000f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f9      	bne.n	8000f74 <MX_ADC2_Init+0xfc>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <MX_ADC2_Init+0x148>)
 8000f82:	2106      	movs	r1, #6
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f86:	f7ff fdee 	bl	8000b66 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <MX_ADC2_Init+0x148>)
 8000f8e:	4807      	ldr	r0, [pc, #28]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f90:	f7ff fe15 	bl	8000bbe <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000f94:	227f      	movs	r2, #127	; 0x7f
 8000f96:	490a      	ldr	r1, [pc, #40]	; (8000fc0 <MX_ADC2_Init+0x148>)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_ADC2_Init+0x134>)
 8000f9a:	f7ff fe3b 	bl	8000c14 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	; 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	50040100 	.word	0x50040100
 8000fb0:	50040300 	.word	0x50040300
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	053e2d63 	.word	0x053e2d63
 8000fbc:	cccccccd 	.word	0xcccccccd
 8000fc0:	08600004 	.word	0x08600004

08000fc4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <MX_CAN1_Init+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fe2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000fe6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_CAN1_Init+0x64>)
 8000fea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <MX_CAN1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_CAN1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_CAN1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_CAN1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_CAN1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_CAN1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_CAN1_Init+0x64>)
 8001016:	f004 ffe7 	bl	8005fe8 <HAL_CAN_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001020:	f000 fd10 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000090 	.word	0x20000090
 800102c:	40006400 	.word	0x40006400

08001030 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <HAL_CAN_MspInit+0x9c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d138      	bne.n	80010c4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105c:	6593      	str	r3, [r2, #88]	; 0x58
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a18      	ldr	r2, [pc, #96]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_CAN_MspInit+0xa0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001082:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001094:	2309      	movs	r3, #9
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <HAL_CAN_MspInit+0xa4>)
 80010a0:	f005 ffd0 	bl	8007044 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2101      	movs	r1, #1
 80010a8:	2014      	movs	r0, #20
 80010aa:	f005 ff46 	bl	8006f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010ae:	2014      	movs	r0, #20
 80010b0:	f005 ff5f 	bl	8006f72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2101      	movs	r1, #1
 80010b8:	2015      	movs	r0, #21
 80010ba:	f005 ff3e 	bl	8006f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010be:	2015      	movs	r0, #21
 80010c0:	f005 ff57 	bl	8006f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40006400 	.word	0x40006400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000400 	.word	0x48000400

080010d8 <ErrorHandler_AKxx_x>:
#include "prosthesis_v2.h"

static LED_Code_e CM_ledCode = NoError;

void ErrorHandler_AKxx_x(DeviceIndex_e deviceIndex)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex == AnkleIndex)
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <ErrorHandler_AKxx_x+0x18>
		CM_ledCode = AnkleMotorError;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <ErrorHandler_AKxx_x+0x2c>)
 80010ea:	2202      	movs	r2, #2
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e002      	b.n	80010f6 <ErrorHandler_AKxx_x+0x1e>
	else
		CM_ledCode = KneeMotorError;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <ErrorHandler_AKxx_x+0x2c>)
 80010f2:	2205      	movs	r2, #5
 80010f4:	701a      	strb	r2, [r3, #0]

	ShutdownMotors();
 80010f6:	f000 fdbd 	bl	8001c74 <ShutdownMotors>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200000b8 	.word	0x200000b8

08001108 <ErrorHandler_BNO08x>:

void ErrorHandler_BNO08x()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	CM_ledCode = KneeIMU_Error;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <ErrorHandler_BNO08x+0x14>)
 800110e:	2204      	movs	r2, #4
 8001110:	701a      	strb	r2, [r3, #0]
	ShutdownMotors();
 8001112:	f000 fdaf 	bl	8001c74 <ShutdownMotors>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000b8 	.word	0x200000b8

08001120 <ErrorHandler_Pv2>:

void ErrorHandler_Pv2(LED_Code_e code)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	CM_ledCode = code;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <ErrorHandler_Pv2+0x1c>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	7013      	strb	r3, [r2, #0]
	ShutdownMotors();
 8001130:	f000 fda0 	bl	8001c74 <ShutdownMotors>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000b8 	.word	0x200000b8

08001140 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b44      	ldr	r3, [pc, #272]	; (8001268 <MX_GPIO_Init+0x128>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a43      	ldr	r2, [pc, #268]	; (8001268 <MX_GPIO_Init+0x128>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <MX_GPIO_Init+0x128>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <MX_GPIO_Init+0x128>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a3d      	ldr	r2, [pc, #244]	; (8001268 <MX_GPIO_Init+0x128>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <MX_GPIO_Init+0x128>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b38      	ldr	r3, [pc, #224]	; (8001268 <MX_GPIO_Init+0x128>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a37      	ldr	r2, [pc, #220]	; (8001268 <MX_GPIO_Init+0x128>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b35      	ldr	r3, [pc, #212]	; (8001268 <MX_GPIO_Init+0x128>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <MX_GPIO_Init+0x128>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a31      	ldr	r2, [pc, #196]	; (8001268 <MX_GPIO_Init+0x128>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <MX_GPIO_Init+0x128>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSCOPE_GPIO_Port, OSCOPE_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011bc:	482b      	ldr	r0, [pc, #172]	; (800126c <MX_GPIO_Init+0x12c>)
 80011be:	f006 f9df 	bl	8007580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANKLE_IMU_BT_Pin|ANKLE_IMU_P0_Pin|ANKLE_IMU_P1_Pin|ANKLE_IMU_RST_Pin
 80011c2:	2200      	movs	r2, #0
 80011c4:	211f      	movs	r1, #31
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ca:	f006 f9d9 	bl	8007580 <HAL_GPIO_WritePin>
                          |ANKLE_IMU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2107      	movs	r1, #7
 80011d2:	4827      	ldr	r0, [pc, #156]	; (8001270 <MX_GPIO_Init+0x130>)
 80011d4:	f006 f9d4 	bl	8007580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OSCOPE_Pin;
 80011d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OSCOPE_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	481e      	ldr	r0, [pc, #120]	; (800126c <MX_GPIO_Init+0x12c>)
 80011f2:	f005 ff27 	bl	8007044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ANKLE_IMU_BT_Pin|ANKLE_IMU_P0_Pin|ANKLE_IMU_P1_Pin|ANKLE_IMU_RST_Pin
 80011f6:	231f      	movs	r3, #31
 80011f8:	617b      	str	r3, [r7, #20]
                          |ANKLE_IMU_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f005 ff18 	bl	8007044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin|LED_RED_Pin;
 8001214:	2307      	movs	r3, #7
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_GPIO_Init+0x130>)
 800122c:	f005 ff0a 	bl	8007044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANKLE_IMU_INT_Pin;
 8001230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001236:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123c:	2301      	movs	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ANKLE_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124a:	f005 fefb 	bl	8007044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2017      	movs	r0, #23
 8001254:	f005 fe71 	bl	8006f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001258:	2017      	movs	r0, #23
 800125a:	f005 fe8a 	bl	8006f72 <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	48000800 	.word	0x48000800
 8001270:	48000400 	.word	0x48000400

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db0b      	blt.n	80012ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <__NVIC_EnableIRQ+0x38>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f202 	lsl.w	r2, r0, r2
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_LPTIM_SetUpdateMode>:
  *         @arg @ref LL_LPTIM_UPDATE_MODE_IMMEDIATE
  *         @arg @ref LL_LPTIM_UPDATE_MODE_ENDOFPERIOD
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60da      	str	r2, [r3, #12]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_LPTIM_SetCounterMode>:
  *         @arg @ref LL_LPTIM_COUNTER_MODE_INTERNAL
  *         @arg @ref LL_LPTIM_COUNTER_MODE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60da      	str	r2, [r3, #12]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_LPTIM_SetPolarity>:
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_REGULAR
  *         @arg @ref LL_LPTIM_OUTPUT_POLARITY_INVERSE
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	60da      	str	r2, [r3, #12]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_LPTIM_SetPrescaler>:
  *         @arg @ref LL_LPTIM_PRESCALER_DIV64
  *         @arg @ref LL_LPTIM_PRESCALER_DIV128
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	60da      	str	r2, [r3, #12]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <LL_LPTIM_SetInput1Src>:
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP2
  *         @arg @ref LL_LPTIM_INPUT1_SRC_COMP1_COMP2
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->OR, LPTIM_OR_OR, Src);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	f023 0203 	bic.w	r2, r3, #3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	621a      	str	r2, [r3, #32]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_LPTIM_TrigSw>:
  * @rmtoll CFGR         TRIGEN        LL_LPTIM_TrigSw
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	60da      	str	r2, [r3, #12]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_LPTIM_SetClockSource>:
  *         @arg @ref LL_LPTIM_CLK_SOURCE_INTERNAL
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f023 0201 	bic.w	r2, r3, #1
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60da      	str	r2, [r3, #12]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <LL_RCC_SetLPTIMClockSource>:
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <LL_RCC_SetLPTIMClockSource+0x30>)
 8001496:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	0c1b      	lsrs	r3, r3, #16
 800149e:	041b      	lsls	r3, r3, #16
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	041b      	lsls	r3, r3, #16
 80014a8:	4904      	ldr	r1, [pc, #16]	; (80014bc <LL_RCC_SetLPTIMClockSource+0x30>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40021000 	.word	0x40021000

080014c0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <LL_APB1_GRP2_EnableClock+0x2c>)
 80014ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <LL_APB1_GRP2_EnableClock+0x2c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <LL_APB1_GRP2_EnableClock+0x2c>)
 80014d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000

080014f0 <MX_LPTIM2_Init>:

/* USER CODE END 0 */

/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM2_Init 0 */

  /* USER CODE END LPTIM2_Init 0 */

  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM2_CLKSOURCE_LSI);
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <MX_LPTIM2_Init+0x6c>)
 80014f6:	f7ff ffc9 	bl	800148c <LL_RCC_SetLPTIMClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPTIM2);
 80014fa:	2020      	movs	r0, #32
 80014fc:	f7ff ffe0 	bl	80014c0 <LL_APB1_GRP2_EnableClock>

  /* LPTIM2 interrupt Init */
  NVIC_SetPriority(LPTIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001500:	f7ff feb8 	bl	8001274 <__NVIC_GetPriorityGrouping>
 8001504:	4603      	mov	r3, r0
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff08 	bl	8001320 <NVIC_EncodePriority>
 8001510:	4603      	mov	r3, r0
 8001512:	4619      	mov	r1, r3
 8001514:	2042      	movs	r0, #66	; 0x42
 8001516:	f7ff fed9 	bl	80012cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPTIM2_IRQn);
 800151a:	2042      	movs	r0, #66	; 0x42
 800151c:	f7ff feb8 	bl	8001290 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  LL_LPTIM_SetClockSource(LPTIM2, LL_LPTIM_CLK_SOURCE_INTERNAL);
 8001520:	2100      	movs	r1, #0
 8001522:	480f      	ldr	r0, [pc, #60]	; (8001560 <MX_LPTIM2_Init+0x70>)
 8001524:	f7ff ff9e 	bl	8001464 <LL_LPTIM_SetClockSource>
  LL_LPTIM_SetPrescaler(LPTIM2, LL_LPTIM_PRESCALER_DIV1);
 8001528:	2100      	movs	r1, #0
 800152a:	480d      	ldr	r0, [pc, #52]	; (8001560 <MX_LPTIM2_Init+0x70>)
 800152c:	f7ff ff64 	bl	80013f8 <LL_LPTIM_SetPrescaler>
  LL_LPTIM_SetPolarity(LPTIM2, LL_LPTIM_OUTPUT_POLARITY_REGULAR);
 8001530:	2100      	movs	r1, #0
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <MX_LPTIM2_Init+0x70>)
 8001534:	f7ff ff4d 	bl	80013d2 <LL_LPTIM_SetPolarity>
  LL_LPTIM_SetUpdateMode(LPTIM2, LL_LPTIM_UPDATE_MODE_IMMEDIATE);
 8001538:	2100      	movs	r1, #0
 800153a:	4809      	ldr	r0, [pc, #36]	; (8001560 <MX_LPTIM2_Init+0x70>)
 800153c:	f7ff ff23 	bl	8001386 <LL_LPTIM_SetUpdateMode>
  LL_LPTIM_SetCounterMode(LPTIM2, LL_LPTIM_COUNTER_MODE_INTERNAL);
 8001540:	2100      	movs	r1, #0
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <MX_LPTIM2_Init+0x70>)
 8001544:	f7ff ff32 	bl	80013ac <LL_LPTIM_SetCounterMode>
  LL_LPTIM_TrigSw(LPTIM2);
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_LPTIM2_Init+0x70>)
 800154a:	f7ff ff7b 	bl	8001444 <LL_LPTIM_TrigSw>
  LL_LPTIM_SetInput1Src(LPTIM2, LL_LPTIM_INPUT1_SRC_GPIO);
 800154e:	2100      	movs	r1, #0
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <MX_LPTIM2_Init+0x70>)
 8001552:	f7ff ff64 	bl	800141e <LL_LPTIM_SetInput1Src>
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	00300010 	.word	0x00300010
 8001560:	40009400 	.word	0x40009400

08001564 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001574:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_LPTIM_Enable>:
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	611a      	str	r2, [r3, #16]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_LPTIM_StartCounter>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f023 0206 	bic.w	r2, r3, #6
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	611a      	str	r2, [r3, #16]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <LL_LPTIM_SetAutoReload>:
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	0c1b      	lsrs	r3, r3, #16
 80015e2:	041b      	lsls	r3, r3, #16
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_LPTIM_EnableIT_ARRM>:
  * @rmtoll IER          ARRMIE        LL_LPTIM_EnableIT_ARRM
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f043 0202 	orr.w	r2, r3, #2
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <LL_RCC_HSE_Enable>:
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <LL_RCC_HSE_Enable+0x1c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <LL_RCC_HSE_Enable+0x1c>)
 8001622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000

08001638 <LL_RCC_HSE_IsReady>:
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <LL_RCC_HSE_IsReady+0x24>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001648:	d101      	bne.n	800164e <LL_RCC_HSE_IsReady+0x16>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <LL_RCC_HSE_IsReady+0x18>
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000

08001660 <LL_RCC_LSI_Enable>:
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <LL_RCC_LSI_Enable+0x20>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <LL_RCC_LSI_Enable+0x20>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000

08001684 <LL_RCC_LSI_IsReady>:
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <LL_RCC_LSI_IsReady+0x24>)
 800168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b02      	cmp	r3, #2
 8001694:	d101      	bne.n	800169a <LL_RCC_LSI_IsReady+0x16>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <LL_RCC_LSI_IsReady+0x18>
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000

080016ac <LL_RCC_SetSysClkSource>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <LL_RCC_SetSysClkSource+0x24>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 0203 	bic.w	r2, r3, #3
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <LL_RCC_SetSysClkSource+0x24>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000

080016d4 <LL_RCC_GetSysClkSource>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <LL_RCC_GetSysClkSource+0x18>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <LL_RCC_SetAHBPrescaler>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <LL_RCC_SetAHBPrescaler+0x24>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	4904      	ldr	r1, [pc, #16]	; (8001714 <LL_RCC_SetAHBPrescaler+0x24>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000

08001718 <LL_RCC_SetAPB1Prescaler>:
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001728:	4904      	ldr	r1, [pc, #16]	; (800173c <LL_RCC_SetAPB1Prescaler+0x24>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000

08001740 <LL_RCC_SetAPB2Prescaler>:
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <LL_RCC_SetAPB2Prescaler+0x24>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001750:	4904      	ldr	r1, [pc, #16]	; (8001764 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4313      	orrs	r3, r2
 8001756:	608b      	str	r3, [r1, #8]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40021000 	.word	0x40021000

08001768 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <LL_RCC_PLL_Enable+0x1c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <LL_RCC_PLL_Enable+0x1c>)
 8001772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000

08001788 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <LL_RCC_PLL_IsReady+0x24>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001798:	d101      	bne.n	800179e <LL_RCC_PLL_IsReady+0x16>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_RCC_PLL_IsReady+0x18>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000

080017b0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	68f9      	ldr	r1, [r7, #12]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	4311      	orrs	r1, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	0212      	lsls	r2, r2, #8
 80017d0:	4311      	orrs	r1, r2
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	4904      	ldr	r1, [pc, #16]	; (80017e8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000
 80017ec:	f9ff808c 	.word	0xf9ff808c

080017f0 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80017fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <LL_FLASH_SetLatency+0x24>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 0207 	bic.w	r2, r3, #7
 8001820:	4904      	ldr	r1, [pc, #16]	; (8001834 <LL_FLASH_SetLatency+0x24>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40022000 	.word	0x40022000

08001838 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <LL_FLASH_GetLatency+0x18>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40022000 	.word	0x40022000

08001854 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001864:	4904      	ldr	r1, [pc, #16]	; (8001878 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40007000 	.word	0x40007000

0800187c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08e      	sub	sp, #56	; 0x38
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001882:	f004 fb3c 	bl	8005efe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001886:	f000 f88d 	bl	80019a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188a:	f7ff fc59 	bl	8001140 <MX_GPIO_Init>
  MX_SPI1_Init();
 800188e:	f000 fd09 	bl	80022a4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001892:	f000 fe77 	bl	8002584 <MX_TIM2_Init>
  MX_LPTIM2_Init();
 8001896:	f7ff fe2b 	bl	80014f0 <MX_LPTIM2_Init>
  MX_ADC1_Init();
 800189a:	f7ff fa45 	bl	8000d28 <MX_ADC1_Init>
  MX_ADC2_Init();
 800189e:	f7ff faeb 	bl	8000e78 <MX_ADC2_Init>
  MX_CAN1_Init();
 80018a2:	f7ff fb8f 	bl	8000fc4 <MX_CAN1_Init>
/*******************************************************************************
* USER ADDED DEFINITIONS
*******************************************************************************/

  	Prosthesis_Init_t Prosthesis_Init;
	Prosthesis_Init.Joint = Combined;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	Prosthesis_Init.Side = Left;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

  	AKxx_x_Init_t Motor_Init[AKXX_X_NUMBER_OF_DEVICES];
  	Motor_Init[0].canId = 1;
 80018b2:	2301      	movs	r3, #1
 80018b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  	Motor_Init[0].Motor = AK80_9;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  	// how to use both fifos??
	CAN_FilterTypeDef CAN1_FilterInit;
	CAN1_FilterInit.FilterActivation = ENABLE;
 80018bc:	2301      	movs	r3, #1
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
	CAN1_FilterInit.FilterBank = 0; //??
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
	CAN1_FilterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
	CAN1_FilterInit.FilterIdHigh = 0x0000;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
	CAN1_FilterInit.FilterIdLow = 0x0000;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
	CAN1_FilterInit.FilterMaskIdHigh = 0x0000;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
	CAN1_FilterInit.FilterMaskIdLow = 0x0000;
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
	CAN1_FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
	CAN1_FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;//??
 80018dc:	2301      	movs	r3, #1
 80018de:	623b      	str	r3, [r7, #32]
* USER ADDED INITIALIZATIONS
*******************************************************************************/

//	LL_SYSTICK_EnableIT(); do i actually need this??

	LL_LPTIM_Enable(LPTIM2);
 80018e0:	482b      	ldr	r0, [pc, #172]	; (8001990 <main+0x114>)
 80018e2:	f7ff fe53 	bl	800158c <LL_LPTIM_Enable>
	LL_LPTIM_EnableIT_ARRM(LPTIM2);
 80018e6:	482a      	ldr	r0, [pc, #168]	; (8001990 <main+0x114>)
 80018e8:	f7ff fe86 	bl	80015f8 <LL_LPTIM_EnableIT_ARRM>
	LL_LPTIM_SetAutoReload(LPTIM2, LPTIM2_PERIOD);
 80018ec:	213f      	movs	r1, #63	; 0x3f
 80018ee:	4828      	ldr	r0, [pc, #160]	; (8001990 <main+0x114>)
 80018f0:	f7ff fe6f 	bl	80015d2 <LL_LPTIM_SetAutoReload>
	LL_LPTIM_StartCounter(LPTIM2, LL_LPTIM_OPERATING_MODE_CONTINUOUS);
 80018f4:	2104      	movs	r1, #4
 80018f6:	4826      	ldr	r0, [pc, #152]	; (8001990 <main+0x114>)
 80018f8:	f7ff fe58 	bl	80015ac <LL_LPTIM_StartCounter>

	LL_ADC_Enable(ADC1);
 80018fc:	4825      	ldr	r0, [pc, #148]	; (8001994 <main+0x118>)
 80018fe:	f7ff fe31 	bl	8001564 <LL_ADC_Enable>
	LL_ADC_Enable(ADC2);
 8001902:	4825      	ldr	r0, [pc, #148]	; (8001998 <main+0x11c>)
 8001904:	f7ff fe2e 	bl	8001564 <LL_ADC_Enable>

	if(HAL_CAN_ConfigFilter(&hcan1, &CAN1_FilterInit))
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4823      	ldr	r0, [pc, #140]	; (800199c <main+0x120>)
 800190e:	f004 fc66 	bl	80061de <HAL_CAN_ConfigFilter>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <main+0xa2>
		ErrorHandler_Pv2(CAN_Error);
 8001918:	2003      	movs	r0, #3
 800191a:	f7ff fc01 	bl	8001120 <ErrorHandler_Pv2>
	if(HAL_CAN_Start(&hcan1))
 800191e:	481f      	ldr	r0, [pc, #124]	; (800199c <main+0x120>)
 8001920:	f004 fd27 	bl	8006372 <HAL_CAN_Start>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <main+0xb4>
		ErrorHandler_Pv2(CAN_Error);
 800192a:	2003      	movs	r0, #3
 800192c:	f7ff fbf8 	bl	8001120 <ErrorHandler_Pv2>

  	if(BNO08x_Init())
 8001930:	f001 fc7c 	bl	800322c <BNO08x_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <main+0xc2>
  		ErrorHandler_BNO08x();
 800193a:	f7ff fbe5 	bl	8001108 <ErrorHandler_BNO08x>

	if(AKxx_x_Init(AnkleIndex, &Motor_Init[AnkleIndex]))
 800193e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001942:	4619      	mov	r1, r3
 8001944:	2000      	movs	r0, #0
 8001946:	f000 ffbd 	bl	80028c4 <AKxx_x_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <main+0xda>
		ErrorHandler_AKxx_x(AnkleIndex);
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fbc1 	bl	80010d8 <ErrorHandler_AKxx_x>

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001956:	2112      	movs	r1, #18
 8001958:	4810      	ldr	r0, [pc, #64]	; (800199c <main+0x120>)
 800195a:	f004 ff7c 	bl	8006856 <HAL_CAN_ActivateNotification>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <main+0xee>
		ErrorHandler_Pv2(CAN_Error);
 8001964:	2003      	movs	r0, #3
 8001966:	f7ff fbdb 	bl	8001120 <ErrorHandler_Pv2>

	InitProsthesisControl(&Prosthesis_Init);
 800196a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f8a2 	bl	8001ab8 <InitProsthesisControl>

/*******************************************************************************
* USER ADDED TEST PROGRAMS
*******************************************************************************/

	RequireTestProgram(ImpedanceControl);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f927 	bl	8001bc8 <RequireTestProgram>
* USER ADDED MAIN LOOP
*******************************************************************************/

  while(1)
  {
	  if(isProsthesisControlRequired)
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <main+0x124>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0fb      	beq.n	800197a <main+0xfe>
	  {
		  RunProsthesisControl();
 8001982:	f000 f93b 	bl	8001bfc <RunProsthesisControl>
		  isProsthesisControlRequired = 0;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <main+0x124>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
	  if(isProsthesisControlRequired)
 800198c:	e7f5      	b.n	800197a <main+0xfe>
 800198e:	bf00      	nop
 8001990:	40009400 	.word	0x40009400
 8001994:	50040000 	.word	0x50040000
 8001998:	50040100 	.word	0x50040100
 800199c:	20000090 	.word	0x20000090
 80019a0:	200000b9 	.word	0x200000b9

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80019a8:	2004      	movs	r0, #4
 80019aa:	f7ff ff31 	bl	8001810 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 80019ae:	bf00      	nop
 80019b0:	f7ff ff42 	bl	8001838 <LL_FLASH_GetLatency>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d1fa      	bne.n	80019b0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80019ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019be:	f7ff ff49 	bl	8001854 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80019c2:	f7ff fe29 	bl	8001618 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80019c6:	bf00      	nop
 80019c8:	f7ff fe36 	bl	8001638 <LL_RCC_HSE_IsReady>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d1fa      	bne.n	80019c8 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_LSI_Enable();
 80019d2:	f7ff fe45 	bl	8001660 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 80019d6:	bf00      	nop
 80019d8:	f7ff fe54 	bl	8001684 <LL_RCC_LSI_IsReady>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d1fa      	bne.n	80019d8 <SystemClock_Config+0x34>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_3, 10, LL_RCC_PLLR_DIV_2);
 80019e2:	2300      	movs	r3, #0
 80019e4:	220a      	movs	r2, #10
 80019e6:	2120      	movs	r1, #32
 80019e8:	2003      	movs	r0, #3
 80019ea:	f7ff fee1 	bl	80017b0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80019ee:	f7ff feff 	bl	80017f0 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80019f2:	f7ff feb9 	bl	8001768 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80019f6:	bf00      	nop
 80019f8:	f7ff fec6 	bl	8001788 <LL_RCC_PLL_IsReady>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d1fa      	bne.n	80019f8 <SystemClock_Config+0x54>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001a02:	2003      	movs	r0, #3
 8001a04:	f7ff fe52 	bl	80016ac <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001a08:	bf00      	nop
 8001a0a:	f7ff fe63 	bl	80016d4 <LL_RCC_GetSysClkSource>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d1fa      	bne.n	8001a0a <SystemClock_Config+0x66>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fe6b 	bl	80016f0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fe7c 	bl	8001718 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fe8d 	bl	8001740 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <SystemClock_Config+0x9c>)
 8001a28:	f007 fc84 	bl	8009334 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001a2c:	200f      	movs	r0, #15
 8001a2e:	f004 fa7f 	bl	8005f30 <HAL_InitTick>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a38:	f000 f804 	bl	8001a44 <Error_Handler>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	04c4b400 	.word	0x04c4b400

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>

08001a4e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a62:	f043 0204 	orr.w	r2, r3, #4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	b29b      	uxth	r3, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d101      	bne.n	8001aa8 <LL_ADC_IsActiveFlag_EOC+0x18>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <LL_ADC_IsActiveFlag_EOC+0x1a>
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <InitProsthesisControl>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

void InitProsthesisControl(Prosthesis_Init_t *Device_Init)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29a      	uxth	r2, r3
	memcpy(&Device, Device_Init, sizeof(Device));
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	; (8001bb0 <InitProsthesisControl+0xf8>)
 8001ac8:	801a      	strh	r2, [r3, #0]

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <InitProsthesisControl+0xf8>)
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <InitProsthesisControl+0x22>
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <InitProsthesisControl+0xf8>)
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d14a      	bne.n	8001b70 <InitProsthesisControl+0xb8>
	{
		memset(&CM_Ankle, 0, sizeof(CM_Ankle));
 8001ada:	22a0      	movs	r2, #160	; 0xa0
 8001adc:	2100      	movs	r1, #0
 8001ade:	4835      	ldr	r0, [pc, #212]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001ae0:	f007 fc70 	bl	80093c4 <memset>

		float startPosition = 0.0f;
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
		float startKd = 0.0f;
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
		float startKp = 0.0f;
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]

		CM_Ankle.motorCanId = 1;
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

		CM_Ankle.EarlyStanceCtrl.position = startPosition;
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_Ankle.EarlyStanceCtrl.kd = startKd;
 8001b04:	4a2b      	ldr	r2, [pc, #172]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6253      	str	r3, [r2, #36]	; 0x24
		CM_Ankle.EarlyStanceCtrl.kp = startKp;
 8001b0a:	4a2a      	ldr	r2, [pc, #168]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6293      	str	r3, [r2, #40]	; 0x28

		CM_Ankle.MidStanceCtrl.position = startPosition;
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
		CM_Ankle.MidStanceCtrl.kd = startKd;
 8001b16:	4a27      	ldr	r2, [pc, #156]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	6393      	str	r3, [r2, #56]	; 0x38
		CM_Ankle.MidStanceCtrl.kp = startKp;
 8001b1c:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	63d3      	str	r3, [r2, #60]	; 0x3c

		CM_Ankle.LateStanceCtrl.position = startPosition;
 8001b22:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	6553      	str	r3, [r2, #84]	; 0x54
		CM_Ankle.LateStanceCtrl.kd = startKd;
 8001b28:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
		CM_Ankle.LateStanceCtrl.kp = startKp;
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6513      	str	r3, [r2, #80]	; 0x50

		CM_Ankle.SwingFlexCtrl.position = startPosition;
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	6693      	str	r3, [r2, #104]	; 0x68
		CM_Ankle.SwingFlexCtrl.kd = startKd;
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6613      	str	r3, [r2, #96]	; 0x60
		CM_Ankle.SwingFlexCtrl.kp = startKp;
 8001b40:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6653      	str	r3, [r2, #100]	; 0x64

		CM_Ankle.SwingExtCtrl.position = startPosition;
 8001b46:	4a1b      	ldr	r2, [pc, #108]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	67d3      	str	r3, [r2, #124]	; 0x7c
		CM_Ankle.SwingExtCtrl.kd = startKd;
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6753      	str	r3, [r2, #116]	; 0x74
		CM_Ankle.SwingExtCtrl.kp = startKp;
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6793      	str	r3, [r2, #120]	; 0x78

		CM_Ankle.SwingDescCtrl.position = startPosition;
 8001b58:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		CM_Ankle.SwingDescCtrl.kd = startKd;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		CM_Ankle.SwingDescCtrl.kp = startKp;
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <InitProsthesisControl+0xfc>)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	}

	CM_LoadCell.intoStanceThreshold = 1300; //??
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <InitProsthesisControl+0x100>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <InitProsthesisControl+0x104>)
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34
	CM_LoadCell.outOfStanceThreshold = 1300 + 50; //??
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <InitProsthesisControl+0x100>)
 8001b78:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <InitProsthesisControl+0x108>)
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30


	if(testProgram != ZeroMotorPosition)
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <InitProsthesisControl+0x10c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d010      	beq.n	8001ba6 <InitProsthesisControl+0xee>
	{
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <InitProsthesisControl+0xf8>)
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <InitProsthesisControl+0xdc>
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <InitProsthesisControl+0xf8>)
 8001b8e:	785b      	ldrb	r3, [r3, #1]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d108      	bne.n	8001ba6 <InitProsthesisControl+0xee>
			if(AKxx_x_EnterMotorCtrlMode(AnkleIndex))
 8001b94:	2000      	movs	r0, #0
 8001b96:	f000 ff6b 	bl	8002a70 <AKxx_x_EnterMotorCtrlMode>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <InitProsthesisControl+0xee>
				ErrorHandler_AKxx_x(AnkleIndex);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fa99 	bl	80010d8 <ErrorHandler_AKxx_x>
	}

	// setup led pins??
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200000f0 	.word	0x200000f0
 8001bb4:	2000011c 	.word	0x2000011c
 8001bb8:	200001bc 	.word	0x200001bc
 8001bbc:	44a28000 	.word	0x44a28000
 8001bc0:	44a8c000 	.word	0x44a8c000
 8001bc4:	200000f2 	.word	0x200000f2

08001bc8 <RequireTestProgram>:

void RequireTestProgram(TestProgram_e option)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
	testProgram = option;
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <RequireTestProgram+0x2c>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	7013      	strb	r3, [r2, #0]
	if(testProgram != None)
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <RequireTestProgram+0x2c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <RequireTestProgram+0x1e>
		isTestProgramRequired = 1;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <RequireTestProgram+0x30>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	200000f2 	.word	0x200000f2
 8001bf8:	200000f4 	.word	0x200000f4

08001bfc <RunProsthesisControl>:

void RunProsthesisControl(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	GetInputs();
 8001c00:	f000 f848 	bl	8001c94 <GetInputs>
	ProcessInputs();
 8001c04:	f000 f890 	bl	8001d28 <ProcessInputs>

	if(isTestProgramRequired)
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <RunProsthesisControl+0x64>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <RunProsthesisControl+0x18>
		RunTestProgram();
 8001c10:	f000 fa8e 	bl	8002130 <RunTestProgram>

	RunStateMachine();
 8001c14:	f000 fa16 	bl	8002044 <RunStateMachine>

	if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <RunProsthesisControl+0x68>)
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <RunProsthesisControl+0x2c>
 8001c20:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <RunProsthesisControl+0x68>)
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d107      	bne.n	8001c38 <RunProsthesisControl+0x3c>
		if(CM_Ankle.motorDataReceived)
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <RunProsthesisControl+0x6c>)
 8001c2a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <RunProsthesisControl+0x3c>
			ServiceMotor(AnkleIndex);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 fa0e 	bl	8002054 <ServiceMotor>

	// Check for first and second executions, needed for load cell filter
	if(isFirst)
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <RunProsthesisControl+0x70>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <RunProsthesisControl+0x52>
	{
		isFirst = 0;
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <RunProsthesisControl+0x70>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
		isSecond = 1;
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <RunProsthesisControl+0x74>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
	}
	else if(isSecond)
		isSecond = 0;
}
 8001c4c:	e006      	b.n	8001c5c <RunProsthesisControl+0x60>
	else if(isSecond)
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <RunProsthesisControl+0x74>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <RunProsthesisControl+0x60>
		isSecond = 0;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <RunProsthesisControl+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200000f4 	.word	0x200000f4
 8001c64:	200000f0 	.word	0x200000f0
 8001c68:	2000011c 	.word	0x2000011c
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	200000f3 	.word	0x200000f3

08001c74 <ShutdownMotors>:

void ShutdownMotors(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	while(1)
	{
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <ShutdownMotors+0x1c>)
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <ShutdownMotors+0x14>
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <ShutdownMotors+0x1c>)
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d1f7      	bne.n	8001c78 <ShutdownMotors+0x4>
			AKxx_x_ExitMotorCtrlMode(AnkleIndex);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f000 ff0d 	bl	8002aa8 <AKxx_x_ExitMotorCtrlMode>
		if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8001c8e:	e7f3      	b.n	8001c78 <ShutdownMotors+0x4>
 8001c90:	200000f0 	.word	0x200000f0

08001c94 <GetInputs>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static void GetInputs(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	CM_LoadCell.Raw.bot[0] = ReadLoadCell(ADC1);
 8001c98:	4813      	ldr	r0, [pc, #76]	; (8001ce8 <GetInputs+0x54>)
 8001c9a:	f000 f82d 	bl	8001cf8 <ReadLoadCell>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <GetInputs+0x58>)
 8001caa:	edc3 7a00 	vstr	s15, [r3]
	CM_LoadCell.Raw.top[0] = ReadLoadCell(ADC2);
 8001cae:	4810      	ldr	r0, [pc, #64]	; (8001cf0 <GetInputs+0x5c>)
 8001cb0:	f000 f822 	bl	8001cf8 <ReadLoadCell>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <GetInputs+0x58>)
 8001cc0:	edc3 7a03 	vstr	s15, [r3, #12]

	if(BNO08x_resetOccurred)
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <GetInputs+0x60>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d009      	beq.n	8001ce0 <GetInputs+0x4c>
	{
		BNO08x_resetOccurred = 0;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <GetInputs+0x60>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
		if(BNO08x_StartReports())
 8001cd2:	f001 fad7 	bl	8003284 <BNO08x_StartReports>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <GetInputs+0x4c>
			ErrorHandler_BNO08x();
 8001cdc:	f7ff fa14 	bl	8001108 <ErrorHandler_BNO08x>
	}

	BNO08x_ReadSensors();
 8001ce0:	f001 fade 	bl	80032a0 <BNO08x_ReadSensors>
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	50040000 	.word	0x50040000
 8001cec:	200001bc 	.word	0x200001bc
 8001cf0:	50040100 	.word	0x50040100
 8001cf4:	200002fc 	.word	0x200002fc

08001cf8 <ReadLoadCell>:

static uint16_t ReadLoadCell(ADC_TypeDef *ADCx)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	LL_ADC_REG_StartConversion(ADCx);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff fea4 	bl	8001a4e <LL_ADC_REG_StartConversion>
	while (!LL_ADC_IsActiveFlag_EOC(ADCx));
 8001d06:	bf00      	nop
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff fec1 	bl	8001a90 <LL_ADC_IsActiveFlag_EOC>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f9      	beq.n	8001d08 <ReadLoadCell+0x10>
	return LL_ADC_REG_ReadConversionData12(ADCx);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff feae 	bl	8001a76 <LL_ADC_REG_ReadConversionData12>
 8001d1a:	4603      	mov	r3, r0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	0000      	movs	r0, r0
	...

08001d28 <ProcessInputs>:

static void ProcessInputs(void)
{
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
	// Filter of load cells
	if(isFirst)
 8001d2e:	4b9a      	ldr	r3, [pc, #616]	; (8001f98 <ProcessInputs+0x270>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d018      	beq.n	8001d68 <ProcessInputs+0x40>
	{
		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[0];
 8001d36:	4b99      	ldr	r3, [pc, #612]	; (8001f9c <ProcessInputs+0x274>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a98      	ldr	r2, [pc, #608]	; (8001f9c <ProcessInputs+0x274>)
 8001d3c:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[0];
 8001d3e:	4b97      	ldr	r3, [pc, #604]	; (8001f9c <ProcessInputs+0x274>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	4a96      	ldr	r2, [pc, #600]	; (8001f9c <ProcessInputs+0x274>)
 8001d44:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8001d46:	4b95      	ldr	r3, [pc, #596]	; (8001f9c <ProcessInputs+0x274>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a94      	ldr	r2, [pc, #592]	; (8001f9c <ProcessInputs+0x274>)
 8001d4c:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8001d4e:	4b93      	ldr	r3, [pc, #588]	; (8001f9c <ProcessInputs+0x274>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4a92      	ldr	r2, [pc, #584]	; (8001f9c <ProcessInputs+0x274>)
 8001d54:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[0];
 8001d56:	4b91      	ldr	r3, [pc, #580]	; (8001f9c <ProcessInputs+0x274>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	4a90      	ldr	r2, [pc, #576]	; (8001f9c <ProcessInputs+0x274>)
 8001d5c:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[0];
 8001d5e:	4b8f      	ldr	r3, [pc, #572]	; (8001f9c <ProcessInputs+0x274>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	4a8e      	ldr	r2, [pc, #568]	; (8001f9c <ProcessInputs+0x274>)
 8001d64:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d66:	e102      	b.n	8001f6e <ProcessInputs+0x246>
	}
	else if(isSecond)
 8001d68:	4b8d      	ldr	r3, [pc, #564]	; (8001fa0 <ProcessInputs+0x278>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d018      	beq.n	8001da2 <ProcessInputs+0x7a>
	{
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8001d70:	4b8a      	ldr	r3, [pc, #552]	; (8001f9c <ProcessInputs+0x274>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a89      	ldr	r2, [pc, #548]	; (8001f9c <ProcessInputs+0x274>)
 8001d76:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8001d78:	4b88      	ldr	r3, [pc, #544]	; (8001f9c <ProcessInputs+0x274>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a87      	ldr	r2, [pc, #540]	; (8001f9c <ProcessInputs+0x274>)
 8001d7e:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[0] = CM_LoadCell.Raw.bot[0];
 8001d80:	4b86      	ldr	r3, [pc, #536]	; (8001f9c <ProcessInputs+0x274>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a85      	ldr	r2, [pc, #532]	; (8001f9c <ProcessInputs+0x274>)
 8001d86:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] = CM_LoadCell.Raw.top[0];
 8001d88:	4b84      	ldr	r3, [pc, #528]	; (8001f9c <ProcessInputs+0x274>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a83      	ldr	r2, [pc, #524]	; (8001f9c <ProcessInputs+0x274>)
 8001d8e:	6253      	str	r3, [r2, #36]	; 0x24
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8001d90:	4b82      	ldr	r3, [pc, #520]	; (8001f9c <ProcessInputs+0x274>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a81      	ldr	r2, [pc, #516]	; (8001f9c <ProcessInputs+0x274>)
 8001d96:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8001d98:	4b80      	ldr	r3, [pc, #512]	; (8001f9c <ProcessInputs+0x274>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	4a7f      	ldr	r2, [pc, #508]	; (8001f9c <ProcessInputs+0x274>)
 8001d9e:	6293      	str	r3, [r2, #40]	; 0x28
 8001da0:	e0e5      	b.n	8001f6e <ProcessInputs+0x246>
	}
	else
	{
		// 2nd order low-pass Butterworth (fc = 20 Hz, fs = 500 Hz)
		CM_LoadCell.Filtered.bot[0] =   1.6475 * CM_LoadCell.Filtered.bot[1] - 0.7009 * CM_LoadCell.Filtered.bot[2]
 8001da2:	4b7e      	ldr	r3, [pc, #504]	; (8001f9c <ProcessInputs+0x274>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fb72 	bl	8000490 <__aeabi_f2d>
 8001dac:	a372      	add	r3, pc, #456	; (adr r3, 8001f78 <ProcessInputs+0x250>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fbc5 	bl	8000540 <__aeabi_dmul>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4614      	mov	r4, r2
 8001dbc:	461d      	mov	r5, r3
 8001dbe:	4b77      	ldr	r3, [pc, #476]	; (8001f9c <ProcessInputs+0x274>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fb64 	bl	8000490 <__aeabi_f2d>
 8001dc8:	a36d      	add	r3, pc, #436	; (adr r3, 8001f80 <ProcessInputs+0x258>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fbb7 	bl	8000540 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	f7fe f9f9 	bl	80001d0 <__aeabi_dsub>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4614      	mov	r4, r2
 8001de4:	461d      	mov	r5, r3
									  + 0.0134 * CM_LoadCell.Raw.bot[0] + 0.0267 * CM_LoadCell.Raw.bot[1] + 0.0134 * CM_LoadCell.Raw.bot[2];
 8001de6:	4b6d      	ldr	r3, [pc, #436]	; (8001f9c <ProcessInputs+0x274>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb50 	bl	8000490 <__aeabi_f2d>
 8001df0:	a365      	add	r3, pc, #404	; (adr r3, 8001f88 <ProcessInputs+0x260>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fba3 	bl	8000540 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4620      	mov	r0, r4
 8001e00:	4629      	mov	r1, r5
 8001e02:	f7fe f9e7 	bl	80001d4 <__adddf3>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4614      	mov	r4, r2
 8001e0c:	461d      	mov	r5, r3
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <ProcessInputs+0x274>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb3c 	bl	8000490 <__aeabi_f2d>
 8001e18:	a35d      	add	r3, pc, #372	; (adr r3, 8001f90 <ProcessInputs+0x268>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fb8f 	bl	8000540 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe f9d3 	bl	80001d4 <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4614      	mov	r4, r2
 8001e34:	461d      	mov	r5, r3
 8001e36:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <ProcessInputs+0x274>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb28 	bl	8000490 <__aeabi_f2d>
 8001e40:	a351      	add	r3, pc, #324	; (adr r3, 8001f88 <ProcessInputs+0x260>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe fb7b 	bl	8000540 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4620      	mov	r0, r4
 8001e50:	4629      	mov	r1, r5
 8001e52:	f7fe f9bf 	bl	80001d4 <__adddf3>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7fe fe1f 	bl	8000aa0 <__aeabi_d2f>
 8001e62:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.bot[0] =   1.6475 * CM_LoadCell.Filtered.bot[1] - 0.7009 * CM_LoadCell.Filtered.bot[2]
 8001e64:	4a4d      	ldr	r2, [pc, #308]	; (8001f9c <ProcessInputs+0x274>)
 8001e66:	6193      	str	r3, [r2, #24]
		CM_LoadCell.Filtered.top[0] =   1.6475 * CM_LoadCell.Filtered.top[1] - 0.7009 * CM_LoadCell.Filtered.top[2]
 8001e68:	4b4c      	ldr	r3, [pc, #304]	; (8001f9c <ProcessInputs+0x274>)
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb0f 	bl	8000490 <__aeabi_f2d>
 8001e72:	a341      	add	r3, pc, #260	; (adr r3, 8001f78 <ProcessInputs+0x250>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fb62 	bl	8000540 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	4b45      	ldr	r3, [pc, #276]	; (8001f9c <ProcessInputs+0x274>)
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb01 	bl	8000490 <__aeabi_f2d>
 8001e8e:	a33c      	add	r3, pc, #240	; (adr r3, 8001f80 <ProcessInputs+0x258>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe fb54 	bl	8000540 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f7fe f996 	bl	80001d0 <__aeabi_dsub>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	461d      	mov	r5, r3
									  + 0.0134 * CM_LoadCell.Raw.top[0] + 0.0267 * CM_LoadCell.Raw.top[1] + 0.0134 * CM_LoadCell.Raw.top[2];
 8001eac:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <ProcessInputs+0x274>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe faed 	bl	8000490 <__aeabi_f2d>
 8001eb6:	a334      	add	r3, pc, #208	; (adr r3, 8001f88 <ProcessInputs+0x260>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fb40 	bl	8000540 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f7fe f984 	bl	80001d4 <__adddf3>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4614      	mov	r4, r2
 8001ed2:	461d      	mov	r5, r3
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <ProcessInputs+0x274>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fad9 	bl	8000490 <__aeabi_f2d>
 8001ede:	a32c      	add	r3, pc, #176	; (adr r3, 8001f90 <ProcessInputs+0x268>)
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	f7fe fb2c 	bl	8000540 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4620      	mov	r0, r4
 8001eee:	4629      	mov	r1, r5
 8001ef0:	f7fe f970 	bl	80001d4 <__adddf3>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4614      	mov	r4, r2
 8001efa:	461d      	mov	r5, r3
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <ProcessInputs+0x274>)
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fac5 	bl	8000490 <__aeabi_f2d>
 8001f06:	a320      	add	r3, pc, #128	; (adr r3, 8001f88 <ProcessInputs+0x260>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb18 	bl	8000540 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe f95c 	bl	80001d4 <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fdbc 	bl	8000aa0 <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
		CM_LoadCell.Filtered.top[0] =   1.6475 * CM_LoadCell.Filtered.top[1] - 0.7009 * CM_LoadCell.Filtered.top[2]
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <ProcessInputs+0x274>)
 8001f2c:	6253      	str	r3, [r2, #36]	; 0x24

		CM_LoadCell.Raw.bot[2] = CM_LoadCell.Raw.bot[1];
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <ProcessInputs+0x274>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a1a      	ldr	r2, [pc, #104]	; (8001f9c <ProcessInputs+0x274>)
 8001f34:	6093      	str	r3, [r2, #8]
		CM_LoadCell.Raw.bot[1] = CM_LoadCell.Raw.bot[0];
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <ProcessInputs+0x274>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <ProcessInputs+0x274>)
 8001f3c:	6053      	str	r3, [r2, #4]
		CM_LoadCell.Raw.top[2] = CM_LoadCell.Raw.top[1];
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <ProcessInputs+0x274>)
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <ProcessInputs+0x274>)
 8001f44:	6153      	str	r3, [r2, #20]
		CM_LoadCell.Raw.top[1] = CM_LoadCell.Raw.top[0];
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <ProcessInputs+0x274>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <ProcessInputs+0x274>)
 8001f4c:	6113      	str	r3, [r2, #16]
		CM_LoadCell.Filtered.bot[2] = CM_LoadCell.Filtered.bot[1];
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <ProcessInputs+0x274>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <ProcessInputs+0x274>)
 8001f54:	6213      	str	r3, [r2, #32]
		CM_LoadCell.Filtered.bot[1] = CM_LoadCell.Filtered.bot[0];
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <ProcessInputs+0x274>)
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <ProcessInputs+0x274>)
 8001f5c:	61d3      	str	r3, [r2, #28]
		CM_LoadCell.Filtered.top[2] = CM_LoadCell.Filtered.top[1];
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <ProcessInputs+0x274>)
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <ProcessInputs+0x274>)
 8001f64:	62d3      	str	r3, [r2, #44]	; 0x2c
		CM_LoadCell.Filtered.top[1] = CM_LoadCell.Filtered.top[0];
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <ProcessInputs+0x274>)
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	; (8001f9c <ProcessInputs+0x274>)
 8001f6c:	6293      	str	r3, [r2, #40]	; 0x28
	}

	// Get accelerometer and gyroscope data
	for(uint8_t i = 0; i < 6; i++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
 8001f72:	e024      	b.n	8001fbe <ProcessInputs+0x296>
 8001f74:	f3af 8000 	nop.w
 8001f78:	f5c28f5c 	.word	0xf5c28f5c
 8001f7c:	3ffa5c28 	.word	0x3ffa5c28
 8001f80:	d6388659 	.word	0xd6388659
 8001f84:	3fe66dc5 	.word	0x3fe66dc5
 8001f88:	8e219653 	.word	0x8e219653
 8001f8c:	3f8b7175 	.word	0x3f8b7175
 8001f90:	ab367a10 	.word	0xab367a10
 8001f94:	3f9b573e 	.word	0x3f9b573e
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	200001bc 	.word	0x200001bc
 8001fa0:	200000f3 	.word	0x200000f3
		CM_Ankle_IMU_Data.array[i] = BNO08x_IMU_Data[i];
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	4923      	ldr	r1, [pc, #140]	; (8002038 <ProcessInputs+0x310>)
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	440a      	add	r2, r1
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4922      	ldr	r1, [pc, #136]	; (800203c <ProcessInputs+0x314>)
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	73fb      	strb	r3, [r7, #15]
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d9ef      	bls.n	8001fa4 <ProcessInputs+0x27c>

	float yaw, pitch, roll;
	QuaternionsToYPR(BNO08x_IMU_Data[6], BNO08x_IMU_Data[7], BNO08x_IMU_Data[8], BNO08x_IMU_Data[9], &yaw, &pitch, &roll);
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <ProcessInputs+0x310>)
 8001fc6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <ProcessInputs+0x310>)
 8001fcc:	ed93 7a07 	vldr	s14, [r3, #28]
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <ProcessInputs+0x310>)
 8001fd2:	edd3 6a08 	vldr	s13, [r3, #32]
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <ProcessInputs+0x310>)
 8001fd8:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8001fdc:	463a      	mov	r2, r7
 8001fde:	1d39      	adds	r1, r7, #4
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	eef0 1a46 	vmov.f32	s3, s12
 8001fea:	eeb0 1a66 	vmov.f32	s2, s13
 8001fee:	eef0 0a47 	vmov.f32	s1, s14
 8001ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff6:	f000 fb37 	bl	8002668 <QuaternionsToYPR>
	CM_Ankle_IMU_Data.Struct.yaw = yaw * RAD_TO_DEG;
 8001ffa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ffe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002040 <ProcessInputs+0x318>
 8002002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <ProcessInputs+0x314>)
 8002008:	edc3 7a06 	vstr	s15, [r3, #24]
	CM_Ankle_IMU_Data.Struct.pitch = pitch * RAD_TO_DEG;
 800200c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002010:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002040 <ProcessInputs+0x318>
 8002014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <ProcessInputs+0x314>)
 800201a:	edc3 7a07 	vstr	s15, [r3, #28]
	CM_Ankle_IMU_Data.Struct.roll = roll * RAD_TO_DEG;
 800201e:	edd7 7a00 	vldr	s15, [r7]
 8002022:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002040 <ProcessInputs+0x318>
 8002026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <ProcessInputs+0x314>)
 800202c:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bdb0      	pop	{r4, r5, r7, pc}
 8002038:	200002d4 	.word	0x200002d4
 800203c:	200000f8 	.word	0x200000f8
 8002040:	42652ebe 	.word	0x42652ebe

08002044 <RunStateMachine>:

static void RunStateMachine(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <ServiceMotor>:

static void ServiceMotor(DeviceIndex_e deviceIndex)
{
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
	CM_Ankle.MotorReadData.position = RxData_Float[deviceIndex].position * RAD_TO_DEG;
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	4a2d      	ldr	r2, [pc, #180]	; (8002118 <ServiceMotor+0xc4>)
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	4413      	add	r3, r2
 8002066:	3304      	adds	r3, #4
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800211c <ServiceMotor+0xc8>
 8002070:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <ServiceMotor+0xcc>)
 8002076:	edc3 7a01 	vstr	s15, [r3, #4]
	CM_Ankle.MotorReadData.speed = RxData_Float[deviceIndex].speed * RAD_TO_DEG;
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	4a26      	ldr	r2, [pc, #152]	; (8002118 <ServiceMotor+0xc4>)
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	4413      	add	r3, r2
 8002082:	3308      	adds	r3, #8
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800211c <ServiceMotor+0xc8>
 800208c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <ServiceMotor+0xcc>)
 8002092:	edc3 7a02 	vstr	s15, [r3, #8]
	CM_Ankle.MotorReadData.torque = RxData_Float[deviceIndex].torque;
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <ServiceMotor+0xc4>)
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4413      	add	r3, r2
 800209e:	330c      	adds	r3, #12
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <ServiceMotor+0xcc>)
 80020a4:	60d3      	str	r3, [r2, #12]

	if((testProgram == None) || (testProgram == ImpedanceControl))
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <ServiceMotor+0xd0>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <ServiceMotor+0x62>
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <ServiceMotor+0xd0>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d11f      	bne.n	80020f6 <ServiceMotor+0xa2>
	{
		memcpy(&TxData_Float, &CM_Ankle.ProsCtrl, sizeof(AKxx_x_WriteData_t));
 80020b6:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <ServiceMotor+0xd4>)
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <ServiceMotor+0xcc>)
 80020ba:	4615      	mov	r5, r2
 80020bc:	f103 0410 	add.w	r4, r3, #16
 80020c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	602b      	str	r3, [r5, #0]

		TxData_Float.position = CM_Ankle.ProsCtrl.position * DEG_TO_RAD;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <ServiceMotor+0xcc>)
 80020ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80020ce:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800212c <ServiceMotor+0xd8>
 80020d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <ServiceMotor+0xd4>)
 80020d8:	edc3 7a02 	vstr	s15, [r3, #8]
		if(AKxx_x_WriteMotor(deviceIndex, &TxData_Float))
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	4912      	ldr	r1, [pc, #72]	; (8002128 <ServiceMotor+0xd4>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 fca7 	bl	8002a34 <AKxx_x_WriteMotor>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d010      	beq.n	800210e <ServiceMotor+0xba>
			ErrorHandler_AKxx_x(deviceIndex);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fff2 	bl	80010d8 <ErrorHandler_AKxx_x>
		if(AKxx_x_WriteMotor(deviceIndex, &TxData_Float))
 80020f4:	e00b      	b.n	800210e <ServiceMotor+0xba>
	}
	else
		if(AKxx_x_EnterMotorCtrlMode(deviceIndex))
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fcb9 	bl	8002a70 <AKxx_x_EnterMotorCtrlMode>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <ServiceMotor+0xba>
			ErrorHandler_AKxx_x(deviceIndex);
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ffe6 	bl	80010d8 <ErrorHandler_AKxx_x>
}
 800210c:	e7ff      	b.n	800210e <ServiceMotor+0xba>
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	bf00      	nop
 8002118:	200000bc 	.word	0x200000bc
 800211c:	42652ebe 	.word	0x42652ebe
 8002120:	2000011c 	.word	0x2000011c
 8002124:	200000f2 	.word	0x200000f2
 8002128:	200000dc 	.word	0x200000dc
 800212c:	3c8efa4b 	.word	0x3c8efa4b

08002130 <RunTestProgram>:

static void RunTestProgram(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	switch(testProgram)
 8002134:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <RunTestProgram+0xb8>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d852      	bhi.n	80021e2 <RunTestProgram+0xb2>
 800213c:	a201      	add	r2, pc, #4	; (adr r2, 8002144 <RunTestProgram+0x14>)
 800213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002142:	bf00      	nop
 8002144:	080021dd 	.word	0x080021dd
 8002148:	080021dd 	.word	0x080021dd
 800214c:	08002155 	.word	0x08002155
 8002150:	080021dd 	.word	0x080021dd

	case ReadOnly:
		break;

	case ZeroMotorPosition:
		if(isFirst)
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <RunTestProgram+0xbc>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d041      	beq.n	80021e0 <RunTestProgram+0xb0>
		{
			if(HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 800215c:	2112      	movs	r1, #18
 800215e:	4824      	ldr	r0, [pc, #144]	; (80021f0 <RunTestProgram+0xc0>)
 8002160:	f004 fb9f 	bl	80068a2 <HAL_CAN_DeactivateNotification>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <RunTestProgram+0x40>
				ErrorHandler_Pv2(CAN_Error);
 800216a:	2003      	movs	r0, #3
 800216c:	f7fe ffd8 	bl	8001120 <ErrorHandler_Pv2>

			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 8002170:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <RunTestProgram+0xc4>)
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <RunTestProgram+0x50>
 8002178:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <RunTestProgram+0xc4>)
 800217a:	785b      	ldrb	r3, [r3, #1]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d111      	bne.n	80021a4 <RunTestProgram+0x74>
			{
				if(AKxx_x_ZeroMotorPosition(AnkleIndex))
 8002180:	2000      	movs	r0, #0
 8002182:	f000 fcdf 	bl	8002b44 <AKxx_x_ZeroMotorPosition>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <RunTestProgram+0x62>
					ErrorHandler_AKxx_x(AnkleIndex);
 800218c:	2000      	movs	r0, #0
 800218e:	f7fe ffa3 	bl	80010d8 <ErrorHandler_AKxx_x>
				if(AKxx_x_PollMotorReadWithTimeout(&RxData_Float[AnkleIndex]))
 8002192:	4819      	ldr	r0, [pc, #100]	; (80021f8 <RunTestProgram+0xc8>)
 8002194:	f000 fd24 	bl	8002be0 <AKxx_x_PollMotorReadWithTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <RunTestProgram+0x74>
					ErrorHandler_AKxx_x(AnkleIndex);
 800219e:	2000      	movs	r0, #0
 80021a0:	f7fe ff9a 	bl	80010d8 <ErrorHandler_AKxx_x>
			}

			if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80021a4:	2112      	movs	r1, #18
 80021a6:	4812      	ldr	r0, [pc, #72]	; (80021f0 <RunTestProgram+0xc0>)
 80021a8:	f004 fb55 	bl	8006856 <HAL_CAN_ActivateNotification>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <RunTestProgram+0x88>
				ErrorHandler_Pv2(CAN_Error);
 80021b2:	2003      	movs	r0, #3
 80021b4:	f7fe ffb4 	bl	8001120 <ErrorHandler_Pv2>

			if((Device.Joint == Ankle) || (Device.Joint == Combined))
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <RunTestProgram+0xc4>)
 80021ba:	785b      	ldrb	r3, [r3, #1]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <RunTestProgram+0x98>
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <RunTestProgram+0xc4>)
 80021c2:	785b      	ldrb	r3, [r3, #1]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d10b      	bne.n	80021e0 <RunTestProgram+0xb0>
				if(AKxx_x_EnterMotorCtrlMode(AnkleIndex))
 80021c8:	2000      	movs	r0, #0
 80021ca:	f000 fc51 	bl	8002a70 <AKxx_x_EnterMotorCtrlMode>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <RunTestProgram+0xb0>
					ErrorHandler_AKxx_x(AnkleIndex);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7fe ff7f 	bl	80010d8 <ErrorHandler_AKxx_x>
		}

		break;
 80021da:	e001      	b.n	80021e0 <RunTestProgram+0xb0>
		break;
 80021dc:	bf00      	nop
 80021de:	e000      	b.n	80021e2 <RunTestProgram+0xb2>
		break;
 80021e0:	bf00      	nop

	case ImpedanceControl:
		break;
	}
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200000f2 	.word	0x200000f2
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000090 	.word	0x20000090
 80021f4:	200000f0 	.word	0x200000f0
 80021f8:	200000bc 	.word	0x200000bc

080021fc <HAL_CAN_RxFifo0MsgPendingCallback>:
/*******************************************************************************
* CALLBACKS
*******************************************************************************/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	AKxx_x_ReadData_t temp;
	if(AKxx_x_ReadMotor(CAN_RX_FIFO0, &temp))
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	4619      	mov	r1, r3
 800220a:	2000      	movs	r0, #0
 800220c:	f000 fc04 	bl	8002a18 <AKxx_x_ReadMotor>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		ErrorHandler_Pv2(MotorError);
 8002216:	2006      	movs	r0, #6
 8002218:	f7fe ff82 	bl	8001120 <ErrorHandler_Pv2>

	if(temp.canId == 1)
 800221c:	7a3b      	ldrb	r3, [r7, #8]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d10b      	bne.n	800223a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
	{
		CM_Ankle.motorDataReceived = 1;
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002224:	2201      	movs	r2, #1
 8002226:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		memcpy(&RxData_Float[0], &temp, sizeof(AKxx_x_ReadData_t));
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800222c:	461c      	mov	r4, r3
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
	else
		ErrorHandler_Pv2(MotorError);
}
 8002238:	e002      	b.n	8002240 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		ErrorHandler_Pv2(MotorError);
 800223a:	2006      	movs	r0, #6
 800223c:	f7fe ff70 	bl	8001120 <ErrorHandler_Pv2>
}
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd90      	pop	{r4, r7, pc}
 8002248:	2000011c 	.word	0x2000011c
 800224c:	200000bc 	.word	0x200000bc

08002250 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	AKxx_x_ReadData_t temp;
	if(AKxx_x_ReadMotor(CAN_RX_FIFO1, &temp))
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	4619      	mov	r1, r3
 800225e:	2001      	movs	r0, #1
 8002260:	f000 fbda 	bl	8002a18 <AKxx_x_ReadMotor>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		ErrorHandler_Pv2(MotorError);
 800226a:	2006      	movs	r0, #6
 800226c:	f7fe ff58 	bl	8001120 <ErrorHandler_Pv2>

	if(temp.canId == 1)
 8002270:	7a3b      	ldrb	r3, [r7, #8]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10b      	bne.n	800228e <HAL_CAN_RxFifo1MsgPendingCallback+0x3e>
	{
		CM_Ankle.motorDataReceived = 1;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 8002278:	2201      	movs	r2, #1
 800227a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		memcpy(&RxData_Float[0], &temp, sizeof(AKxx_x_ReadData_t));
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 8002280:	461c      	mov	r4, r3
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}
	else
		ErrorHandler_Pv2(MotorError);
}
 800228c:	e002      	b.n	8002294 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>
		ErrorHandler_Pv2(MotorError);
 800228e:	2006      	movs	r0, #6
 8002290:	f7fe ff46 	bl	8001120 <ErrorHandler_Pv2>
}
 8002294:	bf00      	nop
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}
 800229c:	2000011c 	.word	0x2000011c
 80022a0:	200000bc 	.word	0x200000bc

080022a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <MX_SPI1_Init+0x74>)
 80022aa:	4a1c      	ldr	r2, [pc, #112]	; (800231c <MX_SPI1_Init+0x78>)
 80022ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_SPI1_Init+0x74>)
 80022b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MX_SPI1_Init+0x74>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MX_SPI1_Init+0x74>)
 80022be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_SPI1_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <MX_SPI1_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_SPI1_Init+0x74>)
 80022d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_SPI1_Init+0x74>)
 80022da:	2220      	movs	r2, #32
 80022dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_SPI1_Init+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_SPI1_Init+0x74>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_SPI1_Init+0x74>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_SPI1_Init+0x74>)
 80022f2:	2207      	movs	r2, #7
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <MX_SPI1_Init+0x74>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_SPI1_Init+0x74>)
 80022fe:	2208      	movs	r2, #8
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_SPI1_Init+0x74>)
 8002304:	f005 f96c 	bl	80075e0 <HAL_SPI_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800230e:	f7ff fb99 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200001f4 	.word	0x200001f4
 800231c:	40013000 	.word	0x40013000

08002320 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_SPI_MspInit+0x8c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d130      	bne.n	80023a4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_SPI_MspInit+0x90>)
 8002344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002346:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <HAL_SPI_MspInit+0x90>)
 8002348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800234c:	6613      	str	r3, [r2, #96]	; 0x60
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_SPI_MspInit+0x90>)
 8002350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_SPI_MspInit+0x90>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <HAL_SPI_MspInit+0x90>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_SPI_MspInit+0x90>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8002372:	23e0      	movs	r3, #224	; 0xe0
 8002374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002382:	2305      	movs	r3, #5
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002390:	f004 fe58 	bl	8007044 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	2023      	movs	r0, #35	; 0x23
 800239a:	f004 fdce 	bl	8006f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800239e:	2023      	movs	r0, #35	; 0x23
 80023a0:	f004 fde7 	bl	8006f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40013000 	.word	0x40013000
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <HAL_SPI_MspDeInit+0x38>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10d      	bne.n	80023e2 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_SPI_MspDeInit+0x3c>)
 80023c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ca:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_SPI_MspDeInit+0x3c>)
 80023cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023d0:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, IMU_SCL_Pin|IMU_MISO_Pin|IMU_MOSI_Pin);
 80023d2:	21e0      	movs	r1, #224	; 0xe0
 80023d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d8:	f004 ffde 	bl	8007398 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80023dc:	2023      	movs	r0, #35	; 0x23
 80023de:	f004 fdd6 	bl	8006f8e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40013000 	.word	0x40013000
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_MspInit+0x44>)
 80023fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fe:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <HAL_MspInit+0x44>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6613      	str	r3, [r2, #96]	; 0x60
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_MspInit+0x44>)
 8002408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_MspInit+0x44>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <HAL_MspInit+0x44>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6593      	str	r3, [r2, #88]	; 0x58
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_MspInit+0x44>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <LL_LPTIM_ClearFLAG_ARRM>:
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f043 0202 	orr.w	r2, r3, #2
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	605a      	str	r2, [r3, #4]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_LPTIM_IsActiveFlag_ARRM>:
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d101      	bne.n	8002474 <LL_LPTIM_IsActiveFlag_ARRM+0x18>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <LL_LPTIM_IsActiveFlag_ARRM+0x1a>
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <NMI_Handler+0x4>

08002488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <HardFault_Handler+0x4>

0800248e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002492:	e7fe      	b.n	8002492 <MemManage_Handler+0x4>

08002494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <BusFault_Handler+0x4>

0800249a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <UsageFault_Handler+0x4>

080024a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ce:	f003 fd6b 	bl	8005fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <CAN1_RX0_IRQHandler+0x10>)
 80024de:	f004 fa07 	bl	80068f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000090 	.word	0x20000090

080024ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <CAN1_RX1_IRQHandler+0x10>)
 80024f2:	f004 f9fd 	bl	80068f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000090 	.word	0x20000090

08002500 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ANKLE_IMU_INT_Pin);
 8002504:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002508:	f005 f852 	bl	80075b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}

08002510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <TIM2_IRQHandler+0x10>)
 8002516:	f006 f881 	bl	800861c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000258 	.word	0x20000258

08002524 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <SPI1_IRQHandler+0x10>)
 800252a:	f005 fbe7 	bl	8007cfc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200001f4 	.word	0x200001f4

08002538 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0

/******************************************************************************
* USER ADDED LPTIM2_IRQHANDLER
******************************************************************************/

	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM2) == 1)
 800253c:	4806      	ldr	r0, [pc, #24]	; (8002558 <LPTIM2_IRQHandler+0x20>)
 800253e:	f7ff ff8d 	bl	800245c <LL_LPTIM_IsActiveFlag_ARRM>
 8002542:	4603      	mov	r3, r0
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <LPTIM2_IRQHandler+0x1c>
	{
		isProsthesisControlRequired = 1;
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <LPTIM2_IRQHandler+0x24>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
		LL_LPTIM_ClearFLAG_ARRM(LPTIM2);
 800254e:	4802      	ldr	r0, [pc, #8]	; (8002558 <LPTIM2_IRQHandler+0x20>)
 8002550:	f7ff ff74 	bl	800243c <LL_LPTIM_ClearFLAG_ARRM>

  /* USER CODE END LPTIM2_IRQn 0 */
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40009400 	.word	0x40009400
 800255c:	200000b9 	.word	0x200000b9

08002560 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <SystemInit+0x20>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <SystemInit+0x20>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <MX_TIM2_Init+0x98>)
 80025a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <MX_TIM2_Init+0x98>)
 80025ac:	224f      	movs	r2, #79	; 0x4f
 80025ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <MX_TIM2_Init+0x98>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <MX_TIM2_Init+0x98>)
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <MX_TIM2_Init+0x98>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <MX_TIM2_Init+0x98>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025ca:	4814      	ldr	r0, [pc, #80]	; (800261c <MX_TIM2_Init+0x98>)
 80025cc:	f005 ff66 	bl	800849c <HAL_TIM_Base_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80025d6:	f7ff fa35 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	4619      	mov	r1, r3
 80025e6:	480d      	ldr	r0, [pc, #52]	; (800261c <MX_TIM2_Init+0x98>)
 80025e8:	f006 f937 	bl	800885a <HAL_TIM_ConfigClockSource>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025f2:	f7ff fa27 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4806      	ldr	r0, [pc, #24]	; (800261c <MX_TIM2_Init+0x98>)
 8002604:	f006 fb58 	bl	8008cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800260e:	f7ff fa19 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000258 	.word	0x20000258

08002620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002630:	d113      	bne.n	800265a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_TIM_Base_MspInit+0x44>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <HAL_TIM_Base_MspInit+0x44>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6593      	str	r3, [r2, #88]	; 0x58
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_TIM_Base_MspInit+0x44>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2102      	movs	r1, #2
 800264e:	201c      	movs	r0, #28
 8002650:	f004 fc73 	bl	8006f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002654:	201c      	movs	r0, #28
 8002656:	f004 fc8c 	bl	8006f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000

08002668 <QuaternionsToYPR>:

	return globalAngle;
}

void QuaternionsToYPR(float r, float i, float j, float k, float *yaw, float *pitch, float *roll)
{
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b08e      	sub	sp, #56	; 0x38
 800266c:	af00      	add	r7, sp, #0
 800266e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002672:	edc7 0a06 	vstr	s1, [r7, #24]
 8002676:	ed87 1a05 	vstr	s2, [r7, #20]
 800267a:	edc7 1a04 	vstr	s3, [r7, #16]
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
	float siny_cosp = 2 * (r * k + i * j);
 8002684:	ed97 7a07 	vldr	s14, [r7, #28]
 8002688:	edd7 7a04 	vldr	s15, [r7, #16]
 800268c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002690:	edd7 6a06 	vldr	s13, [r7, #24]
 8002694:	edd7 7a05 	vldr	s15, [r7, #20]
 8002698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026a4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float cosy_cosp = 1 - 2 * (j * j + k * k);
 80026a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80026ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	*yaw = atan2(siny_cosp, cosy_cosp);
 80026cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026ce:	f7fd fedf 	bl	8000490 <__aeabi_f2d>
 80026d2:	4604      	mov	r4, r0
 80026d4:	460d      	mov	r5, r1
 80026d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d8:	f7fd feda 	bl	8000490 <__aeabi_f2d>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	ec43 2b11 	vmov	d1, r2, r3
 80026e4:	ec45 4b10 	vmov	d0, r4, r5
 80026e8:	f007 f81f 	bl	800972a <atan2>
 80026ec:	ec53 2b10 	vmov	r2, r3, d0
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe f9d4 	bl	8000aa0 <__aeabi_d2f>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	601a      	str	r2, [r3, #0]

	float sinp = sqrt(1 + 2 * (r * j - i * k));
 80026fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8002702:	edd7 7a05 	vldr	s15, [r7, #20]
 8002706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800270a:	edd7 6a06 	vldr	s13, [r7, #24]
 800270e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800271e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002722:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002726:	ee17 0a90 	vmov	r0, s15
 800272a:	f7fd feb1 	bl	8000490 <__aeabi_f2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	ec43 2b10 	vmov	d0, r2, r3
 8002736:	f006 fffa 	bl	800972e <sqrt>
 800273a:	ec53 2b10 	vmov	r2, r3, d0
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	f7fe f9ad 	bl	8000aa0 <__aeabi_d2f>
 8002746:	4603      	mov	r3, r0
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
	float cosp = sqrt(1 - 2 * (r * j - i * k));
 800274a:	ed97 7a07 	vldr	s14, [r7, #28]
 800274e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002756:	edd7 6a06 	vldr	s13, [r7, #24]
 800275a:	edd7 7a04 	vldr	s15, [r7, #16]
 800275e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002766:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800276a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800276e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002772:	ee17 0a90 	vmov	r0, s15
 8002776:	f7fd fe8b 	bl	8000490 <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	ec43 2b10 	vmov	d0, r2, r3
 8002782:	f006 ffd4 	bl	800972e <sqrt>
 8002786:	ec53 2b10 	vmov	r2, r3, d0
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	f7fe f987 	bl	8000aa0 <__aeabi_d2f>
 8002792:	4603      	mov	r3, r0
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
    *pitch = 2 * atan2(sinp, cosp) - M_PI / 2;
 8002796:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002798:	f7fd fe7a 	bl	8000490 <__aeabi_f2d>
 800279c:	4604      	mov	r4, r0
 800279e:	460d      	mov	r5, r1
 80027a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027a2:	f7fd fe75 	bl	8000490 <__aeabi_f2d>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	ec43 2b11 	vmov	d1, r2, r3
 80027ae:	ec45 4b10 	vmov	d0, r4, r5
 80027b2:	f006 ffba 	bl	800972a <atan2>
 80027b6:	ec51 0b10 	vmov	r0, r1, d0
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	f7fd fd09 	bl	80001d4 <__adddf3>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	a327      	add	r3, pc, #156	; (adr r3, 8002868 <QuaternionsToYPR+0x200>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f7fd fcfe 	bl	80001d0 <__aeabi_dsub>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe f960 	bl	8000aa0 <__aeabi_d2f>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	601a      	str	r2, [r3, #0]

    float sinr_cosp = 2 * (r * i + j * k);
 80027e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80027ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80027ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f2:	edd7 6a05 	vldr	s13, [r7, #20]
 80027f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80027fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002802:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002806:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float cosr_cosp = 1 - 2 * (i * i + j * j);
 800280a:	edd7 7a06 	vldr	s15, [r7, #24]
 800280e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002812:	edd7 7a05 	vldr	s15, [r7, #20]
 8002816:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282a:	edc7 7a08 	vstr	s15, [r7, #32]
    *roll = atan2(sinr_cosp, cosr_cosp);
 800282e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002830:	f7fd fe2e 	bl	8000490 <__aeabi_f2d>
 8002834:	4604      	mov	r4, r0
 8002836:	460d      	mov	r5, r1
 8002838:	6a38      	ldr	r0, [r7, #32]
 800283a:	f7fd fe29 	bl	8000490 <__aeabi_f2d>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	ec43 2b11 	vmov	d1, r2, r3
 8002846:	ec45 4b10 	vmov	d0, r4, r5
 800284a:	f006 ff6e 	bl	800972a <atan2>
 800284e:	ec53 2b10 	vmov	r2, r3, d0
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f7fe f923 	bl	8000aa0 <__aeabi_d2f>
 800285a:	4602      	mov	r2, r0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	601a      	str	r2, [r3, #0]
}
 8002860:	bf00      	nop
 8002862:	3738      	adds	r7, #56	; 0x38
 8002864:	46bd      	mov	sp, r7
 8002866:	bdb0      	pop	{r4, r5, r7, pc}
 8002868:	54442d18 	.word	0x54442d18
 800286c:	3ff921fb 	.word	0x3ff921fb

08002870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002874:	f7ff fe74 	bl	8002560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002878:	480c      	ldr	r0, [pc, #48]	; (80028ac <LoopForever+0x6>)
  ldr r1, =_edata
 800287a:	490d      	ldr	r1, [pc, #52]	; (80028b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <LoopForever+0xe>)
  movs r3, #0
 800287e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002880:	e002      	b.n	8002888 <LoopCopyDataInit>

08002882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002886:	3304      	adds	r3, #4

08002888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800288a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800288c:	d3f9      	bcc.n	8002882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <LoopForever+0x16>)
  movs r3, #0
 8002892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002894:	e001      	b.n	800289a <LoopFillZerobss>

08002896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002898:	3204      	adds	r2, #4

0800289a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800289a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800289c:	d3fb      	bcc.n	8002896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800289e:	f006 fd5f 	bl	8009360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028a2:	f7fe ffeb 	bl	800187c <main>

080028a6 <LoopForever>:

LoopForever:
    b LoopForever
 80028a6:	e7fe      	b.n	80028a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80028b4:	08009fe0 	.word	0x08009fe0
  ldr r2, =_sbss
 80028b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80028bc:	20001264 	.word	0x20001264

080028c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028c0:	e7fe      	b.n	80028c0 <ADC1_2_IRQHandler>
	...

080028c4 <AKxx_x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

AKxx_x_Error_e AKxx_x_Init(uint8_t deviceIndex, AKxx_x_Init_t *Device_Init)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
	if(deviceIndex >= AKXX_X_NUMBER_OF_DEVICES)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d900      	bls.n	80028d8 <AKxx_x_Init+0x14>
		while(1);
 80028d6:	e7fe      	b.n	80028d6 <AKxx_x_Init+0x12>

	memcpy(&Device[deviceIndex], Device_Init, sizeof(AKxx_x_Init_t));
 80028d8:	79fa      	ldrb	r2, [r7, #7]
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4a45      	ldr	r2, [pc, #276]	; (80029f8 <AKxx_x_Init+0x134>)
 80028e4:	4413      	add	r3, r2
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	601a      	str	r2, [r3, #0]

	HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING);	// Polling is used for initialization
 80028ec:	2112      	movs	r1, #18
 80028ee:	4843      	ldr	r0, [pc, #268]	; (80029fc <AKxx_x_Init+0x138>)
 80028f0:	f003 ffd7 	bl	80068a2 <HAL_CAN_DeactivateNotification>

	if(EnterMotorCtrlMode(deviceIndex))
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fa42 	bl	8002d80 <EnterMotorCtrlMode>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <AKxx_x_Init+0x42>
		return AKxx_x_InitError;
 8002902:	2301      	movs	r3, #1
 8002904:	e074      	b.n	80029f0 <AKxx_x_Init+0x12c>

	AKxx_x_ReadData_t RxData_Float;
	if(AKxx_x_PollMotorReadWithTimeout(&RxData_Float))
 8002906:	f107 0308 	add.w	r3, r7, #8
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f968 	bl	8002be0 <AKxx_x_PollMotorReadWithTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <AKxx_x_Init+0x56>
		return AKxx_x_InitError;
 8002916:	2301      	movs	r3, #1
 8002918:	e06a      	b.n	80029f0 <AKxx_x_Init+0x12c>

	switch(Device[deviceIndex].InitVals.Motor)
 800291a:	79fa      	ldrb	r2, [r7, #7]
 800291c:	4936      	ldr	r1, [pc, #216]	; (80029f8 <AKxx_x_Init+0x134>)
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	3302      	adds	r3, #2
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <AKxx_x_Init+0x72>
 8002930:	2b01      	cmp	r3, #1
 8002932:	d029      	beq.n	8002988 <AKxx_x_Init+0xc4>
 8002934:	e051      	b.n	80029da <AKxx_x_Init+0x116>
	{
	case AK70_10:
		Device[deviceIndex].speedMax = 50.0f;
 8002936:	79fa      	ldrb	r2, [r7, #7]
 8002938:	492f      	ldr	r1, [pc, #188]	; (80029f8 <AKxx_x_Init+0x134>)
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	3304      	adds	r3, #4
 8002946:	4a2e      	ldr	r2, [pc, #184]	; (8002a00 <AKxx_x_Init+0x13c>)
 8002948:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].speedMin = -50.0f;
 800294a:	79fa      	ldrb	r2, [r7, #7]
 800294c:	492a      	ldr	r1, [pc, #168]	; (80029f8 <AKxx_x_Init+0x134>)
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	3308      	adds	r3, #8
 800295a:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <AKxx_x_Init+0x140>)
 800295c:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMax = 25.0f;
 800295e:	79fa      	ldrb	r2, [r7, #7]
 8002960:	4925      	ldr	r1, [pc, #148]	; (80029f8 <AKxx_x_Init+0x134>)
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	440b      	add	r3, r1
 800296c:	330c      	adds	r3, #12
 800296e:	4a26      	ldr	r2, [pc, #152]	; (8002a08 <AKxx_x_Init+0x144>)
 8002970:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMin = -25.0f;
 8002972:	79fa      	ldrb	r2, [r7, #7]
 8002974:	4920      	ldr	r1, [pc, #128]	; (80029f8 <AKxx_x_Init+0x134>)
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	440b      	add	r3, r1
 8002980:	3310      	adds	r3, #16
 8002982:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <AKxx_x_Init+0x148>)
 8002984:	601a      	str	r2, [r3, #0]
		break;
 8002986:	e028      	b.n	80029da <AKxx_x_Init+0x116>
	case AK80_9:
		Device[deviceIndex].speedMax = 50.0f;
 8002988:	79fa      	ldrb	r2, [r7, #7]
 800298a:	491b      	ldr	r1, [pc, #108]	; (80029f8 <AKxx_x_Init+0x134>)
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	3304      	adds	r3, #4
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <AKxx_x_Init+0x13c>)
 800299a:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].speedMin = -50.0f;
 800299c:	79fa      	ldrb	r2, [r7, #7]
 800299e:	4916      	ldr	r1, [pc, #88]	; (80029f8 <AKxx_x_Init+0x134>)
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	3308      	adds	r3, #8
 80029ac:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <AKxx_x_Init+0x140>)
 80029ae:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMax = 18.0f;
 80029b0:	79fa      	ldrb	r2, [r7, #7]
 80029b2:	4911      	ldr	r1, [pc, #68]	; (80029f8 <AKxx_x_Init+0x134>)
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	440b      	add	r3, r1
 80029be:	330c      	adds	r3, #12
 80029c0:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <AKxx_x_Init+0x14c>)
 80029c2:	601a      	str	r2, [r3, #0]
		Device[deviceIndex].torqueMin = -18.0f;
 80029c4:	79fa      	ldrb	r2, [r7, #7]
 80029c6:	490c      	ldr	r1, [pc, #48]	; (80029f8 <AKxx_x_Init+0x134>)
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	3310      	adds	r3, #16
 80029d4:	4a0f      	ldr	r2, [pc, #60]	; (8002a14 <AKxx_x_Init+0x150>)
 80029d6:	601a      	str	r2, [r3, #0]
		break;
 80029d8:	bf00      	nop
	}

	Device[deviceIndex].isInit = 1;
 80029da:	79fa      	ldrb	r2, [r7, #7]
 80029dc:	4906      	ldr	r1, [pc, #24]	; (80029f8 <AKxx_x_Init+0x134>)
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	3314      	adds	r3, #20
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]

	return AKxx_x_NoError;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200002a4 	.word	0x200002a4
 80029fc:	20000090 	.word	0x20000090
 8002a00:	42480000 	.word	0x42480000
 8002a04:	c2480000 	.word	0xc2480000
 8002a08:	41c80000 	.word	0x41c80000
 8002a0c:	c1c80000 	.word	0xc1c80000
 8002a10:	41900000 	.word	0x41900000
 8002a14:	c1900000 	.word	0xc1900000

08002a18 <AKxx_x_ReadMotor>:

AKxx_x_Error_e AKxx_x_ReadMotor(uint32_t rxFifo, AKxx_x_ReadData_t *RxData_Float)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	return ReadData(rxFifo, RxData_Float);
 8002a22:	6839      	ldr	r1, [r7, #0]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f949 	bl	8002cbc <ReadData>
 8002a2a:	4603      	mov	r3, r0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <AKxx_x_WriteMotor>:

AKxx_x_Error_e AKxx_x_WriteMotor(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8002a40:	79fa      	ldrb	r2, [r7, #7]
 8002a42:	490a      	ldr	r1, [pc, #40]	; (8002a6c <AKxx_x_WriteMotor+0x38>)
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3314      	adds	r3, #20
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d100      	bne.n	8002a58 <AKxx_x_WriteMotor+0x24>
		while(1);
 8002a56:	e7fe      	b.n	8002a56 <AKxx_x_WriteMotor+0x22>

	return WriteData(deviceIndex, TxData_Float);
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	6839      	ldr	r1, [r7, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 f94d 	bl	8002cfc <WriteData>
 8002a62:	4603      	mov	r3, r0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200002a4 	.word	0x200002a4

08002a70 <AKxx_x_EnterMotorCtrlMode>:

AKxx_x_Error_e AKxx_x_EnterMotorCtrlMode(uint8_t deviceIndex)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8002a7a:	79fa      	ldrb	r2, [r7, #7]
 8002a7c:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <AKxx_x_EnterMotorCtrlMode+0x34>)
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	3314      	adds	r3, #20
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <AKxx_x_EnterMotorCtrlMode+0x22>
		while(1);
 8002a90:	e7fe      	b.n	8002a90 <AKxx_x_EnterMotorCtrlMode+0x20>

	return EnterMotorCtrlMode(deviceIndex);
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f973 	bl	8002d80 <EnterMotorCtrlMode>
 8002a9a:	4603      	mov	r3, r0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200002a4 	.word	0x200002a4

08002aa8 <AKxx_x_ExitMotorCtrlMode>:

AKxx_x_Error_e AKxx_x_ExitMotorCtrlMode(uint8_t deviceIndex)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8002ab2:	79fa      	ldrb	r2, [r7, #7]
 8002ab4:	4920      	ldr	r1, [pc, #128]	; (8002b38 <AKxx_x_ExitMotorCtrlMode+0x90>)
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d100      	bne.n	8002aca <AKxx_x_ExitMotorCtrlMode+0x22>
		while(1);
 8002ac8:	e7fe      	b.n	8002ac8 <AKxx_x_ExitMotorCtrlMode+0x20>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 8002aca:	2308      	movs	r3, #8
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 8002ada:	79fa      	ldrb	r2, [r7, #7]
 8002adc:	4916      	ldr	r1, [pc, #88]	; (8002b38 <AKxx_x_ExitMotorCtrlMode+0x90>)
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFD};
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <AKxx_x_ExitMotorCtrlMode+0x94>)
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002afc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t txMailbox;
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, &txMailbox) != HAL_OK)
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	f107 0210 	add.w	r2, r7, #16
 8002b08:	f107 0118 	add.w	r1, r7, #24
 8002b0c:	480c      	ldr	r0, [pc, #48]	; (8002b40 <AKxx_x_ExitMotorCtrlMode+0x98>)
 8002b0e:	f003 fc74 	bl	80063fa <HAL_CAN_AddTxMessage>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <AKxx_x_ExitMotorCtrlMode+0x74>
		return AKxx_x_ExitMotorCtrlModeError;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e009      	b.n	8002b30 <AKxx_x_ExitMotorCtrlMode+0x88>

	if(AKxx_x_PollTxMessagePendingWithTimeout(txMailbox)) //??
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f8a4 	bl	8002c6c <AKxx_x_PollTxMessagePendingWithTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <AKxx_x_ExitMotorCtrlMode+0x86>
		return AKxx_x_ExitMotorCtrlModeError;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e000      	b.n	8002b30 <AKxx_x_ExitMotorCtrlMode+0x88>

	return AKxx_x_NoError;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3730      	adds	r7, #48	; 0x30
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	200002a4 	.word	0x200002a4
 8002b3c:	08009a98 	.word	0x08009a98
 8002b40:	20000090 	.word	0x20000090

08002b44 <AKxx_x_ZeroMotorPosition>:

AKxx_x_Error_e AKxx_x_ZeroMotorPosition(uint8_t deviceIndex)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08c      	sub	sp, #48	; 0x30
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
	if(!Device[deviceIndex].isInit)
 8002b4e:	79fa      	ldrb	r2, [r7, #7]
 8002b50:	4920      	ldr	r1, [pc, #128]	; (8002bd4 <AKxx_x_ZeroMotorPosition+0x90>)
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d100      	bne.n	8002b66 <AKxx_x_ZeroMotorPosition+0x22>
		while(1);
 8002b64:	e7fe      	b.n	8002b64 <AKxx_x_ZeroMotorPosition+0x20>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 8002b66:	2308      	movs	r3, #8
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 8002b76:	79fa      	ldrb	r2, [r7, #7]
 8002b78:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <AKxx_x_ZeroMotorPosition+0x90>)
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFE};
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <AKxx_x_ZeroMotorPosition+0x94>)
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b98:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t txMailbox;
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, &txMailbox) != HAL_OK)
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	f107 0210 	add.w	r2, r7, #16
 8002ba4:	f107 0118 	add.w	r1, r7, #24
 8002ba8:	480c      	ldr	r0, [pc, #48]	; (8002bdc <AKxx_x_ZeroMotorPosition+0x98>)
 8002baa:	f003 fc26 	bl	80063fa <HAL_CAN_AddTxMessage>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <AKxx_x_ZeroMotorPosition+0x74>
		return AKxx_x_ZeroMotorPositionError;
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	e009      	b.n	8002bcc <AKxx_x_ZeroMotorPosition+0x88>

	if(AKxx_x_PollTxMessagePendingWithTimeout(txMailbox)) //??
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f856 	bl	8002c6c <AKxx_x_PollTxMessagePendingWithTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <AKxx_x_ZeroMotorPosition+0x86>
		return AKxx_x_ZeroMotorPositionError;
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e000      	b.n	8002bcc <AKxx_x_ZeroMotorPosition+0x88>

	return AKxx_x_NoError;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3730      	adds	r7, #48	; 0x30
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	200002a4 	.word	0x200002a4
 8002bd8:	08009aa0 	.word	0x08009aa0
 8002bdc:	20000090 	.word	0x20000090

08002be0 <AKxx_x_PollMotorReadWithTimeout>:

AKxx_x_Error_e AKxx_x_PollMotorReadWithTimeout(AKxx_x_ReadData_t *RxData_Float)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	uint8_t timeoutOccurred = 1;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
	uint32_t tickstart = HAL_GetTick();
 8002bec:	f003 f9f0 	bl	8005fd0 <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
	while ((HAL_GetTick() - tickstart) < 10U)
 8002bf2:	e023      	b.n	8002c3c <AKxx_x_PollMotorReadWithTimeout+0x5c>
	{
		if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0))
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	481c      	ldr	r0, [pc, #112]	; (8002c68 <AKxx_x_PollMotorReadWithTimeout+0x88>)
 8002bf8:	f003 fe05 	bl	8006806 <HAL_CAN_GetRxFifoFillLevel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <AKxx_x_PollMotorReadWithTimeout+0x38>
		{
			timeoutOccurred = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
			if(ReadData(CAN_RX_FIFO0, RxData_Float))
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f000 f857 	bl	8002cbc <ReadData>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01b      	beq.n	8002c4c <AKxx_x_PollMotorReadWithTimeout+0x6c>
				return AKxx_x_PollMotorReadWithTimeoutError;
 8002c14:	2305      	movs	r3, #5
 8002c16:	e022      	b.n	8002c5e <AKxx_x_PollMotorReadWithTimeout+0x7e>
			break;
		}
		else if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1))
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4813      	ldr	r0, [pc, #76]	; (8002c68 <AKxx_x_PollMotorReadWithTimeout+0x88>)
 8002c1c:	f003 fdf3 	bl	8006806 <HAL_CAN_GetRxFifoFillLevel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <AKxx_x_PollMotorReadWithTimeout+0x5c>
		{
			timeoutOccurred = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
			if(ReadData(CAN_RX_FIFO1, RxData_Float))
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f000 f845 	bl	8002cbc <ReadData>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <AKxx_x_PollMotorReadWithTimeout+0x70>
				return AKxx_x_PollMotorReadWithTimeoutError;
 8002c38:	2305      	movs	r3, #5
 8002c3a:	e010      	b.n	8002c5e <AKxx_x_PollMotorReadWithTimeout+0x7e>
	while ((HAL_GetTick() - tickstart) < 10U)
 8002c3c:	f003 f9c8 	bl	8005fd0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	d9d4      	bls.n	8002bf4 <AKxx_x_PollMotorReadWithTimeout+0x14>
 8002c4a:	e002      	b.n	8002c52 <AKxx_x_PollMotorReadWithTimeout+0x72>
			break;
 8002c4c:	bf00      	nop
 8002c4e:	e000      	b.n	8002c52 <AKxx_x_PollMotorReadWithTimeout+0x72>
			break;
 8002c50:	bf00      	nop
		}
	}

	if(timeoutOccurred)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <AKxx_x_PollMotorReadWithTimeout+0x7c>
		return AKxx_x_PollMotorReadWithTimeoutError;
 8002c58:	2305      	movs	r3, #5
 8002c5a:	e000      	b.n	8002c5e <AKxx_x_PollMotorReadWithTimeout+0x7e>

	return AKxx_x_NoError;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000090 	.word	0x20000090

08002c6c <AKxx_x_PollTxMessagePendingWithTimeout>:

AKxx_x_Error_e AKxx_x_PollTxMessagePendingWithTimeout(uint32_t txMailbox)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	uint8_t timeoutOccurred = 1;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
	uint32_t tickstart = HAL_GetTick();
 8002c78:	f003 f9aa 	bl	8005fd0 <HAL_GetTick>
 8002c7c:	60b8      	str	r0, [r7, #8]
	while ((HAL_GetTick() - tickstart) < 10U)
 8002c7e:	e009      	b.n	8002c94 <AKxx_x_PollTxMessagePendingWithTimeout+0x28>
	{
		if(!HAL_CAN_IsTxMessagePending(&hcan1,txMailbox))
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <AKxx_x_PollTxMessagePendingWithTimeout+0x4c>)
 8002c84:	f003 fc89 	bl	800659a <HAL_CAN_IsTxMessagePending>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <AKxx_x_PollTxMessagePendingWithTimeout+0x28>
		{
			timeoutOccurred = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	73fb      	strb	r3, [r7, #15]
			break;
 8002c92:	e006      	b.n	8002ca2 <AKxx_x_PollTxMessagePendingWithTimeout+0x36>
	while ((HAL_GetTick() - tickstart) < 10U)
 8002c94:	f003 f99c 	bl	8005fd0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b09      	cmp	r3, #9
 8002ca0:	d9ee      	bls.n	8002c80 <AKxx_x_PollTxMessagePendingWithTimeout+0x14>
		}
	}

	if(timeoutOccurred)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <AKxx_x_PollTxMessagePendingWithTimeout+0x40>
		return AKxx_x_PollTxMessagePendingWithTimeoutError;
 8002ca8:	2306      	movs	r3, #6
 8002caa:	e000      	b.n	8002cae <AKxx_x_PollTxMessagePendingWithTimeout+0x42>

	return AKxx_x_NoError;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000090 	.word	0x20000090

08002cbc <ReadData>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static AKxx_x_Error_e ReadData(uint32_t rxFifo, AKxx_x_ReadData_t *RxData_Float)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08c      	sub	sp, #48	; 0x30
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rxData_uint[8];
	if(HAL_CAN_GetRxMessage(&hcan1, rxFifo, &RxHeader, rxData_uint) != HAL_OK)
 8002cc6:	f107 030c 	add.w	r3, r7, #12
 8002cca:	f107 0214 	add.w	r2, r7, #20
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4809      	ldr	r0, [pc, #36]	; (8002cf8 <ReadData+0x3c>)
 8002cd2:	f003 fc86 	bl	80065e2 <HAL_CAN_GetRxMessage>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <ReadData+0x24>
		return AKxx_x_ReadDataError;
 8002cdc:	2307      	movs	r3, #7
 8002cde:	e006      	b.n	8002cee <ReadData+0x32>

	UnpackData(rxData_uint, RxData_Float);
 8002ce0:	f107 030c 	add.w	r3, r7, #12
 8002ce4:	6839      	ldr	r1, [r7, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f948 	bl	8002f7c <UnpackData>

	return AKxx_x_NoError;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3730      	adds	r7, #48	; 0x30
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000090 	.word	0x20000090

08002cfc <WriteData>:

static AKxx_x_Error_e WriteData(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08c      	sub	sp, #48	; 0x30
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 8002d08:	2308      	movs	r3, #8
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 8002d10:	2300      	movs	r3, #0
 8002d12:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 8002d18:	79fa      	ldrb	r2, [r7, #7]
 8002d1a:	4917      	ldr	r1, [pc, #92]	; (8002d78 <WriteData+0x7c>)
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t txData_uint[8];
	PackData(deviceIndex, TxData_Float, txData_uint);
 8002d30:	f107 0210 	add.w	r2, r7, #16
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	6839      	ldr	r1, [r7, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f863 	bl	8002e04 <PackData>

	uint32_t txMailbox;
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, &txMailbox) != HAL_OK)
 8002d3e:	f107 030c 	add.w	r3, r7, #12
 8002d42:	f107 0210 	add.w	r2, r7, #16
 8002d46:	f107 0118 	add.w	r1, r7, #24
 8002d4a:	480c      	ldr	r0, [pc, #48]	; (8002d7c <WriteData+0x80>)
 8002d4c:	f003 fb55 	bl	80063fa <HAL_CAN_AddTxMessage>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <WriteData+0x5e>
		return AKxx_x_WriteDataError;
 8002d56:	2308      	movs	r3, #8
 8002d58:	e009      	b.n	8002d6e <WriteData+0x72>

	if(AKxx_x_PollTxMessagePendingWithTimeout(txMailbox)) //??
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff85 	bl	8002c6c <AKxx_x_PollTxMessagePendingWithTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <WriteData+0x70>
		return AKxx_x_WriteDataError;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	e000      	b.n	8002d6e <WriteData+0x72>

	return AKxx_x_NoError;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3730      	adds	r7, #48	; 0x30
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200002a4 	.word	0x200002a4
 8002d7c:	20000090 	.word	0x20000090

08002d80 <EnterMotorCtrlMode>:

static AKxx_x_Error_e EnterMotorCtrlMode(uint8_t deviceIndex)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08c      	sub	sp, #48	; 0x30
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.DLC = 8;
 8002d8a:	2308      	movs	r3, #8
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.ExtId = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = CAN_ID_STD;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = CAN_RTR_DATA;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.StdId = Device[deviceIndex].InitVals.canId;
 8002d9a:	79fa      	ldrb	r2, [r7, #7]
 8002d9c:	4916      	ldr	r1, [pc, #88]	; (8002df8 <EnterMotorCtrlMode+0x78>)
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t txData_uint[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0XFC};
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <EnterMotorCtrlMode+0x7c>)
 8002db4:	f107 0310 	add.w	r3, r7, #16
 8002db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dbc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t txMailbox;
	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData_uint, &txMailbox) != HAL_OK)
 8002dc0:	f107 030c 	add.w	r3, r7, #12
 8002dc4:	f107 0210 	add.w	r2, r7, #16
 8002dc8:	f107 0118 	add.w	r1, r7, #24
 8002dcc:	480c      	ldr	r0, [pc, #48]	; (8002e00 <EnterMotorCtrlMode+0x80>)
 8002dce:	f003 fb14 	bl	80063fa <HAL_CAN_AddTxMessage>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <EnterMotorCtrlMode+0x5c>
		return AKxx_x_EnterMotorCtrlModeError;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e009      	b.n	8002df0 <EnterMotorCtrlMode+0x70>

	if(AKxx_x_PollTxMessagePendingWithTimeout(txMailbox)) //??
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff44 	bl	8002c6c <AKxx_x_PollTxMessagePendingWithTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <EnterMotorCtrlMode+0x6e>
		return AKxx_x_EnterMotorCtrlModeError;
 8002dea:	2302      	movs	r3, #2
 8002dec:	e000      	b.n	8002df0 <EnterMotorCtrlMode+0x70>

	return AKxx_x_NoError;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3730      	adds	r7, #48	; 0x30
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200002a4 	.word	0x200002a4
 8002dfc:	08009aa8 	.word	0x08009aa8
 8002e00:	20000090 	.word	0x20000090

08002e04 <PackData>:

static void PackData(uint8_t deviceIndex, AKxx_x_WriteData_t *TxData_Float, uint8_t *txData_uint)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	73fb      	strb	r3, [r7, #15]
	uint16_t position = FloatToUint(TxData_Float->position, -12.5, 12.5, 16);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e18:	2010      	movs	r0, #16
 8002e1a:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 8002e1e:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8002e22:	eeb0 0a67 	vmov.f32	s0, s15
 8002e26:	f000 f99d 	bl	8003164 <FloatToUint>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	83fb      	strh	r3, [r7, #30]
	uint16_t speed = FloatToUint(TxData_Float->speed, Device[deviceIndex].speedMin, Device[deviceIndex].speedMax, 12);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e34:	7bfa      	ldrb	r2, [r7, #15]
 8002e36:	494e      	ldr	r1, [pc, #312]	; (8002f70 <PackData+0x16c>)
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	440b      	add	r3, r1
 8002e42:	3308      	adds	r3, #8
 8002e44:	ed93 7a00 	vldr	s14, [r3]
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	4949      	ldr	r1, [pc, #292]	; (8002f70 <PackData+0x16c>)
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	3304      	adds	r3, #4
 8002e58:	edd3 6a00 	vldr	s13, [r3]
 8002e5c:	200c      	movs	r0, #12
 8002e5e:	eeb0 1a66 	vmov.f32	s2, s13
 8002e62:	eef0 0a47 	vmov.f32	s1, s14
 8002e66:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6a:	f000 f97b 	bl	8003164 <FloatToUint>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	83bb      	strh	r3, [r7, #28]
	uint16_t torque = FloatToUint(TxData_Float->torque, Device[deviceIndex].torqueMin, Device[deviceIndex].torqueMax, 12);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	493d      	ldr	r1, [pc, #244]	; (8002f70 <PackData+0x16c>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	3310      	adds	r3, #16
 8002e88:	ed93 7a00 	vldr	s14, [r3]
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	4938      	ldr	r1, [pc, #224]	; (8002f70 <PackData+0x16c>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	edd3 6a00 	vldr	s13, [r3]
 8002ea0:	200c      	movs	r0, #12
 8002ea2:	eeb0 1a66 	vmov.f32	s2, s13
 8002ea6:	eef0 0a47 	vmov.f32	s1, s14
 8002eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8002eae:	f000 f959 	bl	8003164 <FloatToUint>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	837b      	strh	r3, [r7, #26]
	uint16_t kd = FloatToUint(TxData_Float->kd, 0, 5, 12);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	200c      	movs	r0, #12
 8002ebe:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8002ec2:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8002f74 <PackData+0x170>
 8002ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eca:	f000 f94b 	bl	8003164 <FloatToUint>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	833b      	strh	r3, [r7, #24]
	uint16_t kp = FloatToUint(TxData_Float->kp, 0, 500, 12);
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ed8:	200c      	movs	r0, #12
 8002eda:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002f78 <PackData+0x174>
 8002ede:	eddf 0a25 	vldr	s1, [pc, #148]	; 8002f74 <PackData+0x170>
 8002ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee6:	f000 f93d 	bl	8003164 <FloatToUint>
 8002eea:	4603      	mov	r3, r0
 8002eec:	82fb      	strh	r3, [r7, #22]

	txData_uint[0] = position >> 8;
 8002eee:	8bfb      	ldrh	r3, [r7, #30]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	701a      	strb	r2, [r3, #0]
	txData_uint[1] = position & 0xFF;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3301      	adds	r3, #1
 8002efe:	8bfa      	ldrh	r2, [r7, #30]
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]
	txData_uint[2] = speed >> 4;
 8002f04:	8bbb      	ldrh	r3, [r7, #28]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]
	txData_uint[3] = ((speed & 0x0F) << 4) | (kp >> 8);
 8002f12:	8bbb      	ldrh	r3, [r7, #28]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	b25a      	sxtb	r2, r3
 8002f18:	8afb      	ldrh	r3, [r7, #22]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b25a      	sxtb	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3303      	adds	r3, #3
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]
	txData_uint[4] = kp & 0xFF;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	8afa      	ldrh	r2, [r7, #22]
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]
	txData_uint[5] = kd >> 4;
 8002f36:	8b3b      	ldrh	r3, [r7, #24]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3305      	adds	r3, #5
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]
	txData_uint[6] = ((kd & 0x0F) << 4) | (torque >> 8);
 8002f44:	8b3b      	ldrh	r3, [r7, #24]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	b25a      	sxtb	r2, r3
 8002f4a:	8b7b      	ldrh	r3, [r7, #26]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	4313      	orrs	r3, r2
 8002f54:	b25a      	sxtb	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3306      	adds	r3, #6
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]
	txData_uint[7] = torque & 0xFF;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3307      	adds	r3, #7
 8002f62:	8b7a      	ldrh	r2, [r7, #26]
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	701a      	strb	r2, [r3, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200002a4 	.word	0x200002a4
 8002f74:	00000000 	.word	0x00000000
 8002f78:	43fa0000 	.word	0x43fa0000

08002f7c <UnpackData>:

static void UnpackData(uint8_t *rxData_uint, AKxx_x_ReadData_t *RxData_Float)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
	uint8_t canId = rxData_uint[0];
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	73bb      	strb	r3, [r7, #14]
	uint16_t position = (rxData_uint[1] << 8) | rxData_uint[2];
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	81bb      	strh	r3, [r7, #12]
	uint16_t speed = (rxData_uint[3] << 4) | (rxData_uint[4] >> 4);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3303      	adds	r3, #3
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	b21b      	sxth	r3, r3
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	b21b      	sxth	r3, r3
 8002fbe:	817b      	strh	r3, [r7, #10]
	uint16_t torque = ((rxData_uint[4] & 0x0F) << 8) | rxData_uint[5];
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	b21b      	sxth	r3, r3
 8002fca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fce:	b21a      	sxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3305      	adds	r3, #5
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b21b      	sxth	r3, r3
 8002fdc:	813b      	strh	r3, [r7, #8]

	uint8_t i;
	for(i = 0; i < AKXX_X_NUMBER_OF_DEVICES; i++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	e012      	b.n	800300a <UnpackData+0x8e>
		if(Device[i].InitVals.canId == canId)
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	4935      	ldr	r1, [pc, #212]	; (80030bc <UnpackData+0x140>)
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	881a      	ldrh	r2, [r3, #0]
 8002ff4:	7bbb      	ldrb	r3, [r7, #14]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d103      	bne.n	8003004 <UnpackData+0x88>
		{
			RxData_Float->canId = canId;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	7bba      	ldrb	r2, [r7, #14]
 8003000:	701a      	strb	r2, [r3, #0]
			break;
 8003002:	e005      	b.n	8003010 <UnpackData+0x94>
	for(i = 0; i < AKXX_X_NUMBER_OF_DEVICES; i++)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	3301      	adds	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d9e9      	bls.n	8002fe4 <UnpackData+0x68>
		}

	RxData_Float->position = UintToFloat(position, -12.5, 12.5, 16);
 8003010:	89bb      	ldrh	r3, [r7, #12]
 8003012:	2110      	movs	r1, #16
 8003014:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8003018:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800301c:	4618      	mov	r0, r3
 800301e:	f000 f84f 	bl	80030c0 <UintToFloat>
 8003022:	eef0 7a40 	vmov.f32	s15, s0
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	edc3 7a01 	vstr	s15, [r3, #4]
	RxData_Float->speed = UintToFloat(speed, Device[i].speedMin, Device[i].speedMax, 12);
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	4923      	ldr	r1, [pc, #140]	; (80030bc <UnpackData+0x140>)
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	3308      	adds	r3, #8
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	491e      	ldr	r1, [pc, #120]	; (80030bc <UnpackData+0x140>)
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	3304      	adds	r3, #4
 8003050:	ed93 7a00 	vldr	s14, [r3]
 8003054:	897b      	ldrh	r3, [r7, #10]
 8003056:	210c      	movs	r1, #12
 8003058:	eef0 0a47 	vmov.f32	s1, s14
 800305c:	eeb0 0a67 	vmov.f32	s0, s15
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f82d 	bl	80030c0 <UintToFloat>
 8003066:	eef0 7a40 	vmov.f32	s15, s0
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	edc3 7a02 	vstr	s15, [r3, #8]
	RxData_Float->torque = UintToFloat(torque, Device[i].torqueMin, Device[i].torqueMax, 12);
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	4912      	ldr	r1, [pc, #72]	; (80030bc <UnpackData+0x140>)
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	440b      	add	r3, r1
 800307e:	3310      	adds	r3, #16
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	490d      	ldr	r1, [pc, #52]	; (80030bc <UnpackData+0x140>)
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	330c      	adds	r3, #12
 8003094:	ed93 7a00 	vldr	s14, [r3]
 8003098:	893b      	ldrh	r3, [r7, #8]
 800309a:	210c      	movs	r1, #12
 800309c:	eef0 0a47 	vmov.f32	s1, s14
 80030a0:	eeb0 0a67 	vmov.f32	s0, s15
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f80b 	bl	80030c0 <UintToFloat>
 80030aa:	eef0 7a40 	vmov.f32	s15, s0
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	200002a4 	.word	0x200002a4

080030c0 <UintToFloat>:

static float UintToFloat(uint16_t x_uint, float xMin_float, float xMax_float, uint8_t nBits)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b089      	sub	sp, #36	; 0x24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80030cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80030d0:	460a      	mov	r2, r1
 80030d2:	81fb      	strh	r3, [r7, #14]
 80030d4:	4613      	mov	r3, r2
 80030d6:	737b      	strb	r3, [r7, #13]
	float span = xMax_float - xMin_float;
 80030d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80030dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80030e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e4:	edc7 7a06 	vstr	s15, [r7, #24]
	float offset = xMin_float;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	617b      	str	r3, [r7, #20]
	float x_float;
	if(nBits == 12)
 80030ec:	7b7b      	ldrb	r3, [r7, #13]
 80030ee:	2b0c      	cmp	r3, #12
 80030f0:	d113      	bne.n	800311a <UintToFloat+0x5a>
		x_float = (((float)x_uint) * span / 4095.0f) + offset;
 80030f2:	89fb      	ldrh	r3, [r7, #14]
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003104:	eddf 6a15 	vldr	s13, [pc, #84]	; 800315c <UintToFloat+0x9c>
 8003108:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800310c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003114:	edc7 7a07 	vstr	s15, [r7, #28]
 8003118:	e015      	b.n	8003146 <UintToFloat+0x86>
	else if(nBits == 16)
 800311a:	7b7b      	ldrb	r3, [r7, #13]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d112      	bne.n	8003146 <UintToFloat+0x86>
		x_float = (((float)x_uint) * span / 65535.0f) + offset;
 8003120:	89fb      	ldrh	r3, [r7, #14]
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800312a:	edd7 7a06 	vldr	s15, [r7, #24]
 800312e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003132:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003160 <UintToFloat+0xa0>
 8003136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800313a:	ed97 7a05 	vldr	s14, [r7, #20]
 800313e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003142:	edc7 7a07 	vstr	s15, [r7, #28]

	return x_float;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	ee07 3a90 	vmov	s15, r3
}
 800314c:	eeb0 0a67 	vmov.f32	s0, s15
 8003150:	3724      	adds	r7, #36	; 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	457ff000 	.word	0x457ff000
 8003160:	477fff00 	.word	0x477fff00

08003164 <FloatToUint>:

static uint16_t FloatToUint(float x_float, float xMin_float, float xMax_float, uint8_t nBits)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	ed87 0a03 	vstr	s0, [r7, #12]
 800316e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003172:	ed87 1a01 	vstr	s2, [r7, #4]
 8003176:	4603      	mov	r3, r0
 8003178:	70fb      	strb	r3, [r7, #3]
	if(x_float < xMin_float)
 800317a:	ed97 7a03 	vldr	s14, [r7, #12]
 800317e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003182:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318a:	d501      	bpl.n	8003190 <FloatToUint+0x2c>
		x_float = xMin_float;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	60fb      	str	r3, [r7, #12]
	if(x_float > xMax_float)
 8003190:	ed97 7a03 	vldr	s14, [r7, #12]
 8003194:	edd7 7a01 	vldr	s15, [r7, #4]
 8003198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800319c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a0:	dd01      	ble.n	80031a6 <FloatToUint+0x42>
		x_float = xMax_float;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	60fb      	str	r3, [r7, #12]

	float span = xMax_float - xMin_float;
 80031a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80031aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b2:	edc7 7a06 	vstr	s15, [r7, #24]
	float offset = xMin_float;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	617b      	str	r3, [r7, #20]
	uint16_t x_uint;
	if(nBits == 12)
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d113      	bne.n	80031e8 <FloatToUint+0x84>
		x_uint = (uint16_t)((x_float - offset) * 4095.0f / span);
 80031c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80031c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80031c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031cc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003224 <FloatToUint+0xc0>
 80031d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80031d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80031d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e0:	ee17 3a90 	vmov	r3, s15
 80031e4:	83fb      	strh	r3, [r7, #30]
 80031e6:	e015      	b.n	8003214 <FloatToUint+0xb0>
	else if(nBits == 16)
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d112      	bne.n	8003214 <FloatToUint+0xb0>
		x_uint = (uint16_t)((x_float - offset) * 65535.0f / span);
 80031ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80031f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80031f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003228 <FloatToUint+0xc4>
 80031fe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003202:	ed97 7a06 	vldr	s14, [r7, #24]
 8003206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800320a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800320e:	ee17 3a90 	vmov	r3, s15
 8003212:	83fb      	strh	r3, [r7, #30]

	return x_uint;
 8003214:	8bfb      	ldrh	r3, [r7, #30]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3724      	adds	r7, #36	; 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	457ff000 	.word	0x457ff000
 8003228:	477fff00 	.word	0x477fff00

0800322c <BNO08x_Init>:
/*******************************************************************************
* PUBLIC FUNCTIONS
*******************************************************************************/

BNO08x_Error_e BNO08x_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
	sh2_Hal_t *pSh2Hal = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	607b      	str	r3, [r7, #4]
	pSh2Hal = sh2_hal_init();
 8003236:	f000 fba5 	bl	8003984 <sh2_hal_init>
 800323a:	6078      	str	r0, [r7, #4]
	int status = sh2_open(pSh2Hal, EventHandler, NULL);
 800323c:	2200      	movs	r2, #0
 800323e:	490e      	ldr	r1, [pc, #56]	; (8003278 <BNO08x_Init+0x4c>)
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 ffa7 	bl	8004194 <sh2_open>
 8003246:	6038      	str	r0, [r7, #0]
	if(status != SH2_OK)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <BNO08x_Init+0x26>
		return BNO08x_InitError;
 800324e:	2301      	movs	r3, #1
 8003250:	e00e      	b.n	8003270 <BNO08x_Init+0x44>

	sh2_setSensorCallback(ReadEvent, NULL); // incompatible??
 8003252:	2100      	movs	r1, #0
 8003254:	4809      	ldr	r0, [pc, #36]	; (800327c <BNO08x_Init+0x50>)
 8003256:	f001 f84b 	bl	80042f0 <sh2_setSensorCallback>

  	if(StartReports())
 800325a:	f000 f82f 	bl	80032bc <StartReports>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <BNO08x_Init+0x3c>
  		return BNO08x_InitError;
 8003264:	2301      	movs	r3, #1
 8003266:	e003      	b.n	8003270 <BNO08x_Init+0x44>

  	isInit = 1;
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <BNO08x_Init+0x54>)
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]

	return BNO08x_NoError;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0800331d 	.word	0x0800331d
 800327c:	08003345 	.word	0x08003345
 8003280:	200002fd 	.word	0x200002fd

08003284 <BNO08x_StartReports>:

BNO08x_Error_e BNO08x_StartReports(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
	if(!isInit)
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <BNO08x_StartReports+0x18>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d100      	bne.n	8003292 <BNO08x_StartReports+0xe>
		while(1);
 8003290:	e7fe      	b.n	8003290 <BNO08x_StartReports+0xc>

	return StartReports();
 8003292:	f000 f813 	bl	80032bc <StartReports>
 8003296:	4603      	mov	r3, r0
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	200002fd 	.word	0x200002fd

080032a0 <BNO08x_ReadSensors>:


void BNO08x_ReadSensors(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	if(!isInit)
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <BNO08x_ReadSensors+0x18>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d100      	bne.n	80032ae <BNO08x_ReadSensors+0xe>
		while(1);
 80032ac:	e7fe      	b.n	80032ac <BNO08x_ReadSensors+0xc>

	sh2_service();
 80032ae:	f001 f80b 	bl	80042c8 <sh2_service>
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200002fd 	.word	0x200002fd

080032bc <StartReports>:
/*******************************************************************************
* PRIVATE FUNCTIONS
*******************************************************************************/

static BNO08x_Error_e StartReports(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
		{SH2_ACCELEROMETER, {.reportInterval_us = 2000}},			// Max interval = 500 Hz = 2000 us
		{SH2_GYROSCOPE_CALIBRATED, {.reportInterval_us = 2500}},	// Max interval = 400 Hz = 2500 us
        {SH2_GAME_ROTATION_VECTOR, {.reportInterval_us = 2500}},	// Max interval = 400 Hz = 2500 us
    };

    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e01e      	b.n	8003306 <StartReports+0x4a>
    {
        int sensorId = sensorConfig[n].sensorId;
 80032c8:	4913      	ldr	r1, [pc, #76]	; (8003318 <StartReports+0x5c>)
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	440b      	add	r3, r1
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60bb      	str	r3, [r7, #8]

        int status = sh2_setSensorConfig(sensorId, &sensorConfig[n].config);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	b2d8      	uxtb	r0, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <StartReports+0x5c>)
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	f001 f814 	bl	800431c <sh2_setSensorConfig>
 80032f4:	6078      	str	r0, [r7, #4]
        if (status != 0)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <StartReports+0x44>
        	return BNO08x_StartReportError;
 80032fc:	2302      	movs	r3, #2
 80032fe:	e006      	b.n	800330e <StartReports+0x52>
    for (int n = 0; n < ARRAY_LEN(sensorConfig); n++)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3301      	adds	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d9dd      	bls.n	80032c8 <StartReports+0xc>
    }

    return BNO08x_NoError;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	08009ab0 	.word	0x08009ab0

0800331c <EventHandler>:

static void EventHandler(void * cookie, sh2_AsyncEvent_t *pEvent)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
    if (pEvent->eventId == SH2_RESET)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <EventHandler+0x18>
        BNO08x_resetOccurred = 1;
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <EventHandler+0x24>)
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	200002fc 	.word	0x200002fc

08003344 <ReadEvent>:

static void ReadEvent(void * cookie, sh2_SensorEvent_t * event, int16_t *data)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b09a      	sub	sp, #104	; 0x68
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
    int rc;
    sh2_SensorValue_t value;

    rc = sh2_decodeSensorEvent(&value, event);
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	4618      	mov	r0, r3
 8003358:	f001 f80a 	bl	8004370 <sh2_decodeSensorEvent>
 800335c:	6678      	str	r0, [r7, #100]	; 0x64
    if (rc != SH2_OK)
 800335e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003360:	2b00      	cmp	r3, #0
 8003362:	d12a      	bne.n	80033ba <ReadEvent+0x76>
        return;

    switch(value.sensorId)
 8003364:	7c3b      	ldrb	r3, [r7, #16]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d01a      	beq.n	80033a0 <ReadEvent+0x5c>
 800336a:	2b08      	cmp	r3, #8
 800336c:	dc26      	bgt.n	80033bc <ReadEvent+0x78>
 800336e:	2b01      	cmp	r3, #1
 8003370:	d002      	beq.n	8003378 <ReadEvent+0x34>
 8003372:	2b02      	cmp	r3, #2
 8003374:	d00a      	beq.n	800338c <ReadEvent+0x48>
 8003376:	e021      	b.n	80033bc <ReadEvent+0x78>
    {
        case SH2_ACCELEROMETER:
        	BNO08x_IMU_Data[0] = value.un.accelerometer.x;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <ReadEvent+0x80>)
 800337c:	6013      	str	r3, [r2, #0]
        	BNO08x_IMU_Data[1] = value.un.accelerometer.y;
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <ReadEvent+0x80>)
 8003382:	6053      	str	r3, [r2, #4]
        	BNO08x_IMU_Data[2] = value.un.accelerometer.z;
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <ReadEvent+0x80>)
 8003388:	6093      	str	r3, [r2, #8]
            break;
 800338a:	e017      	b.n	80033bc <ReadEvent+0x78>

        case SH2_GYROSCOPE_CALIBRATED:
        	BNO08x_IMU_Data[3] = value.un.gyroscope.x;
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <ReadEvent+0x80>)
 8003390:	60d3      	str	r3, [r2, #12]
        	BNO08x_IMU_Data[4] = value.un.gyroscope.y;
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <ReadEvent+0x80>)
 8003396:	6113      	str	r3, [r2, #16]
        	BNO08x_IMU_Data[5] = value.un.gyroscope.z;
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <ReadEvent+0x80>)
 800339c:	6153      	str	r3, [r2, #20]
            break;
 800339e:	e00d      	b.n	80033bc <ReadEvent+0x78>

        case SH2_GAME_ROTATION_VECTOR:
        	BNO08x_IMU_Data[6] = value.un.gameRotationVector.real;
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <ReadEvent+0x80>)
 80033a4:	6193      	str	r3, [r2, #24]
        	BNO08x_IMU_Data[7] = value.un.gameRotationVector.i;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	4a06      	ldr	r2, [pc, #24]	; (80033c4 <ReadEvent+0x80>)
 80033aa:	61d3      	str	r3, [r2, #28]
        	BNO08x_IMU_Data[8] = value.un.gameRotationVector.j;
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <ReadEvent+0x80>)
 80033b0:	6213      	str	r3, [r2, #32]
        	BNO08x_IMU_Data[9] = value.un.gameRotationVector.k;
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <ReadEvent+0x80>)
 80033b6:	6253      	str	r3, [r2, #36]	; 0x24
            break;
 80033b8:	e000      	b.n	80033bc <ReadEvent+0x78>
        return;
 80033ba:	bf00      	nop
    }
}
 80033bc:	3768      	adds	r7, #104	; 0x68
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200002d4 	.word	0x200002d4

080033c8 <bootn>:

// ------------------------------------------------------------------------
// Private methods

static void bootn(bool state)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_BT_GPIO_Port, ANKLE_IMU_BT_Pin,
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	461a      	mov	r2, r3
 80033d6:	2101      	movs	r1, #1
 80033d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033dc:	f004 f8d0 	bl	8007580 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <rstn>:

static void rstn(bool state)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_RST_GPIO_Port, ANKLE_IMU_RST_Pin,
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	461a      	mov	r2, r3
 80033f6:	2108      	movs	r1, #8
 80033f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033fc:	f004 f8c0 	bl	8007580 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <ps0_waken>:

static void ps0_waken(bool state)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_P0_GPIO_Port, ANKLE_IMU_P0_Pin,
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	461a      	mov	r2, r3
 8003416:	2102      	movs	r1, #2
 8003418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800341c:	f004 f8b0 	bl	8007580 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <ps1>:

static void ps1(bool state)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_P1_GPIO_Port, ANKLE_IMU_P1_Pin,
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	461a      	mov	r2, r3
 8003436:	2104      	movs	r1, #4
 8003438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343c:	f004 f8a0 	bl	8007580 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <csn>:

static void csn(bool state)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ANKLE_IMU_CS_GPIO_Port, ANKLE_IMU_CS_Pin,
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	461a      	mov	r2, r3
 8003456:	2110      	movs	r1, #16
 8003458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800345c:	f004 f890 	bl	8007580 <HAL_GPIO_WritePin>
                      state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <timeNowUs>:

static uint32_t timeNowUs(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <timeNowUs+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	20000258 	.word	0x20000258

08003480 <hal_init_timer>:

static void hal_init_timer(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0

    HAL_TIM_Base_Start(&htim2);
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <hal_init_timer+0x10>)
 8003486:	f005 f861 	bl	800854c <HAL_TIM_Base_Start>
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000258 	.word	0x20000258

08003494 <spiDummyOp>:



static void spiDummyOp(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af02      	add	r7, sp, #8
 800349a:	23aa      	movs	r3, #170	; 0xaa
 800349c:	713b      	strb	r3, [r7, #4]
    uint8_t dummyTx[1];
    uint8_t dummyRx[1];

    memset(dummyTx, 0xAA, sizeof(dummyTx));

    HAL_SPI_TransmitReceive(&hspi1, dummyTx, dummyRx, sizeof(dummyTx), 2);
 800349e:	463a      	mov	r2, r7
 80034a0:	1d39      	adds	r1, r7, #4
 80034a2:	2302      	movs	r3, #2
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2301      	movs	r3, #1
 80034a8:	4803      	ldr	r0, [pc, #12]	; (80034b8 <spiDummyOp+0x24>)
 80034aa:	f004 f964 	bl	8007776 <HAL_SPI_TransmitReceive>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200001f4 	.word	0x200001f4

080034bc <hal_init_hw>:



static void hal_init_hw(bool dfu)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
    hal_init_timer();
 80034c6:	f7ff ffdb 	bl	8003480 <hal_init_timer>

}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <enableInts>:

static void enableInts(void)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	af00      	add	r7, sp, #0
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034d6:	2017      	movs	r0, #23
 80034d8:	f003 fd4b 	bl	8006f72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80034dc:	2023      	movs	r0, #35	; 0x23
 80034de:	f003 fd48 	bl	8006f72 <HAL_NVIC_EnableIRQ>
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <disableInts>:

static void disableInts()
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80034ea:	2023      	movs	r0, #35	; 0x23
 80034ec:	f003 fd4f 	bl	8006f8e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80034f0:	2017      	movs	r0, #23
 80034f2:	f003 fd4c 	bl	8006f8e <HAL_NVIC_DisableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <spiActivate>:
// Attempt to start a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// If SPI periph is not in use and there is data to send or receive,
// this will start a SPI operation.
static void spiActivate(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
    if ((spiState == SPI_IDLE) && (rxBufLen == 0))
 8003500:	4b18      	ldr	r3, [pc, #96]	; (8003564 <spiActivate+0x68>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d12a      	bne.n	800355e <spiActivate+0x62>
 8003508:	4b17      	ldr	r3, [pc, #92]	; (8003568 <spiActivate+0x6c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d126      	bne.n	800355e <spiActivate+0x62>
    {
        if (rxReady)
 8003510:	4b16      	ldr	r3, [pc, #88]	; (800356c <spiActivate+0x70>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d021      	beq.n	800355e <spiActivate+0x62>
        {
            // reset flag that was set with INTN
            rxReady = false;
 800351a:	4b14      	ldr	r3, [pc, #80]	; (800356c <spiActivate+0x70>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]

            // assert CSN
            csn(false);
 8003520:	2000      	movs	r0, #0
 8003522:	f7ff ff91 	bl	8003448 <csn>

            if (txBufLen > 0)
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <spiActivate+0x74>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00e      	beq.n	800354c <spiActivate+0x50>
            {
                spiState = SPI_WRITE;
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <spiActivate+0x68>)
 8003530:	2206      	movs	r2, #6
 8003532:	701a      	strb	r2, [r3, #0]

                // Start operation to write (and, incidentally, read)
                HAL_SPI_TransmitReceive_IT(&hspi1, txBuf, rxBuf, txBufLen);
 8003534:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <spiActivate+0x74>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	4a0e      	ldr	r2, [pc, #56]	; (8003574 <spiActivate+0x78>)
 800353c:	490e      	ldr	r1, [pc, #56]	; (8003578 <spiActivate+0x7c>)
 800353e:	480f      	ldr	r0, [pc, #60]	; (800357c <spiActivate+0x80>)
 8003540:	f004 fb2c 	bl	8007b9c <HAL_SPI_TransmitReceive_IT>

                // Deassert Wake
                ps0_waken(true);
 8003544:	2001      	movs	r0, #1
 8003546:	f7ff ff5f 	bl	8003408 <ps0_waken>
                // Start SPI operation to read header (writing zeros)
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
            }
        }
    }
}
 800354a:	e008      	b.n	800355e <spiActivate+0x62>
                spiState = SPI_RD_HDR;
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <spiActivate+0x68>)
 800354e:	2204      	movs	r2, #4
 8003550:	701a      	strb	r2, [r3, #0]
                HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf, READ_LEN);
 8003552:	2304      	movs	r3, #4
 8003554:	4a07      	ldr	r2, [pc, #28]	; (8003574 <spiActivate+0x78>)
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <spiActivate+0x84>)
 8003558:	4808      	ldr	r0, [pc, #32]	; (800357c <spiActivate+0x80>)
 800355a:	f004 fb1f 	bl	8007b9c <HAL_SPI_TransmitReceive_IT>
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200002fe 	.word	0x200002fe
 8003568:	20000708 	.word	0x20000708
 800356c:	20000305 	.word	0x20000305
 8003570:	20000790 	.word	0x20000790
 8003574:	20000308 	.word	0x20000308
 8003578:	20000710 	.word	0x20000710
 800357c:	200001f4 	.word	0x200001f4
 8003580:	08009af8 	.word	0x08009af8

08003584 <spiCompleted>:
// Handle the end of a SPI operation.
// This can be done from interrupt context or with interrupts disabled.
// Depending on spiState, it may start a follow-up operation or transition
// to idle.  In the latter case, it will call spiActivate
static void spiCompleted(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
    // Get length of payload available
    uint16_t rxLen = (rxBuf[0] + (rxBuf[1] << 8)) & ~0x8000;
 800358a:	4b33      	ldr	r3, [pc, #204]	; (8003658 <spiCompleted+0xd4>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b29a      	uxth	r2, r3
 8003590:	4b31      	ldr	r3, [pc, #196]	; (8003658 <spiCompleted+0xd4>)
 8003592:	785b      	ldrb	r3, [r3, #1]
 8003594:	b29b      	uxth	r3, r3
 8003596:	021b      	lsls	r3, r3, #8
 8003598:	b29b      	uxth	r3, r3
 800359a:	4413      	add	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80035a2:	80fb      	strh	r3, [r7, #6]

    // Truncate that to max len we can read
    if (rxLen > sizeof(rxBuf))
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035aa:	d902      	bls.n	80035b2 <spiCompleted+0x2e>
    {
        rxLen = sizeof(rxBuf);
 80035ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b0:	80fb      	strh	r3, [r7, #6]
    }

    if (spiState == SPI_DUMMY)
 80035b2:	4b2a      	ldr	r3, [pc, #168]	; (800365c <spiCompleted+0xd8>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d103      	bne.n	80035c2 <spiCompleted+0x3e>
    {
        // SPI Dummy operation completed, transition now to idle
        spiState = SPI_IDLE;
 80035ba:	4b28      	ldr	r3, [pc, #160]	; (800365c <spiCompleted+0xd8>)
 80035bc:	2203      	movs	r2, #3
 80035be:	701a      	strb	r2, [r3, #0]
        spiState = SPI_IDLE;

        // Activate the next operation, if any.
        spiActivate();
    }
}
 80035c0:	e045      	b.n	800364e <spiCompleted+0xca>
    else if (spiState == SPI_RD_HDR)
 80035c2:	4b26      	ldr	r3, [pc, #152]	; (800365c <spiCompleted+0xd8>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d11a      	bne.n	8003600 <spiCompleted+0x7c>
        if (rxLen > READ_LEN) {
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d90b      	bls.n	80035e8 <spiCompleted+0x64>
            spiState = SPI_RD_BODY;
 80035d0:	4b22      	ldr	r3, [pc, #136]	; (800365c <spiCompleted+0xd8>)
 80035d2:	2205      	movs	r2, #5
 80035d4:	701a      	strb	r2, [r3, #0]
            HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t *)txZeros, rxBuf+READ_LEN, rxLen-READ_LEN);
 80035d6:	4a22      	ldr	r2, [pc, #136]	; (8003660 <spiCompleted+0xdc>)
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	3b04      	subs	r3, #4
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4921      	ldr	r1, [pc, #132]	; (8003664 <spiCompleted+0xe0>)
 80035e0:	4821      	ldr	r0, [pc, #132]	; (8003668 <spiCompleted+0xe4>)
 80035e2:	f004 fadb 	bl	8007b9c <HAL_SPI_TransmitReceive_IT>
}
 80035e6:	e032      	b.n	800364e <spiCompleted+0xca>
            csn(true);            // deassert CSN
 80035e8:	2001      	movs	r0, #1
 80035ea:	f7ff ff2d 	bl	8003448 <csn>
            rxBufLen = 0;         // no rx data available
 80035ee:	4b1f      	ldr	r3, [pc, #124]	; (800366c <spiCompleted+0xe8>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
            spiState = SPI_IDLE;  // back to idle state
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <spiCompleted+0xd8>)
 80035f6:	2203      	movs	r2, #3
 80035f8:	701a      	strb	r2, [r3, #0]
            spiActivate();        // activate next operation, if any.
 80035fa:	f7ff ff7f 	bl	80034fc <spiActivate>
}
 80035fe:	e026      	b.n	800364e <spiCompleted+0xca>
    else if (spiState == SPI_RD_BODY)
 8003600:	4b16      	ldr	r3, [pc, #88]	; (800365c <spiCompleted+0xd8>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b05      	cmp	r3, #5
 8003606:	d10b      	bne.n	8003620 <spiCompleted+0x9c>
        csn(true);
 8003608:	2001      	movs	r0, #1
 800360a:	f7ff ff1d 	bl	8003448 <csn>
        rxBufLen = rxLen;
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	4a16      	ldr	r2, [pc, #88]	; (800366c <spiCompleted+0xe8>)
 8003612:	6013      	str	r3, [r2, #0]
        spiState = SPI_IDLE;
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <spiCompleted+0xd8>)
 8003616:	2203      	movs	r2, #3
 8003618:	701a      	strb	r2, [r3, #0]
        spiActivate();
 800361a:	f7ff ff6f 	bl	80034fc <spiActivate>
}
 800361e:	e016      	b.n	800364e <spiCompleted+0xca>
    else if (spiState == SPI_WRITE)
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <spiCompleted+0xd8>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b06      	cmp	r3, #6
 8003626:	d112      	bne.n	800364e <spiCompleted+0xca>
        csn(true);
 8003628:	2001      	movs	r0, #1
 800362a:	f7ff ff0d 	bl	8003448 <csn>
        rxBufLen = (txBufLen < rxLen) ? txBufLen : rxLen;
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <spiCompleted+0xec>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4293      	cmp	r3, r2
 8003636:	bf28      	it	cs
 8003638:	4613      	movcs	r3, r2
 800363a:	4a0c      	ldr	r2, [pc, #48]	; (800366c <spiCompleted+0xe8>)
 800363c:	6013      	str	r3, [r2, #0]
        txBufLen = 0;
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <spiCompleted+0xec>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
        spiState = SPI_IDLE;
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <spiCompleted+0xd8>)
 8003646:	2203      	movs	r2, #3
 8003648:	701a      	strb	r2, [r3, #0]
        spiActivate();
 800364a:	f7ff ff57 	bl	80034fc <spiActivate>
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000308 	.word	0x20000308
 800365c:	200002fe 	.word	0x200002fe
 8003660:	2000030c 	.word	0x2000030c
 8003664:	08009af8 	.word	0x08009af8
 8003668:	200001f4 	.word	0x200001f4
 800366c:	20000708 	.word	0x20000708
 8003670:	20000790 	.word	0x20000790

08003674 <HAL_GPIO_EXTI_Callback>:


// Interrupt handlers and SPI operation callbacks

void HAL_GPIO_EXTI_Callback(uint16_t n)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	80fb      	strh	r3, [r7, #6]
    rxTimestamp_us = timeNowUs();
 800367e:	f7ff fef3 	bl	8003468 <timeNowUs>
 8003682:	4603      	mov	r3, r0
 8003684:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003686:	6013      	str	r3, [r2, #0]

    inReset = false;
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_GPIO_EXTI_Callback+0x30>)
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
    rxReady = true;
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_GPIO_EXTI_Callback+0x34>)
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]

    // Start read, if possible
    spiActivate();
 8003694:	f7ff ff32 	bl	80034fc <spiActivate>
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000300 	.word	0x20000300
 80036a4:	20000304 	.word	0x20000304
 80036a8:	20000305 	.word	0x20000305

080036ac <EXTI15_10_IRQHandler>:

// Handle INTN Interrupt through STM32 HAL
// (It, in turn, calls HAL_GPIO_EXTI_Callback, above)
void EXTI15_10_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80036b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80036b4:	f003 ff7c 	bl	80075b0 <HAL_GPIO_EXTI_IRQHandler>
}
 80036b8:	bf00      	nop
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi1)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    if (isOpen)
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_SPI_TxRxCpltCallback+0x14>
    {
        spiCompleted();
 80036cc:	f7ff ff5a 	bl	8003584 <spiCompleted>
    }
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	200007a8 	.word	0x200007a8

080036dc <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi1)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    // Shouldn't happen
    while (1);
 80036e4:	e7fe      	b.n	80036e4 <HAL_SPI_ErrorCallback+0x8>

080036e6 <delayUs>:
//{
//    HAL_SPI_IRQHandler(&hspi1);
//}

void delayUs(uint32_t delay)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 80036ee:	f7ff febb 	bl	8003468 <timeNowUs>
 80036f2:	4603      	mov	r3, r0
 80036f4:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	60fb      	str	r3, [r7, #12]
    while ((now - start) < delay) {
 80036fa:	e003      	b.n	8003704 <delayUs+0x1e>
        now = timeNowUs();
 80036fc:	f7ff feb4 	bl	8003468 <timeNowUs>
 8003700:	4603      	mov	r3, r0
 8003702:	60bb      	str	r3, [r7, #8]
    while ((now - start) < delay) {
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	d8f5      	bhi.n	80036fc <delayUs+0x16>
    }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <resetDelayUs>:

void resetDelayUs(uint32_t delay)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
    volatile uint32_t now = timeNowUs();
 8003724:	f7ff fea0 	bl	8003468 <timeNowUs>
 8003728:	4603      	mov	r3, r0
 800372a:	60bb      	str	r3, [r7, #8]
    uint32_t start = now;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	60fb      	str	r3, [r7, #12]
    while (((now - start) < delay) && (inReset))
 8003730:	e003      	b.n	800373a <resetDelayUs+0x1e>
    {
        now = timeNowUs();
 8003732:	f7ff fe99 	bl	8003468 <timeNowUs>
 8003736:	4603      	mov	r3, r0
 8003738:	60bb      	str	r3, [r7, #8]
    while (((now - start) < delay) && (inReset))
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d904      	bls.n	8003750 <resetDelayUs+0x34>
 8003746:	4b04      	ldr	r3, [pc, #16]	; (8003758 <resetDelayUs+0x3c>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <resetDelayUs+0x16>
    }
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000304 	.word	0x20000304

0800375c <sh2_spi_hal_open>:

// ------------------------------------------------------------------------
// SH2 SPI Hal Methods

static int sh2_spi_hal_open(sh2_Hal_t *self)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
    int retval = SH2_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]

    if (isOpen)
 8003768:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <sh2_spi_hal_open+0x94>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <sh2_spi_hal_open+0x1a>
    {
        // Can't open if another instance is already open
        return SH2_ERR;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	e038      	b.n	80037e8 <sh2_spi_hal_open+0x8c>
    }

    isOpen = true;
 8003776:	4b1e      	ldr	r3, [pc, #120]	; (80037f0 <sh2_spi_hal_open+0x94>)
 8003778:	2201      	movs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]

    // Init hardware (false -> non-DFU config)
    hal_init_hw(false);
 800377c:	2000      	movs	r0, #0
 800377e:	f7ff fe9d 	bl	80034bc <hal_init_hw>

    // Hold in reset
    rstn(false);
 8003782:	2000      	movs	r0, #0
 8003784:	f7ff fe30 	bl	80033e8 <rstn>

    // deassert CSN
    csn(true);
 8003788:	2001      	movs	r0, #1
 800378a:	f7ff fe5d 	bl	8003448 <csn>

    // Clear rx, tx buffers
    rxBufLen = 0;
 800378e:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <sh2_spi_hal_open+0x98>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
    txBufLen = 0;
 8003794:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <sh2_spi_hal_open+0x9c>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
    rxDataReady = false;
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <sh2_spi_hal_open+0xa0>)
 800379c:	2200      	movs	r2, #0
 800379e:	701a      	strb	r2, [r3, #0]
    rxReady = false;
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <sh2_spi_hal_open+0xa4>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]

    inReset = true;  // will change back to false when INTN serviced
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <sh2_spi_hal_open+0xa8>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	701a      	strb	r2, [r3, #0]

    // Do dummy SPI operation
    // (First SPI op after reconfig has bad initial state of signals
    // so this is a throwaway operation.  Afterward, all is well.)
    spiState = SPI_DUMMY;
 80037ac:	4b16      	ldr	r3, [pc, #88]	; (8003808 <sh2_spi_hal_open+0xac>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
    spiDummyOp();
 80037b2:	f7ff fe6f 	bl	8003494 <spiDummyOp>
    spiState = SPI_IDLE;
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <sh2_spi_hal_open+0xac>)
 80037b8:	2203      	movs	r2, #3
 80037ba:	701a      	strb	r2, [r3, #0]

    // Delay for RESET_DELAY_US to ensure reset takes effect
    delayUs(RESET_DELAY_US);
 80037bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80037c0:	f7ff ff91 	bl	80036e6 <delayUs>

    // To boot in SHTP-SPI mode, must have PS1=1, PS0=1.
    // PS1 is set via jumper.
    // PS0 will be 1 PS1 jumper is 1 AND PS0_WAKEN sig is 1.
    // So we set PS0_WAKEN signal to 1
    ps0_waken(true);
 80037c4:	2001      	movs	r0, #1
 80037c6:	f7ff fe1f 	bl	8003408 <ps0_waken>
    ps1(true);
 80037ca:	2001      	movs	r0, #1
 80037cc:	f7ff fe2c 	bl	8003428 <ps1>

    // Deassert reset, boot in non-DFU mode
    bootn(true);
 80037d0:	2001      	movs	r0, #1
 80037d2:	f7ff fdf9 	bl	80033c8 <bootn>
    rstn(true);
 80037d6:	2001      	movs	r0, #1
 80037d8:	f7ff fe06 	bl	80033e8 <rstn>

    // enable interrupts
    enableInts();
 80037dc:	f7ff fe79 	bl	80034d2 <enableInts>

    // Wait for INTN to be asserted
    resetDelayUs(START_DELAY_US);
 80037e0:	480a      	ldr	r0, [pc, #40]	; (800380c <sh2_spi_hal_open+0xb0>)
 80037e2:	f7ff ff9b 	bl	800371c <resetDelayUs>

    return retval;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	200007a8 	.word	0x200007a8
 80037f4:	20000708 	.word	0x20000708
 80037f8:	20000790 	.word	0x20000790
 80037fc:	2000070c 	.word	0x2000070c
 8003800:	20000305 	.word	0x20000305
 8003804:	20000304 	.word	0x20000304
 8003808:	200002fe 	.word	0x200002fe
 800380c:	001e8480 	.word	0x001e8480

08003810 <sh2_spi_hal_close>:

static void sh2_spi_hal_close(sh2_Hal_t *self)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
    // Disable interrupts
    disableInts();
 8003818:	f7ff fe65 	bl	80034e6 <disableInts>

    // Set state machine to INIT state
    spiState = SPI_INIT;
 800381c:	4b15      	ldr	r3, [pc, #84]	; (8003874 <sh2_spi_hal_close+0x64>)
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]

    // Hold sensor hub in reset
    rstn(false);
 8003822:	2000      	movs	r0, #0
 8003824:	f7ff fde0 	bl	80033e8 <rstn>

    // deassert CSN
    csn(true);
 8003828:	2001      	movs	r0, #1
 800382a:	f7ff fe0d 	bl	8003448 <csn>

    // Deinit SPI peripheral
    HAL_SPI_DeInit(&hspi1);
 800382e:	4812      	ldr	r0, [pc, #72]	; (8003878 <sh2_spi_hal_close+0x68>)
 8003830:	f003 ff79 	bl	8007726 <HAL_SPI_DeInit>

    // Deinit timer
    __HAL_TIM_DISABLE(&htim2);
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <sh2_spi_hal_close+0x6c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a1a      	ldr	r2, [r3, #32]
 800383a:	f241 1311 	movw	r3, #4369	; 0x1111
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10f      	bne.n	8003864 <sh2_spi_hal_close+0x54>
 8003844:	4b0d      	ldr	r3, [pc, #52]	; (800387c <sh2_spi_hal_close+0x6c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6a1a      	ldr	r2, [r3, #32]
 800384a:	f240 4344 	movw	r3, #1092	; 0x444
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d107      	bne.n	8003864 <sh2_spi_hal_close+0x54>
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <sh2_spi_hal_close+0x6c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <sh2_spi_hal_close+0x6c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

    // No longer open
    isOpen = false;
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <sh2_spi_hal_close+0x70>)
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	200002fe 	.word	0x200002fe
 8003878:	200001f4 	.word	0x200001f4
 800387c:	20000258 	.word	0x20000258
 8003880:	200007a8 	.word	0x200007a8

08003884 <sh2_spi_hal_read>:

static int sh2_spi_hal_read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
    int retval = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]

    // If there is received data available...
    if (rxBufLen > 0)
 8003896:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <sh2_spi_hal_read+0x6c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d022      	beq.n	80038e4 <sh2_spi_hal_read+0x60>
    {
        // And if the data will fit in this buffer...
        if (len >= rxBufLen)
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <sh2_spi_hal_read+0x6c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d311      	bcc.n	80038cc <sh2_spi_hal_read+0x48>
        {
            // Copy data to the client buffer
            memcpy(pBuffer, rxBuf, rxBufLen);
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <sh2_spi_hal_read+0x6c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	4911      	ldr	r1, [pc, #68]	; (80038f4 <sh2_spi_hal_read+0x70>)
 80038b0:	68b8      	ldr	r0, [r7, #8]
 80038b2:	f005 fd79 	bl	80093a8 <memcpy>
            retval = rxBufLen;
 80038b6:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <sh2_spi_hal_read+0x6c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	617b      	str	r3, [r7, #20]

            // Set timestamp of that data
            *t = rxTimestamp_us;
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <sh2_spi_hal_read+0x74>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	601a      	str	r2, [r3, #0]

            // Clear rxBuf so we can receive again
            rxBufLen = 0;
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <sh2_spi_hal_read+0x6c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e005      	b.n	80038d8 <sh2_spi_hal_read+0x54>
        }
        else
        {
            // Discard what was read and return error because buffer was too small.
            retval = SH2_ERR_BAD_PARAM;
 80038cc:	f06f 0301 	mvn.w	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
            rxBufLen = 0;
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <sh2_spi_hal_read+0x6c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
        }

        // Now that rxBuf is empty, activate SPI processing to send any
        // potential write that was blocked.
        disableInts();
 80038d8:	f7ff fe05 	bl	80034e6 <disableInts>
        spiActivate();
 80038dc:	f7ff fe0e 	bl	80034fc <spiActivate>
        enableInts();
 80038e0:	f7ff fdf7 	bl	80034d2 <enableInts>
    }

    return retval;
 80038e4:	697b      	ldr	r3, [r7, #20]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000708 	.word	0x20000708
 80038f4:	20000308 	.word	0x20000308
 80038f8:	20000300 	.word	0x20000300

080038fc <sh2_spi_hal_write>:

static int sh2_spi_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
    int retval = SH2_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

    // Validate parameters
    if ((self == 0) || (len > sizeof(txBuf)) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <sh2_spi_hal_write+0x28>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d805      	bhi.n	8003924 <sh2_spi_hal_write+0x28>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <sh2_spi_hal_write+0x2e>
        ((len > 0) && (pBuffer == 0)))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <sh2_spi_hal_write+0x2e>
    {
        return SH2_ERR_BAD_PARAM;
 8003924:	f06f 0301 	mvn.w	r3, #1
 8003928:	e017      	b.n	800395a <sh2_spi_hal_write+0x5e>
    }

    // If tx buffer is not empty, return 0
    if (txBufLen != 0)
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <sh2_spi_hal_write+0x68>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <sh2_spi_hal_write+0x3a>
    {
        return 0;
 8003932:	2300      	movs	r3, #0
 8003934:	e011      	b.n	800395a <sh2_spi_hal_write+0x5e>
    }

    // Copy data to tx buffer
    memcpy(txBuf, pBuffer, len);
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	480b      	ldr	r0, [pc, #44]	; (8003968 <sh2_spi_hal_write+0x6c>)
 800393c:	f005 fd34 	bl	80093a8 <memcpy>
    txBufLen = len;
 8003940:	4a08      	ldr	r2, [pc, #32]	; (8003964 <sh2_spi_hal_write+0x68>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6013      	str	r3, [r2, #0]
    retval = len;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	617b      	str	r3, [r7, #20]

    // disable SH2 interrupts for a moment
    disableInts();
 800394a:	f7ff fdcc 	bl	80034e6 <disableInts>

    // Assert Wake
    ps0_waken(false);
 800394e:	2000      	movs	r0, #0
 8003950:	f7ff fd5a 	bl	8003408 <ps0_waken>

    // re-enable SH2 interrupts.
    enableInts();
 8003954:	f7ff fdbd 	bl	80034d2 <enableInts>

    return retval;
 8003958:	697b      	ldr	r3, [r7, #20]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000790 	.word	0x20000790
 8003968:	20000710 	.word	0x20000710

0800396c <sh2_spi_hal_getTimeUs>:

static uint32_t sh2_spi_hal_getTimeUs(sh2_Hal_t *self)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
    return timeNowUs();
 8003974:	f7ff fd78 	bl	8003468 <timeNowUs>
 8003978:	4603      	mov	r3, r0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <sh2_hal_init>:

// ------------------------------------------------------------------------
// Public methods

sh2_Hal_t *sh2_hal_init(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
    // Set up the HAL reference object for the client
    sh2Hal.open = sh2_spi_hal_open;
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <sh2_hal_init+0x30>)
 800398a:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <sh2_hal_init+0x34>)
 800398c:	601a      	str	r2, [r3, #0]
    sh2Hal.close = sh2_spi_hal_close;
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <sh2_hal_init+0x30>)
 8003990:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <sh2_hal_init+0x38>)
 8003992:	605a      	str	r2, [r3, #4]
    sh2Hal.read = sh2_spi_hal_read;
 8003994:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <sh2_hal_init+0x30>)
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <sh2_hal_init+0x3c>)
 8003998:	609a      	str	r2, [r3, #8]
    sh2Hal.write = sh2_spi_hal_write;
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <sh2_hal_init+0x30>)
 800399c:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <sh2_hal_init+0x40>)
 800399e:	60da      	str	r2, [r3, #12]
    sh2Hal.getTimeUs = sh2_spi_hal_getTimeUs;
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <sh2_hal_init+0x30>)
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <sh2_hal_init+0x44>)
 80039a4:	611a      	str	r2, [r3, #16]

    return &sh2Hal;
 80039a6:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <sh2_hal_init+0x30>)
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000794 	.word	0x20000794
 80039b8:	0800375d 	.word	0x0800375d
 80039bc:	08003811 	.word	0x08003811
 80039c0:	08003885 	.word	0x08003885
 80039c4:	080038fd 	.word	0x080038fd
 80039c8:	0800396d 	.word	0x0800396d

080039cc <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <opStart+0x18>
 80039de:	f06f 0302 	mvn.w	r3, #2
 80039e2:	e014      	b.n	8003a0e <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
 80039f8:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	61da      	str	r2, [r3, #28]
    }

    return rc;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	4613      	mov	r3, r2
 8003a22:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d006      	beq.n	8003a44 <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	4798      	blx	r3
    }
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00f      	beq.n	8003aa0 <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 8003a94:	e004      	b.n	8003aa0 <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 8003a96:	f04f 31ff 	mov.w	r1, #4294967295
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ffd6 	bl	8003a4c <opCompleted>
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	e00f      	b.n	8003ad8 <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <getReportLen+0x44>)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003ac0:	79fa      	ldrb	r2, [r7, #7]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d105      	bne.n	8003ad2 <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <getReportLen+0x44>)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	e006      	b.n	8003ae0 <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b2f      	cmp	r3, #47	; 0x2f
 8003adc:	d9ec      	bls.n	8003ab8 <getReportLen+0x10>
        }
    }

    return 0;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	08009ef8 	.word	0x08009ef8

08003af0 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 8094 	bne.w	8003c40 <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        return;
 8003b26:	e090      	b.n	8003c4a <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 8003b2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ffb4 	bl	8003aa8 <getReportLen>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 8003b44:	7dbb      	ldrb	r3, [r7, #22]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
            return;
 8003b58:	e077      	b.n	8003c4a <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	2bf1      	cmp	r3, #241	; 0xf1
 8003b5e:	d107      	bne.n	8003b70 <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 8003b60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	4413      	add	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	789b      	ldrb	r3, [r3, #2]
 8003b6c:	2b84      	cmp	r3, #132	; 0x84
 8003b6e:	e059      	b.n	8003c24 <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	2bfc      	cmp	r3, #252	; 0xfc
 8003b74:	d156      	bne.n	8003c24 <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d052      	beq.n	8003c24 <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 8003b7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	4413      	add	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 8003b86:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003b88:	2202      	movs	r2, #2
 8003b8a:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	785a      	ldrb	r2, [r3, #1]
 8003b90:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003b92:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	789b      	ldrb	r3, [r3, #2]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003ba8:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	789b      	ldrb	r3, [r3, #2]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 8003bbc:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003bbe:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	789b      	ldrb	r3, [r3, #2]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf14      	ite	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	2300      	moveq	r3, #0
 8003bd0:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 8003bd2:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003bd4:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	789b      	ldrb	r3, [r3, #2]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bf14      	ite	ne
 8003be2:	2301      	movne	r3, #1
 8003be4:	2300      	moveq	r3, #0
 8003be6:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003bea:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003bf2:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 8003bf4:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003bf6:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 8003bfe:	4a14      	ldr	r2, [pc, #80]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003c00:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 8003c08:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003c0a:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 8003c12:	4a0f      	ldr	r2, [pc, #60]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003c14:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c1e:	490c      	ldr	r1, [pc, #48]	; (8003c50 <sensorhubControlHdlr+0x160>)
 8003c20:	4610      	mov	r0, r2
 8003c22:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 8003c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	4413      	add	r3, r2
 8003c2a:	7dba      	ldrb	r2, [r7, #22]
 8003c2c:	b292      	uxth	r2, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	69f8      	ldr	r0, [r7, #28]
 8003c32:	f7ff fef0 	bl	8003a16 <opRx>
            cursor += reportLen;
 8003c36:	7dbb      	ldrb	r3, [r7, #22]
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c3c:	4413      	add	r3, r2
 8003c3e:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cursor < len) {
 8003c40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	f4ff af6f 	bcc.w	8003b28 <sensorhubControlHdlr+0x38>
        }
    }
}
 8003c4a:	3728      	adds	r7, #40	; 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000924 	.word	0x20000924

08003c54 <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	4610      	mov	r0, r2
 8003c72:	4798      	blx	r3
 8003c74:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 8003c76:	6839      	ldr	r1, [r7, #0]
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fea7 	bl	80039cc <opStart>
 8003c7e:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <opProcess+0x36>
        return status;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	e034      	b.n	8003cf4 <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 8003c8e:	e015      	b.n	8003cbc <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9e:	621a      	str	r2, [r3, #32]
            break;
 8003ca0:	e01b      	b.n	8003cda <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f002 f903 	bl	8005eb2 <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4798      	blx	r3
 8003cba:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0e1      	beq.n	8003c90 <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad2      	subs	r2, r2, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d3da      	bcc.n	8003c90 <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f06f 0205 	mvn.w	r2, #5
 8003cee:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 8003cfc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003d00:	b087      	sub	sp, #28
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <touSTimestamp+0x80>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d204      	bcs.n	8003d20 <touSTimestamp+0x24>
        rollovers++;
 8003d16:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <touSTimestamp+0x84>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <touSTimestamp+0x84>)
 8003d1e:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <touSTimestamp+0x80>)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 8003d26:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <touSTimestamp+0x84>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	469a      	mov	sl, r3
 8003d2e:	4693      	mov	fp, r2
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	4653      	mov	r3, sl
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4413      	add	r3, r2
 8003d46:	2264      	movs	r2, #100	; 0x64
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4413      	add	r3, r2
 8003d52:	2200      	movs	r2, #0
 8003d54:	461c      	mov	r4, r3
 8003d56:	4615      	mov	r5, r2
 8003d58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d5c:	eb12 0804 	adds.w	r8, r2, r4
 8003d60:	eb43 0905 	adc.w	r9, r3, r5
 8003d64:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 8003d68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000940 	.word	0x20000940
 8003d80:	20000944 	.word	0x20000944

08003d84 <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003d84:	b5b0      	push	{r4, r5, r7, lr}
 8003d86:	b0a0      	sub	sp, #128	; 0x80
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

    int32_t referenceDelta = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	67bb      	str	r3, [r7, #120]	; 0x78

    while (cursor < len) {
 8003d9e:	e099      	b.n	8003ed4 <sensorhubInputHdlr+0x150>
        // Get next report id
        uint8_t reportId = payload[cursor];
 8003da0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	4413      	add	r3, r2
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8003dae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fe78 	bl	8003aa8 <getReportLen>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
        if (reportLen == 0) {
 8003dbe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d107      	bne.n	8003dd6 <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8003dd4:	e084      	b.n	8003ee0 <sensorhubInputHdlr+0x15c>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 8003dd6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003dda:	2bfb      	cmp	r3, #251	; 0xfb
 8003ddc:	d10a      	bne.n	8003df4 <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 8003dde:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	4413      	add	r3, r2
 8003de6:	667b      	str	r3, [r7, #100]	; 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 8003de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dea:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003dee:	425b      	negs	r3, r3
 8003df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003df2:	e067      	b.n	8003ec4 <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 8003df4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003df8:	2bfa      	cmp	r3, #250	; 0xfa
 8003dfa:	d10b      	bne.n	8003e14 <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 8003dfc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	4413      	add	r3, r2
 8003e04:	66bb      	str	r3, [r7, #104]	; 0x68

                referenceDelta += rpt->timebase;
 8003e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e08:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e0e:	4413      	add	r3, r2
 8003e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e12:	e057      	b.n	8003ec4 <sensorhubInputHdlr+0x140>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 8003e14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003e18:	2bef      	cmp	r3, #239	; 0xef
 8003e1a:	d10b      	bne.n	8003e34 <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 8003e1c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	4413      	add	r3, r2
 8003e24:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8003e28:	b292      	uxth	r2, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff fdf2 	bl	8003a16 <opRx>
 8003e32:	e047      	b.n	8003ec4 <sensorhubInputHdlr+0x140>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 8003e34:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	673b      	str	r3, [r7, #112]	; 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 8003e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e40:	3302      	adds	r3, #2
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	019b      	lsls	r3, r3, #6
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e50:	3303      	adds	r3, #3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 8003e5c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003e60:	461a      	mov	r2, r3
 8003e62:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003e64:	6838      	ldr	r0, [r7, #0]
 8003e66:	f7ff ff49 	bl	8003cfc <touSTimestamp>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 8003e72:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8003e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e78:	4413      	add	r3, r2
 8003e7a:	2264      	movs	r2, #100	; 0x64
 8003e7c:	fb02 f303 	mul.w	r3, r2, r3
 8003e80:	17da      	asrs	r2, r3, #31
 8003e82:	461c      	mov	r4, r3
 8003e84:	4615      	mov	r5, r2
 8003e86:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 8003e8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003e8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                memcpy(event.report, pReport, reportLen);
 8003e92:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8003e96:	f107 0310 	add.w	r3, r7, #16
 8003e9a:	3312      	adds	r3, #18
 8003e9c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f005 fa82 	bl	80093a8 <memcpy>
                event.len = reportLen;
 8003ea4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003ea8:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <sensorhubInputHdlr+0x140>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ebc:	f107 0110 	add.w	r1, r7, #16
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 8003ec4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003ece:	4413      	add	r3, r2
 8003ed0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    while (cursor < len) {
 8003ed4:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	f4ff af60 	bcc.w	8003da0 <sensorhubInputHdlr+0x1c>
        }
    }
}
 8003ee0:	3780      	adds	r7, #128	; 0x80
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bdb0      	pop	{r4, r5, r7, pc}

08003ee6 <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	6978      	ldr	r0, [r7, #20]
 8003f02:	f7ff ff3f 	bl	8003d84 <sensorhubInputHdlr>
}
 8003f06:	bf00      	nop
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	6978      	ldr	r0, [r7, #20]
 8003f2a:	f7ff ff2b 	bl	8003d84 <sensorhubInputHdlr>
}
 8003f2e:	bf00      	nop
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003f36:	b5b0      	push	{r4, r5, r7, lr}
 8003f38:	b09c      	sub	sp, #112	; 0x70
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	66bb      	str	r3, [r7, #104]	; 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 8003f50:	232a      	movs	r3, #42	; 0x2a
 8003f52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    uint8_t reportLen = getReportLen(reportId);
 8003f56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fda4 	bl	8003aa8 <getReportLen>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    while (cursor < len) {
 8003f66:	e02d      	b.n	8003fc4 <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	461c      	mov	r4, r3
 8003f6e:	4615      	mov	r5, r2
 8003f70:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 8003f74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        memcpy(event.report, payload+cursor, reportLen);
 8003f7c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	18d1      	adds	r1, r2, r3
 8003f84:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8003f88:	f107 0310 	add.w	r3, r7, #16
 8003f8c:	3312      	adds	r3, #18
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f005 fa0a 	bl	80093a8 <memcpy>
        event.len = reportLen;
 8003f94:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003f98:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 8003f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 8003fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003faa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003fac:	f107 0110 	add.w	r1, r7, #16
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4798      	blx	r3
        }

        cursor += reportLen;
 8003fb4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    while (cursor < len) {
 8003fc4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d3cc      	bcc.n	8003f68 <sensorhubInputGyroRvHdlr+0x32>
    }
}
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	3770      	adds	r7, #112	; 0x70
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bdb0      	pop	{r4, r5, r7, pc}

08003fd8 <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d007      	beq.n	8004002 <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        return;
 8004000:	e021      	b.n	8004046 <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d114      	bne.n	8004034 <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2201      	movs	r2, #1
 800400e:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 8004010:	6978      	ldr	r0, [r7, #20]
 8004012:	f7ff fd2d 	bl	8003a70 <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 8004016:	4b0d      	ldr	r3, [pc, #52]	; (800404c <executableDeviceHdlr+0x74>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00f      	beq.n	8004044 <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800402c:	4907      	ldr	r1, [pc, #28]	; (800404c <executableDeviceHdlr+0x74>)
 800402e:	4610      	mov	r0, r2
 8004030:	4798      	blx	r3
            }
            break;
 8004032:	e007      	b.n	8004044 <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
            break;
 8004042:	e000      	b.n	8004046 <executableDeviceHdlr+0x6e>
            break;
 8004044:	bf00      	nop
    }
}
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20000924 	.word	0x20000924

08004050 <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6858      	ldr	r0, [r3, #4]
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	2102      	movs	r1, #2
 8004068:	f001 fef2 	bl	8005e50 <shtp_send>
 800406c:	4603      	mov	r3, r0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b08a      	sub	sp, #40	; 0x28
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <setSensorConfigStart+0x28>
 8004092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004096:	f043 0302 	orr.w	r3, r3, #2
 800409a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	785b      	ldrb	r3, [r3, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <setSensorConfigStart+0x3c>
 80040a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	789b      	ldrb	r3, [r3, #2]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <setSensorConfigStart+0x50>
 80040ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040be:	f043 0304 	orr.w	r3, r3, #4
 80040c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	78db      	ldrb	r3, [r3, #3]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <setSensorConfigStart+0x64>
 80040ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d2:	f043 0308 	orr.w	r3, r3, #8
 80040d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	791b      	ldrb	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <setSensorConfigStart+0x78>
 80040e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040e6:	f043 0310 	orr.w	r3, r3, #16
 80040ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    memset(&req, 0, sizeof(req));
 80040ee:	f107 0308 	add.w	r3, r7, #8
 80040f2:	2211      	movs	r2, #17
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f005 f964 	bl	80093c4 <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 80040fc:	23fd      	movs	r3, #253	; 0xfd
 80040fe:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004106:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 8004108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800410c:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	88db      	ldrh	r3, [r3, #6]
 8004112:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 800412e:	f107 0308 	add.w	r3, r7, #8
 8004132:	2211      	movs	r2, #17
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ff8a 	bl	8004050 <sendCtrl>
 800413c:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 800413e:	69f9      	ldr	r1, [r7, #28]
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fc83 	bl	8003a4c <opCompleted>

    return rc;
 8004146:	69fb      	ldr	r3, [r7, #28]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <shtpEventCallback+0x3c>)
 800415e:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <shtpEventCallback+0x40>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 8004166:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <shtpEventCallback+0x40>)
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	2b00      	cmp	r3, #0
 8004172:	d006      	beq.n	8004182 <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800417c:	4904      	ldr	r1, [pc, #16]	; (8004190 <shtpEventCallback+0x40>)
 800417e:	4610      	mov	r0, r2
 8004180:	4798      	blx	r3
    }
}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200007ac 	.word	0x200007ac
 8004190:	20000924 	.word	0x20000924

08004194 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 80041a0:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <sh2_open+0x114>)
 80041a2:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <sh2_open+0x1c>
 80041aa:	f06f 0301 	mvn.w	r3, #1
 80041ae:	e077      	b.n	80042a0 <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 80041b0:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80041b4:	2100      	movs	r1, #0
 80041b6:	69b8      	ldr	r0, [r7, #24]
 80041b8:	f005 f904 	bl	80093c4 <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2200      	movs	r2, #0
 80041c0:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
    pSh2->eventCookie = eventCookie;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	63da      	str	r2, [r3, #60]	; 0x3c
    pSh2->sensorCallback = 0;
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2200      	movs	r2, #0
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = 0;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2200      	movs	r2, #0
 80041de:	645a      	str	r2, [r3, #68]	; 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fdbb 	bl	8005d60 <shtp_open>
 80041ea:	4602      	mov	r2, r0
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
 80041fc:	e050      	b.n	80042a0 <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4929      	ldr	r1, [pc, #164]	; (80042ac <sh2_open+0x118>)
 8004206:	4618      	mov	r0, r3
 8004208:	f001 fdde 	bl	8005dc8 <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6858      	ldr	r0, [r3, #4]
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <sh2_open+0x11c>)
 8004214:	2102      	movs	r1, #2
 8004216:	f001 fdeb 	bl	8005df0 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	6858      	ldr	r0, [r3, #4]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	4a24      	ldr	r2, [pc, #144]	; (80042b4 <sh2_open+0x120>)
 8004222:	2103      	movs	r1, #3
 8004224:	f001 fde4 	bl	8005df0 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6858      	ldr	r0, [r3, #4]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <sh2_open+0x124>)
 8004230:	2104      	movs	r1, #4
 8004232:	f001 fddd 	bl	8005df0 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	6858      	ldr	r0, [r3, #4]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <sh2_open+0x128>)
 800423e:	2105      	movs	r1, #5
 8004240:	f001 fdd6 	bl	8005df0 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6858      	ldr	r0, [r3, #4]
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <sh2_open+0x12c>)
 800424c:	2101      	movs	r1, #1
 800424e:	f001 fdcf 	bl	8005df0 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	4610      	mov	r0, r2
 800425e:	4798      	blx	r3
 8004260:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8004266:	e00c      	b.n	8004282 <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4618      	mov	r0, r3
 800426e:	f001 fe20 	bl	8005eb2 <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	4610      	mov	r0, r2
 800427e:	4798      	blx	r3
 8004280:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <sh2_open+0x130>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d807      	bhi.n	800429e <sh2_open+0x10a>
           (!pSh2->resetComplete))
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	7a1b      	ldrb	r3, [r3, #8]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f083 0301 	eor.w	r3, r3, #1
 8004298:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e4      	bne.n	8004268 <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	200007ac 	.word	0x200007ac
 80042ac:	08004151 	.word	0x08004151
 80042b0:	08003af1 	.word	0x08003af1
 80042b4:	08003ee7 	.word	0x08003ee7
 80042b8:	08003f0f 	.word	0x08003f0f
 80042bc:	08003f37 	.word	0x08003f37
 80042c0:	08003fd9 	.word	0x08003fd9
 80042c4:	00030d3f 	.word	0x00030d3f

080042c8 <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 80042ce:	4b07      	ldr	r3, [pc, #28]	; (80042ec <sh2_service+0x24>)
 80042d0:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 fde7 	bl	8005eb2 <shtp_service>
    }
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	200007ac 	.word	0x200007ac

080042f0 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <sh2_setSensorCallback+0x28>)
 80042fc:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
    pSh2->sensorCookie = cookie;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	645a      	str	r2, [r3, #68]	; 0x44

    return SH2_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	200007ac 	.word	0x200007ac

0800431c <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <sh2_setSensorConfig+0x4c>)
 800432a:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d102      	bne.n	800433a <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 8004334:	f04f 33ff 	mov.w	r3, #4294967295
 8004338:	e012      	b.n	8004360 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3324      	adds	r3, #36	; 0x24
 800433e:	2210      	movs	r2, #16
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f005 f83e 	bl	80093c4 <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	79fa      	ldrb	r2, [r7, #7]
 800434c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 8004356:	4905      	ldr	r1, [pc, #20]	; (800436c <sh2_setSensorConfig+0x50>)
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff fc7b 	bl	8003c54 <opProcess>
 800435e:	4603      	mov	r3, r0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	200007ac 	.word	0x200007ac
 800436c:	08009f58 	.word	0x08009f58

08004370 <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	7c5a      	ldrb	r2, [r3, #17]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b2a      	cmp	r3, #42	; 0x2a
 8004398:	d00b      	beq.n	80043b2 <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	7cda      	ldrb	r2, [r3, #19]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	7d1b      	ldrb	r3, [r3, #20]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	709a      	strb	r2, [r3, #2]
 80043b0:	e005      	b.n	80043be <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	2b2d      	cmp	r3, #45	; 0x2d
 80043c6:	f200 8155 	bhi.w	8004674 <sh2_decodeSensorEvent+0x304>
 80043ca:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <sh2_decodeSensorEvent+0x60>)
 80043cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d0:	08004495 	.word	0x08004495
 80043d4:	080044c5 	.word	0x080044c5
 80043d8:	080044e9 	.word	0x080044e9
 80043dc:	080044a1 	.word	0x080044a1
 80043e0:	08004501 	.word	0x08004501
 80043e4:	080044ad 	.word	0x080044ad
 80043e8:	080044d1 	.word	0x080044d1
 80043ec:	0800450d 	.word	0x0800450d
 80043f0:	08004519 	.word	0x08004519
 80043f4:	08004525 	.word	0x08004525
 80043f8:	08004531 	.word	0x08004531
 80043fc:	0800453d 	.word	0x0800453d
 8004400:	08004549 	.word	0x08004549
 8004404:	08004555 	.word	0x08004555
 8004408:	080044f5 	.word	0x080044f5
 800440c:	0800456d 	.word	0x0800456d
 8004410:	08004585 	.word	0x08004585
 8004414:	08004591 	.word	0x08004591
 8004418:	0800459d 	.word	0x0800459d
 800441c:	08004489 	.word	0x08004489
 8004420:	080044b9 	.word	0x080044b9
 8004424:	080044dd 	.word	0x080044dd
 8004428:	08004561 	.word	0x08004561
 800442c:	08004579 	.word	0x08004579
 8004430:	080045a9 	.word	0x080045a9
 8004434:	080045b5 	.word	0x080045b5
 8004438:	080045c1 	.word	0x080045c1
 800443c:	080045cd 	.word	0x080045cd
 8004440:	08004675 	.word	0x08004675
 8004444:	080045d9 	.word	0x080045d9
 8004448:	080045e5 	.word	0x080045e5
 800444c:	080045f1 	.word	0x080045f1
 8004450:	080045fd 	.word	0x080045fd
 8004454:	08004609 	.word	0x08004609
 8004458:	08004615 	.word	0x08004615
 800445c:	08004675 	.word	0x08004675
 8004460:	08004675 	.word	0x08004675
 8004464:	08004675 	.word	0x08004675
 8004468:	08004675 	.word	0x08004675
 800446c:	08004621 	.word	0x08004621
 8004470:	0800462d 	.word	0x0800462d
 8004474:	08004639 	.word	0x08004639
 8004478:	08004645 	.word	0x08004645
 800447c:	08004651 	.word	0x08004651
 8004480:	0800465d 	.word	0x0800465d
 8004484:	08004669 	.word	0x08004669
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 8004488:	6839      	ldr	r1, [r7, #0]
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f8fc 	bl	8004688 <decodeRawAccelerometer>
 8004490:	60f8      	str	r0, [r7, #12]
            break;
 8004492:	e0f3      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 8004494:	6839      	ldr	r1, [r7, #0]
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f924 	bl	80046e4 <decodeAccelerometer>
 800449c:	60f8      	str	r0, [r7, #12]
            break;
 800449e:	e0ed      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 80044a0:	6839      	ldr	r1, [r7, #0]
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f95e 	bl	8004764 <decodeLinearAcceleration>
 80044a8:	60f8      	str	r0, [r7, #12]
            break;
 80044aa:	e0e7      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f998 	bl	80047e4 <decodeGravity>
 80044b4:	60f8      	str	r0, [r7, #12]
            break;
 80044b6:	e0e1      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f9d2 	bl	8004864 <decodeRawGyroscope>
 80044c0:	60f8      	str	r0, [r7, #12]
            break;
 80044c2:	e0db      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa04 	bl	80048d4 <decodeGyroscopeCalibrated>
 80044cc:	60f8      	str	r0, [r7, #12]
            break;
 80044ce:	e0d5      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fa3e 	bl	8004954 <decodeGyroscopeUncal>
 80044d8:	60f8      	str	r0, [r7, #12]
            break;
 80044da:	e0cf      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 80044dc:	6839      	ldr	r1, [r7, #0]
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 faaa 	bl	8004a38 <decodeRawMagnetometer>
 80044e4:	60f8      	str	r0, [r7, #12]
            break;
 80044e6:	e0c9      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 80044e8:	6839      	ldr	r1, [r7, #0]
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fad2 	bl	8004a94 <decodeMagneticFieldCalibrated>
 80044f0:	60f8      	str	r0, [r7, #12]
            break;
 80044f2:	e0c3      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 80044f4:	6839      	ldr	r1, [r7, #0]
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fb0c 	bl	8004b14 <decodeMagneticFieldUncal>
 80044fc:	60f8      	str	r0, [r7, #12]
            break;
 80044fe:	e0bd      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fb78 	bl	8004bf8 <decodeRotationVector>
 8004508:	60f8      	str	r0, [r7, #12]
            break;
 800450a:	e0b7      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 800450c:	6839      	ldr	r1, [r7, #0]
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fbd6 	bl	8004cc0 <decodeGameRotationVector>
 8004514:	60f8      	str	r0, [r7, #12]
            break;
 8004516:	e0b1      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fc20 	bl	8004d60 <decodeGeomagneticRotationVector>
 8004520:	60f8      	str	r0, [r7, #12]
            break;
 8004522:	e0ab      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 8004524:	6839      	ldr	r1, [r7, #0]
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fc7e 	bl	8004e28 <decodePressure>
 800452c:	60f8      	str	r0, [r7, #12]
            break;
 800452e:	e0a5      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 8004530:	6839      	ldr	r1, [r7, #0]
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fc94 	bl	8004e60 <decodeAmbientLight>
 8004538:	60f8      	str	r0, [r7, #12]
            break;
 800453a:	e09f      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fcaa 	bl	8004e98 <decodeHumidity>
 8004544:	60f8      	str	r0, [r7, #12]
            break;
 8004546:	e099      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fcc2 	bl	8004ed4 <decodeProximity>
 8004550:	60f8      	str	r0, [r7, #12]
            break;
 8004552:	e093      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fcda 	bl	8004f10 <decodeTemperature>
 800455c:	60f8      	str	r0, [r7, #12]
            break;
 800455e:	e08d      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fcf2 	bl	8004f4c <decodeReserved>
 8004568:	60f8      	str	r0, [r7, #12]
            break;
 800456a:	e087      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 800456c:	6839      	ldr	r1, [r7, #0]
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fd0a 	bl	8004f88 <decodeTapDetector>
 8004574:	60f8      	str	r0, [r7, #12]
            break;
 8004576:	e081      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 8004578:	6839      	ldr	r1, [r7, #0]
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fd14 	bl	8004fa8 <decodeStepDetector>
 8004580:	60f8      	str	r0, [r7, #12]
            break;
 8004582:	e07b      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 8004584:	6839      	ldr	r1, [r7, #0]
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fd20 	bl	8004fcc <decodeStepCounter>
 800458c:	60f8      	str	r0, [r7, #12]
            break;
 800458e:	e075      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fd35 	bl	8005002 <decodeSignificantMotion>
 8004598:	60f8      	str	r0, [r7, #12]
            break;
 800459a:	e06f      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 800459c:	6839      	ldr	r1, [r7, #0]
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fd42 	bl	8005028 <decodeStabilityClassifier>
 80045a4:	60f8      	str	r0, [r7, #12]
            break;
 80045a6:	e069      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fd4c 	bl	8005048 <decodeShakeDetector>
 80045b0:	60f8      	str	r0, [r7, #12]
            break;
 80045b2:	e063      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fd59 	bl	800506e <decodeFlipDetector>
 80045bc:	60f8      	str	r0, [r7, #12]
            break;
 80045be:	e05d      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 80045c0:	6839      	ldr	r1, [r7, #0]
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fd66 	bl	8005094 <decodePickupDetector>
 80045c8:	60f8      	str	r0, [r7, #12]
            break;
 80045ca:	e057      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 80045cc:	6839      	ldr	r1, [r7, #0]
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fd73 	bl	80050ba <decodeStabilityDetector>
 80045d4:	60f8      	str	r0, [r7, #12]
            break;
 80045d6:	e051      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fd80 	bl	80050e0 <decodePersonalActivityClassifier>
 80045e0:	60f8      	str	r0, [r7, #12]
            break;
 80045e2:	e04b      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 80045e4:	6839      	ldr	r1, [r7, #0]
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fdad 	bl	8005146 <decodeSleepDetector>
 80045ec:	60f8      	str	r0, [r7, #12]
            break;
 80045ee:	e045      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fdb7 	bl	8005166 <decodeTiltDetector>
 80045f8:	60f8      	str	r0, [r7, #12]
            break;
 80045fa:	e03f      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fdc4 	bl	800518c <decodePocketDetector>
 8004604:	60f8      	str	r0, [r7, #12]
            break;
 8004606:	e039      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fdd1 	bl	80051b2 <decodeCircleDetector>
 8004610:	60f8      	str	r0, [r7, #12]
            break;
 8004612:	e033      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fdde 	bl	80051d8 <decodeHeartRateMonitor>
 800461c:	60f8      	str	r0, [r7, #12]
            break;
 800461e:	e02d      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fdec 	bl	8005200 <decodeArvrStabilizedRV>
 8004628:	60f8      	str	r0, [r7, #12]
            break;
 800462a:	e027      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 800462c:	6839      	ldr	r1, [r7, #0]
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fe4a 	bl	80052c8 <decodeArvrStabilizedGRV>
 8004634:	60f8      	str	r0, [r7, #12]
            break;
 8004636:	e021      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 8004638:	6839      	ldr	r1, [r7, #0]
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fe94 	bl	8005368 <decodeGyroIntegratedRV>
 8004640:	60f8      	str	r0, [r7, #12]
            break;
 8004642:	e01b      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 ff14 	bl	8005474 <decodeIZroRequest>
 800464c:	60f8      	str	r0, [r7, #12]
            break;
 800464e:	e015      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 ff22 	bl	800549c <decodeRawOptFlow>
 8004658:	60f8      	str	r0, [r7, #12]
            break;
 800465a:	e00f      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 800465c:	6839      	ldr	r1, [r7, #0]
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 ff9a 	bl	8005598 <decodeDeadReckoningPose>
 8004664:	60f8      	str	r0, [r7, #12]
            break;
 8004666:	e009      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f001 f87e 	bl	800576c <decodeWheelEncoder>
 8004670:	60f8      	str	r0, [r7, #12]
            break;
 8004672:	e003      	b.n	800467c <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
 8004678:	60fb      	str	r3, [r7, #12]
            break;
 800467a:	bf00      	nop
    }

    return rc;
 800467c:	68fb      	ldr	r3, [r7, #12]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop

08004688 <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	3316      	adds	r3, #22
 8004696:	4618      	mov	r0, r3
 8004698:	f001 f8d9 	bl	800584e <read16>
 800469c:	4603      	mov	r3, r0
 800469e:	461a      	mov	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	3318      	adds	r3, #24
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f8d0 	bl	800584e <read16>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	331a      	adds	r3, #26
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 f8c7 	bl	800584e <read16>
 80046c0:	4603      	mov	r3, r0
 80046c2:	461a      	mov	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	331e      	adds	r3, #30
 80046cc:	4618      	mov	r0, r3
 80046ce:	f001 f8d4 	bl	800587a <read32>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	3316      	adds	r3, #22
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 f8ab 	bl	800584e <read16>
 80046f8:	4603      	mov	r3, r0
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004702:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004760 <decodeAccelerometer+0x7c>
 8004706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	3318      	adds	r3, #24
 8004714:	4618      	mov	r0, r3
 8004716:	f001 f89a 	bl	800584e <read16>
 800471a:	4603      	mov	r3, r0
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004724:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004760 <decodeAccelerometer+0x7c>
 8004728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	331a      	adds	r3, #26
 8004736:	4618      	mov	r0, r3
 8004738:	f001 f889 	bl	800584e <read16>
 800473c:	4603      	mov	r3, r0
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004746:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004760 <decodeAccelerometer+0x7c>
 800474a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	3b800000 	.word	0x3b800000

08004764 <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	3316      	adds	r3, #22
 8004772:	4618      	mov	r0, r3
 8004774:	f001 f86b 	bl	800584e <read16>
 8004778:	4603      	mov	r3, r0
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004782:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80047e0 <decodeLinearAcceleration+0x7c>
 8004786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	3318      	adds	r3, #24
 8004794:	4618      	mov	r0, r3
 8004796:	f001 f85a 	bl	800584e <read16>
 800479a:	4603      	mov	r3, r0
 800479c:	ee07 3a90 	vmov	s15, r3
 80047a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80047e0 <decodeLinearAcceleration+0x7c>
 80047a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	331a      	adds	r3, #26
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 f849 	bl	800584e <read16>
 80047bc:	4603      	mov	r3, r0
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80047e0 <decodeLinearAcceleration+0x7c>
 80047ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	3b800000 	.word	0x3b800000

080047e4 <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	3316      	adds	r3, #22
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 f82b 	bl	800584e <read16>
 80047f8:	4603      	mov	r3, r0
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004802:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004860 <decodeGravity+0x7c>
 8004806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	3318      	adds	r3, #24
 8004814:	4618      	mov	r0, r3
 8004816:	f001 f81a 	bl	800584e <read16>
 800481a:	4603      	mov	r3, r0
 800481c:	ee07 3a90 	vmov	s15, r3
 8004820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004824:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004860 <decodeGravity+0x7c>
 8004828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	331a      	adds	r3, #26
 8004836:	4618      	mov	r0, r3
 8004838:	f001 f809 	bl	800584e <read16>
 800483c:	4603      	mov	r3, r0
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004846:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004860 <decodeGravity+0x7c>
 800484a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	3b800000 	.word	0x3b800000

08004864 <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	3316      	adds	r3, #22
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ffeb 	bl	800584e <read16>
 8004878:	4603      	mov	r3, r0
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	3318      	adds	r3, #24
 8004884:	4618      	mov	r0, r3
 8004886:	f000 ffe2 	bl	800584e <read16>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	331a      	adds	r3, #26
 8004896:	4618      	mov	r0, r3
 8004898:	f000 ffd9 	bl	800584e <read16>
 800489c:	4603      	mov	r3, r0
 800489e:	461a      	mov	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	331c      	adds	r3, #28
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 ffd0 	bl	800584e <read16>
 80048ae:	4603      	mov	r3, r0
 80048b0:	461a      	mov	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	331e      	adds	r3, #30
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 ffdd 	bl	800587a <read32>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	3316      	adds	r3, #22
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 ffb3 	bl	800584e <read16>
 80048e8:	4603      	mov	r3, r0
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048f2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004950 <decodeGyroscopeCalibrated+0x7c>
 80048f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	3318      	adds	r3, #24
 8004904:	4618      	mov	r0, r3
 8004906:	f000 ffa2 	bl	800584e <read16>
 800490a:	4603      	mov	r3, r0
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004914:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004950 <decodeGyroscopeCalibrated+0x7c>
 8004918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	331a      	adds	r3, #26
 8004926:	4618      	mov	r0, r3
 8004928:	f000 ff91 	bl	800584e <read16>
 800492c:	4603      	mov	r3, r0
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004936:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004950 <decodeGyroscopeCalibrated+0x7c>
 800493a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	3b000000 	.word	0x3b000000

08004954 <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	3316      	adds	r3, #22
 8004962:	4618      	mov	r0, r3
 8004964:	f000 ff73 	bl	800584e <read16>
 8004968:	4603      	mov	r3, r0
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004972:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004a34 <decodeGyroscopeUncal+0xe0>
 8004976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	3318      	adds	r3, #24
 8004984:	4618      	mov	r0, r3
 8004986:	f000 ff62 	bl	800584e <read16>
 800498a:	4603      	mov	r3, r0
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004994:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004a34 <decodeGyroscopeUncal+0xe0>
 8004998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	331a      	adds	r3, #26
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 ff51 	bl	800584e <read16>
 80049ac:	4603      	mov	r3, r0
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004a34 <decodeGyroscopeUncal+0xe0>
 80049ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	331c      	adds	r3, #28
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 ff40 	bl	800584e <read16>
 80049ce:	4603      	mov	r3, r0
 80049d0:	ee07 3a90 	vmov	s15, r3
 80049d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049d8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004a34 <decodeGyroscopeUncal+0xe0>
 80049dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	331e      	adds	r3, #30
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 ff2f 	bl	800584e <read16>
 80049f0:	4603      	mov	r3, r0
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049fa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004a34 <decodeGyroscopeUncal+0xe0>
 80049fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	3320      	adds	r3, #32
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 ff1e 	bl	800584e <read16>
 8004a12:	4603      	mov	r3, r0
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a1c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004a34 <decodeGyroscopeUncal+0xe0>
 8004a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	3b000000 	.word	0x3b000000

08004a38 <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	3316      	adds	r3, #22
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 ff01 	bl	800584e <read16>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	3318      	adds	r3, #24
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fef8 	bl	800584e <read16>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	461a      	mov	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	331a      	adds	r3, #26
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 feef 	bl	800584e <read16>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461a      	mov	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	331e      	adds	r3, #30
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fefc 	bl	800587a <read32>
 8004a82:	4603      	mov	r3, r0
 8004a84:	461a      	mov	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	3316      	adds	r3, #22
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fed3 	bl	800584e <read16>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ab2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004b10 <decodeMagneticFieldCalibrated+0x7c>
 8004ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	3318      	adds	r3, #24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fec2 	bl	800584e <read16>
 8004aca:	4603      	mov	r3, r0
 8004acc:	ee07 3a90 	vmov	s15, r3
 8004ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ad4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004b10 <decodeMagneticFieldCalibrated+0x7c>
 8004ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	331a      	adds	r3, #26
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 feb1 	bl	800584e <read16>
 8004aec:	4603      	mov	r3, r0
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004b10 <decodeMagneticFieldCalibrated+0x7c>
 8004afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	3d800000 	.word	0x3d800000

08004b14 <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	3316      	adds	r3, #22
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fe93 	bl	800584e <read16>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b32:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004bf4 <decodeMagneticFieldUncal+0xe0>
 8004b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	3318      	adds	r3, #24
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fe82 	bl	800584e <read16>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	ee07 3a90 	vmov	s15, r3
 8004b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b54:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004bf4 <decodeMagneticFieldUncal+0xe0>
 8004b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	331a      	adds	r3, #26
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fe71 	bl	800584e <read16>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b76:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004bf4 <decodeMagneticFieldUncal+0xe0>
 8004b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	331c      	adds	r3, #28
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fe60 	bl	800584e <read16>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	ee07 3a90 	vmov	s15, r3
 8004b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b98:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004bf4 <decodeMagneticFieldUncal+0xe0>
 8004b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	331e      	adds	r3, #30
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fe4f 	bl	800584e <read16>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bba:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004bf4 <decodeMagneticFieldUncal+0xe0>
 8004bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	3320      	adds	r3, #32
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fe3e 	bl	800584e <read16>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	ee07 3a90 	vmov	s15, r3
 8004bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bdc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004bf4 <decodeMagneticFieldUncal+0xe0>
 8004be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    return SH2_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	3d800000 	.word	0x3d800000

08004bf8 <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	3316      	adds	r3, #22
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fe21 	bl	800584e <read16>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c16:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004cb8 <decodeRotationVector+0xc0>
 8004c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	3318      	adds	r3, #24
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fe10 	bl	800584e <read16>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c38:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004cb8 <decodeRotationVector+0xc0>
 8004c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	331a      	adds	r3, #26
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fdff 	bl	800584e <read16>
 8004c50:	4603      	mov	r3, r0
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c5a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004cb8 <decodeRotationVector+0xc0>
 8004c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	331c      	adds	r3, #28
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fdee 	bl	800584e <read16>
 8004c72:	4603      	mov	r3, r0
 8004c74:	ee07 3a90 	vmov	s15, r3
 8004c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c7c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004cb8 <decodeRotationVector+0xc0>
 8004c80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	331e      	adds	r3, #30
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fddd 	bl	800584e <read16>
 8004c94:	4603      	mov	r3, r0
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c9e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004cbc <decodeRotationVector+0xc4>
 8004ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	38800000 	.word	0x38800000
 8004cbc:	39800000 	.word	0x39800000

08004cc0 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	3316      	adds	r3, #22
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fdbd 	bl	800584e <read16>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cde:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004d5c <decodeGameRotationVector+0x9c>
 8004ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	3318      	adds	r3, #24
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fdac 	bl	800584e <read16>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	ee07 3a90 	vmov	s15, r3
 8004cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d00:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004d5c <decodeGameRotationVector+0x9c>
 8004d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	331a      	adds	r3, #26
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fd9b 	bl	800584e <read16>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d22:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004d5c <decodeGameRotationVector+0x9c>
 8004d26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	331c      	adds	r3, #28
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fd8a 	bl	800584e <read16>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	ee07 3a90 	vmov	s15, r3
 8004d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d44:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004d5c <decodeGameRotationVector+0x9c>
 8004d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	38800000 	.word	0x38800000

08004d60 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	3316      	adds	r3, #22
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fd6d 	bl	800584e <read16>
 8004d74:	4603      	mov	r3, r0
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004e20 <decodeGeomagneticRotationVector+0xc0>
 8004d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	3318      	adds	r3, #24
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fd5c 	bl	800584e <read16>
 8004d96:	4603      	mov	r3, r0
 8004d98:	ee07 3a90 	vmov	s15, r3
 8004d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004da0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004e20 <decodeGeomagneticRotationVector+0xc0>
 8004da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	331a      	adds	r3, #26
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fd4b 	bl	800584e <read16>
 8004db8:	4603      	mov	r3, r0
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004e20 <decodeGeomagneticRotationVector+0xc0>
 8004dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	331c      	adds	r3, #28
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fd3a 	bl	800584e <read16>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	ee07 3a90 	vmov	s15, r3
 8004de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004e20 <decodeGeomagneticRotationVector+0xc0>
 8004de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	331e      	adds	r3, #30
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fd29 	bl	800584e <read16>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e06:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004e24 <decodeGeomagneticRotationVector+0xc4>
 8004e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	38800000 	.word	0x38800000
 8004e24:	39800000 	.word	0x39800000

08004e28 <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	3316      	adds	r3, #22
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fd1f 	bl	800587a <read32>
 8004e3c:	ee07 0a90 	vmov	s15, r0
 8004e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e44:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004e5c <decodePressure+0x34>
 8004e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	35800000 	.word	0x35800000

08004e60 <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	3316      	adds	r3, #22
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fd03 	bl	800587a <read32>
 8004e74:	ee07 0a90 	vmov	s15, r0
 8004e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e7c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004e94 <decodeAmbientLight+0x34>
 8004e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	3b800000 	.word	0x3b800000

08004e98 <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	3316      	adds	r3, #22
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fcd1 	bl	800584e <read16>
 8004eac:	4603      	mov	r3, r0
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004ed0 <decodeHumidity+0x38>
 8004eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	3b800000 	.word	0x3b800000

08004ed4 <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	3316      	adds	r3, #22
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fcb3 	bl	800584e <read16>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ef2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f0c <decodeProximity+0x38>
 8004ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	3d800000 	.word	0x3d800000

08004f10 <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	3316      	adds	r3, #22
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fc95 	bl	800584e <read16>
 8004f24:	4603      	mov	r3, r0
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f2e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f48 <decodeTemperature+0x38>
 8004f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	3c000000 	.word	0x3c000000

08004f4c <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	3316      	adds	r3, #22
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fc77 	bl	800584e <read16>
 8004f60:	4603      	mov	r3, r0
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f6a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004f84 <decodeReserved+0x38>
 8004f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	3c000000 	.word	0x3c000000

08004f88 <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	7d9a      	ldrb	r2, [r3, #22]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	3316      	adds	r3, #22
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fc1c 	bl	80057f4 <readu32>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	3316      	adds	r3, #22
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fc0a 	bl	80057f4 <readu32>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	331a      	adds	r3, #26
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fc02 	bl	80057f4 <readu32>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	3316      	adds	r3, #22
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fbd9 	bl	80057c8 <readu16>
 8005016:	4603      	mov	r3, r0
 8005018:	461a      	mov	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	7d9a      	ldrb	r2, [r3, #22]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	3316      	adds	r3, #22
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fbb6 	bl	80057c8 <readu16>
 800505c:	4603      	mov	r3, r0
 800505e:	461a      	mov	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	3316      	adds	r3, #22
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fba3 	bl	80057c8 <readu16>
 8005082:	4603      	mov	r3, r0
 8005084:	461a      	mov	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	3316      	adds	r3, #22
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fb90 	bl	80057c8 <readu16>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	3316      	adds	r3, #22
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fb7d 	bl	80057c8 <readu16>
 80050ce:	4603      	mov	r3, r0
 80050d0:	461a      	mov	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	7d9b      	ldrb	r3, [r3, #22]
 80050ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	7d9b      	ldrb	r3, [r3, #22]
 80050fc:	b25b      	sxtb	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	09db      	lsrs	r3, r3, #7
 8005102:	b2da      	uxtb	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	7dda      	ldrb	r2, [r3, #23]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e00d      	b.n	8005132 <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3306      	adds	r3, #6
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	4413      	add	r3, r2
 800511e:	7c99      	ldrb	r1, [r3, #18]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	3317      	adds	r3, #23
 8005128:	460a      	mov	r2, r1
 800512a:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b09      	cmp	r3, #9
 8005136:	ddee      	ble.n	8005116 <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	7d9a      	ldrb	r2, [r3, #22]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	3316      	adds	r3, #22
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fb27 	bl	80057c8 <readu16>
 800517a:	4603      	mov	r3, r0
 800517c:	461a      	mov	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	3316      	adds	r3, #22
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fb14 	bl	80057c8 <readu16>
 80051a0:	4603      	mov	r3, r0
 80051a2:	461a      	mov	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	3316      	adds	r3, #22
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fb01 	bl	80057c8 <readu16>
 80051c6:	4603      	mov	r3, r0
 80051c8:	461a      	mov	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	3316      	adds	r3, #22
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 faee 	bl	80057c8 <readu16>
 80051ec:	4603      	mov	r3, r0
 80051ee:	461a      	mov	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	3316      	adds	r3, #22
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fb1d 	bl	800584e <read16>
 8005214:	4603      	mov	r3, r0
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800521e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80052c0 <decodeArvrStabilizedRV+0xc0>
 8005222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	3318      	adds	r3, #24
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fb0c 	bl	800584e <read16>
 8005236:	4603      	mov	r3, r0
 8005238:	ee07 3a90 	vmov	s15, r3
 800523c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005240:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80052c0 <decodeArvrStabilizedRV+0xc0>
 8005244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	331a      	adds	r3, #26
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fafb 	bl	800584e <read16>
 8005258:	4603      	mov	r3, r0
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005262:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80052c0 <decodeArvrStabilizedRV+0xc0>
 8005266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	331c      	adds	r3, #28
 8005274:	4618      	mov	r0, r3
 8005276:	f000 faea 	bl	800584e <read16>
 800527a:	4603      	mov	r3, r0
 800527c:	ee07 3a90 	vmov	s15, r3
 8005280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005284:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80052c0 <decodeArvrStabilizedRV+0xc0>
 8005288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	331e      	adds	r3, #30
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fad9 	bl	800584e <read16>
 800529c:	4603      	mov	r3, r0
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052a6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80052c4 <decodeArvrStabilizedRV+0xc4>
 80052aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return SH2_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	38800000 	.word	0x38800000
 80052c4:	39800000 	.word	0x39800000

080052c8 <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	3316      	adds	r3, #22
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fab9 	bl	800584e <read16>
 80052dc:	4603      	mov	r3, r0
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005364 <decodeArvrStabilizedGRV+0x9c>
 80052ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	3318      	adds	r3, #24
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 faa8 	bl	800584e <read16>
 80052fe:	4603      	mov	r3, r0
 8005300:	ee07 3a90 	vmov	s15, r3
 8005304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005308:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005364 <decodeArvrStabilizedGRV+0x9c>
 800530c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	331a      	adds	r3, #26
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fa97 	bl	800584e <read16>
 8005320:	4603      	mov	r3, r0
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800532a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005364 <decodeArvrStabilizedGRV+0x9c>
 800532e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	331c      	adds	r3, #28
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fa86 	bl	800584e <read16>
 8005342:	4603      	mov	r3, r0
 8005344:	ee07 3a90 	vmov	s15, r3
 8005348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800534c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005364 <decodeArvrStabilizedGRV+0x9c>
 8005350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	38800000 	.word	0x38800000

08005368 <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	3312      	adds	r3, #18
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fa69 	bl	800584e <read16>
 800537c:	4603      	mov	r3, r0
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005386:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800546c <decodeGyroIntegratedRV+0x104>
 800538a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	3314      	adds	r3, #20
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fa58 	bl	800584e <read16>
 800539e:	4603      	mov	r3, r0
 80053a0:	ee07 3a90 	vmov	s15, r3
 80053a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053a8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800546c <decodeGyroIntegratedRV+0x104>
 80053ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	3316      	adds	r3, #22
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fa47 	bl	800584e <read16>
 80053c0:	4603      	mov	r3, r0
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ca:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800546c <decodeGyroIntegratedRV+0x104>
 80053ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	3318      	adds	r3, #24
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fa36 	bl	800584e <read16>
 80053e2:	4603      	mov	r3, r0
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ec:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800546c <decodeGyroIntegratedRV+0x104>
 80053f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	331a      	adds	r3, #26
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fa25 	bl	800584e <read16>
 8005404:	4603      	mov	r3, r0
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800540e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005470 <decodeGyroIntegratedRV+0x108>
 8005412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	331c      	adds	r3, #28
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fa14 	bl	800584e <read16>
 8005426:	4603      	mov	r3, r0
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005430:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005470 <decodeGyroIntegratedRV+0x108>
 8005434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	331e      	adds	r3, #30
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fa03 	bl	800584e <read16>
 8005448:	4603      	mov	r3, r0
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005452:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005470 <decodeGyroIntegratedRV+0x108>
 8005456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    return SH2_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	38800000 	.word	0x38800000
 8005470:	3a800000 	.word	0x3a800000

08005474 <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	7d9a      	ldrb	r2, [r3, #22]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	7dda      	ldrb	r2, [r3, #23]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	3316      	adds	r3, #22
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f9cf 	bl	800584e <read16>
 80054b0:	4603      	mov	r3, r0
 80054b2:	461a      	mov	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	3318      	adds	r3, #24
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f9c6 	bl	800584e <read16>
 80054c2:	4603      	mov	r3, r0
 80054c4:	461a      	mov	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	331a      	adds	r3, #26
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f9bd 	bl	800584e <read16>
 80054d4:	4603      	mov	r3, r0
 80054d6:	461a      	mov	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	331c      	adds	r3, #28
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 f9a5 	bl	8005830 <read8>
 80054e6:	4603      	mov	r3, r0
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	331d      	adds	r3, #29
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 f99b 	bl	8005830 <read8>
 80054fa:	4603      	mov	r3, r0
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	331e      	adds	r3, #30
 8005508:	4618      	mov	r0, r3
 800550a:	f000 f991 	bl	8005830 <read8>
 800550e:	4603      	mov	r3, r0
 8005510:	b2da      	uxtb	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	331f      	adds	r3, #31
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f987 	bl	8005830 <read8>
 8005522:	4603      	mov	r3, r0
 8005524:	b2da      	uxtb	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	3320      	adds	r3, #32
 8005530:	4618      	mov	r0, r3
 8005532:	f000 f97d 	bl	8005830 <read8>
 8005536:	4603      	mov	r3, r0
 8005538:	b2da      	uxtb	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	3321      	adds	r3, #33	; 0x21
 8005544:	4618      	mov	r0, r3
 8005546:	f000 f973 	bl	8005830 <read8>
 800554a:	4603      	mov	r3, r0
 800554c:	b2da      	uxtb	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	3322      	adds	r3, #34	; 0x22
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f969 	bl	8005830 <read8>
 800555e:	4603      	mov	r3, r0
 8005560:	b2da      	uxtb	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	3324      	adds	r3, #36	; 0x24
 800556c:	4618      	mov	r0, r3
 800556e:	f000 f96e 	bl	800584e <read16>
 8005572:	4603      	mov	r3, r0
 8005574:	461a      	mov	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	3326      	adds	r3, #38	; 0x26
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f97b 	bl	800587a <read32>
 8005584:	4603      	mov	r3, r0
 8005586:	461a      	mov	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	3316      	adds	r3, #22
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f967 	bl	800587a <read32>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461a      	mov	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	331a      	adds	r3, #26
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 f95e 	bl	800587a <read32>
 80055be:	ee07 0a90 	vmov	s15, r0
 80055c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055c6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8005760 <decodeDeadReckoningPose+0x1c8>
 80055ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	331e      	adds	r3, #30
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 f94e 	bl	800587a <read32>
 80055de:	ee07 0a90 	vmov	s15, r0
 80055e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055e6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005760 <decodeDeadReckoningPose+0x1c8>
 80055ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	3322      	adds	r3, #34	; 0x22
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 f93e 	bl	800587a <read32>
 80055fe:	ee07 0a90 	vmov	s15, r0
 8005602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005606:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005760 <decodeDeadReckoningPose+0x1c8>
 800560a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	3326      	adds	r3, #38	; 0x26
 8005618:	4618      	mov	r0, r3
 800561a:	f000 f92e 	bl	800587a <read32>
 800561e:	ee07 0a90 	vmov	s15, r0
 8005622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005626:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005764 <decodeDeadReckoningPose+0x1cc>
 800562a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	332a      	adds	r3, #42	; 0x2a
 8005638:	4618      	mov	r0, r3
 800563a:	f000 f91e 	bl	800587a <read32>
 800563e:	ee07 0a90 	vmov	s15, r0
 8005642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005646:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005764 <decodeDeadReckoningPose+0x1cc>
 800564a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	332e      	adds	r3, #46	; 0x2e
 8005658:	4618      	mov	r0, r3
 800565a:	f000 f90e 	bl	800587a <read32>
 800565e:	ee07 0a90 	vmov	s15, r0
 8005662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005666:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005764 <decodeDeadReckoningPose+0x1cc>
 800566a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	3332      	adds	r3, #50	; 0x32
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f8fe 	bl	800587a <read32>
 800567e:	ee07 0a90 	vmov	s15, r0
 8005682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005686:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005764 <decodeDeadReckoningPose+0x1cc>
 800568a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	3336      	adds	r3, #54	; 0x36
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f8ee 	bl	800587a <read32>
 800569e:	ee07 0a90 	vmov	s15, r0
 80056a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005768 <decodeDeadReckoningPose+0x1d0>
 80056aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	333a      	adds	r3, #58	; 0x3a
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 f8de 	bl	800587a <read32>
 80056be:	ee07 0a90 	vmov	s15, r0
 80056c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056c6:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005768 <decodeDeadReckoningPose+0x1d0>
 80056ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	333e      	adds	r3, #62	; 0x3e
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 f8ce 	bl	800587a <read32>
 80056de:	ee07 0a90 	vmov	s15, r0
 80056e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056e6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005768 <decodeDeadReckoningPose+0x1d0>
 80056ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	3342      	adds	r3, #66	; 0x42
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f8be 	bl	800587a <read32>
 80056fe:	ee07 0a90 	vmov	s15, r0
 8005702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005706:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005768 <decodeDeadReckoningPose+0x1d0>
 800570a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	3346      	adds	r3, #70	; 0x46
 8005718:	4618      	mov	r0, r3
 800571a:	f000 f8ae 	bl	800587a <read32>
 800571e:	ee07 0a90 	vmov	s15, r0
 8005722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005726:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005768 <decodeDeadReckoningPose+0x1d0>
 800572a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	334a      	adds	r3, #74	; 0x4a
 8005738:	4618      	mov	r0, r3
 800573a:	f000 f89e 	bl	800587a <read32>
 800573e:	ee07 0a90 	vmov	s15, r0
 8005742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005746:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005768 <decodeDeadReckoningPose+0x1d0>
 800574a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    return SH2_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	37000000 	.word	0x37000000
 8005764:	30800000 	.word	0x30800000
 8005768:	33000000 	.word	0x33000000

0800576c <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	3316      	adds	r3, #22
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f87d 	bl	800587a <read32>
 8005780:	4603      	mov	r3, r0
 8005782:	461a      	mov	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	331a      	adds	r3, #26
 800578c:	4618      	mov	r0, r3
 800578e:	f000 f84f 	bl	8005830 <read8>
 8005792:	4603      	mov	r3, r0
 8005794:	b2da      	uxtb	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	331b      	adds	r3, #27
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f846 	bl	8005830 <read8>
 80057a4:	4603      	mov	r3, r0
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	331c      	adds	r3, #28
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 f84c 	bl	800584e <read16>
 80057b6:	4603      	mov	r3, r0
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b21a      	sxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3301      	adds	r3, #1
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	b21b      	sxth	r3, r3
 80057e0:	4313      	orrs	r3, r2
 80057e2:	b21b      	sxth	r3, r3
 80057e4:	81fb      	strh	r3, [r7, #14]
    return retval;
 80057e6:	89fb      	ldrh	r3, [r7, #14]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3301      	adds	r3, #1
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	021b      	lsls	r3, r3, #8
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3302      	adds	r3, #2
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3303      	adds	r3, #3
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	061b      	lsls	r3, r3, #24
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
    return retval;
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	73fb      	strb	r3, [r7, #15]
    return retval;
 800583e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b21a      	sxth	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3301      	adds	r3, #1
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	b21b      	sxth	r3, r3
 8005866:	4313      	orrs	r3, r2
 8005868:	81fb      	strh	r3, [r7, #14]
    return retval;
 800586a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3301      	adds	r3, #1
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3302      	adds	r3, #2
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3303      	adds	r3, #3
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	061b      	lsls	r3, r3, #24
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
    return retval;
 80058a8:	68fb      	ldr	r3, [r7, #12]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80058be:	2300      	movs	r3, #0
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	e00b      	b.n	80058dc <shtp_init+0x24>
        instances[n].pHal = 0;
 80058c4:	4a0b      	ldr	r2, [pc, #44]	; (80058f4 <shtp_init+0x3c>)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f640 1114 	movw	r1, #2324	; 0x914
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	4413      	add	r3, r2
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3301      	adds	r3, #1
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	ddf0      	ble.n	80058c4 <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 80058e2:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <shtp_init+0x40>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	701a      	strb	r2, [r3, #0]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	20000948 	.word	0x20000948
 80058f8:	2000125c 	.word	0x2000125c

080058fc <getInstance>:

static shtp_t *getInstance(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8005902:	2300      	movs	r3, #0
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	e014      	b.n	8005932 <getInstance+0x36>
        if (instances[n].pHal == 0) {
 8005908:	4a0f      	ldr	r2, [pc, #60]	; (8005948 <getInstance+0x4c>)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f640 1114 	movw	r1, #2324	; 0x914
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	4413      	add	r3, r2
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <getInstance+0x30>
            // This instance is free
            return &instances[n];
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f640 1214 	movw	r2, #2324	; 0x914
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	4a08      	ldr	r2, [pc, #32]	; (8005948 <getInstance+0x4c>)
 8005928:	4413      	add	r3, r2
 800592a:	e006      	b.n	800593a <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3301      	adds	r3, #1
 8005930:	607b      	str	r3, [r7, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	dde7      	ble.n	8005908 <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000948 	.word	0x20000948

0800594c <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	460a      	mov	r2, r1
 8005956:	80fb      	strh	r3, [r7, #6]
 8005958:	4613      	mov	r3, r2
 800595a:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	88bb      	ldrh	r3, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	d201      	bcs.n	8005968 <min_u16+0x1c>
        return a;
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	e000      	b.n	800596a <min_u16+0x1e>
    }
    else {
        return b;
 8005968:	88bb      	ldrh	r3, [r7, #4]
    }
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 8005976:	b590      	push	{r4, r7, lr}
 8005978:	b089      	sub	sp, #36	; 0x24
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	460b      	mov	r3, r1
 8005984:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 800598a:	2300      	movs	r3, #0
 800598c:	76fb      	strb	r3, [r7, #27]
    uint16_t cursor = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	833b      	strh	r3, [r7, #24]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	833b      	strh	r3, [r7, #24]
    remaining = len;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0) {
 800599a:	e079      	b.n	8005a90 <txProcess+0x11a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 800599c:	8afb      	ldrh	r3, [r7, #22]
 800599e:	217c      	movs	r1, #124	; 0x7c
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff ffd3 	bl	800594c <min_u16>
 80059a6:	4603      	mov	r3, r0
 80059a8:	82bb      	strh	r3, [r7, #20]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 80059aa:	8abb      	ldrh	r3, [r7, #20]
 80059ac:	3304      	adds	r3, #4
 80059ae:	827b      	strh	r3, [r7, #18]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 80059b0:	8a7b      	ldrh	r3, [r7, #18]
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 80059b8:	8a7b      	ldrh	r3, [r7, #18]
 80059ba:	0a1b      	lsrs	r3, r3, #8
 80059bc:	b29b      	uxth	r3, r3
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 80059ca:	7efb      	ldrb	r3, [r7, #27]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d006      	beq.n	80059de <txProcess+0x68>
            pShtp->outTransfer[1] |= 0x80;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	7b5b      	ldrb	r3, [r3, #13]
 80059d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	7afa      	ldrb	r2, [r7, #11]
 80059e2:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 80059e4:	7afa      	ldrb	r2, [r7, #11]
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	4613      	mov	r3, r2
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	f603 0398 	addw	r3, r3, #2200	; 0x898
 80059f6:	7819      	ldrb	r1, [r3, #0]
 80059f8:	1c4b      	adds	r3, r1, #1
 80059fa:	b2dc      	uxtb	r4, r3
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4403      	add	r3, r0
 8005a08:	f603 0398 	addw	r3, r3, #2200	; 0x898
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	460a      	mov	r2, r1
 8005a14:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	1d18      	adds	r0, r3, #4
 8005a1c:	8b3b      	ldrh	r3, [r7, #24]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4413      	add	r3, r2
 8005a22:	8aba      	ldrh	r2, [r7, #20]
 8005a24:	4619      	mov	r1, r3
 8005a26:	f003 fcbf 	bl	80093a8 <memcpy>
        remaining -= transferLen;
 8005a2a:	8afa      	ldrh	r2, [r7, #22]
 8005a2c:	8abb      	ldrh	r3, [r7, #20]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	82fb      	strh	r3, [r7, #22]
        cursor += transferLen;
 8005a32:	8b3a      	ldrh	r2, [r7, #24]
 8005a34:	8abb      	ldrh	r3, [r7, #20]
 8005a36:	4413      	add	r3, r2
 8005a38:	833b      	strh	r3, [r7, #24]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	6810      	ldr	r0, [r2, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	f102 010c 	add.w	r1, r2, #12
 8005a4a:	8a7a      	ldrh	r2, [r7, #18]
 8005a4c:	4798      	blx	r3
 8005a4e:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8005a50:	e00d      	b.n	8005a6e <txProcess+0xf8>
        {
            shtp_service(pShtp);
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fa2d 	bl	8005eb2 <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	6810      	ldr	r0, [r2, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f102 010c 	add.w	r1, r2, #12
 8005a68:	8a7a      	ldrh	r2, [r7, #18]
 8005a6a:	4798      	blx	r3
 8005a6c:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0ee      	beq.n	8005a52 <txProcess+0xdc>
        }
        
        if (status < 0)
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	da08      	bge.n	8005a8c <txProcess+0x116>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
            return status;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	e005      	b.n	8005a98 <txProcess+0x122>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	76fb      	strb	r3, [r7, #27]
    while (remaining > 0) {
 8005a90:	8afb      	ldrh	r3, [r7, #22]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d182      	bne.n	800599c <txProcess+0x26>
    }

    return SH2_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3724      	adds	r7, #36	; 0x24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd90      	pop	{r4, r7, pc}

08005aa0 <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	4613      	mov	r3, r2
 8005aae:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d813      	bhi.n	8005ae6 <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 813a 	beq.w	8005d4a <rxAssemble+0x2aa>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	6892      	ldr	r2, [r2, #8]
 8005ade:	2101      	movs	r1, #1
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3
        }
        return;
 8005ae4:	e131      	b.n	8005d4a <rxAssemble+0x2aa>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	3301      	adds	r3, #1
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	021b      	lsls	r3, r3, #8
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005b00:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	3301      	adds	r3, #1
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	b25b      	sxtb	r3, r3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	09db      	lsrs	r3, r3, #7
 8005b0e:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	789b      	ldrb	r3, [r3, #2]
 8005b14:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	78db      	ldrb	r3, [r3, #3]
 8005b1a:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 8005b1c:	7dfa      	ldrb	r2, [r7, #23]
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	7dba      	ldrb	r2, [r7, #22]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d00a      	beq.n	8005b4c <rxAssemble+0xac>
        if (pShtp->eventCallback) {
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d006      	beq.n	8005b4c <rxAssemble+0xac>
            pShtp->eventCallback(pShtp->eventCookie,
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	6892      	ldr	r2, [r2, #8]
 8005b46:	2106      	movs	r1, #6
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 8005b4c:	8abb      	ldrh	r3, [r7, #20]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d813      	bhi.n	8005b7a <rxAssemble+0xda>
        pShtp->rxShortFragments++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
        if (pShtp->eventCallback) {
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80f2 	beq.w	8005d4e <rxAssemble+0x2ae>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	6892      	ldr	r2, [r2, #8]
 8005b72:	2101      	movs	r1, #1
 8005b74:	4610      	mov	r0, r2
 8005b76:	4798      	blx	r3
        }
        return;
 8005b78:	e0e9      	b.n	8005d4e <rxAssemble+0x2ae>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b07      	cmp	r3, #7
 8005b7e:	d913      	bls.n	8005ba8 <rxAssemble+0x108>
        // Invalid channel id.
        pShtp->rxBadChan++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

        if (pShtp->eventCallback) {
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80dd 	beq.w	8005d52 <rxAssemble+0x2b2>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	6892      	ldr	r2, [r2, #8]
 8005ba0:	2103      	movs	r1, #3
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4798      	blx	r3
        }
        return;
 8005ba6:	e0d4      	b.n	8005d52 <rxAssemble+0x2b2>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d040      	beq.n	8005c34 <rxAssemble+0x194>
        // Check this against previously received data.
        if (!continuation ||
 8005bb2:	7cfb      	ldrb	r3, [r7, #19]
 8005bb4:	f083 0301 	eor.w	r3, r3, #1
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d119      	bne.n	8005bf2 <rxAssemble+0x152>
            (chan != pShtp->inChan) ||
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
        if (!continuation ||
 8005bc4:	7dfa      	ldrb	r2, [r7, #23]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d113      	bne.n	8005bf2 <rxAssemble+0x152>
            (seq != pShtp->chan[chan].nextInSeq) ||
 8005bca:	7dfa      	ldrb	r2, [r7, #23]
 8005bcc:	68f9      	ldr	r1, [r7, #12]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8005bdc:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8005bde:	7dba      	ldrb	r2, [r7, #22]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d106      	bne.n	8005bf2 <rxAssemble+0x152>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 8005be4:	8abb      	ldrh	r3, [r7, #20]
 8005be6:	3b04      	subs	r3, #4
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	f8b2 208c 	ldrh.w	r2, [r2, #140]	; 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d020      	beq.n	8005c34 <rxAssemble+0x194>
            
            if (pShtp->eventCallback) {
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d006      	beq.n	8005c08 <rxAssemble+0x168>
                pShtp->eventCallback(pShtp->eventCookie,
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	6892      	ldr	r2, [r2, #8]
 8005c02:	2105      	movs	r1, #5
 8005c04:	4610      	mov	r0, r2
 8005c06:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

            pShtp->rxInterruptedPayloads++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            if (pShtp->eventCallback) {
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <rxAssemble+0x194>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	6892      	ldr	r2, [r2, #8]
 8005c2e:	2107      	movs	r1, #7
 8005c30:	4610      	mov	r0, r2
 8005c32:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 8005c34:	7dfa      	ldrb	r2, [r7, #23]
 8005c36:	7dbb      	ldrb	r3, [r7, #22]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	b2d8      	uxtb	r0, r3
 8005c3c:	68f9      	ldr	r1, [r7, #12]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	f603 0399 	addw	r3, r3, #2201	; 0x899
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d122      	bne.n	8005ca0 <rxAssemble+0x200>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 8005c5a:	8abb      	ldrh	r3, [r7, #20]
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c60:	d912      	bls.n	8005c88 <rxAssemble+0x1e8>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
            
            if (pShtp->eventCallback) {
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d06e      	beq.n	8005d56 <rxAssemble+0x2b6>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	6892      	ldr	r2, [r2, #8]
 8005c80:	2102      	movs	r1, #2
 8005c82:	4610      	mov	r0, r2
 8005c84:	4798      	blx	r3
            }

            return;
 8005c86:	e066      	b.n	8005d56 <rxAssemble+0x2b6>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
        pShtp->inChan = chan;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	7dfa      	ldrb	r2, [r7, #23]
 8005c9c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	8abb      	ldrh	r3, [r7, #20]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d901      	bls.n	8005cac <rxAssemble+0x20c>
        // Only use the valid portion of the transfer
        len = payloadLen;
 8005ca8:	8abb      	ldrh	r3, [r7, #20]
 8005caa:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	338f      	adds	r3, #143	; 0x8f
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	; 0x490
 8005cb6:	1898      	adds	r0, r3, r2
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	1d19      	adds	r1, r3, #4
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	3b04      	subs	r3, #4
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f003 fb71 	bl	80093a8 <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	4413      	add	r3, r2
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b04      	subs	r3, #4
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8a3 2490 	strh.w	r2, [r3, #1168]	; 0x490
    pShtp->inRemaining = payloadLen - len;
 8005cdc:	8aba      	ldrh	r2, [r7, #20]
 8005cde:	88fb      	ldrh	r3, [r7, #6]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d131      	bne.n	8005d58 <rxAssemble+0x2b8>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 8005cf4:	7dfa      	ldrb	r2, [r7, #23]
 8005cf6:	68f9      	ldr	r1, [r7, #12]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d025      	beq.n	8005d58 <rxAssemble+0x2b8>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8005d0c:	7dfa      	ldrb	r2, [r7, #23]
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	4613      	mov	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8005d1e:	681c      	ldr	r4, [r3, #0]
 8005d20:	7dfa      	ldrb	r2, [r7, #23]
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	4613      	mov	r3, r2
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8005d32:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f103 018f 	add.w	r1, r3, #143	; 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	; 0x490
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8005d46:	47a0      	blx	r4
 8005d48:	e006      	b.n	8005d58 <rxAssemble+0x2b8>
        return;
 8005d4a:	bf00      	nop
 8005d4c:	e004      	b.n	8005d58 <rxAssemble+0x2b8>
        return;
 8005d4e:	bf00      	nop
 8005d50:	e002      	b.n	8005d58 <rxAssemble+0x2b8>
        return;
 8005d52:	bf00      	nop
 8005d54:	e000      	b.n	8005d58 <rxAssemble+0x2b8>
            return;
 8005d56:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd90      	pop	{r4, r7, pc}
	...

08005d60 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 8005d68:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <shtp_open+0x64>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f083 0301 	eor.w	r3, r3, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 8005d76:	f7ff fd9f 	bl	80058b8 <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <shtp_open+0x24>
        // Error
        return 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e01b      	b.n	8005dbc <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 8005d84:	f7ff fdba 	bl	80058fc <getInstance>
 8005d88:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	e013      	b.n	8005dbc <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 8005d94:	f640 1214 	movw	r2, #2324	; 0x914
 8005d98:	2100      	movs	r1, #0
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f003 fb12 	bl	80093c4 <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	4798      	blx	r3
 8005da8:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <shtp_open+0x54>
        return 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e003      	b.n	8005dbc <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]

    return pShtp;
 8005dba:	68fb      	ldr	r3, [r7, #12]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	2000125c 	.word	0x2000125c

08005dc8 <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	609a      	str	r2, [r3, #8]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 8005e04:	7afb      	ldrb	r3, [r7, #11]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <shtp_listenChan+0x20>
 8005e0a:	7afb      	ldrb	r3, [r7, #11]
 8005e0c:	2b07      	cmp	r3, #7
 8005e0e:	d902      	bls.n	8005e16 <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 8005e10:	f06f 0301 	mvn.w	r3, #1
 8005e14:	e016      	b.n	8005e44 <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 8005e16:	7afa      	ldrb	r2, [r7, #11]
 8005e18:	6979      	ldr	r1, [r7, #20]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 8005e2c:	7afa      	ldrb	r2, [r7, #11]
 8005e2e:	6979      	ldr	r1, [r7, #20]
 8005e30:	4613      	mov	r3, r2
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	72fb      	strb	r3, [r7, #11]
 8005e60:	4613      	mov	r3, r2
 8005e62:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 8005e68:	893b      	ldrh	r3, [r7, #8]
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d909      	bls.n	8005e82 <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f8d3 3910 	ldr.w	r3, [r3, #2320]	; 0x910
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
        return SH2_ERR_BAD_PARAM;
 8005e7c:	f06f 0301 	mvn.w	r3, #1
 8005e80:	e013      	b.n	8005eaa <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 8005e82:	7afb      	ldrb	r3, [r7, #11]
 8005e84:	2b07      	cmp	r3, #7
 8005e86:	d909      	bls.n	8005e9c <shtp_send+0x4c>
        pShtp->badTxChan++;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
        return SH2_ERR_BAD_PARAM;
 8005e96:	f06f 0301 	mvn.w	r3, #1
 8005e9a:	e006      	b.n	8005eaa <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8005e9c:	893b      	ldrh	r3, [r7, #8]
 8005e9e:	7af9      	ldrb	r1, [r7, #11]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6978      	ldr	r0, [r7, #20]
 8005ea4:	f7ff fd67 	bl	8005976 <txProcess>
 8005ea8:	4603      	mov	r3, r0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 8005eb2:	b590      	push	{r4, r7, lr}
 8005eb4:	b087      	sub	sp, #28
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689c      	ldr	r4, [r3, #8]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8005ed2:	f107 030c 	add.w	r3, r7, #12
 8005ed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005eda:	47a0      	blx	r4
 8005edc:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	dd08      	ble.n	8005ef6 <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f503 6193 	add.w	r1, r3, #1176	; 0x498
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6978      	ldr	r0, [r7, #20]
 8005ef2:	f7ff fdd5 	bl	8005aa0 <rxAssemble>
    }
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd90      	pop	{r4, r7, pc}

08005efe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f08:	2003      	movs	r0, #3
 8005f0a:	f001 f80b 	bl	8006f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f0e:	200f      	movs	r0, #15
 8005f10:	f000 f80e 	bl	8005f30 <HAL_InitTick>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	71fb      	strb	r3, [r7, #7]
 8005f1e:	e001      	b.n	8005f24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005f20:	f7fc fa68 	bl	80023f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005f24:	79fb      	ldrb	r3, [r7, #7]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005f3c:	4b17      	ldr	r3, [pc, #92]	; (8005f9c <HAL_InitTick+0x6c>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d023      	beq.n	8005f8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005f44:	4b16      	ldr	r3, [pc, #88]	; (8005fa0 <HAL_InitTick+0x70>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <HAL_InitTick+0x6c>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 f825 	bl	8006faa <HAL_SYSTICK_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10f      	bne.n	8005f86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b0f      	cmp	r3, #15
 8005f6a:	d809      	bhi.n	8005f80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	f000 ffe1 	bl	8006f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f78:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <HAL_InitTick+0x74>)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	e007      	b.n	8005f90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	73fb      	strb	r3, [r7, #15]
 8005f84:	e004      	b.n	8005f90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
 8005f8a:	e001      	b.n	8005f90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	2000000c 	.word	0x2000000c
 8005fa0:	20000004 	.word	0x20000004
 8005fa4:	20000008 	.word	0x20000008

08005fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <HAL_IncTick+0x20>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <HAL_IncTick+0x24>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	4a04      	ldr	r2, [pc, #16]	; (8005fcc <HAL_IncTick+0x24>)
 8005fba:	6013      	str	r3, [r2, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	2000000c 	.word	0x2000000c
 8005fcc:	20001260 	.word	0x20001260

08005fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8005fd4:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <HAL_GetTick+0x14>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	20001260 	.word	0x20001260

08005fe8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e0ed      	b.n	80061d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fb f812 	bl	8001030 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800601c:	f7ff ffd8 	bl	8005fd0 <HAL_GetTick>
 8006020:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006022:	e012      	b.n	800604a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006024:	f7ff ffd4 	bl	8005fd0 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b0a      	cmp	r3, #10
 8006030:	d90b      	bls.n	800604a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2205      	movs	r2, #5
 8006042:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0c5      	b.n	80061d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0e5      	beq.n	8006024 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0202 	bic.w	r2, r2, #2
 8006066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006068:	f7ff ffb2 	bl	8005fd0 <HAL_GetTick>
 800606c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800606e:	e012      	b.n	8006096 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006070:	f7ff ffae 	bl	8005fd0 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b0a      	cmp	r3, #10
 800607c:	d90b      	bls.n	8006096 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2205      	movs	r2, #5
 800608e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e09f      	b.n	80061d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e5      	bne.n	8006070 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	7e1b      	ldrb	r3, [r3, #24]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d108      	bne.n	80060be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	e007      	b.n	80060ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	7e5b      	ldrb	r3, [r3, #25]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d108      	bne.n	80060e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e007      	b.n	80060f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	7e9b      	ldrb	r3, [r3, #26]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d108      	bne.n	8006112 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0220 	orr.w	r2, r2, #32
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	e007      	b.n	8006122 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0220 	bic.w	r2, r2, #32
 8006120:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	7edb      	ldrb	r3, [r3, #27]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d108      	bne.n	800613c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0210 	bic.w	r2, r2, #16
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e007      	b.n	800614c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0210 	orr.w	r2, r2, #16
 800614a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	7f1b      	ldrb	r3, [r3, #28]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d108      	bne.n	8006166 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0208 	orr.w	r2, r2, #8
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e007      	b.n	8006176 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0208 	bic.w	r2, r2, #8
 8006174:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	7f5b      	ldrb	r3, [r3, #29]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d108      	bne.n	8006190 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0204 	orr.w	r2, r2, #4
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e007      	b.n	80061a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0204 	bic.w	r2, r2, #4
 800619e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	ea42 0103 	orr.w	r1, r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	1e5a      	subs	r2, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80061de:	b480      	push	{r7}
 80061e0:	b087      	sub	sp, #28
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061f4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80061f6:	7cfb      	ldrb	r3, [r7, #19]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d003      	beq.n	8006204 <HAL_CAN_ConfigFilter+0x26>
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	f040 80aa 	bne.w	8006358 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800620a:	f043 0201 	orr.w	r2, r3, #1
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	2201      	movs	r2, #1
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	43db      	mvns	r3, r3
 800622e:	401a      	ands	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d123      	bne.n	8006286 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	43db      	mvns	r3, r3
 8006248:	401a      	ands	r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006260:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	3248      	adds	r2, #72	; 0x48
 8006266:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800627a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800627c:	6979      	ldr	r1, [r7, #20]
 800627e:	3348      	adds	r3, #72	; 0x48
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	440b      	add	r3, r1
 8006284:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d122      	bne.n	80062d4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	431a      	orrs	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80062ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	3248      	adds	r2, #72	; 0x48
 80062b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80062c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	3348      	adds	r3, #72	; 0x48
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	440b      	add	r3, r1
 80062d2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	43db      	mvns	r3, r3
 80062e6:	401a      	ands	r2, r3
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80062ee:	e007      	b.n	8006300 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	431a      	orrs	r2, r3
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d109      	bne.n	800631c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	43db      	mvns	r3, r3
 8006312:	401a      	ands	r2, r3
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800631a:	e007      	b.n	800632c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	431a      	orrs	r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d107      	bne.n	8006344 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	431a      	orrs	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800634a:	f023 0201 	bic.w	r2, r3, #1
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e006      	b.n	8006366 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b01      	cmp	r3, #1
 8006384:	d12e      	bne.n	80063e4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800639e:	f7ff fe17 	bl	8005fd0 <HAL_GetTick>
 80063a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80063a4:	e012      	b.n	80063cc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80063a6:	f7ff fe13 	bl	8005fd0 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b0a      	cmp	r3, #10
 80063b2:	d90b      	bls.n	80063cc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2205      	movs	r2, #5
 80063c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e012      	b.n	80063f2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e5      	bne.n	80063a6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e006      	b.n	80063f2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
  }
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b089      	sub	sp, #36	; 0x24
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800640e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006418:	7ffb      	ldrb	r3, [r7, #31]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d003      	beq.n	8006426 <HAL_CAN_AddTxMessage+0x2c>
 800641e:	7ffb      	ldrb	r3, [r7, #31]
 8006420:	2b02      	cmp	r3, #2
 8006422:	f040 80ad 	bne.w	8006580 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006436:	2b00      	cmp	r3, #0
 8006438:	d105      	bne.n	8006446 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 8095 	beq.w	8006570 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	0e1b      	lsrs	r3, r3, #24
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006450:	2201      	movs	r2, #1
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	409a      	lsls	r2, r3
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10d      	bne.n	800647e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800646c:	68f9      	ldr	r1, [r7, #12]
 800646e:	6809      	ldr	r1, [r1, #0]
 8006470:	431a      	orrs	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	3318      	adds	r3, #24
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	440b      	add	r3, r1
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e00f      	b.n	800649e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006488:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800648e:	68f9      	ldr	r1, [r7, #12]
 8006490:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006492:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	3318      	adds	r3, #24
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	440b      	add	r3, r1
 800649c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6819      	ldr	r1, [r3, #0]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	691a      	ldr	r2, [r3, #16]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	3318      	adds	r3, #24
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	440b      	add	r3, r1
 80064ae:	3304      	adds	r3, #4
 80064b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	7d1b      	ldrb	r3, [r3, #20]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d111      	bne.n	80064de <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	3318      	adds	r3, #24
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	4413      	add	r3, r2
 80064c6:	3304      	adds	r3, #4
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	6811      	ldr	r1, [r2, #0]
 80064ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	3318      	adds	r3, #24
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	440b      	add	r3, r1
 80064da:	3304      	adds	r3, #4
 80064dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	3307      	adds	r3, #7
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	061a      	lsls	r2, r3, #24
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3306      	adds	r3, #6
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3305      	adds	r3, #5
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	4313      	orrs	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	3204      	adds	r2, #4
 80064fe:	7812      	ldrb	r2, [r2, #0]
 8006500:	4610      	mov	r0, r2
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	6811      	ldr	r1, [r2, #0]
 8006506:	ea43 0200 	orr.w	r2, r3, r0
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	440b      	add	r3, r1
 8006510:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006514:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3303      	adds	r3, #3
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	061a      	lsls	r2, r3, #24
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3302      	adds	r3, #2
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	041b      	lsls	r3, r3, #16
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3301      	adds	r3, #1
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	4313      	orrs	r3, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	7812      	ldrb	r2, [r2, #0]
 8006536:	4610      	mov	r0, r2
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	6811      	ldr	r1, [r2, #0]
 800653c:	ea43 0200 	orr.w	r2, r3, r0
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	440b      	add	r3, r1
 8006546:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800654a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	3318      	adds	r3, #24
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	4413      	add	r3, r2
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	6811      	ldr	r1, [r2, #0]
 800655e:	f043 0201 	orr.w	r2, r3, #1
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	3318      	adds	r3, #24
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	440b      	add	r3, r1
 800656a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	e00e      	b.n	800658e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e006      	b.n	800658e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3724      	adds	r7, #36	; 0x24
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065ae:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80065b0:	7afb      	ldrb	r3, [r7, #11]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d002      	beq.n	80065bc <HAL_CAN_IsTxMessagePending+0x22>
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d10b      	bne.n	80065d4 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	069b      	lsls	r3, r3, #26
 80065c6:	401a      	ands	r2, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	069b      	lsls	r3, r3, #26
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80065d0:	2301      	movs	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80065d4:	68fb      	ldr	r3, [r7, #12]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80065e2:	b480      	push	{r7}
 80065e4:	b087      	sub	sp, #28
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80065f8:	7dfb      	ldrb	r3, [r7, #23]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d003      	beq.n	8006606 <HAL_CAN_GetRxMessage+0x24>
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	2b02      	cmp	r3, #2
 8006602:	f040 80f3 	bne.w	80067ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10e      	bne.n	800662a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d116      	bne.n	8006648 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e0e7      	b.n	80067fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d107      	bne.n	8006648 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e0d8      	b.n	80067fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	331b      	adds	r3, #27
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	4413      	add	r3, r2
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0204 	and.w	r2, r3, #4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10c      	bne.n	8006680 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	331b      	adds	r3, #27
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	4413      	add	r3, r2
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	0d5b      	lsrs	r3, r3, #21
 8006676:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	e00b      	b.n	8006698 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	331b      	adds	r3, #27
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	4413      	add	r3, r2
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	08db      	lsrs	r3, r3, #3
 8006690:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	331b      	adds	r3, #27
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	4413      	add	r3, r2
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0202 	and.w	r2, r3, #2
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	331b      	adds	r3, #27
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	4413      	add	r3, r2
 80066ba:	3304      	adds	r3, #4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 020f 	and.w	r2, r3, #15
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	331b      	adds	r3, #27
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	4413      	add	r3, r2
 80066d2:	3304      	adds	r3, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	331b      	adds	r3, #27
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	4413      	add	r3, r2
 80066ea:	3304      	adds	r3, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	0c1b      	lsrs	r3, r3, #16
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	4413      	add	r3, r2
 8006700:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	b2da      	uxtb	r2, r3
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	4413      	add	r3, r2
 8006716:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	0a1a      	lsrs	r2, r3, #8
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	3301      	adds	r3, #1
 8006722:	b2d2      	uxtb	r2, r2
 8006724:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	4413      	add	r3, r2
 8006730:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	0c1a      	lsrs	r2, r3, #16
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	3302      	adds	r3, #2
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	4413      	add	r3, r2
 800674a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	0e1a      	lsrs	r2, r3, #24
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	3303      	adds	r3, #3
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	4413      	add	r3, r2
 8006764:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	3304      	adds	r3, #4
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	4413      	add	r3, r2
 800677c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	0a1a      	lsrs	r2, r3, #8
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	3305      	adds	r3, #5
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	4413      	add	r3, r2
 8006796:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	0c1a      	lsrs	r2, r3, #16
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	3306      	adds	r3, #6
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	0e1a      	lsrs	r2, r3, #24
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	3307      	adds	r3, #7
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d108      	bne.n	80067d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0220 	orr.w	r2, r2, #32
 80067d4:	60da      	str	r2, [r3, #12]
 80067d6:	e007      	b.n	80067e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0220 	orr.w	r2, r2, #32
 80067e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	e006      	b.n	80067fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
  }
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800681a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d002      	beq.n	8006828 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d10f      	bne.n	8006848 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e005      	b.n	8006848 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8006848:	68fb      	ldr	r3, [r7, #12]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006866:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d002      	beq.n	8006874 <HAL_CAN_ActivateNotification+0x1e>
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d109      	bne.n	8006888 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6959      	ldr	r1, [r3, #20]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	e006      	b.n	8006896 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d002      	beq.n	80068c0 <HAL_CAN_DeactivateNotification+0x1e>
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d10a      	bne.n	80068d6 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6959      	ldr	r1, [r3, #20]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	43da      	mvns	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	400a      	ands	r2, r1
 80068d0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e006      	b.n	80068e4 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
  }
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	; 0x28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80068f8:	2300      	movs	r3, #0
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d07c      	beq.n	8006a30 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d023      	beq.n	8006988 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2201      	movs	r2, #1
 8006946:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f983 	bl	8006c5e <HAL_CAN_TxMailbox0CompleteCallback>
 8006958:	e016      	b.n	8006988 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d004      	beq.n	800696e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
 800696c:	e00c      	b.n	8006988 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
 8006980:	e002      	b.n	8006988 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f989 	bl	8006c9a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698e:	2b00      	cmp	r3, #0
 8006990:	d024      	beq.n	80069dc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800699a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f963 	bl	8006c72 <HAL_CAN_TxMailbox1CompleteCallback>
 80069ac:	e016      	b.n	80069dc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
 80069c0:	e00c      	b.n	80069dc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
 80069d4:	e002      	b.n	80069dc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f969 	bl	8006cae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d024      	beq.n	8006a30 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f943 	bl	8006c86 <HAL_CAN_TxMailbox2CompleteCallback>
 8006a00:	e016      	b.n	8006a30 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
 8006a14:	e00c      	b.n	8006a30 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
 8006a28:	e002      	b.n	8006a30 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f949 	bl	8006cc2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00c      	beq.n	8006a54 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2210      	movs	r2, #16
 8006a52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00b      	beq.n	8006a76 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d006      	beq.n	8006a76 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f930 	bl	8006cd6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d009      	beq.n	8006a94 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fb fbb4 	bl	80021fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00c      	beq.n	8006ab8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f003 0310 	and.w	r3, r3, #16
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2210      	movs	r2, #16
 8006ab6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00b      	beq.n	8006ada <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d006      	beq.n	8006ada <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f908 	bl	8006cea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f003 0310 	and.w	r3, r3, #16
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fb fbac 	bl	8002250 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00b      	beq.n	8006b1a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d006      	beq.n	8006b1a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2210      	movs	r2, #16
 8006b12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f8f2 	bl	8006cfe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f003 0308 	and.w	r3, r3, #8
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d006      	beq.n	8006b3c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2208      	movs	r2, #8
 8006b34:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f8eb 	bl	8006d12 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d07b      	beq.n	8006c3e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d072      	beq.n	8006c36 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	f043 0301 	orr.w	r3, r3, #1
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d008      	beq.n	8006b88 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	f043 0302 	orr.w	r3, r3, #2
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d008      	beq.n	8006ba4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	f043 0304 	orr.w	r3, r3, #4
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d043      	beq.n	8006c36 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d03e      	beq.n	8006c36 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bbe:	2b60      	cmp	r3, #96	; 0x60
 8006bc0:	d02b      	beq.n	8006c1a <HAL_CAN_IRQHandler+0x32a>
 8006bc2:	2b60      	cmp	r3, #96	; 0x60
 8006bc4:	d82e      	bhi.n	8006c24 <HAL_CAN_IRQHandler+0x334>
 8006bc6:	2b50      	cmp	r3, #80	; 0x50
 8006bc8:	d022      	beq.n	8006c10 <HAL_CAN_IRQHandler+0x320>
 8006bca:	2b50      	cmp	r3, #80	; 0x50
 8006bcc:	d82a      	bhi.n	8006c24 <HAL_CAN_IRQHandler+0x334>
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d019      	beq.n	8006c06 <HAL_CAN_IRQHandler+0x316>
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d826      	bhi.n	8006c24 <HAL_CAN_IRQHandler+0x334>
 8006bd6:	2b30      	cmp	r3, #48	; 0x30
 8006bd8:	d010      	beq.n	8006bfc <HAL_CAN_IRQHandler+0x30c>
 8006bda:	2b30      	cmp	r3, #48	; 0x30
 8006bdc:	d822      	bhi.n	8006c24 <HAL_CAN_IRQHandler+0x334>
 8006bde:	2b10      	cmp	r3, #16
 8006be0:	d002      	beq.n	8006be8 <HAL_CAN_IRQHandler+0x2f8>
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d005      	beq.n	8006bf2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006be6:	e01d      	b.n	8006c24 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	f043 0308 	orr.w	r3, r3, #8
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006bf0:	e019      	b.n	8006c26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	f043 0310 	orr.w	r3, r3, #16
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006bfa:	e014      	b.n	8006c26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	f043 0320 	orr.w	r3, r3, #32
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c04:	e00f      	b.n	8006c26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c0e:	e00a      	b.n	8006c26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c18:	e005      	b.n	8006c26 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c22:	e000      	b.n	8006c26 <HAL_CAN_IRQHandler+0x336>
            break;
 8006c24:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	699a      	ldr	r2, [r3, #24]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c34:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d008      	beq.n	8006c56 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f868 	bl	8006d26 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006c56:	bf00      	nop
 8006c58:	3728      	adds	r7, #40	; 0x28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
	...

08006d3c <__NVIC_SetPriorityGrouping>:
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d4c:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <__NVIC_SetPriorityGrouping+0x44>)
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d58:	4013      	ands	r3, r2
 8006d5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d6e:	4a04      	ldr	r2, [pc, #16]	; (8006d80 <__NVIC_SetPriorityGrouping+0x44>)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	60d3      	str	r3, [r2, #12]
}
 8006d74:	bf00      	nop
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	e000ed00 	.word	0xe000ed00

08006d84 <__NVIC_GetPriorityGrouping>:
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d88:	4b04      	ldr	r3, [pc, #16]	; (8006d9c <__NVIC_GetPriorityGrouping+0x18>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	0a1b      	lsrs	r3, r3, #8
 8006d8e:	f003 0307 	and.w	r3, r3, #7
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	e000ed00 	.word	0xe000ed00

08006da0 <__NVIC_EnableIRQ>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	db0b      	blt.n	8006dca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	f003 021f 	and.w	r2, r3, #31
 8006db8:	4907      	ldr	r1, [pc, #28]	; (8006dd8 <__NVIC_EnableIRQ+0x38>)
 8006dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dbe:	095b      	lsrs	r3, r3, #5
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8006dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	e000e100 	.word	0xe000e100

08006ddc <__NVIC_DisableIRQ>:
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	db12      	blt.n	8006e14 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	f003 021f 	and.w	r2, r3, #31
 8006df4:	490a      	ldr	r1, [pc, #40]	; (8006e20 <__NVIC_DisableIRQ+0x44>)
 8006df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8006e02:	3320      	adds	r3, #32
 8006e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e08:	f3bf 8f4f 	dsb	sy
}
 8006e0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e0e:	f3bf 8f6f 	isb	sy
}
 8006e12:	bf00      	nop
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	e000e100 	.word	0xe000e100

08006e24 <__NVIC_SetPriority>:
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	6039      	str	r1, [r7, #0]
 8006e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	db0a      	blt.n	8006e4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	490c      	ldr	r1, [pc, #48]	; (8006e70 <__NVIC_SetPriority+0x4c>)
 8006e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e42:	0112      	lsls	r2, r2, #4
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	440b      	add	r3, r1
 8006e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e4c:	e00a      	b.n	8006e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	4908      	ldr	r1, [pc, #32]	; (8006e74 <__NVIC_SetPriority+0x50>)
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	3b04      	subs	r3, #4
 8006e5c:	0112      	lsls	r2, r2, #4
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	440b      	add	r3, r1
 8006e62:	761a      	strb	r2, [r3, #24]
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	e000e100 	.word	0xe000e100
 8006e74:	e000ed00 	.word	0xe000ed00

08006e78 <NVIC_EncodePriority>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b089      	sub	sp, #36	; 0x24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f1c3 0307 	rsb	r3, r3, #7
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	bf28      	it	cs
 8006e96:	2304      	movcs	r3, #4
 8006e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	2b06      	cmp	r3, #6
 8006ea0:	d902      	bls.n	8006ea8 <NVIC_EncodePriority+0x30>
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	3b03      	subs	r3, #3
 8006ea6:	e000      	b.n	8006eaa <NVIC_EncodePriority+0x32>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eac:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	43da      	mvns	r2, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	401a      	ands	r2, r3
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eca:	43d9      	mvns	r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ed0:	4313      	orrs	r3, r2
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3724      	adds	r7, #36	; 0x24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ef0:	d301      	bcc.n	8006ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e00f      	b.n	8006f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ef6:	4a0a      	ldr	r2, [pc, #40]	; (8006f20 <SysTick_Config+0x40>)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006efe:	210f      	movs	r1, #15
 8006f00:	f04f 30ff 	mov.w	r0, #4294967295
 8006f04:	f7ff ff8e 	bl	8006e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <SysTick_Config+0x40>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f0e:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <SysTick_Config+0x40>)
 8006f10:	2207      	movs	r2, #7
 8006f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	e000e010 	.word	0xe000e010

08006f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff ff05 	bl	8006d3c <__NVIC_SetPriorityGrouping>
}
 8006f32:	bf00      	nop
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b086      	sub	sp, #24
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	4603      	mov	r3, r0
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	607a      	str	r2, [r7, #4]
 8006f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f4c:	f7ff ff1a 	bl	8006d84 <__NVIC_GetPriorityGrouping>
 8006f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	6978      	ldr	r0, [r7, #20]
 8006f58:	f7ff ff8e 	bl	8006e78 <NVIC_EncodePriority>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f62:	4611      	mov	r1, r2
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff ff5d 	bl	8006e24 <__NVIC_SetPriority>
}
 8006f6a:	bf00      	nop
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	4603      	mov	r3, r0
 8006f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff ff0d 	bl	8006da0 <__NVIC_EnableIRQ>
}
 8006f86:	bf00      	nop
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	4603      	mov	r3, r0
 8006f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff ff1d 	bl	8006ddc <__NVIC_DisableIRQ>
}
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff ff94 	bl	8006ee0 <SysTick_Config>
 8006fb8:	4603      	mov	r3, r0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d005      	beq.n	8006fe6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2204      	movs	r2, #4
 8006fde:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	73fb      	strb	r3, [r7, #15]
 8006fe4:	e029      	b.n	800703a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 020e 	bic.w	r2, r2, #14
 8006ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0201 	bic.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	f003 021c 	and.w	r2, r3, #28
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	2101      	movs	r1, #1
 8007014:	fa01 f202 	lsl.w	r2, r1, r2
 8007018:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
    }
  }
  return status;
 800703a:	7bfb      	ldrb	r3, [r7, #15]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007052:	e17f      	b.n	8007354 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	2101      	movs	r1, #1
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	fa01 f303 	lsl.w	r3, r1, r3
 8007060:	4013      	ands	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 8171 	beq.w	800734e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	2b01      	cmp	r3, #1
 8007076:	d005      	beq.n	8007084 <HAL_GPIO_Init+0x40>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d130      	bne.n	80070e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	2203      	movs	r2, #3
 8007090:	fa02 f303 	lsl.w	r3, r2, r3
 8007094:	43db      	mvns	r3, r3
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4013      	ands	r3, r2
 800709a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070ba:	2201      	movs	r2, #1
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	fa02 f303 	lsl.w	r3, r2, r3
 80070c2:	43db      	mvns	r3, r3
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4013      	ands	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	091b      	lsrs	r3, r3, #4
 80070d0:	f003 0201 	and.w	r2, r3, #1
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d118      	bne.n	8007124 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80070f8:	2201      	movs	r2, #1
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007100:	43db      	mvns	r3, r3
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4013      	ands	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	08db      	lsrs	r3, r3, #3
 800710e:	f003 0201 	and.w	r2, r3, #1
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	2b03      	cmp	r3, #3
 800712e:	d017      	beq.n	8007160 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	2203      	movs	r2, #3
 800713c:	fa02 f303 	lsl.w	r3, r2, r3
 8007140:	43db      	mvns	r3, r3
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4013      	ands	r3, r2
 8007146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d123      	bne.n	80071b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	08da      	lsrs	r2, r3, #3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3208      	adds	r2, #8
 8007174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007178:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f003 0307 	and.w	r3, r3, #7
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	220f      	movs	r2, #15
 8007184:	fa02 f303 	lsl.w	r3, r2, r3
 8007188:	43db      	mvns	r3, r3
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4013      	ands	r3, r2
 800718e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	691a      	ldr	r2, [r3, #16]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f003 0307 	and.w	r3, r3, #7
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	08da      	lsrs	r2, r3, #3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3208      	adds	r2, #8
 80071ae:	6939      	ldr	r1, [r7, #16]
 80071b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	2203      	movs	r2, #3
 80071c0:	fa02 f303 	lsl.w	r3, r2, r3
 80071c4:	43db      	mvns	r3, r3
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4013      	ands	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f003 0203 	and.w	r2, r3, #3
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 80ac 	beq.w	800734e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071f6:	4b5f      	ldr	r3, [pc, #380]	; (8007374 <HAL_GPIO_Init+0x330>)
 80071f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fa:	4a5e      	ldr	r2, [pc, #376]	; (8007374 <HAL_GPIO_Init+0x330>)
 80071fc:	f043 0301 	orr.w	r3, r3, #1
 8007200:	6613      	str	r3, [r2, #96]	; 0x60
 8007202:	4b5c      	ldr	r3, [pc, #368]	; (8007374 <HAL_GPIO_Init+0x330>)
 8007204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	60bb      	str	r3, [r7, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800720e:	4a5a      	ldr	r2, [pc, #360]	; (8007378 <HAL_GPIO_Init+0x334>)
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	089b      	lsrs	r3, r3, #2
 8007214:	3302      	adds	r3, #2
 8007216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800721a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	220f      	movs	r2, #15
 8007226:	fa02 f303 	lsl.w	r3, r2, r3
 800722a:	43db      	mvns	r3, r3
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4013      	ands	r3, r2
 8007230:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007238:	d025      	beq.n	8007286 <HAL_GPIO_Init+0x242>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a4f      	ldr	r2, [pc, #316]	; (800737c <HAL_GPIO_Init+0x338>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d01f      	beq.n	8007282 <HAL_GPIO_Init+0x23e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a4e      	ldr	r2, [pc, #312]	; (8007380 <HAL_GPIO_Init+0x33c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d019      	beq.n	800727e <HAL_GPIO_Init+0x23a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a4d      	ldr	r2, [pc, #308]	; (8007384 <HAL_GPIO_Init+0x340>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d013      	beq.n	800727a <HAL_GPIO_Init+0x236>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a4c      	ldr	r2, [pc, #304]	; (8007388 <HAL_GPIO_Init+0x344>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00d      	beq.n	8007276 <HAL_GPIO_Init+0x232>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a4b      	ldr	r2, [pc, #300]	; (800738c <HAL_GPIO_Init+0x348>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d007      	beq.n	8007272 <HAL_GPIO_Init+0x22e>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a4a      	ldr	r2, [pc, #296]	; (8007390 <HAL_GPIO_Init+0x34c>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d101      	bne.n	800726e <HAL_GPIO_Init+0x22a>
 800726a:	2306      	movs	r3, #6
 800726c:	e00c      	b.n	8007288 <HAL_GPIO_Init+0x244>
 800726e:	2307      	movs	r3, #7
 8007270:	e00a      	b.n	8007288 <HAL_GPIO_Init+0x244>
 8007272:	2305      	movs	r3, #5
 8007274:	e008      	b.n	8007288 <HAL_GPIO_Init+0x244>
 8007276:	2304      	movs	r3, #4
 8007278:	e006      	b.n	8007288 <HAL_GPIO_Init+0x244>
 800727a:	2303      	movs	r3, #3
 800727c:	e004      	b.n	8007288 <HAL_GPIO_Init+0x244>
 800727e:	2302      	movs	r3, #2
 8007280:	e002      	b.n	8007288 <HAL_GPIO_Init+0x244>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <HAL_GPIO_Init+0x244>
 8007286:	2300      	movs	r3, #0
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	f002 0203 	and.w	r2, r2, #3
 800728e:	0092      	lsls	r2, r2, #2
 8007290:	4093      	lsls	r3, r2
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	4313      	orrs	r3, r2
 8007296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007298:	4937      	ldr	r1, [pc, #220]	; (8007378 <HAL_GPIO_Init+0x334>)
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	089b      	lsrs	r3, r3, #2
 800729e:	3302      	adds	r3, #2
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80072a6:	4b3b      	ldr	r3, [pc, #236]	; (8007394 <HAL_GPIO_Init+0x350>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	43db      	mvns	r3, r3
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4013      	ands	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80072ca:	4a32      	ldr	r2, [pc, #200]	; (8007394 <HAL_GPIO_Init+0x350>)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80072d0:	4b30      	ldr	r3, [pc, #192]	; (8007394 <HAL_GPIO_Init+0x350>)
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	43db      	mvns	r3, r3
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4013      	ands	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80072f4:	4a27      	ldr	r2, [pc, #156]	; (8007394 <HAL_GPIO_Init+0x350>)
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80072fa:	4b26      	ldr	r3, [pc, #152]	; (8007394 <HAL_GPIO_Init+0x350>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	43db      	mvns	r3, r3
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4013      	ands	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800731e:	4a1d      	ldr	r2, [pc, #116]	; (8007394 <HAL_GPIO_Init+0x350>)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007324:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <HAL_GPIO_Init+0x350>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	43db      	mvns	r3, r3
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4013      	ands	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007348:	4a12      	ldr	r2, [pc, #72]	; (8007394 <HAL_GPIO_Init+0x350>)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	3301      	adds	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	fa22 f303 	lsr.w	r3, r2, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	f47f ae78 	bne.w	8007054 <HAL_GPIO_Init+0x10>
  }
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	371c      	adds	r7, #28
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40021000 	.word	0x40021000
 8007378:	40010000 	.word	0x40010000
 800737c:	48000400 	.word	0x48000400
 8007380:	48000800 	.word	0x48000800
 8007384:	48000c00 	.word	0x48000c00
 8007388:	48001000 	.word	0x48001000
 800738c:	48001400 	.word	0x48001400
 8007390:	48001800 	.word	0x48001800
 8007394:	40010400 	.word	0x40010400

08007398 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80073a6:	e0cd      	b.n	8007544 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80073a8:	2201      	movs	r2, #1
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	fa02 f303 	lsl.w	r3, r2, r3
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	4013      	ands	r3, r2
 80073b4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 80c0 	beq.w	800753e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80073be:	4a68      	ldr	r2, [pc, #416]	; (8007560 <HAL_GPIO_DeInit+0x1c8>)
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	089b      	lsrs	r3, r3, #2
 80073c4:	3302      	adds	r3, #2
 80073c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f003 0303 	and.w	r3, r3, #3
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	220f      	movs	r2, #15
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4013      	ands	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073e6:	d025      	beq.n	8007434 <HAL_GPIO_DeInit+0x9c>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a5e      	ldr	r2, [pc, #376]	; (8007564 <HAL_GPIO_DeInit+0x1cc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d01f      	beq.n	8007430 <HAL_GPIO_DeInit+0x98>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a5d      	ldr	r2, [pc, #372]	; (8007568 <HAL_GPIO_DeInit+0x1d0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d019      	beq.n	800742c <HAL_GPIO_DeInit+0x94>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a5c      	ldr	r2, [pc, #368]	; (800756c <HAL_GPIO_DeInit+0x1d4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d013      	beq.n	8007428 <HAL_GPIO_DeInit+0x90>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a5b      	ldr	r2, [pc, #364]	; (8007570 <HAL_GPIO_DeInit+0x1d8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00d      	beq.n	8007424 <HAL_GPIO_DeInit+0x8c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a5a      	ldr	r2, [pc, #360]	; (8007574 <HAL_GPIO_DeInit+0x1dc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d007      	beq.n	8007420 <HAL_GPIO_DeInit+0x88>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a59      	ldr	r2, [pc, #356]	; (8007578 <HAL_GPIO_DeInit+0x1e0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d101      	bne.n	800741c <HAL_GPIO_DeInit+0x84>
 8007418:	2306      	movs	r3, #6
 800741a:	e00c      	b.n	8007436 <HAL_GPIO_DeInit+0x9e>
 800741c:	2307      	movs	r3, #7
 800741e:	e00a      	b.n	8007436 <HAL_GPIO_DeInit+0x9e>
 8007420:	2305      	movs	r3, #5
 8007422:	e008      	b.n	8007436 <HAL_GPIO_DeInit+0x9e>
 8007424:	2304      	movs	r3, #4
 8007426:	e006      	b.n	8007436 <HAL_GPIO_DeInit+0x9e>
 8007428:	2303      	movs	r3, #3
 800742a:	e004      	b.n	8007436 <HAL_GPIO_DeInit+0x9e>
 800742c:	2302      	movs	r3, #2
 800742e:	e002      	b.n	8007436 <HAL_GPIO_DeInit+0x9e>
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <HAL_GPIO_DeInit+0x9e>
 8007434:	2300      	movs	r3, #0
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	f002 0203 	and.w	r2, r2, #3
 800743c:	0092      	lsls	r2, r2, #2
 800743e:	4093      	lsls	r3, r2
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	429a      	cmp	r2, r3
 8007444:	d132      	bne.n	80074ac <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007446:	4b4d      	ldr	r3, [pc, #308]	; (800757c <HAL_GPIO_DeInit+0x1e4>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	43db      	mvns	r3, r3
 800744e:	494b      	ldr	r1, [pc, #300]	; (800757c <HAL_GPIO_DeInit+0x1e4>)
 8007450:	4013      	ands	r3, r2
 8007452:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007454:	4b49      	ldr	r3, [pc, #292]	; (800757c <HAL_GPIO_DeInit+0x1e4>)
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	43db      	mvns	r3, r3
 800745c:	4947      	ldr	r1, [pc, #284]	; (800757c <HAL_GPIO_DeInit+0x1e4>)
 800745e:	4013      	ands	r3, r2
 8007460:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007462:	4b46      	ldr	r3, [pc, #280]	; (800757c <HAL_GPIO_DeInit+0x1e4>)
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	43db      	mvns	r3, r3
 800746a:	4944      	ldr	r1, [pc, #272]	; (800757c <HAL_GPIO_DeInit+0x1e4>)
 800746c:	4013      	ands	r3, r2
 800746e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007470:	4b42      	ldr	r3, [pc, #264]	; (800757c <HAL_GPIO_DeInit+0x1e4>)
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	43db      	mvns	r3, r3
 8007478:	4940      	ldr	r1, [pc, #256]	; (800757c <HAL_GPIO_DeInit+0x1e4>)
 800747a:	4013      	ands	r3, r2
 800747c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f003 0303 	and.w	r3, r3, #3
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	220f      	movs	r2, #15
 8007488:	fa02 f303 	lsl.w	r3, r2, r3
 800748c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800748e:	4a34      	ldr	r2, [pc, #208]	; (8007560 <HAL_GPIO_DeInit+0x1c8>)
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	089b      	lsrs	r3, r3, #2
 8007494:	3302      	adds	r3, #2
 8007496:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	43da      	mvns	r2, r3
 800749e:	4830      	ldr	r0, [pc, #192]	; (8007560 <HAL_GPIO_DeInit+0x1c8>)
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	089b      	lsrs	r3, r3, #2
 80074a4:	400a      	ands	r2, r1
 80074a6:	3302      	adds	r3, #2
 80074a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	2103      	movs	r1, #3
 80074b6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	08da      	lsrs	r2, r3, #3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3208      	adds	r2, #8
 80074c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	220f      	movs	r2, #15
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	43db      	mvns	r3, r3
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	08d2      	lsrs	r2, r2, #3
 80074e0:	4019      	ands	r1, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3208      	adds	r2, #8
 80074e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689a      	ldr	r2, [r3, #8]
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	2103      	movs	r1, #3
 80074f4:	fa01 f303 	lsl.w	r3, r1, r3
 80074f8:	43db      	mvns	r3, r3
 80074fa:	401a      	ands	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	2101      	movs	r1, #1
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	fa01 f303 	lsl.w	r3, r1, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	401a      	ands	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	2103      	movs	r1, #3
 800751e:	fa01 f303 	lsl.w	r3, r1, r3
 8007522:	43db      	mvns	r3, r3
 8007524:	401a      	ands	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752e:	2101      	movs	r1, #1
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	fa01 f303 	lsl.w	r3, r1, r3
 8007536:	43db      	mvns	r3, r3
 8007538:	401a      	ands	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	3301      	adds	r3, #1
 8007542:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	fa22 f303 	lsr.w	r3, r2, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	f47f af2b 	bne.w	80073a8 <HAL_GPIO_DeInit+0x10>
  }
}
 8007552:	bf00      	nop
 8007554:	bf00      	nop
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	40010000 	.word	0x40010000
 8007564:	48000400 	.word	0x48000400
 8007568:	48000800 	.word	0x48000800
 800756c:	48000c00 	.word	0x48000c00
 8007570:	48001000 	.word	0x48001000
 8007574:	48001400 	.word	0x48001400
 8007578:	48001800 	.word	0x48001800
 800757c:	40010400 	.word	0x40010400

08007580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	807b      	strh	r3, [r7, #2]
 800758c:	4613      	mov	r3, r2
 800758e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007590:	787b      	ldrb	r3, [r7, #1]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007596:	887a      	ldrh	r2, [r7, #2]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800759c:	e002      	b.n	80075a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800759e:	887a      	ldrh	r2, [r7, #2]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80075ba:	4b08      	ldr	r3, [pc, #32]	; (80075dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075bc:	695a      	ldr	r2, [r3, #20]
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d006      	beq.n	80075d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075c6:	4a05      	ldr	r2, [pc, #20]	; (80075dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075cc:	88fb      	ldrh	r3, [r7, #6]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fc f850 	bl	8003674 <HAL_GPIO_EXTI_Callback>
  }
}
 80075d4:	bf00      	nop
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	40010400 	.word	0x40010400

080075e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e095      	b.n	800771e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d108      	bne.n	800760c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007602:	d009      	beq.n	8007618 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	61da      	str	r2, [r3, #28]
 800760a:	e005      	b.n	8007618 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fa fe74 	bl	8002320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800764e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007658:	d902      	bls.n	8007660 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800765a:	2300      	movs	r3, #0
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	e002      	b.n	8007666 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007664:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800766e:	d007      	beq.n	8007680 <HAL_SPI_Init+0xa0>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007678:	d002      	beq.n	8007680 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c2:	ea42 0103 	orr.w	r1, r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	f003 0204 	and.w	r2, r3, #4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80076fc:	ea42 0103 	orr.w	r1, r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e01a      	b.n	800776e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800774e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7fa fe2f 	bl	80023b4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b08a      	sub	sp, #40	; 0x28
 800777a:	af00      	add	r7, sp, #0
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	60b9      	str	r1, [r7, #8]
 8007780:	607a      	str	r2, [r7, #4]
 8007782:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007784:	2301      	movs	r3, #1
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_SPI_TransmitReceive+0x26>
 8007798:	2302      	movs	r3, #2
 800779a:	e1fb      	b.n	8007b94 <HAL_SPI_TransmitReceive+0x41e>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077a4:	f7fe fc14 	bl	8005fd0 <HAL_GetTick>
 80077a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80077b8:	887b      	ldrh	r3, [r7, #2]
 80077ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80077bc:	887b      	ldrh	r3, [r7, #2]
 80077be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077c0:	7efb      	ldrb	r3, [r7, #27]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d00e      	beq.n	80077e4 <HAL_SPI_TransmitReceive+0x6e>
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077cc:	d106      	bne.n	80077dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d102      	bne.n	80077dc <HAL_SPI_TransmitReceive+0x66>
 80077d6:	7efb      	ldrb	r3, [r7, #27]
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d003      	beq.n	80077e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80077dc:	2302      	movs	r3, #2
 80077de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80077e2:	e1cd      	b.n	8007b80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d005      	beq.n	80077f6 <HAL_SPI_TransmitReceive+0x80>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <HAL_SPI_TransmitReceive+0x80>
 80077f0:	887b      	ldrh	r3, [r7, #2]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d103      	bne.n	80077fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80077fc:	e1c0      	b.n	8007b80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b04      	cmp	r3, #4
 8007808:	d003      	beq.n	8007812 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2205      	movs	r2, #5
 800780e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	887a      	ldrh	r2, [r7, #2]
 8007822:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	887a      	ldrh	r2, [r7, #2]
 800782a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	887a      	ldrh	r2, [r7, #2]
 8007838:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	887a      	ldrh	r2, [r7, #2]
 800783e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007854:	d802      	bhi.n	800785c <HAL_SPI_TransmitReceive+0xe6>
 8007856:	8a3b      	ldrh	r3, [r7, #16]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d908      	bls.n	800786e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800786a:	605a      	str	r2, [r3, #4]
 800786c:	e007      	b.n	800787e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800787c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007888:	2b40      	cmp	r3, #64	; 0x40
 800788a:	d007      	beq.n	800789c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800789a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078a4:	d97c      	bls.n	80079a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_SPI_TransmitReceive+0x13e>
 80078ae:	8a7b      	ldrh	r3, [r7, #18]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d169      	bne.n	8007988 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	881a      	ldrh	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c4:	1c9a      	adds	r2, r3, #2
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078d8:	e056      	b.n	8007988 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d11b      	bne.n	8007920 <HAL_SPI_TransmitReceive+0x1aa>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d016      	beq.n	8007920 <HAL_SPI_TransmitReceive+0x1aa>
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d113      	bne.n	8007920 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	881a      	ldrh	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	1c9a      	adds	r2, r3, #2
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29a      	uxth	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b01      	cmp	r3, #1
 800792c:	d11c      	bne.n	8007968 <HAL_SPI_TransmitReceive+0x1f2>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007934:	b29b      	uxth	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d016      	beq.n	8007968 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	b292      	uxth	r2, r2
 8007946:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794c:	1c9a      	adds	r2, r3, #2
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007964:	2301      	movs	r3, #1
 8007966:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007968:	f7fe fb32 	bl	8005fd0 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007974:	429a      	cmp	r2, r3
 8007976:	d807      	bhi.n	8007988 <HAL_SPI_TransmitReceive+0x212>
 8007978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d003      	beq.n	8007988 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007986:	e0fb      	b.n	8007b80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1a3      	bne.n	80078da <HAL_SPI_TransmitReceive+0x164>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007998:	b29b      	uxth	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d19d      	bne.n	80078da <HAL_SPI_TransmitReceive+0x164>
 800799e:	e0df      	b.n	8007b60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_SPI_TransmitReceive+0x23a>
 80079a8:	8a7b      	ldrh	r3, [r7, #18]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	f040 80cb 	bne.w	8007b46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d912      	bls.n	80079e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	881a      	ldrh	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	1c9a      	adds	r2, r3, #2
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b02      	subs	r3, #2
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079de:	e0b2      	b.n	8007b46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	330c      	adds	r3, #12
 80079ea:	7812      	ldrb	r2, [r2, #0]
 80079ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a06:	e09e      	b.n	8007b46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d134      	bne.n	8007a80 <HAL_SPI_TransmitReceive+0x30a>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d02f      	beq.n	8007a80 <HAL_SPI_TransmitReceive+0x30a>
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d12c      	bne.n	8007a80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d912      	bls.n	8007a56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	881a      	ldrh	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	1c9a      	adds	r2, r3, #2
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b02      	subs	r3, #2
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a54:	e012      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	330c      	adds	r3, #12
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d148      	bne.n	8007b20 <HAL_SPI_TransmitReceive+0x3aa>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d042      	beq.n	8007b20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d923      	bls.n	8007aee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab0:	b292      	uxth	r2, r2
 8007ab2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	1c9a      	adds	r2, r3, #2
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b02      	subs	r3, #2
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d81f      	bhi.n	8007b1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007aea:	605a      	str	r2, [r3, #4]
 8007aec:	e016      	b.n	8007b1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f103 020c 	add.w	r2, r3, #12
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	7812      	ldrb	r2, [r2, #0]
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b20:	f7fe fa56 	bl	8005fd0 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d803      	bhi.n	8007b38 <HAL_SPI_TransmitReceive+0x3c2>
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d102      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x3c8>
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d103      	bne.n	8007b46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007b44:	e01c      	b.n	8007b80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f47f af5b 	bne.w	8007a08 <HAL_SPI_TransmitReceive+0x292>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f47f af54 	bne.w	8007a08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fc11 	bl	800838c <SPI_EndRxTxTransaction>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d006      	beq.n	8007b7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	661a      	str	r2, [r3, #96]	; 0x60
 8007b7c:	e000      	b.n	8007b80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007b7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3728      	adds	r7, #40	; 0x28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d101      	bne.n	8007bbc <HAL_SPI_TransmitReceive_IT+0x20>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e091      	b.n	8007ce0 <HAL_SPI_TransmitReceive_IT+0x144>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bca:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bd2:	7dbb      	ldrb	r3, [r7, #22]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d00d      	beq.n	8007bf4 <HAL_SPI_TransmitReceive_IT+0x58>
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bde:	d106      	bne.n	8007bee <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <HAL_SPI_TransmitReceive_IT+0x52>
 8007be8:	7dbb      	ldrb	r3, [r7, #22]
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d002      	beq.n	8007bf4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
 8007bf0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bf2:	e070      	b.n	8007cd6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <HAL_SPI_TransmitReceive_IT+0x6a>
 8007c00:	887b      	ldrh	r3, [r7, #2]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c0a:	e064      	b.n	8007cd6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d003      	beq.n	8007c20 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	887a      	ldrh	r2, [r7, #2]
 8007c30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	887a      	ldrh	r2, [r7, #2]
 8007c36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	887a      	ldrh	r2, [r7, #2]
 8007c42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	887a      	ldrh	r2, [r7, #2]
 8007c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c56:	d906      	bls.n	8007c66 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4a24      	ldr	r2, [pc, #144]	; (8007cec <HAL_SPI_TransmitReceive_IT+0x150>)
 8007c5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4a23      	ldr	r2, [pc, #140]	; (8007cf0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8007c62:	651a      	str	r2, [r3, #80]	; 0x50
 8007c64:	e005      	b.n	8007c72 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4a22      	ldr	r2, [pc, #136]	; (8007cf4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8007c6a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4a22      	ldr	r2, [pc, #136]	; (8007cf8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8007c70:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c7a:	d802      	bhi.n	8007c82 <HAL_SPI_TransmitReceive_IT+0xe6>
 8007c7c:	887b      	ldrh	r3, [r7, #2]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d908      	bls.n	8007c94 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	e007      	b.n	8007ca4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ca2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007cb2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbe:	2b40      	cmp	r3, #64	; 0x40
 8007cc0:	d008      	beq.n	8007cd4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	e000      	b.n	8007cd6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8007cd4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	0800808b 	.word	0x0800808b
 8007cf0:	080080f1 	.word	0x080080f1
 8007cf4:	08007f3b 	.word	0x08007f3b
 8007cf8:	08007ff9 	.word	0x08007ff9

08007cfc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	099b      	lsrs	r3, r3, #6
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10f      	bne.n	8007d40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	099b      	lsrs	r3, r3, #6
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
    return;
 8007d3e:	e0d7      	b.n	8007ef0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	085b      	lsrs	r3, r3, #1
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_SPI_IRQHandler+0x66>
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	09db      	lsrs	r3, r3, #7
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d004      	beq.n	8007d62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
    return;
 8007d60:	e0c6      	b.n	8007ef0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10c      	bne.n	8007d88 <HAL_SPI_IRQHandler+0x8c>
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	099b      	lsrs	r3, r3, #6
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d106      	bne.n	8007d88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	0a1b      	lsrs	r3, r3, #8
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 80b4 	beq.w	8007ef0 <HAL_SPI_IRQHandler+0x1f4>
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	095b      	lsrs	r3, r3, #5
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 80ad 	beq.w	8007ef0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	099b      	lsrs	r3, r3, #6
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d023      	beq.n	8007dea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d011      	beq.n	8007dd2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db2:	f043 0204 	orr.w	r2, r3, #4
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dba:	2300      	movs	r3, #0
 8007dbc:	617b      	str	r3, [r7, #20]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	617b      	str	r3, [r7, #20]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	e00b      	b.n	8007dea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	613b      	str	r3, [r7, #16]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	613b      	str	r3, [r7, #16]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	613b      	str	r3, [r7, #16]
 8007de6:	693b      	ldr	r3, [r7, #16]
        return;
 8007de8:	e082      	b.n	8007ef0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	095b      	lsrs	r3, r3, #5
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d014      	beq.n	8007e20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfa:	f043 0201 	orr.w	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	0a1b      	lsrs	r3, r3, #8
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00c      	beq.n	8007e46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e30:	f043 0208 	orr.w	r2, r3, #8
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60bb      	str	r3, [r7, #8]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	60bb      	str	r3, [r7, #8]
 8007e44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d04f      	beq.n	8007eee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d104      	bne.n	8007e7a <HAL_SPI_IRQHandler+0x17e>
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d034      	beq.n	8007ee4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0203 	bic.w	r2, r2, #3
 8007e88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d011      	beq.n	8007eb6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e96:	4a18      	ldr	r2, [pc, #96]	; (8007ef8 <HAL_SPI_IRQHandler+0x1fc>)
 8007e98:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff f88f 	bl	8006fc2 <HAL_DMA_Abort_IT>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d016      	beq.n	8007eec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec2:	4a0d      	ldr	r2, [pc, #52]	; (8007ef8 <HAL_SPI_IRQHandler+0x1fc>)
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff f879 	bl	8006fc2 <HAL_DMA_Abort_IT>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007ee2:	e003      	b.n	8007eec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fb fbf9 	bl	80036dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007eea:	e000      	b.n	8007eee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007eec:	bf00      	nop
    return;
 8007eee:	bf00      	nop
  }
}
 8007ef0:	3720      	adds	r7, #32
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	08007f11 	.word	0x08007f11

08007efc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7fb fbd5 	bl	80036dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f32:	bf00      	nop
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d923      	bls.n	8007f96 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	b292      	uxth	r2, r2
 8007f5a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	1c9a      	adds	r2, r3, #2
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	3b02      	subs	r3, #2
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d11f      	bne.n	8007fc4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f92:	605a      	str	r2, [r3, #4]
 8007f94:	e016      	b.n	8007fc4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f103 020c 	add.w	r2, r3, #12
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	7812      	ldrb	r2, [r2, #0]
 8007fa4:	b2d2      	uxtb	r2, r2
 8007fa6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10f      	bne.n	8007ff0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007fde:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa14 	bl	8008418 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008004:	b29b      	uxth	r3, r3
 8008006:	2b01      	cmp	r3, #1
 8008008:	d912      	bls.n	8008030 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	881a      	ldrh	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	1c9a      	adds	r2, r3, #2
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008024:	b29b      	uxth	r3, r3
 8008026:	3b02      	subs	r3, #2
 8008028:	b29a      	uxth	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800802e:	e012      	b.n	8008056 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	7812      	ldrb	r2, [r2, #0]
 800803c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800804c:	b29b      	uxth	r3, r3
 800804e:	3b01      	subs	r3, #1
 8008050:	b29a      	uxth	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805a:	b29b      	uxth	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d110      	bne.n	8008082 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800806e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008076:	b29b      	uxth	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f9cb 	bl	8008418 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008082:	bf00      	nop
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	b292      	uxth	r2, r2
 800809e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a4:	1c9a      	adds	r2, r3, #2
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10f      	bne.n	80080e8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080d6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080dc:	b29b      	uxth	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d102      	bne.n	80080e8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f998 	bl	8008418 <SPI_CloseRxTx_ISR>
    }
  }
}
 80080e8:	bf00      	nop
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	881a      	ldrh	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008112:	b29b      	uxth	r3, r3
 8008114:	3b01      	subs	r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d110      	bne.n	8008148 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008134:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800813c:	b29b      	uxth	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d102      	bne.n	8008148 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f968 	bl	8008418 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b088      	sub	sp, #32
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	603b      	str	r3, [r7, #0]
 800815c:	4613      	mov	r3, r2
 800815e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008160:	f7fd ff36 	bl	8005fd0 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008168:	1a9b      	subs	r3, r3, r2
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	4413      	add	r3, r2
 800816e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008170:	f7fd ff2e 	bl	8005fd0 <HAL_GetTick>
 8008174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008176:	4b39      	ldr	r3, [pc, #228]	; (800825c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	015b      	lsls	r3, r3, #5
 800817c:	0d1b      	lsrs	r3, r3, #20
 800817e:	69fa      	ldr	r2, [r7, #28]
 8008180:	fb02 f303 	mul.w	r3, r2, r3
 8008184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008186:	e054      	b.n	8008232 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818e:	d050      	beq.n	8008232 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008190:	f7fd ff1e 	bl	8005fd0 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	69fa      	ldr	r2, [r7, #28]
 800819c:	429a      	cmp	r2, r3
 800819e:	d902      	bls.n	80081a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d13d      	bne.n	8008222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081be:	d111      	bne.n	80081e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081c8:	d004      	beq.n	80081d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d2:	d107      	bne.n	80081e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ec:	d10f      	bne.n	800820e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800820c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e017      	b.n	8008252 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	3b01      	subs	r3, #1
 8008230:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	4013      	ands	r3, r2
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	429a      	cmp	r2, r3
 8008240:	bf0c      	ite	eq
 8008242:	2301      	moveq	r3, #1
 8008244:	2300      	movne	r3, #0
 8008246:	b2db      	uxtb	r3, r3
 8008248:	461a      	mov	r2, r3
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	429a      	cmp	r2, r3
 800824e:	d19b      	bne.n	8008188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3720      	adds	r7, #32
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20000004 	.word	0x20000004

08008260 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08a      	sub	sp, #40	; 0x28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008272:	f7fd fead 	bl	8005fd0 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	1a9b      	subs	r3, r3, r2
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	4413      	add	r3, r2
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008282:	f7fd fea5 	bl	8005fd0 <HAL_GetTick>
 8008286:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008290:	4b3d      	ldr	r3, [pc, #244]	; (8008388 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	00da      	lsls	r2, r3, #3
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	0d1b      	lsrs	r3, r3, #20
 80082a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a2:	fb02 f303 	mul.w	r3, r2, r3
 80082a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80082a8:	e060      	b.n	800836c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80082b0:	d107      	bne.n	80082c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d104      	bne.n	80082c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c8:	d050      	beq.n	800836c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082ca:	f7fd fe81 	bl	8005fd0 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d902      	bls.n	80082e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d13d      	bne.n	800835c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082f8:	d111      	bne.n	800831e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008302:	d004      	beq.n	800830e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800830c:	d107      	bne.n	800831e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800831c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008326:	d10f      	bne.n	8008348 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008346:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e010      	b.n	800837e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	3b01      	subs	r3, #1
 800836a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	4013      	ands	r3, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	429a      	cmp	r2, r3
 800837a:	d196      	bne.n	80082aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3728      	adds	r7, #40	; 0x28
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20000004 	.word	0x20000004

0800838c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af02      	add	r7, sp, #8
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2200      	movs	r2, #0
 80083a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f7ff ff5b 	bl	8008260 <SPI_WaitFifoStateUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b4:	f043 0220 	orr.w	r2, r3, #32
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e027      	b.n	8008410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2200      	movs	r2, #0
 80083c8:	2180      	movs	r1, #128	; 0x80
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f7ff fec0 	bl	8008150 <SPI_WaitFlagStateUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083da:	f043 0220 	orr.w	r2, r3, #32
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e014      	b.n	8008410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f7ff ff34 	bl	8008260 <SPI_WaitFifoStateUntilTimeout>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008402:	f043 0220 	orr.w	r2, r3, #32
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e000      	b.n	8008410 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008420:	f7fd fdd6 	bl	8005fd0 <HAL_GetTick>
 8008424:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0220 	bic.w	r2, r2, #32
 8008434:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	2164      	movs	r1, #100	; 0x64
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7ff ffa6 	bl	800838c <SPI_EndRxTxTransaction>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d005      	beq.n	8008452 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800844a:	f043 0220 	orr.w	r2, r3, #32
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008456:	2b00      	cmp	r3, #0
 8008458:	d115      	bne.n	8008486 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b04      	cmp	r3, #4
 8008464:	d107      	bne.n	8008476 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7ff fd44 	bl	8007efc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008474:	e00e      	b.n	8008494 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7fb f91c 	bl	80036bc <HAL_SPI_TxRxCpltCallback>
}
 8008484:	e006      	b.n	8008494 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fb f924 	bl	80036dc <HAL_SPI_ErrorCallback>
}
 8008494:	bf00      	nop
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e049      	b.n	8008542 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fa f8ac 	bl	8002620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3304      	adds	r3, #4
 80084d8:	4619      	mov	r1, r3
 80084da:	4610      	mov	r0, r2
 80084dc:	f000 fab8 	bl	8008a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
	...

0800854c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b01      	cmp	r3, #1
 800855e:	d001      	beq.n	8008564 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e047      	b.n	80085f4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a23      	ldr	r2, [pc, #140]	; (8008600 <HAL_TIM_Base_Start+0xb4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d01d      	beq.n	80085b2 <HAL_TIM_Base_Start+0x66>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800857e:	d018      	beq.n	80085b2 <HAL_TIM_Base_Start+0x66>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1f      	ldr	r2, [pc, #124]	; (8008604 <HAL_TIM_Base_Start+0xb8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d013      	beq.n	80085b2 <HAL_TIM_Base_Start+0x66>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1e      	ldr	r2, [pc, #120]	; (8008608 <HAL_TIM_Base_Start+0xbc>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00e      	beq.n	80085b2 <HAL_TIM_Base_Start+0x66>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a1c      	ldr	r2, [pc, #112]	; (800860c <HAL_TIM_Base_Start+0xc0>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d009      	beq.n	80085b2 <HAL_TIM_Base_Start+0x66>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a1b      	ldr	r2, [pc, #108]	; (8008610 <HAL_TIM_Base_Start+0xc4>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d004      	beq.n	80085b2 <HAL_TIM_Base_Start+0x66>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a19      	ldr	r2, [pc, #100]	; (8008614 <HAL_TIM_Base_Start+0xc8>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d115      	bne.n	80085de <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	4b17      	ldr	r3, [pc, #92]	; (8008618 <HAL_TIM_Base_Start+0xcc>)
 80085ba:	4013      	ands	r3, r2
 80085bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b06      	cmp	r3, #6
 80085c2:	d015      	beq.n	80085f0 <HAL_TIM_Base_Start+0xa4>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ca:	d011      	beq.n	80085f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f042 0201 	orr.w	r2, r2, #1
 80085da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085dc:	e008      	b.n	80085f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f042 0201 	orr.w	r2, r2, #1
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	e000      	b.n	80085f2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	40012c00 	.word	0x40012c00
 8008604:	40000400 	.word	0x40000400
 8008608:	40000800 	.word	0x40000800
 800860c:	40000c00 	.word	0x40000c00
 8008610:	40013400 	.word	0x40013400
 8008614:	40014000 	.word	0x40014000
 8008618:	00010007 	.word	0x00010007

0800861c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b02      	cmp	r3, #2
 8008630:	d122      	bne.n	8008678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b02      	cmp	r3, #2
 800863e:	d11b      	bne.n	8008678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f06f 0202 	mvn.w	r2, #2
 8008648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f9d8 	bl	8008a14 <HAL_TIM_IC_CaptureCallback>
 8008664:	e005      	b.n	8008672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f9ca 	bl	8008a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f9db 	bl	8008a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	f003 0304 	and.w	r3, r3, #4
 8008682:	2b04      	cmp	r3, #4
 8008684:	d122      	bne.n	80086cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b04      	cmp	r3, #4
 8008692:	d11b      	bne.n	80086cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f06f 0204 	mvn.w	r2, #4
 800869c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2202      	movs	r2, #2
 80086a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f9ae 	bl	8008a14 <HAL_TIM_IC_CaptureCallback>
 80086b8:	e005      	b.n	80086c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f9a0 	bl	8008a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f9b1 	bl	8008a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b08      	cmp	r3, #8
 80086d8:	d122      	bne.n	8008720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f003 0308 	and.w	r3, r3, #8
 80086e4:	2b08      	cmp	r3, #8
 80086e6:	d11b      	bne.n	8008720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f06f 0208 	mvn.w	r2, #8
 80086f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2204      	movs	r2, #4
 80086f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f984 	bl	8008a14 <HAL_TIM_IC_CaptureCallback>
 800870c:	e005      	b.n	800871a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f976 	bl	8008a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f987 	bl	8008a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	f003 0310 	and.w	r3, r3, #16
 800872a:	2b10      	cmp	r3, #16
 800872c:	d122      	bne.n	8008774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b10      	cmp	r3, #16
 800873a:	d11b      	bne.n	8008774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f06f 0210 	mvn.w	r2, #16
 8008744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2208      	movs	r2, #8
 800874a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f95a 	bl	8008a14 <HAL_TIM_IC_CaptureCallback>
 8008760:	e005      	b.n	800876e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f94c 	bl	8008a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f95d 	bl	8008a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b01      	cmp	r3, #1
 8008780:	d10e      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b01      	cmp	r3, #1
 800878e:	d107      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f06f 0201 	mvn.w	r2, #1
 8008798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f926 	bl	80089ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087aa:	2b80      	cmp	r3, #128	; 0x80
 80087ac:	d10e      	bne.n	80087cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087b8:	2b80      	cmp	r3, #128	; 0x80
 80087ba:	d107      	bne.n	80087cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fb08 	bl	8008ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087da:	d10e      	bne.n	80087fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e6:	2b80      	cmp	r3, #128	; 0x80
 80087e8:	d107      	bne.n	80087fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fafb 	bl	8008df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008804:	2b40      	cmp	r3, #64	; 0x40
 8008806:	d10e      	bne.n	8008826 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008812:	2b40      	cmp	r3, #64	; 0x40
 8008814:	d107      	bne.n	8008826 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800881e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f90b 	bl	8008a3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	f003 0320 	and.w	r3, r3, #32
 8008830:	2b20      	cmp	r3, #32
 8008832:	d10e      	bne.n	8008852 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b20      	cmp	r3, #32
 8008840:	d107      	bne.n	8008852 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f06f 0220 	mvn.w	r2, #32
 800884a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fabb 	bl	8008dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008852:	bf00      	nop
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800886e:	2b01      	cmp	r3, #1
 8008870:	d101      	bne.n	8008876 <HAL_TIM_ConfigClockSource+0x1c>
 8008872:	2302      	movs	r3, #2
 8008874:	e0b6      	b.n	80089e4 <HAL_TIM_ConfigClockSource+0x18a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2202      	movs	r2, #2
 8008882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008894:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008898:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088a0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088b2:	d03e      	beq.n	8008932 <HAL_TIM_ConfigClockSource+0xd8>
 80088b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088b8:	f200 8087 	bhi.w	80089ca <HAL_TIM_ConfigClockSource+0x170>
 80088bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c0:	f000 8086 	beq.w	80089d0 <HAL_TIM_ConfigClockSource+0x176>
 80088c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c8:	d87f      	bhi.n	80089ca <HAL_TIM_ConfigClockSource+0x170>
 80088ca:	2b70      	cmp	r3, #112	; 0x70
 80088cc:	d01a      	beq.n	8008904 <HAL_TIM_ConfigClockSource+0xaa>
 80088ce:	2b70      	cmp	r3, #112	; 0x70
 80088d0:	d87b      	bhi.n	80089ca <HAL_TIM_ConfigClockSource+0x170>
 80088d2:	2b60      	cmp	r3, #96	; 0x60
 80088d4:	d050      	beq.n	8008978 <HAL_TIM_ConfigClockSource+0x11e>
 80088d6:	2b60      	cmp	r3, #96	; 0x60
 80088d8:	d877      	bhi.n	80089ca <HAL_TIM_ConfigClockSource+0x170>
 80088da:	2b50      	cmp	r3, #80	; 0x50
 80088dc:	d03c      	beq.n	8008958 <HAL_TIM_ConfigClockSource+0xfe>
 80088de:	2b50      	cmp	r3, #80	; 0x50
 80088e0:	d873      	bhi.n	80089ca <HAL_TIM_ConfigClockSource+0x170>
 80088e2:	2b40      	cmp	r3, #64	; 0x40
 80088e4:	d058      	beq.n	8008998 <HAL_TIM_ConfigClockSource+0x13e>
 80088e6:	2b40      	cmp	r3, #64	; 0x40
 80088e8:	d86f      	bhi.n	80089ca <HAL_TIM_ConfigClockSource+0x170>
 80088ea:	2b30      	cmp	r3, #48	; 0x30
 80088ec:	d064      	beq.n	80089b8 <HAL_TIM_ConfigClockSource+0x15e>
 80088ee:	2b30      	cmp	r3, #48	; 0x30
 80088f0:	d86b      	bhi.n	80089ca <HAL_TIM_ConfigClockSource+0x170>
 80088f2:	2b20      	cmp	r3, #32
 80088f4:	d060      	beq.n	80089b8 <HAL_TIM_ConfigClockSource+0x15e>
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d867      	bhi.n	80089ca <HAL_TIM_ConfigClockSource+0x170>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d05c      	beq.n	80089b8 <HAL_TIM_ConfigClockSource+0x15e>
 80088fe:	2b10      	cmp	r3, #16
 8008900:	d05a      	beq.n	80089b8 <HAL_TIM_ConfigClockSource+0x15e>
 8008902:	e062      	b.n	80089ca <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	6899      	ldr	r1, [r3, #8]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f000 f9b0 	bl	8008c78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008926:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	609a      	str	r2, [r3, #8]
      break;
 8008930:	e04f      	b.n	80089d2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	6899      	ldr	r1, [r3, #8]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f000 f999 	bl	8008c78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008954:	609a      	str	r2, [r3, #8]
      break;
 8008956:	e03c      	b.n	80089d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6818      	ldr	r0, [r3, #0]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	6859      	ldr	r1, [r3, #4]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	461a      	mov	r2, r3
 8008966:	f000 f90d 	bl	8008b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2150      	movs	r1, #80	; 0x50
 8008970:	4618      	mov	r0, r3
 8008972:	f000 f966 	bl	8008c42 <TIM_ITRx_SetConfig>
      break;
 8008976:	e02c      	b.n	80089d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6818      	ldr	r0, [r3, #0]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	6859      	ldr	r1, [r3, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	461a      	mov	r2, r3
 8008986:	f000 f92c 	bl	8008be2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2160      	movs	r1, #96	; 0x60
 8008990:	4618      	mov	r0, r3
 8008992:	f000 f956 	bl	8008c42 <TIM_ITRx_SetConfig>
      break;
 8008996:	e01c      	b.n	80089d2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	6859      	ldr	r1, [r3, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	461a      	mov	r2, r3
 80089a6:	f000 f8ed 	bl	8008b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2140      	movs	r1, #64	; 0x40
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 f946 	bl	8008c42 <TIM_ITRx_SetConfig>
      break;
 80089b6:	e00c      	b.n	80089d2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4619      	mov	r1, r3
 80089c2:	4610      	mov	r0, r2
 80089c4:	f000 f93d 	bl	8008c42 <TIM_ITRx_SetConfig>
      break;
 80089c8:	e003      	b.n	80089d2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	73fb      	strb	r3, [r7, #15]
      break;
 80089ce:	e000      	b.n	80089d2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80089d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a40      	ldr	r2, [pc, #256]	; (8008b64 <TIM_Base_SetConfig+0x114>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d013      	beq.n	8008a90 <TIM_Base_SetConfig+0x40>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a6e:	d00f      	beq.n	8008a90 <TIM_Base_SetConfig+0x40>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a3d      	ldr	r2, [pc, #244]	; (8008b68 <TIM_Base_SetConfig+0x118>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00b      	beq.n	8008a90 <TIM_Base_SetConfig+0x40>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a3c      	ldr	r2, [pc, #240]	; (8008b6c <TIM_Base_SetConfig+0x11c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d007      	beq.n	8008a90 <TIM_Base_SetConfig+0x40>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a3b      	ldr	r2, [pc, #236]	; (8008b70 <TIM_Base_SetConfig+0x120>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d003      	beq.n	8008a90 <TIM_Base_SetConfig+0x40>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a3a      	ldr	r2, [pc, #232]	; (8008b74 <TIM_Base_SetConfig+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d108      	bne.n	8008aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a2f      	ldr	r2, [pc, #188]	; (8008b64 <TIM_Base_SetConfig+0x114>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d01f      	beq.n	8008aea <TIM_Base_SetConfig+0x9a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab0:	d01b      	beq.n	8008aea <TIM_Base_SetConfig+0x9a>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a2c      	ldr	r2, [pc, #176]	; (8008b68 <TIM_Base_SetConfig+0x118>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d017      	beq.n	8008aea <TIM_Base_SetConfig+0x9a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a2b      	ldr	r2, [pc, #172]	; (8008b6c <TIM_Base_SetConfig+0x11c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d013      	beq.n	8008aea <TIM_Base_SetConfig+0x9a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a2a      	ldr	r2, [pc, #168]	; (8008b70 <TIM_Base_SetConfig+0x120>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d00f      	beq.n	8008aea <TIM_Base_SetConfig+0x9a>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a29      	ldr	r2, [pc, #164]	; (8008b74 <TIM_Base_SetConfig+0x124>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00b      	beq.n	8008aea <TIM_Base_SetConfig+0x9a>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a28      	ldr	r2, [pc, #160]	; (8008b78 <TIM_Base_SetConfig+0x128>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d007      	beq.n	8008aea <TIM_Base_SetConfig+0x9a>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a27      	ldr	r2, [pc, #156]	; (8008b7c <TIM_Base_SetConfig+0x12c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d003      	beq.n	8008aea <TIM_Base_SetConfig+0x9a>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a26      	ldr	r2, [pc, #152]	; (8008b80 <TIM_Base_SetConfig+0x130>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d108      	bne.n	8008afc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a10      	ldr	r2, [pc, #64]	; (8008b64 <TIM_Base_SetConfig+0x114>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00f      	beq.n	8008b48 <TIM_Base_SetConfig+0xf8>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a12      	ldr	r2, [pc, #72]	; (8008b74 <TIM_Base_SetConfig+0x124>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d00b      	beq.n	8008b48 <TIM_Base_SetConfig+0xf8>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a11      	ldr	r2, [pc, #68]	; (8008b78 <TIM_Base_SetConfig+0x128>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d007      	beq.n	8008b48 <TIM_Base_SetConfig+0xf8>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a10      	ldr	r2, [pc, #64]	; (8008b7c <TIM_Base_SetConfig+0x12c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d003      	beq.n	8008b48 <TIM_Base_SetConfig+0xf8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a0f      	ldr	r2, [pc, #60]	; (8008b80 <TIM_Base_SetConfig+0x130>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d103      	bne.n	8008b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	691a      	ldr	r2, [r3, #16]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	615a      	str	r2, [r3, #20]
}
 8008b56:	bf00      	nop
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	40012c00 	.word	0x40012c00
 8008b68:	40000400 	.word	0x40000400
 8008b6c:	40000800 	.word	0x40000800
 8008b70:	40000c00 	.word	0x40000c00
 8008b74:	40013400 	.word	0x40013400
 8008b78:	40014000 	.word	0x40014000
 8008b7c:	40014400 	.word	0x40014400
 8008b80:	40014800 	.word	0x40014800

08008b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f023 0201 	bic.w	r2, r3, #1
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	011b      	lsls	r3, r3, #4
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f023 030a 	bic.w	r3, r3, #10
 8008bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	621a      	str	r2, [r3, #32]
}
 8008bd6:	bf00      	nop
 8008bd8:	371c      	adds	r7, #28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b087      	sub	sp, #28
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	f023 0210 	bic.w	r2, r3, #16
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	031b      	lsls	r3, r3, #12
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	621a      	str	r2, [r3, #32]
}
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b085      	sub	sp, #20
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	f043 0307 	orr.w	r3, r3, #7
 8008c64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	609a      	str	r2, [r3, #8]
}
 8008c6c:	bf00      	nop
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	021a      	lsls	r2, r3, #8
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	609a      	str	r2, [r3, #8]
}
 8008cac:	bf00      	nop
 8008cae:	371c      	adds	r7, #28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d101      	bne.n	8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e068      	b.n	8008da2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a2e      	ldr	r2, [pc, #184]	; (8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d004      	beq.n	8008d04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a2d      	ldr	r2, [pc, #180]	; (8008db4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d108      	bne.n	8008d16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a1e      	ldr	r2, [pc, #120]	; (8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d01d      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d42:	d018      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a1b      	ldr	r2, [pc, #108]	; (8008db8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d013      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a1a      	ldr	r2, [pc, #104]	; (8008dbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d00e      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a18      	ldr	r2, [pc, #96]	; (8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d009      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a13      	ldr	r2, [pc, #76]	; (8008db4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d004      	beq.n	8008d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a14      	ldr	r2, [pc, #80]	; (8008dc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d10c      	bne.n	8008d90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	40012c00 	.word	0x40012c00
 8008db4:	40013400 	.word	0x40013400
 8008db8:	40000400 	.word	0x40000400
 8008dbc:	40000800 	.word	0x40000800
 8008dc0:	40000c00 	.word	0x40000c00
 8008dc4:	40014000 	.word	0x40014000

08008dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <LL_ADC_REG_SetSequencerLength>:
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e12:	f023 020f 	bic.w	r2, r3, #15
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <LL_ADC_IsEnabled>:
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <LL_ADC_IsEnabled+0x18>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e000      	b.n	8008e44 <LL_ADC_IsEnabled+0x1a>
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8008e50:	b590      	push	{r4, r7, lr}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8008e5e:	481c      	ldr	r0, [pc, #112]	; (8008ed0 <LL_ADC_CommonInit+0x80>)
 8008e60:	f7ff ffe3 	bl	8008e2a <LL_ADC_IsEnabled>
 8008e64:	4604      	mov	r4, r0
 8008e66:	481b      	ldr	r0, [pc, #108]	; (8008ed4 <LL_ADC_CommonInit+0x84>)
 8008e68:	f7ff ffdf 	bl	8008e2a <LL_ADC_IsEnabled>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	431c      	orrs	r4, r3
 8008e70:	4819      	ldr	r0, [pc, #100]	; (8008ed8 <LL_ADC_CommonInit+0x88>)
 8008e72:	f7ff ffda 	bl	8008e2a <LL_ADC_IsEnabled>
 8008e76:	4603      	mov	r3, r0
 8008e78:	4323      	orrs	r3, r4
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d120      	bne.n	8008ec0 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d012      	beq.n	8008eac <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	4b14      	ldr	r3, [pc, #80]	; (8008edc <LL_ADC_CommonInit+0x8c>)
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	6811      	ldr	r1, [r2, #0]
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	6852      	ldr	r2, [r2, #4]
 8008e96:	4311      	orrs	r1, r2
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	6892      	ldr	r2, [r2, #8]
 8008e9c:	4311      	orrs	r1, r2
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	68d2      	ldr	r2, [r2, #12]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	609a      	str	r2, [r3, #8]
 8008eaa:	e00b      	b.n	8008ec4 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689a      	ldr	r2, [r3, #8]
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <LL_ADC_CommonInit+0x8c>)
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	6812      	ldr	r2, [r2, #0]
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	609a      	str	r2, [r3, #8]
 8008ebe:	e001      	b.n	8008ec4 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd90      	pop	{r4, r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	50040000 	.word	0x50040000
 8008ed4:	50040100 	.word	0x50040100
 8008ed8:	50040200 	.word	0x50040200
 8008edc:	ffc030e0 	.word	0xffc030e0

08008ee0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff ff9b 	bl	8008e2a <LL_ADC_IsEnabled>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d111      	bne.n	8008f1e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f02:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	6811      	ldr	r1, [r2, #0]
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	6852      	ldr	r2, [r2, #4]
 8008f0e:	4311      	orrs	r1, r2
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	6892      	ldr	r2, [r2, #8]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	60da      	str	r2, [r3, #12]
 8008f1c:	e001      	b.n	8008f22 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7ff ff75 	bl	8008e2a <LL_ADC_IsEnabled>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d132      	bne.n	8008fac <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d015      	beq.n	8008f7a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	4b1a      	ldr	r3, [pc, #104]	; (8008fbc <LL_ADC_REG_Init+0x90>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	6811      	ldr	r1, [r2, #0]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	6892      	ldr	r2, [r2, #8]
 8008f5e:	4311      	orrs	r1, r2
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	68d2      	ldr	r2, [r2, #12]
 8008f64:	4311      	orrs	r1, r2
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	6912      	ldr	r2, [r2, #16]
 8008f6a:	4311      	orrs	r1, r2
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	6952      	ldr	r2, [r2, #20]
 8008f70:	430a      	orrs	r2, r1
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	60da      	str	r2, [r3, #12]
 8008f78:	e011      	b.n	8008f9e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <LL_ADC_REG_Init+0x90>)
 8008f80:	4013      	ands	r3, r2
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	6811      	ldr	r1, [r2, #0]
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	68d2      	ldr	r2, [r2, #12]
 8008f8a:	4311      	orrs	r1, r2
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	6912      	ldr	r2, [r2, #16]
 8008f90:	4311      	orrs	r1, r2
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	6952      	ldr	r2, [r2, #20]
 8008f96:	430a      	orrs	r2, r1
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff ff2d 	bl	8008e04 <LL_ADC_REG_SetSequencerLength>
 8008faa:	e001      	b.n	8008fb0 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	fff0c03c 	.word	0xfff0c03c

08008fc0 <LL_GPIO_SetPinMode>:
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b08b      	sub	sp, #44	; 0x2c
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	fa93 f3a3 	rbit	r3, r3
 8008fda:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8008fe6:	2320      	movs	r3, #32
 8008fe8:	e003      	b.n	8008ff2 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	fab3 f383 	clz	r3, r3
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	2103      	movs	r1, #3
 8008ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8008ffa:	43db      	mvns	r3, r3
 8008ffc:	401a      	ands	r2, r3
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	fa93 f3a3 	rbit	r3, r3
 8009008:	61fb      	str	r3, [r7, #28]
  return result;
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009014:	2320      	movs	r3, #32
 8009016:	e003      	b.n	8009020 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	fab3 f383 	clz	r3, r3
 800901e:	b2db      	uxtb	r3, r3
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	fa01 f303 	lsl.w	r3, r1, r3
 8009028:	431a      	orrs	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	601a      	str	r2, [r3, #0]
}
 800902e:	bf00      	nop
 8009030:	372c      	adds	r7, #44	; 0x2c
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <LL_GPIO_SetPinOutputType>:
{
 800903a:	b480      	push	{r7}
 800903c:	b085      	sub	sp, #20
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	43db      	mvns	r3, r3
 800904e:	401a      	ands	r2, r3
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	fb01 f303 	mul.w	r3, r1, r3
 8009058:	431a      	orrs	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	605a      	str	r2, [r3, #4]
}
 800905e:	bf00      	nop
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <LL_GPIO_SetPinSpeed>:
{
 800906a:	b480      	push	{r7}
 800906c:	b08b      	sub	sp, #44	; 0x2c
 800906e:	af00      	add	r7, sp, #0
 8009070:	60f8      	str	r0, [r7, #12]
 8009072:	60b9      	str	r1, [r7, #8]
 8009074:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	fa93 f3a3 	rbit	r3, r3
 8009084:	613b      	str	r3, [r7, #16]
  return result;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009090:	2320      	movs	r3, #32
 8009092:	e003      	b.n	800909c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	fab3 f383 	clz	r3, r3
 800909a:	b2db      	uxtb	r3, r3
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	2103      	movs	r1, #3
 80090a0:	fa01 f303 	lsl.w	r3, r1, r3
 80090a4:	43db      	mvns	r3, r3
 80090a6:	401a      	ands	r2, r3
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	fa93 f3a3 	rbit	r3, r3
 80090b2:	61fb      	str	r3, [r7, #28]
  return result;
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80090be:	2320      	movs	r3, #32
 80090c0:	e003      	b.n	80090ca <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	fab3 f383 	clz	r3, r3
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	005b      	lsls	r3, r3, #1
 80090cc:	6879      	ldr	r1, [r7, #4]
 80090ce:	fa01 f303 	lsl.w	r3, r1, r3
 80090d2:	431a      	orrs	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	609a      	str	r2, [r3, #8]
}
 80090d8:	bf00      	nop
 80090da:	372c      	adds	r7, #44	; 0x2c
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <LL_GPIO_SetPinPull>:
{
 80090e4:	b480      	push	{r7}
 80090e6:	b08b      	sub	sp, #44	; 0x2c
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	fa93 f3a3 	rbit	r3, r3
 80090fe:	613b      	str	r3, [r7, #16]
  return result;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800910a:	2320      	movs	r3, #32
 800910c:	e003      	b.n	8009116 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	fab3 f383 	clz	r3, r3
 8009114:	b2db      	uxtb	r3, r3
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	2103      	movs	r1, #3
 800911a:	fa01 f303 	lsl.w	r3, r1, r3
 800911e:	43db      	mvns	r3, r3
 8009120:	401a      	ands	r2, r3
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	fa93 f3a3 	rbit	r3, r3
 800912c:	61fb      	str	r3, [r7, #28]
  return result;
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009138:	2320      	movs	r3, #32
 800913a:	e003      	b.n	8009144 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	fab3 f383 	clz	r3, r3
 8009142:	b2db      	uxtb	r3, r3
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	fa01 f303 	lsl.w	r3, r1, r3
 800914c:	431a      	orrs	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	60da      	str	r2, [r3, #12]
}
 8009152:	bf00      	nop
 8009154:	372c      	adds	r7, #44	; 0x2c
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <LL_GPIO_SetAFPin_0_7>:
{
 800915e:	b480      	push	{r7}
 8009160:	b08b      	sub	sp, #44	; 0x2c
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6a1a      	ldr	r2, [r3, #32]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	fa93 f3a3 	rbit	r3, r3
 8009178:	613b      	str	r3, [r7, #16]
  return result;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009184:	2320      	movs	r3, #32
 8009186:	e003      	b.n	8009190 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	fab3 f383 	clz	r3, r3
 800918e:	b2db      	uxtb	r3, r3
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	210f      	movs	r1, #15
 8009194:	fa01 f303 	lsl.w	r3, r1, r3
 8009198:	43db      	mvns	r3, r3
 800919a:	401a      	ands	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a0:	6a3b      	ldr	r3, [r7, #32]
 80091a2:	fa93 f3a3 	rbit	r3, r3
 80091a6:	61fb      	str	r3, [r7, #28]
  return result;
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80091b2:	2320      	movs	r3, #32
 80091b4:	e003      	b.n	80091be <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	fab3 f383 	clz	r3, r3
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	fa01 f303 	lsl.w	r3, r1, r3
 80091c6:	431a      	orrs	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	621a      	str	r2, [r3, #32]
}
 80091cc:	bf00      	nop
 80091ce:	372c      	adds	r7, #44	; 0x2c
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <LL_GPIO_SetAFPin_8_15>:
{
 80091d8:	b480      	push	{r7}
 80091da:	b08b      	sub	sp, #44	; 0x2c
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	fa93 f3a3 	rbit	r3, r3
 80091f4:	613b      	str	r3, [r7, #16]
  return result;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009200:	2320      	movs	r3, #32
 8009202:	e003      	b.n	800920c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	fab3 f383 	clz	r3, r3
 800920a:	b2db      	uxtb	r3, r3
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	210f      	movs	r1, #15
 8009210:	fa01 f303 	lsl.w	r3, r1, r3
 8009214:	43db      	mvns	r3, r3
 8009216:	401a      	ands	r2, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	0a1b      	lsrs	r3, r3, #8
 800921c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	fa93 f3a3 	rbit	r3, r3
 8009224:	61fb      	str	r3, [r7, #28]
  return result;
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009230:	2320      	movs	r3, #32
 8009232:	e003      	b.n	800923c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	fab3 f383 	clz	r3, r3
 800923a:	b2db      	uxtb	r3, r3
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	fa01 f303 	lsl.w	r3, r1, r3
 8009244:	431a      	orrs	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	625a      	str	r2, [r3, #36]	; 0x24
}
 800924a:	bf00      	nop
 800924c:	372c      	adds	r7, #44	; 0x2c
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr

08009256 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b088      	sub	sp, #32
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	fa93 f3a3 	rbit	r3, r3
 800926c:	60fb      	str	r3, [r7, #12]
  return result;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <LL_GPIO_Init+0x26>
    return 32U;
 8009278:	2320      	movs	r3, #32
 800927a:	e003      	b.n	8009284 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	fab3 f383 	clz	r3, r3
 8009282:	b2db      	uxtb	r3, r3
 8009284:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009286:	e048      	b.n	800931a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	2101      	movs	r1, #1
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	fa01 f303 	lsl.w	r3, r1, r3
 8009294:	4013      	ands	r3, r2
 8009296:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d03a      	beq.n	8009314 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d003      	beq.n	80092ae <LL_GPIO_Init+0x58>
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d10e      	bne.n	80092cc <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	461a      	mov	r2, r3
 80092b4:	69b9      	ldr	r1, [r7, #24]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff fed7 	bl	800906a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	6819      	ldr	r1, [r3, #0]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	461a      	mov	r2, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7ff feb7 	bl	800903a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	461a      	mov	r2, r3
 80092d2:	69b9      	ldr	r1, [r7, #24]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff ff05 	bl	80090e4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d111      	bne.n	8009306 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2bff      	cmp	r3, #255	; 0xff
 80092e6:	d807      	bhi.n	80092f8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	461a      	mov	r2, r3
 80092ee:	69b9      	ldr	r1, [r7, #24]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff ff34 	bl	800915e <LL_GPIO_SetAFPin_0_7>
 80092f6:	e006      	b.n	8009306 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	461a      	mov	r2, r3
 80092fe:	69b9      	ldr	r1, [r7, #24]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff ff69 	bl	80091d8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	461a      	mov	r2, r3
 800930c:	69b9      	ldr	r1, [r7, #24]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff fe56 	bl	8008fc0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	3301      	adds	r3, #1
 8009318:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	fa22 f303 	lsr.w	r3, r2, r3
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1af      	bne.n	8009288 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800933c:	4a04      	ldr	r2, [pc, #16]	; (8009350 <LL_SetSystemCoreClock+0x1c>)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6013      	str	r3, [r2, #0]
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000004 	.word	0x20000004

08009354 <__errno>:
 8009354:	4b01      	ldr	r3, [pc, #4]	; (800935c <__errno+0x8>)
 8009356:	6818      	ldr	r0, [r3, #0]
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	20000010 	.word	0x20000010

08009360 <__libc_init_array>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	4d0d      	ldr	r5, [pc, #52]	; (8009398 <__libc_init_array+0x38>)
 8009364:	4c0d      	ldr	r4, [pc, #52]	; (800939c <__libc_init_array+0x3c>)
 8009366:	1b64      	subs	r4, r4, r5
 8009368:	10a4      	asrs	r4, r4, #2
 800936a:	2600      	movs	r6, #0
 800936c:	42a6      	cmp	r6, r4
 800936e:	d109      	bne.n	8009384 <__libc_init_array+0x24>
 8009370:	4d0b      	ldr	r5, [pc, #44]	; (80093a0 <__libc_init_array+0x40>)
 8009372:	4c0c      	ldr	r4, [pc, #48]	; (80093a4 <__libc_init_array+0x44>)
 8009374:	f000 fb84 	bl	8009a80 <_init>
 8009378:	1b64      	subs	r4, r4, r5
 800937a:	10a4      	asrs	r4, r4, #2
 800937c:	2600      	movs	r6, #0
 800937e:	42a6      	cmp	r6, r4
 8009380:	d105      	bne.n	800938e <__libc_init_array+0x2e>
 8009382:	bd70      	pop	{r4, r5, r6, pc}
 8009384:	f855 3b04 	ldr.w	r3, [r5], #4
 8009388:	4798      	blx	r3
 800938a:	3601      	adds	r6, #1
 800938c:	e7ee      	b.n	800936c <__libc_init_array+0xc>
 800938e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009392:	4798      	blx	r3
 8009394:	3601      	adds	r6, #1
 8009396:	e7f2      	b.n	800937e <__libc_init_array+0x1e>
 8009398:	08009fd8 	.word	0x08009fd8
 800939c:	08009fd8 	.word	0x08009fd8
 80093a0:	08009fd8 	.word	0x08009fd8
 80093a4:	08009fdc 	.word	0x08009fdc

080093a8 <memcpy>:
 80093a8:	440a      	add	r2, r1
 80093aa:	4291      	cmp	r1, r2
 80093ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80093b0:	d100      	bne.n	80093b4 <memcpy+0xc>
 80093b2:	4770      	bx	lr
 80093b4:	b510      	push	{r4, lr}
 80093b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093be:	4291      	cmp	r1, r2
 80093c0:	d1f9      	bne.n	80093b6 <memcpy+0xe>
 80093c2:	bd10      	pop	{r4, pc}

080093c4 <memset>:
 80093c4:	4402      	add	r2, r0
 80093c6:	4603      	mov	r3, r0
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d100      	bne.n	80093ce <memset+0xa>
 80093cc:	4770      	bx	lr
 80093ce:	f803 1b01 	strb.w	r1, [r3], #1
 80093d2:	e7f9      	b.n	80093c8 <memset+0x4>
 80093d4:	0000      	movs	r0, r0
	...

080093d8 <atan>:
 80093d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	ec55 4b10 	vmov	r4, r5, d0
 80093e0:	4bc3      	ldr	r3, [pc, #780]	; (80096f0 <atan+0x318>)
 80093e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80093e6:	429e      	cmp	r6, r3
 80093e8:	46ab      	mov	fp, r5
 80093ea:	dd18      	ble.n	800941e <atan+0x46>
 80093ec:	4bc1      	ldr	r3, [pc, #772]	; (80096f4 <atan+0x31c>)
 80093ee:	429e      	cmp	r6, r3
 80093f0:	dc01      	bgt.n	80093f6 <atan+0x1e>
 80093f2:	d109      	bne.n	8009408 <atan+0x30>
 80093f4:	b144      	cbz	r4, 8009408 <atan+0x30>
 80093f6:	4622      	mov	r2, r4
 80093f8:	462b      	mov	r3, r5
 80093fa:	4620      	mov	r0, r4
 80093fc:	4629      	mov	r1, r5
 80093fe:	f7f6 fee9 	bl	80001d4 <__adddf3>
 8009402:	4604      	mov	r4, r0
 8009404:	460d      	mov	r5, r1
 8009406:	e006      	b.n	8009416 <atan+0x3e>
 8009408:	f1bb 0f00 	cmp.w	fp, #0
 800940c:	f300 8131 	bgt.w	8009672 <atan+0x29a>
 8009410:	a59b      	add	r5, pc, #620	; (adr r5, 8009680 <atan+0x2a8>)
 8009412:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009416:	ec45 4b10 	vmov	d0, r4, r5
 800941a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941e:	4bb6      	ldr	r3, [pc, #728]	; (80096f8 <atan+0x320>)
 8009420:	429e      	cmp	r6, r3
 8009422:	dc14      	bgt.n	800944e <atan+0x76>
 8009424:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009428:	429e      	cmp	r6, r3
 800942a:	dc0d      	bgt.n	8009448 <atan+0x70>
 800942c:	a396      	add	r3, pc, #600	; (adr r3, 8009688 <atan+0x2b0>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	ee10 0a10 	vmov	r0, s0
 8009436:	4629      	mov	r1, r5
 8009438:	f7f6 fecc 	bl	80001d4 <__adddf3>
 800943c:	4baf      	ldr	r3, [pc, #700]	; (80096fc <atan+0x324>)
 800943e:	2200      	movs	r2, #0
 8009440:	f7f7 fb0e 	bl	8000a60 <__aeabi_dcmpgt>
 8009444:	2800      	cmp	r0, #0
 8009446:	d1e6      	bne.n	8009416 <atan+0x3e>
 8009448:	f04f 3aff 	mov.w	sl, #4294967295
 800944c:	e02b      	b.n	80094a6 <atan+0xce>
 800944e:	f000 f963 	bl	8009718 <fabs>
 8009452:	4bab      	ldr	r3, [pc, #684]	; (8009700 <atan+0x328>)
 8009454:	429e      	cmp	r6, r3
 8009456:	ec55 4b10 	vmov	r4, r5, d0
 800945a:	f300 80bf 	bgt.w	80095dc <atan+0x204>
 800945e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009462:	429e      	cmp	r6, r3
 8009464:	f300 80a0 	bgt.w	80095a8 <atan+0x1d0>
 8009468:	ee10 2a10 	vmov	r2, s0
 800946c:	ee10 0a10 	vmov	r0, s0
 8009470:	462b      	mov	r3, r5
 8009472:	4629      	mov	r1, r5
 8009474:	f7f6 feae 	bl	80001d4 <__adddf3>
 8009478:	4ba0      	ldr	r3, [pc, #640]	; (80096fc <atan+0x324>)
 800947a:	2200      	movs	r2, #0
 800947c:	f7f6 fea8 	bl	80001d0 <__aeabi_dsub>
 8009480:	2200      	movs	r2, #0
 8009482:	4606      	mov	r6, r0
 8009484:	460f      	mov	r7, r1
 8009486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800948a:	4620      	mov	r0, r4
 800948c:	4629      	mov	r1, r5
 800948e:	f7f6 fea1 	bl	80001d4 <__adddf3>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4630      	mov	r0, r6
 8009498:	4639      	mov	r1, r7
 800949a:	f7f7 f97b 	bl	8000794 <__aeabi_ddiv>
 800949e:	f04f 0a00 	mov.w	sl, #0
 80094a2:	4604      	mov	r4, r0
 80094a4:	460d      	mov	r5, r1
 80094a6:	4622      	mov	r2, r4
 80094a8:	462b      	mov	r3, r5
 80094aa:	4620      	mov	r0, r4
 80094ac:	4629      	mov	r1, r5
 80094ae:	f7f7 f847 	bl	8000540 <__aeabi_dmul>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4680      	mov	r8, r0
 80094b8:	4689      	mov	r9, r1
 80094ba:	f7f7 f841 	bl	8000540 <__aeabi_dmul>
 80094be:	a374      	add	r3, pc, #464	; (adr r3, 8009690 <atan+0x2b8>)
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	4606      	mov	r6, r0
 80094c6:	460f      	mov	r7, r1
 80094c8:	f7f7 f83a 	bl	8000540 <__aeabi_dmul>
 80094cc:	a372      	add	r3, pc, #456	; (adr r3, 8009698 <atan+0x2c0>)
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f7f6 fe7f 	bl	80001d4 <__adddf3>
 80094d6:	4632      	mov	r2, r6
 80094d8:	463b      	mov	r3, r7
 80094da:	f7f7 f831 	bl	8000540 <__aeabi_dmul>
 80094de:	a370      	add	r3, pc, #448	; (adr r3, 80096a0 <atan+0x2c8>)
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	f7f6 fe76 	bl	80001d4 <__adddf3>
 80094e8:	4632      	mov	r2, r6
 80094ea:	463b      	mov	r3, r7
 80094ec:	f7f7 f828 	bl	8000540 <__aeabi_dmul>
 80094f0:	a36d      	add	r3, pc, #436	; (adr r3, 80096a8 <atan+0x2d0>)
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	f7f6 fe6d 	bl	80001d4 <__adddf3>
 80094fa:	4632      	mov	r2, r6
 80094fc:	463b      	mov	r3, r7
 80094fe:	f7f7 f81f 	bl	8000540 <__aeabi_dmul>
 8009502:	a36b      	add	r3, pc, #428	; (adr r3, 80096b0 <atan+0x2d8>)
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	f7f6 fe64 	bl	80001d4 <__adddf3>
 800950c:	4632      	mov	r2, r6
 800950e:	463b      	mov	r3, r7
 8009510:	f7f7 f816 	bl	8000540 <__aeabi_dmul>
 8009514:	a368      	add	r3, pc, #416	; (adr r3, 80096b8 <atan+0x2e0>)
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	f7f6 fe5b 	bl	80001d4 <__adddf3>
 800951e:	4642      	mov	r2, r8
 8009520:	464b      	mov	r3, r9
 8009522:	f7f7 f80d 	bl	8000540 <__aeabi_dmul>
 8009526:	a366      	add	r3, pc, #408	; (adr r3, 80096c0 <atan+0x2e8>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	4680      	mov	r8, r0
 800952e:	4689      	mov	r9, r1
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	f7f7 f804 	bl	8000540 <__aeabi_dmul>
 8009538:	a363      	add	r3, pc, #396	; (adr r3, 80096c8 <atan+0x2f0>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f6 fe47 	bl	80001d0 <__aeabi_dsub>
 8009542:	4632      	mov	r2, r6
 8009544:	463b      	mov	r3, r7
 8009546:	f7f6 fffb 	bl	8000540 <__aeabi_dmul>
 800954a:	a361      	add	r3, pc, #388	; (adr r3, 80096d0 <atan+0x2f8>)
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	f7f6 fe3e 	bl	80001d0 <__aeabi_dsub>
 8009554:	4632      	mov	r2, r6
 8009556:	463b      	mov	r3, r7
 8009558:	f7f6 fff2 	bl	8000540 <__aeabi_dmul>
 800955c:	a35e      	add	r3, pc, #376	; (adr r3, 80096d8 <atan+0x300>)
 800955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009562:	f7f6 fe35 	bl	80001d0 <__aeabi_dsub>
 8009566:	4632      	mov	r2, r6
 8009568:	463b      	mov	r3, r7
 800956a:	f7f6 ffe9 	bl	8000540 <__aeabi_dmul>
 800956e:	a35c      	add	r3, pc, #368	; (adr r3, 80096e0 <atan+0x308>)
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	f7f6 fe2c 	bl	80001d0 <__aeabi_dsub>
 8009578:	4632      	mov	r2, r6
 800957a:	463b      	mov	r3, r7
 800957c:	f7f6 ffe0 	bl	8000540 <__aeabi_dmul>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4640      	mov	r0, r8
 8009586:	4649      	mov	r1, r9
 8009588:	f7f6 fe24 	bl	80001d4 <__adddf3>
 800958c:	4622      	mov	r2, r4
 800958e:	462b      	mov	r3, r5
 8009590:	f7f6 ffd6 	bl	8000540 <__aeabi_dmul>
 8009594:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	d14b      	bne.n	8009636 <atan+0x25e>
 800959e:	4620      	mov	r0, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	f7f6 fe15 	bl	80001d0 <__aeabi_dsub>
 80095a6:	e72c      	b.n	8009402 <atan+0x2a>
 80095a8:	ee10 0a10 	vmov	r0, s0
 80095ac:	4b53      	ldr	r3, [pc, #332]	; (80096fc <atan+0x324>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	4629      	mov	r1, r5
 80095b2:	f7f6 fe0d 	bl	80001d0 <__aeabi_dsub>
 80095b6:	4b51      	ldr	r3, [pc, #324]	; (80096fc <atan+0x324>)
 80095b8:	4606      	mov	r6, r0
 80095ba:	460f      	mov	r7, r1
 80095bc:	2200      	movs	r2, #0
 80095be:	4620      	mov	r0, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f6 fe07 	bl	80001d4 <__adddf3>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4630      	mov	r0, r6
 80095cc:	4639      	mov	r1, r7
 80095ce:	f7f7 f8e1 	bl	8000794 <__aeabi_ddiv>
 80095d2:	f04f 0a01 	mov.w	sl, #1
 80095d6:	4604      	mov	r4, r0
 80095d8:	460d      	mov	r5, r1
 80095da:	e764      	b.n	80094a6 <atan+0xce>
 80095dc:	4b49      	ldr	r3, [pc, #292]	; (8009704 <atan+0x32c>)
 80095de:	429e      	cmp	r6, r3
 80095e0:	da1d      	bge.n	800961e <atan+0x246>
 80095e2:	ee10 0a10 	vmov	r0, s0
 80095e6:	4b48      	ldr	r3, [pc, #288]	; (8009708 <atan+0x330>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	4629      	mov	r1, r5
 80095ec:	f7f6 fdf0 	bl	80001d0 <__aeabi_dsub>
 80095f0:	4b45      	ldr	r3, [pc, #276]	; (8009708 <atan+0x330>)
 80095f2:	4606      	mov	r6, r0
 80095f4:	460f      	mov	r7, r1
 80095f6:	2200      	movs	r2, #0
 80095f8:	4620      	mov	r0, r4
 80095fa:	4629      	mov	r1, r5
 80095fc:	f7f6 ffa0 	bl	8000540 <__aeabi_dmul>
 8009600:	4b3e      	ldr	r3, [pc, #248]	; (80096fc <atan+0x324>)
 8009602:	2200      	movs	r2, #0
 8009604:	f7f6 fde6 	bl	80001d4 <__adddf3>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	4630      	mov	r0, r6
 800960e:	4639      	mov	r1, r7
 8009610:	f7f7 f8c0 	bl	8000794 <__aeabi_ddiv>
 8009614:	f04f 0a02 	mov.w	sl, #2
 8009618:	4604      	mov	r4, r0
 800961a:	460d      	mov	r5, r1
 800961c:	e743      	b.n	80094a6 <atan+0xce>
 800961e:	462b      	mov	r3, r5
 8009620:	ee10 2a10 	vmov	r2, s0
 8009624:	4939      	ldr	r1, [pc, #228]	; (800970c <atan+0x334>)
 8009626:	2000      	movs	r0, #0
 8009628:	f7f7 f8b4 	bl	8000794 <__aeabi_ddiv>
 800962c:	f04f 0a03 	mov.w	sl, #3
 8009630:	4604      	mov	r4, r0
 8009632:	460d      	mov	r5, r1
 8009634:	e737      	b.n	80094a6 <atan+0xce>
 8009636:	4b36      	ldr	r3, [pc, #216]	; (8009710 <atan+0x338>)
 8009638:	4e36      	ldr	r6, [pc, #216]	; (8009714 <atan+0x33c>)
 800963a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800963e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009642:	e9da 2300 	ldrd	r2, r3, [sl]
 8009646:	f7f6 fdc3 	bl	80001d0 <__aeabi_dsub>
 800964a:	4622      	mov	r2, r4
 800964c:	462b      	mov	r3, r5
 800964e:	f7f6 fdbf 	bl	80001d0 <__aeabi_dsub>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	e9d6 0100 	ldrd	r0, r1, [r6]
 800965a:	f7f6 fdb9 	bl	80001d0 <__aeabi_dsub>
 800965e:	f1bb 0f00 	cmp.w	fp, #0
 8009662:	4604      	mov	r4, r0
 8009664:	460d      	mov	r5, r1
 8009666:	f6bf aed6 	bge.w	8009416 <atan+0x3e>
 800966a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800966e:	461d      	mov	r5, r3
 8009670:	e6d1      	b.n	8009416 <atan+0x3e>
 8009672:	a51d      	add	r5, pc, #116	; (adr r5, 80096e8 <atan+0x310>)
 8009674:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009678:	e6cd      	b.n	8009416 <atan+0x3e>
 800967a:	bf00      	nop
 800967c:	f3af 8000 	nop.w
 8009680:	54442d18 	.word	0x54442d18
 8009684:	bff921fb 	.word	0xbff921fb
 8009688:	8800759c 	.word	0x8800759c
 800968c:	7e37e43c 	.word	0x7e37e43c
 8009690:	e322da11 	.word	0xe322da11
 8009694:	3f90ad3a 	.word	0x3f90ad3a
 8009698:	24760deb 	.word	0x24760deb
 800969c:	3fa97b4b 	.word	0x3fa97b4b
 80096a0:	a0d03d51 	.word	0xa0d03d51
 80096a4:	3fb10d66 	.word	0x3fb10d66
 80096a8:	c54c206e 	.word	0xc54c206e
 80096ac:	3fb745cd 	.word	0x3fb745cd
 80096b0:	920083ff 	.word	0x920083ff
 80096b4:	3fc24924 	.word	0x3fc24924
 80096b8:	5555550d 	.word	0x5555550d
 80096bc:	3fd55555 	.word	0x3fd55555
 80096c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80096c4:	bfa2b444 	.word	0xbfa2b444
 80096c8:	52defd9a 	.word	0x52defd9a
 80096cc:	3fadde2d 	.word	0x3fadde2d
 80096d0:	af749a6d 	.word	0xaf749a6d
 80096d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80096d8:	fe231671 	.word	0xfe231671
 80096dc:	3fbc71c6 	.word	0x3fbc71c6
 80096e0:	9998ebc4 	.word	0x9998ebc4
 80096e4:	3fc99999 	.word	0x3fc99999
 80096e8:	54442d18 	.word	0x54442d18
 80096ec:	3ff921fb 	.word	0x3ff921fb
 80096f0:	440fffff 	.word	0x440fffff
 80096f4:	7ff00000 	.word	0x7ff00000
 80096f8:	3fdbffff 	.word	0x3fdbffff
 80096fc:	3ff00000 	.word	0x3ff00000
 8009700:	3ff2ffff 	.word	0x3ff2ffff
 8009704:	40038000 	.word	0x40038000
 8009708:	3ff80000 	.word	0x3ff80000
 800970c:	bff00000 	.word	0xbff00000
 8009710:	08009f88 	.word	0x08009f88
 8009714:	08009f68 	.word	0x08009f68

08009718 <fabs>:
 8009718:	ec51 0b10 	vmov	r0, r1, d0
 800971c:	ee10 2a10 	vmov	r2, s0
 8009720:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009724:	ec43 2b10 	vmov	d0, r2, r3
 8009728:	4770      	bx	lr

0800972a <atan2>:
 800972a:	f000 b82d 	b.w	8009788 <__ieee754_atan2>

0800972e <sqrt>:
 800972e:	b538      	push	{r3, r4, r5, lr}
 8009730:	ed2d 8b02 	vpush	{d8}
 8009734:	ec55 4b10 	vmov	r4, r5, d0
 8009738:	f000 f8f0 	bl	800991c <__ieee754_sqrt>
 800973c:	4622      	mov	r2, r4
 800973e:	462b      	mov	r3, r5
 8009740:	4620      	mov	r0, r4
 8009742:	4629      	mov	r1, r5
 8009744:	eeb0 8a40 	vmov.f32	s16, s0
 8009748:	eef0 8a60 	vmov.f32	s17, s1
 800974c:	f7f7 f992 	bl	8000a74 <__aeabi_dcmpun>
 8009750:	b990      	cbnz	r0, 8009778 <sqrt+0x4a>
 8009752:	2200      	movs	r2, #0
 8009754:	2300      	movs	r3, #0
 8009756:	4620      	mov	r0, r4
 8009758:	4629      	mov	r1, r5
 800975a:	f7f7 f963 	bl	8000a24 <__aeabi_dcmplt>
 800975e:	b158      	cbz	r0, 8009778 <sqrt+0x4a>
 8009760:	f7ff fdf8 	bl	8009354 <__errno>
 8009764:	2321      	movs	r3, #33	; 0x21
 8009766:	6003      	str	r3, [r0, #0]
 8009768:	2200      	movs	r2, #0
 800976a:	2300      	movs	r3, #0
 800976c:	4610      	mov	r0, r2
 800976e:	4619      	mov	r1, r3
 8009770:	f7f7 f810 	bl	8000794 <__aeabi_ddiv>
 8009774:	ec41 0b18 	vmov	d8, r0, r1
 8009778:	eeb0 0a48 	vmov.f32	s0, s16
 800977c:	eef0 0a68 	vmov.f32	s1, s17
 8009780:	ecbd 8b02 	vpop	{d8}
 8009784:	bd38      	pop	{r3, r4, r5, pc}
	...

08009788 <__ieee754_atan2>:
 8009788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800978c:	ec57 6b11 	vmov	r6, r7, d1
 8009790:	4273      	negs	r3, r6
 8009792:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009918 <__ieee754_atan2+0x190>
 8009796:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800979a:	4333      	orrs	r3, r6
 800979c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80097a0:	4573      	cmp	r3, lr
 80097a2:	ec51 0b10 	vmov	r0, r1, d0
 80097a6:	ee11 8a10 	vmov	r8, s2
 80097aa:	d80a      	bhi.n	80097c2 <__ieee754_atan2+0x3a>
 80097ac:	4244      	negs	r4, r0
 80097ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097b2:	4304      	orrs	r4, r0
 80097b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80097b8:	4574      	cmp	r4, lr
 80097ba:	ee10 9a10 	vmov	r9, s0
 80097be:	468c      	mov	ip, r1
 80097c0:	d907      	bls.n	80097d2 <__ieee754_atan2+0x4a>
 80097c2:	4632      	mov	r2, r6
 80097c4:	463b      	mov	r3, r7
 80097c6:	f7f6 fd05 	bl	80001d4 <__adddf3>
 80097ca:	ec41 0b10 	vmov	d0, r0, r1
 80097ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80097d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80097da:	4334      	orrs	r4, r6
 80097dc:	d103      	bne.n	80097e6 <__ieee754_atan2+0x5e>
 80097de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e2:	f7ff bdf9 	b.w	80093d8 <atan>
 80097e6:	17bc      	asrs	r4, r7, #30
 80097e8:	f004 0402 	and.w	r4, r4, #2
 80097ec:	ea53 0909 	orrs.w	r9, r3, r9
 80097f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80097f4:	d107      	bne.n	8009806 <__ieee754_atan2+0x7e>
 80097f6:	2c02      	cmp	r4, #2
 80097f8:	d060      	beq.n	80098bc <__ieee754_atan2+0x134>
 80097fa:	2c03      	cmp	r4, #3
 80097fc:	d1e5      	bne.n	80097ca <__ieee754_atan2+0x42>
 80097fe:	a142      	add	r1, pc, #264	; (adr r1, 8009908 <__ieee754_atan2+0x180>)
 8009800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009804:	e7e1      	b.n	80097ca <__ieee754_atan2+0x42>
 8009806:	ea52 0808 	orrs.w	r8, r2, r8
 800980a:	d106      	bne.n	800981a <__ieee754_atan2+0x92>
 800980c:	f1bc 0f00 	cmp.w	ip, #0
 8009810:	da5f      	bge.n	80098d2 <__ieee754_atan2+0x14a>
 8009812:	a13f      	add	r1, pc, #252	; (adr r1, 8009910 <__ieee754_atan2+0x188>)
 8009814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009818:	e7d7      	b.n	80097ca <__ieee754_atan2+0x42>
 800981a:	4572      	cmp	r2, lr
 800981c:	d10f      	bne.n	800983e <__ieee754_atan2+0xb6>
 800981e:	4293      	cmp	r3, r2
 8009820:	f104 34ff 	add.w	r4, r4, #4294967295
 8009824:	d107      	bne.n	8009836 <__ieee754_atan2+0xae>
 8009826:	2c02      	cmp	r4, #2
 8009828:	d84c      	bhi.n	80098c4 <__ieee754_atan2+0x13c>
 800982a:	4b35      	ldr	r3, [pc, #212]	; (8009900 <__ieee754_atan2+0x178>)
 800982c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009830:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009834:	e7c9      	b.n	80097ca <__ieee754_atan2+0x42>
 8009836:	2c02      	cmp	r4, #2
 8009838:	d848      	bhi.n	80098cc <__ieee754_atan2+0x144>
 800983a:	4b32      	ldr	r3, [pc, #200]	; (8009904 <__ieee754_atan2+0x17c>)
 800983c:	e7f6      	b.n	800982c <__ieee754_atan2+0xa4>
 800983e:	4573      	cmp	r3, lr
 8009840:	d0e4      	beq.n	800980c <__ieee754_atan2+0x84>
 8009842:	1a9b      	subs	r3, r3, r2
 8009844:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009848:	ea4f 5223 	mov.w	r2, r3, asr #20
 800984c:	da1e      	bge.n	800988c <__ieee754_atan2+0x104>
 800984e:	2f00      	cmp	r7, #0
 8009850:	da01      	bge.n	8009856 <__ieee754_atan2+0xce>
 8009852:	323c      	adds	r2, #60	; 0x3c
 8009854:	db1e      	blt.n	8009894 <__ieee754_atan2+0x10c>
 8009856:	4632      	mov	r2, r6
 8009858:	463b      	mov	r3, r7
 800985a:	f7f6 ff9b 	bl	8000794 <__aeabi_ddiv>
 800985e:	ec41 0b10 	vmov	d0, r0, r1
 8009862:	f7ff ff59 	bl	8009718 <fabs>
 8009866:	f7ff fdb7 	bl	80093d8 <atan>
 800986a:	ec51 0b10 	vmov	r0, r1, d0
 800986e:	2c01      	cmp	r4, #1
 8009870:	d013      	beq.n	800989a <__ieee754_atan2+0x112>
 8009872:	2c02      	cmp	r4, #2
 8009874:	d015      	beq.n	80098a2 <__ieee754_atan2+0x11a>
 8009876:	2c00      	cmp	r4, #0
 8009878:	d0a7      	beq.n	80097ca <__ieee754_atan2+0x42>
 800987a:	a319      	add	r3, pc, #100	; (adr r3, 80098e0 <__ieee754_atan2+0x158>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f6 fca6 	bl	80001d0 <__aeabi_dsub>
 8009884:	a318      	add	r3, pc, #96	; (adr r3, 80098e8 <__ieee754_atan2+0x160>)
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	e014      	b.n	80098b6 <__ieee754_atan2+0x12e>
 800988c:	a118      	add	r1, pc, #96	; (adr r1, 80098f0 <__ieee754_atan2+0x168>)
 800988e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009892:	e7ec      	b.n	800986e <__ieee754_atan2+0xe6>
 8009894:	2000      	movs	r0, #0
 8009896:	2100      	movs	r1, #0
 8009898:	e7e9      	b.n	800986e <__ieee754_atan2+0xe6>
 800989a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800989e:	4619      	mov	r1, r3
 80098a0:	e793      	b.n	80097ca <__ieee754_atan2+0x42>
 80098a2:	a30f      	add	r3, pc, #60	; (adr r3, 80098e0 <__ieee754_atan2+0x158>)
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	f7f6 fc92 	bl	80001d0 <__aeabi_dsub>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	a10d      	add	r1, pc, #52	; (adr r1, 80098e8 <__ieee754_atan2+0x160>)
 80098b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098b6:	f7f6 fc8b 	bl	80001d0 <__aeabi_dsub>
 80098ba:	e786      	b.n	80097ca <__ieee754_atan2+0x42>
 80098bc:	a10a      	add	r1, pc, #40	; (adr r1, 80098e8 <__ieee754_atan2+0x160>)
 80098be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c2:	e782      	b.n	80097ca <__ieee754_atan2+0x42>
 80098c4:	a10c      	add	r1, pc, #48	; (adr r1, 80098f8 <__ieee754_atan2+0x170>)
 80098c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ca:	e77e      	b.n	80097ca <__ieee754_atan2+0x42>
 80098cc:	2000      	movs	r0, #0
 80098ce:	2100      	movs	r1, #0
 80098d0:	e77b      	b.n	80097ca <__ieee754_atan2+0x42>
 80098d2:	a107      	add	r1, pc, #28	; (adr r1, 80098f0 <__ieee754_atan2+0x168>)
 80098d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098d8:	e777      	b.n	80097ca <__ieee754_atan2+0x42>
 80098da:	bf00      	nop
 80098dc:	f3af 8000 	nop.w
 80098e0:	33145c07 	.word	0x33145c07
 80098e4:	3ca1a626 	.word	0x3ca1a626
 80098e8:	54442d18 	.word	0x54442d18
 80098ec:	400921fb 	.word	0x400921fb
 80098f0:	54442d18 	.word	0x54442d18
 80098f4:	3ff921fb 	.word	0x3ff921fb
 80098f8:	54442d18 	.word	0x54442d18
 80098fc:	3fe921fb 	.word	0x3fe921fb
 8009900:	08009fa8 	.word	0x08009fa8
 8009904:	08009fc0 	.word	0x08009fc0
 8009908:	54442d18 	.word	0x54442d18
 800990c:	c00921fb 	.word	0xc00921fb
 8009910:	54442d18 	.word	0x54442d18
 8009914:	bff921fb 	.word	0xbff921fb
 8009918:	7ff00000 	.word	0x7ff00000

0800991c <__ieee754_sqrt>:
 800991c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009920:	ec55 4b10 	vmov	r4, r5, d0
 8009924:	4e55      	ldr	r6, [pc, #340]	; (8009a7c <__ieee754_sqrt+0x160>)
 8009926:	43ae      	bics	r6, r5
 8009928:	ee10 0a10 	vmov	r0, s0
 800992c:	ee10 3a10 	vmov	r3, s0
 8009930:	462a      	mov	r2, r5
 8009932:	4629      	mov	r1, r5
 8009934:	d110      	bne.n	8009958 <__ieee754_sqrt+0x3c>
 8009936:	ee10 2a10 	vmov	r2, s0
 800993a:	462b      	mov	r3, r5
 800993c:	f7f6 fe00 	bl	8000540 <__aeabi_dmul>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4620      	mov	r0, r4
 8009946:	4629      	mov	r1, r5
 8009948:	f7f6 fc44 	bl	80001d4 <__adddf3>
 800994c:	4604      	mov	r4, r0
 800994e:	460d      	mov	r5, r1
 8009950:	ec45 4b10 	vmov	d0, r4, r5
 8009954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009958:	2d00      	cmp	r5, #0
 800995a:	dc10      	bgt.n	800997e <__ieee754_sqrt+0x62>
 800995c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009960:	4330      	orrs	r0, r6
 8009962:	d0f5      	beq.n	8009950 <__ieee754_sqrt+0x34>
 8009964:	b15d      	cbz	r5, 800997e <__ieee754_sqrt+0x62>
 8009966:	ee10 2a10 	vmov	r2, s0
 800996a:	462b      	mov	r3, r5
 800996c:	ee10 0a10 	vmov	r0, s0
 8009970:	f7f6 fc2e 	bl	80001d0 <__aeabi_dsub>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	f7f6 ff0c 	bl	8000794 <__aeabi_ddiv>
 800997c:	e7e6      	b.n	800994c <__ieee754_sqrt+0x30>
 800997e:	1512      	asrs	r2, r2, #20
 8009980:	d074      	beq.n	8009a6c <__ieee754_sqrt+0x150>
 8009982:	07d4      	lsls	r4, r2, #31
 8009984:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009988:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800998c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009990:	bf5e      	ittt	pl
 8009992:	0fda      	lsrpl	r2, r3, #31
 8009994:	005b      	lslpl	r3, r3, #1
 8009996:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800999a:	2400      	movs	r4, #0
 800999c:	0fda      	lsrs	r2, r3, #31
 800999e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80099a2:	107f      	asrs	r7, r7, #1
 80099a4:	005b      	lsls	r3, r3, #1
 80099a6:	2516      	movs	r5, #22
 80099a8:	4620      	mov	r0, r4
 80099aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80099ae:	1886      	adds	r6, r0, r2
 80099b0:	428e      	cmp	r6, r1
 80099b2:	bfde      	ittt	le
 80099b4:	1b89      	suble	r1, r1, r6
 80099b6:	18b0      	addle	r0, r6, r2
 80099b8:	18a4      	addle	r4, r4, r2
 80099ba:	0049      	lsls	r1, r1, #1
 80099bc:	3d01      	subs	r5, #1
 80099be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80099c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80099c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099ca:	d1f0      	bne.n	80099ae <__ieee754_sqrt+0x92>
 80099cc:	462a      	mov	r2, r5
 80099ce:	f04f 0e20 	mov.w	lr, #32
 80099d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80099d6:	4281      	cmp	r1, r0
 80099d8:	eb06 0c05 	add.w	ip, r6, r5
 80099dc:	dc02      	bgt.n	80099e4 <__ieee754_sqrt+0xc8>
 80099de:	d113      	bne.n	8009a08 <__ieee754_sqrt+0xec>
 80099e0:	459c      	cmp	ip, r3
 80099e2:	d811      	bhi.n	8009a08 <__ieee754_sqrt+0xec>
 80099e4:	f1bc 0f00 	cmp.w	ip, #0
 80099e8:	eb0c 0506 	add.w	r5, ip, r6
 80099ec:	da43      	bge.n	8009a76 <__ieee754_sqrt+0x15a>
 80099ee:	2d00      	cmp	r5, #0
 80099f0:	db41      	blt.n	8009a76 <__ieee754_sqrt+0x15a>
 80099f2:	f100 0801 	add.w	r8, r0, #1
 80099f6:	1a09      	subs	r1, r1, r0
 80099f8:	459c      	cmp	ip, r3
 80099fa:	bf88      	it	hi
 80099fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009a00:	eba3 030c 	sub.w	r3, r3, ip
 8009a04:	4432      	add	r2, r6
 8009a06:	4640      	mov	r0, r8
 8009a08:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009a0c:	f1be 0e01 	subs.w	lr, lr, #1
 8009a10:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009a14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a1c:	d1db      	bne.n	80099d6 <__ieee754_sqrt+0xba>
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	d006      	beq.n	8009a30 <__ieee754_sqrt+0x114>
 8009a22:	1c50      	adds	r0, r2, #1
 8009a24:	bf13      	iteet	ne
 8009a26:	3201      	addne	r2, #1
 8009a28:	3401      	addeq	r4, #1
 8009a2a:	4672      	moveq	r2, lr
 8009a2c:	f022 0201 	bicne.w	r2, r2, #1
 8009a30:	1063      	asrs	r3, r4, #1
 8009a32:	0852      	lsrs	r2, r2, #1
 8009a34:	07e1      	lsls	r1, r4, #31
 8009a36:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009a3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009a3e:	bf48      	it	mi
 8009a40:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009a44:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009a48:	4614      	mov	r4, r2
 8009a4a:	e781      	b.n	8009950 <__ieee754_sqrt+0x34>
 8009a4c:	0ad9      	lsrs	r1, r3, #11
 8009a4e:	3815      	subs	r0, #21
 8009a50:	055b      	lsls	r3, r3, #21
 8009a52:	2900      	cmp	r1, #0
 8009a54:	d0fa      	beq.n	8009a4c <__ieee754_sqrt+0x130>
 8009a56:	02cd      	lsls	r5, r1, #11
 8009a58:	d50a      	bpl.n	8009a70 <__ieee754_sqrt+0x154>
 8009a5a:	f1c2 0420 	rsb	r4, r2, #32
 8009a5e:	fa23 f404 	lsr.w	r4, r3, r4
 8009a62:	1e55      	subs	r5, r2, #1
 8009a64:	4093      	lsls	r3, r2
 8009a66:	4321      	orrs	r1, r4
 8009a68:	1b42      	subs	r2, r0, r5
 8009a6a:	e78a      	b.n	8009982 <__ieee754_sqrt+0x66>
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	e7f0      	b.n	8009a52 <__ieee754_sqrt+0x136>
 8009a70:	0049      	lsls	r1, r1, #1
 8009a72:	3201      	adds	r2, #1
 8009a74:	e7ef      	b.n	8009a56 <__ieee754_sqrt+0x13a>
 8009a76:	4680      	mov	r8, r0
 8009a78:	e7bd      	b.n	80099f6 <__ieee754_sqrt+0xda>
 8009a7a:	bf00      	nop
 8009a7c:	7ff00000 	.word	0x7ff00000

08009a80 <_init>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	bf00      	nop
 8009a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a86:	bc08      	pop	{r3}
 8009a88:	469e      	mov	lr, r3
 8009a8a:	4770      	bx	lr

08009a8c <_fini>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	bf00      	nop
 8009a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a92:	bc08      	pop	{r3}
 8009a94:	469e      	mov	lr, r3
 8009a96:	4770      	bx	lr
